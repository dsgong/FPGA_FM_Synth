
finalproject.elf:     file format elf32-littlenios2
finalproject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00015920 memsz 0x00015920 flags r-x
    LOAD off    0x00016940 vaddr 0x04015940 paddr 0x040174b8 align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x00019030 vaddr 0x04019030 paddr 0x04019030 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014e0c  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008f0  04015050  04015050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  04015940  040174b8  00016940  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  04019030  04019030  00019030  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04019318  04019318  000184b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000184b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001108  00000000  00000000  000184e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002927d  00000000  00000000  000195e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a91d  00000000  00000000  00042865  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d0f4  00000000  00000000  0004d182  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003028  00000000  00000000  0005a278  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004e02  00000000  00000000  0005d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000190ef  00000000  00000000  000620a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0007b194  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001bf0  00000000  00000000  0007b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00081046  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00081049  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00081055  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00081056  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00081057  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008105b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008105f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00081063  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0008106e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00081079  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  00081084  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000026  00000000  00000000  00081090  2**0
                  CONTENTS, READONLY
 29 .jdi          00005be8  00000000  00000000  000810b6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0009ce4c  00000000  00000000  00086c9e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
04015050 l    d  .rodata	00000000 .rodata
04015940 l    d  .rwdata	00000000 .rwdata
04019030 l    d  .bss	00000000 .bss
04019318 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../finalproject_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0401745c l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
04019040 l     O .bss	00000004 usb_delay.2608
04019044 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401575a l     O .rodata	00000010 zeroes.4404
04006bc8 l     F .text	000000bc __sbprintf
0401576a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04006dd8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04008908 l     F .text	00000008 __fp_unlock
0400891c l     F .text	0000019c __sinit.part.1
04008ab8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04015d78 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
040161bc l     O .rwdata	00000020 lc_ctype_charset
0401619c l     O .rwdata	00000020 lc_message_charset
040161dc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0401579c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400b50c l     F .text	000000fc __sprint_r.part.0
040158d0 l     O .rodata	00000010 blanks.4348
040158c0 l     O .rodata	00000010 zeroes.4349
0400ca98 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0401053c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04010648 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04010674 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04010760 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04010840 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401092c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04010b00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040174a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04010f20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04011054 l     F .text	00000034 alt_dev_reg
040163bc l     O .rwdata	00000038 i2c_0
040163f4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
04011134 l     F .text	00000110 optional_irq_callback
04011294 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04012f58 l     F .text	0000020c altera_avalon_jtag_uart_irq
04013164 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04013998 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04013d58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401425c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401439c l     F .text	0000003c alt_get_errno
040143d8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401907c g     O .bss	00000004 alt_instruction_exception_handler
0400aba4 g     F .text	00000074 _mprec_log10
0400ac90 g     F .text	0000008c __any_on
0400d034 g     F .text	00000054 _isatty_r
040157a8 g     O .rodata	00000028 __mprec_tinytens
04017458 g     O .rwdata	00000004 PARAM
04010a3c g     F .text	0000007c alt_main
04017464 g     O .rwdata	00000008 ctrl_xfers
040047f4 g     F .text	000000c0 _puts_r
04019218 g     O .bss	00000100 alt_irq
0400d088 g     F .text	00000060 _lseek_r
0400286c g     F .text	00000624 USB_Task
04017460 g     O .rwdata	00000004 SPIBase
040174b8 g       *ABS*	00000000 __flash_rwdata_start
0400f0cc g     F .text	00000088 .hidden __eqdf2
04019318 g       *ABS*	00000000 __alt_heap_start
040047b8 g     F .text	0000003c printf
0400d2a0 g     F .text	0000009c _wcrtomb_r
04001a20 g     F .text	00000088 kbdPoll
0400b3cc g     F .text	0000005c __sseek
04008c58 g     F .text	00000010 __sinit
0400d148 g     F .text	00000140 __swbuf_r
04009720 g     F .text	0000007c _setlocale_r
04008ac0 g     F .text	00000068 __sfmoreglue
0401198c g     F .text	000000a8 alt_avalon_i2c_rx_read
04010adc g     F .text	00000024 __malloc_unlock
0400058c g     F .text	000001f0 GetDriverandReport
04012b8c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
04011710 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
04009a9c g     F .text	0000015c memmove
04008c40 g     F .text	00000018 _cleanup
040123e8 g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
04009d20 g     F .text	000000a8 _Balloc
04003c48 g     F .text	00000070 .hidden __fixsfsi
04001b74 g     F .text	00000084 MAXreg_wr
04015940 g     O .rwdata	00000030 ClientDriverTable
0400f154 g     F .text	000000dc .hidden __gtdf2
04014858 g     F .text	00000024 altera_nios2_gen2_irq_init
04002e90 g     F .text	0000002c MSDProbe
04000000 g     F .entry	0000001c __reset
04002384 g     F .text	000000e8 XferCtrlData
04000020 g       *ABS*	00000000 __flash_exceptions_start
04019080 g     O .bss	00000010 hid_ep
0400cfd8 g     F .text	0000005c _fstat_r
04019054 g     O .bss	00000004 errno
0400b348 g     F .text	00000008 __seofread
04019068 g     O .bss	00000004 alt_argv
0401f454 g       *ABS*	00000000 _gp
04010ef0 g     F .text	00000030 usleep
04012bd0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
04001cf4 g     F .text	00000070 MAXreg_rd
04003764 g     F .text	000004e4 .hidden __subsf3
040118a0 g     F .text	00000044 alt_avalon_i2c_is_busy
0401623c g     O .rwdata	00000180 alt_fd_list
04001958 g     F .text	00000040 HID_init
04011644 g     F .text	000000cc alt_avalon_i2c_master_config_set
04013ef8 g     F .text	00000090 alt_find_dev
04004640 g     F .text	00000148 memcpy
04008910 g     F .text	0000000c _cleanup_r
040103b8 g     F .text	000000dc .hidden __floatsidf
04014320 g     F .text	0000007c alt_io_redirect
0400f230 g     F .text	000000f4 .hidden __ltdf2
04015050 g       *ABS*	00000000 __DTOR_END__
0401222c g     F .text	000001bc alt_avalon_i2c_master_transmit
040048b4 g     F .text	00000014 puts
04014ab8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400b280 g     F .text	00000074 __fpclassifyd
0400ab00 g     F .text	000000a4 __ratio
0400ca7c g     F .text	0000001c __vfiprintf_internal
0401335c g     F .text	0000021c altera_avalon_jtag_uart_read
04003e0c g     F .text	00000014 malloc
04004788 g     F .text	00000030 _printf_r
040031f0 g     F .text	00000064 .hidden __udivsi3
0401079c g     F .text	000000a4 isatty
040157f8 g     O .rodata	000000c8 __mprec_tens
0400979c g     F .text	0000000c __locale_charset
04014a28 g     F .text	00000090 alt_icache_flush
040114b0 g     F .text	00000098 alt_avalon_i2c_enable
04019050 g     O .bss	00000004 __malloc_top_pad
04012ac0 g     F .text	00000068 alt_avalon_i2c_int_disable
0401746c g     O .rwdata	00000001 usb_task_state
04017480 g     O .rwdata	00000004 __mb_cur_max
040097cc g     F .text	0000000c _localeconv_r
0400a12c g     F .text	0000003c __i2b
040090dc g     F .text	000004bc __sfvwrite_r
040048c8 g     F .text	00000054 _sbrk_r
0400d0e8 g     F .text	00000060 _read_r
04002038 g     F .text	00000094 MAX3421E_init
0400077c g     F .text	00000080 setKeycode
04000ff4 g     F .text	000000b4 SGTL5000_Reg_Rd
04017498 g     O .rwdata	00000004 alt_max_fd
0400cccc g     F .text	000000f0 _fclose_r
040088d8 g     F .text	00000030 fflush
0401904c g     O .bss	00000004 __malloc_max_sbrked_mem
040125f0 g     F .text	0000020c alt_avalon_i2c_master_receive
0400df38 g     F .text	000008ac .hidden __adddf3
0400a8a8 g     F .text	0000010c __b2d
0400da00 g     F .text	00000538 .hidden __umoddi3
04010968 g     F .text	000000d4 lseek
04012b28 g     F .text	00000064 alt_avalon_i2c_int_enable
04017478 g     O .rwdata	00000004 _global_impure_ptr
0400ad1c g     F .text	00000564 _realloc_r
04019318 g       *ABS*	00000000 __bss_end
0401416c g     F .text	000000f0 alt_iic_isr_register
04010de8 g     F .text	00000108 alt_tick
0400d488 g     F .text	00000578 .hidden __udivdi3
040129e8 g     F .text	00000058 alt_avalon_i2c_int_status_get
0400cf34 g     F .text	00000024 _fputwc_r
040157d0 g     O .rodata	00000028 __mprec_bigtens
04009f10 g     F .text	00000104 __s2b
04010494 g     F .text	000000a8 .hidden __floatunsidf
0400a5e8 g     F .text	00000060 __mcmp
04008c78 g     F .text	00000018 __fp_lock_all
04014120 g     F .text	0000004c alt_ic_irq_enabled
04010d4c g     F .text	0000009c alt_alarm_stop
04011330 g     F .text	00000054 alt_avalon_i2c_register_callback
04019078 g     O .bss	00000004 alt_irq_active
04011384 g     F .text	000000ec alt_avalon_i2c_init
04002f58 g     F .text	0000002c DummyProbe
040000fc g     F .exceptions	000000d4 alt_irq_handler
04016214 g     O .rwdata	00000028 alt_dev_null
04001998 g     F .text	00000088 mousePoll
04001e8c g     F .text	00000024 Vbus_power
04013d10 g     F .text	00000048 alt_dcache_flush_all
0400a014 g     F .text	00000068 __hi0bits
04010338 g     F .text	00000080 .hidden __fixdfsi
040174b8 g       *ABS*	00000000 __ram_rwdata_end
04017490 g     O .rwdata	00000008 alt_dev_list
04010f5c g     F .text	000000f8 write
04014c1c g     F .text	000000a0 _putc_r
04011cc0 g     F .text	0000004c alt_avalon_i2c_check_arblost
040032ac g     F .text	000000bc .hidden __gtsf2
04012a84 g     F .text	0000003c alt_avalon_i2c_int_clear
04015940 g       *ABS*	00000000 __ram_rodata_end
04019045 g     O .bss	00000001 usb_error
040106b0 g     F .text	000000b0 fstat
0400f230 g     F .text	000000f4 .hidden __ledf2
040174ac g     O .rwdata	00000008 alt_avalon_i2c_list
0400a360 g     F .text	00000140 __pow5mult
0400b620 g     F .text	0000145c ___vfiprintf_internal_r
04019060 g     O .bss	00000004 __nlocale_changed
04003254 g     F .text	00000058 .hidden __umodsi3
04019318 g       *ABS*	00000000 end
04012e98 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04011470 g     F .text	00000040 alt_avalon_i2c_open
040024e0 g     F .text	00000164 XferDispatchPkt
04015050 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04011e40 g     F .text	000000e8 alt_avalon_i2c_master_tx
04013a10 g     F .text	0000007c alt_avalon_timer_sc_init
04003da8 g     F .text	00000064 .hidden __clzsi2
04013578 g     F .text	00000224 altera_avalon_jtag_uart_write
04008c68 g     F .text	00000004 __sfp_lock_acquire
040099b8 g     F .text	000000e4 memchr
040049b4 g     F .text	000021f8 ___vfprintf_internal_r
04002204 g     F .text	00000034 MaxGpxHandler
04008dcc g     F .text	00000310 _free_r
040145f0 g     F .text	0000022c alt_printf
040097a8 g     F .text	00000010 __locale_mb_cur_max
04014e9c g     F .text	00000180 __call_exitprocs
0401905c g     O .bss	00000004 __mlocale_changed
04011244 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
04017470 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04019070 g     O .bss	00000004 _alt_tick_rate
04001d64 g     F .text	00000080 MAXbytes_rd
040127fc g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
04012c1c g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0400a4a0 g     F .text	00000148 __lshift
0401379c g     F .text	000001fc alt_avalon_spi_command
04019074 g     O .bss	00000004 _alt_nticks
04010b3c g     F .text	000000fc read
040110c0 g     F .text	00000074 alt_sys_init
040191d0 g     O .bss	00000048 devtable
04014d84 g     F .text	00000118 __register_exitproc
04001550 g     F .text	00000408 HIDKProbe
04019090 g     O .bss	00000018 msd_ep
04012064 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0400a168 g     F .text	000001f8 __multiply
04013204 g     F .text	00000068 altera_avalon_jtag_uart_close
040027d4 g     F .text	00000098 USB_init
040190d0 g     O .bss	00000100 bigbuf
04015940 g       *ABS*	00000000 __ram_rwdata_start
04015050 g       *ABS*	00000000 __ram_rodata_start
040190a8 g     O .bss	00000028 __malloc_current_mallinfo
0401903c g     O .bss	00000001 last_usb_task_state
0400a9b4 g     F .text	0000014c __d2b
04019034 g     O .bss	00000008 dev0ep
040002dc g     F .text	00000050 clearLED
04012d34 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04014984 g     F .text	000000a4 alt_get_fd
04013bb8 g     F .text	00000158 alt_busy_sleep
04002ebc g     F .text	00000038 MSDEventHandler
0400cbb4 g     F .text	00000054 _close_r
04014ba0 g     F .text	0000007c memcmp
040118e4 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
04012df4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04019318 g       *ABS*	00000000 __alt_stack_base
04012e44 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04006c84 g     F .text	00000154 __swsetup_r
0400e7e4 g     F .text	000008e8 .hidden __divdf3
04008b28 g     F .text	00000118 __sfp
0400ac18 g     F .text	00000078 __copybits
04015970 g     O .rwdata	00000408 __malloc_av_
04008c74 g     F .text	00000004 __sinit_lock_release
04002f20 g     F .text	00000038 CDCEventHandler
0400f324 g     F .text	00000718 .hidden __muldf3
04002f84 g     F .text	00000038 DummyEventHandler
0400b2f4 g     F .text	00000054 __sread
0401487c g     F .text	00000108 alt_find_file
04013d94 g     F .text	000000a4 alt_dev_llist_insert
04010ab8 g     F .text	00000024 __malloc_lock
04010c9c g     F .text	000000b0 sbrk
04011d0c g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
04011c74 g     F .text	0000004c alt_avalon_i2c_check_nack
0400887c g     F .text	0000005c _fflush_r
0400cc08 g     F .text	000000c4 _calloc_r
04019030 g       *ABS*	00000000 __bss_start
04001eb0 g     F .text	00000188 MAX_busprobe
04019030 g     O .bss	00000002 hid_device
04009bf8 g     F .text	00000128 memset
040007fc g     F .text	000007f8 main
040020cc g     F .text	0000006c MAX3421E_Task
04011c40 g     F .text	00000034 alt_avalon_i2c_master_target_set
0401906c g     O .bss	00000004 alt_envp
04019048 g     O .bss	00000004 __malloc_max_total_mem
04012d94 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400d288 g     F .text	00000018 __swbuf
04003014 g     F .text	00000084 ConvUTF8ToStr
04012a40 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0400b428 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400cdbc g     F .text	00000014 fclose
04006fd8 g     F .text	00001688 _dtoa_r
04003e34 g     F .text	0000080c _malloc_r
0400d3fc g     F .text	00000030 __ascii_wctomb
0401749c g     O .rwdata	00000004 alt_errno
04009598 g     F .text	000000c4 _fwalk
04014cbc g     F .text	000000c8 putc
040030f8 g     F .text	00000084 .hidden __divsi3
04002644 g     F .text	00000190 XferInTransfer
0400044c g     F .text	00000140 printSignedHex1
04008ca8 g     F .text	00000124 _malloc_trim_r
04015050 g       *ABS*	00000000 __CTOR_END__
04003368 g     F .text	000003fc .hidden __mulsf3
04002fdc g     F .text	00000038 GetDevtable
0400b430 g     F .text	000000dc strcmp
04015050 g       *ABS*	00000000 __flash_rodata_start
04015050 g       *ABS*	00000000 __DTOR_LIST__
0400246c g     F .text	00000074 XferCtrlND
040010a8 g     F .text	000000a0 SGTL5000_Reg_Wr
0400f0cc g     F .text	00000088 .hidden __nedf2
04001de4 g     F .text	000000a8 MAX3421E_reset
04011088 g     F .text	00000038 alt_irq_init
04010c38 g     F .text	00000064 alt_release_fd
04015614 g     O .rodata	00000100 .hidden __clz_tab
04019058 g     O .bss	00000004 _PathLocale
04014b54 g     F .text	00000014 atexit
040032ac g     F .text	000000bc .hidden __gesf2
0400cb54 g     F .text	00000060 _write_r
040097d8 g     F .text	00000018 setlocale
0401747c g     O .rwdata	00000004 _impure_ptr
04019064 g     O .bss	00000004 alt_argc
04008660 g     F .text	0000021c __sflush_r
04013e98 g     F .text	00000060 _do_dtors
040097c4 g     F .text	00000008 __locale_cjk_lang
04011c08 g     F .text	00000038 alt_avalon_i2c_master_target_get
04011b18 g     F .text	000000f0 alt_avalon_i2c_send_address
04001bf8 g     F .text	000000fc MAXbytes_wr
04000020 g       .exceptions	00000000 alt_irq_entry
0400a844 g     F .text	00000064 __ulp
04008c90 g     F .text	00000018 __fp_unlock_all
04017488 g     O .rwdata	00000008 alt_fs_list
04002ef4 g     F .text	0000002c CDCProbe
04000020 g       *ABS*	00000000 __ram_exceptions_start
040097f0 g     F .text	0000000c localeconv
04000290 g     F .text	0000004c setLED
04002fbc g     F .text	00000020 GetUsbTaskState
04012ccc g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
04013fbc g     F .text	00000050 alt_ic_isr_register
04011548 g     F .text	0000004c alt_avalon_i2c_disable
0401508c g     O .rodata	00000010 devclasses
040174b8 g       *ABS*	00000000 _edata
04001ae0 g     F .text	00000038 HIDKEventHandler
04019318 g       *ABS*	00000000 _end
04002138 g     F .text	000000cc MaxIntHandler
0400cdd0 g     F .text	00000164 __fputwc
04000244 g       *ABS*	00000000 __ram_exceptions_end
0401326c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04011594 g     F .text	000000b0 alt_avalon_i2c_master_config_get
04001b18 g     F .text	00000034 SPI_init
04014094 g     F .text	0000008c alt_ic_irq_disable
04017454 g     O .rwdata	00000004 PARAMVAL
0400b350 g     F .text	0000007c __swrite
04017474 g     O .rwdata	00000004 __malloc_trim_threshold
040097b8 g     F .text	0000000c __locale_msgcharset
04014b68 g     F .text	00000038 exit
0400965c g     F .text	000000c4 _fwalk_reent
04003cb8 g     F .text	000000f0 .hidden __floatunsisf
0400a648 g     F .text	000001fc __mdiff
0400317c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04008c6c g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
040117a4 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
04011a34 g     F .text	000000e4 alt_avalon_i2c_cmd_write
04003098 g     F .text	00000060 .hidden __fixunssfsi
04001aa8 g     F .text	00000038 HIDMEventHandler
0401501c g     F .text	00000034 _exit
04013a8c g     F .text	0000012c alt_alarm_start
0400032c g     F .text	00000120 printSignedHex0
040097fc g     F .text	000001bc __smakebuf_r
0400491c g     F .text	00000098 strlen
0401449c g     F .text	00000154 open
0400f154 g     F .text	000000dc .hidden __gedf2
0401481c g     F .text	0000003c alt_putchar
04017484 g     O .rwdata	00000004 __wctomb
0400b608 g     F .text	00000018 __sprint_r
04013f88 g     F .text	00000034 alt_icache_flush_all
040174b4 g     O .rwdata	00000004 alt_priority_mask
0401400c g     F .text	00000088 alt_ic_irq_enable
04006bac g     F .text	0000001c __vfprintf_internal
04001148 g     F .text	00000408 HIDMProbe
0400d42c g     F .text	0000005c _wctomb_r
04001b4c g     F .text	00000028 SPI_wr
0400fa3c g     F .text	000008fc .hidden __subdf3
0400a07c g     F .text	000000b0 __lo0bits
040174a4 g     O .rwdata	00000008 alt_alarm_list
04013e38 g     F .text	00000060 _do_ctors
0400d33c g     F .text	000000c0 wcrtomb
04010578 g     F .text	000000d0 close
04012c80 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
040108a8 g     F .text	00000084 alt_load
04011f28 g     F .text	0000013c alt_avalon_i2c_master_rx
0400cf58 g     F .text	00000080 fputwc
04003e20 g     F .text	00000014 free
04008c70 g     F .text	00000004 __sinit_lock_acquire
04002238 g     F .text	0000014c XferCtrlReq
04009df0 g     F .text	00000120 __multadd
04009dc8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10a48604 	addi	r2,r2,-28136
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10a48604 	addi	r2,r2,-28136
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a70a17 	ldw	r2,-25560(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a70a17 	ldw	r2,-25560(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_data_end+0xfc000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000260:	d6bd1514 	ori	gp,gp,62548
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000268:	10a40c14 	ori	r2,r2,36912

    movhi r3, %hi(__bss_end)
 400026c:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000270:	18e4c614 	ori	r3,r3,37656

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_data_end+0xfc000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	40108a80 	call	40108a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	4010a3c0 	call	4010a3c <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_data_end+0xfc00028c>

04000290 <setLED>:
volatile int *PARAM = (int*)PARAM_BASE;



void setLED(int LED)
{
 4000290:	defffe04 	addi	sp,sp,-8
 4000294:	df000115 	stw	fp,4(sp)
 4000298:	df000104 	addi	fp,sp,4
 400029c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
 40002a0:	00820034 	movhi	r2,2048
 40002a4:	10843c04 	addi	r2,r2,4336
 40002a8:	10c00037 	ldwio	r3,0(r2)
 40002ac:	01000044 	movi	r4,1
 40002b0:	e0bfff17 	ldw	r2,-4(fp)
 40002b4:	2084983a 	sll	r2,r4,r2
 40002b8:	1886b03a 	or	r3,r3,r2
 40002bc:	00820034 	movhi	r2,2048
 40002c0:	10843c04 	addi	r2,r2,4336
 40002c4:	10c00035 	stwio	r3,0(r2)
}
 40002c8:	0001883a 	nop
 40002cc:	e037883a 	mov	sp,fp
 40002d0:	df000017 	ldw	fp,0(sp)
 40002d4:	dec00104 	addi	sp,sp,4
 40002d8:	f800283a 	ret

040002dc <clearLED>:

void clearLED(int LED)
{
 40002dc:	defffe04 	addi	sp,sp,-8
 40002e0:	df000115 	stw	fp,4(sp)
 40002e4:	df000104 	addi	fp,sp,4
 40002e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
 40002ec:	00820034 	movhi	r2,2048
 40002f0:	10843c04 	addi	r2,r2,4336
 40002f4:	10c00037 	ldwio	r3,0(r2)
 40002f8:	01000044 	movi	r4,1
 40002fc:	e0bfff17 	ldw	r2,-4(fp)
 4000300:	2084983a 	sll	r2,r4,r2
 4000304:	0084303a 	nor	r2,zero,r2
 4000308:	1886703a 	and	r3,r3,r2
 400030c:	00820034 	movhi	r2,2048
 4000310:	10843c04 	addi	r2,r2,4336
 4000314:	10c00035 	stwio	r3,0(r2)

}
 4000318:	0001883a 	nop
 400031c:	e037883a 	mov	sp,fp
 4000320:	df000017 	ldw	fp,0(sp)
 4000324:	dec00104 	addi	sp,sp,4
 4000328:	f800283a 	ret

0400032c <printSignedHex0>:

void printSignedHex0(signed char value)
{
 400032c:	defffc04 	addi	sp,sp,-16
 4000330:	dfc00315 	stw	ra,12(sp)
 4000334:	df000215 	stw	fp,8(sp)
 4000338:	df000204 	addi	fp,sp,8
 400033c:	2005883a 	mov	r2,r4
 4000340:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000344:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4000348:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400034c:	00820034 	movhi	r2,2048
 4000350:	10849804 	addi	r2,r2,4704
 4000354:	10800037 	ldwio	r2,0(r2)
 4000358:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
 400035c:	e0bfff07 	ldb	r2,-4(fp)
 4000360:	1000060e 	bge	r2,zero,400037c <printSignedHex0+0x50>
	{
		setLED(11);
 4000364:	010002c4 	movi	r4,11
 4000368:	40002900 	call	4000290 <setLED>
		value = -value;
 400036c:	e0bfff03 	ldbu	r2,-4(fp)
 4000370:	0085c83a 	sub	r2,zero,r2
 4000374:	e0bfff05 	stb	r2,-4(fp)
 4000378:	00000206 	br	4000384 <printSignedHex0+0x58>
	}
	else
	{
		clearLED(11);
 400037c:	010002c4 	movi	r4,11
 4000380:	40002dc0 	call	40002dc <clearLED>
	}
	//handled hundreds
	if (value / 100)
 4000384:	e0bfff03 	ldbu	r2,-4(fp)
 4000388:	108018c4 	addi	r2,r2,99
 400038c:	10803fcc 	andi	r2,r2,255
 4000390:	108031f0 	cmpltui	r2,r2,199
 4000394:	1000031e 	bne	r2,zero,40003a4 <printSignedHex0+0x78>
		setLED(13);
 4000398:	01000344 	movi	r4,13
 400039c:	40002900 	call	4000290 <setLED>
 40003a0:	00000206 	br	40003ac <printSignedHex0+0x80>
	else
		clearLED(13);
 40003a4:	01000344 	movi	r4,13
 40003a8:	40002dc0 	call	40002dc <clearLED>

	value = value % 100;
 40003ac:	e0bfff07 	ldb	r2,-4(fp)
 40003b0:	01401904 	movi	r5,100
 40003b4:	1009883a 	mov	r4,r2
 40003b8:	400317c0 	call	400317c <__modsi3>
 40003bc:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40003c0:	e0bfff07 	ldb	r2,-4(fp)
 40003c4:	01400284 	movi	r5,10
 40003c8:	1009883a 	mov	r4,r2
 40003cc:	40030f80 	call	40030f8 <__divsi3>
 40003d0:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 40003d4:	e0bfff07 	ldb	r2,-4(fp)
 40003d8:	01400284 	movi	r5,10
 40003dc:	1009883a 	mov	r4,r2
 40003e0:	400317c0 	call	400317c <__modsi3>
 40003e4:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 40003e8:	e0bffe8b 	ldhu	r2,-6(fp)
 40003ec:	10803fcc 	andi	r2,r2,255
 40003f0:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 40003f4:	e0bffe03 	ldbu	r2,-8(fp)
 40003f8:	1004933a 	slli	r2,r2,12
 40003fc:	1007883a 	mov	r3,r2
 4000400:	e0bffe8b 	ldhu	r2,-6(fp)
 4000404:	1884b03a 	or	r2,r3,r2
 4000408:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 400040c:	e0bffe43 	ldbu	r2,-7(fp)
 4000410:	1004923a 	slli	r2,r2,8
 4000414:	1007883a 	mov	r3,r2
 4000418:	e0bffe8b 	ldhu	r2,-6(fp)
 400041c:	1884b03a 	or	r2,r3,r2
 4000420:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000424:	e0fffe8b 	ldhu	r3,-6(fp)
 4000428:	00820034 	movhi	r2,2048
 400042c:	10849804 	addi	r2,r2,4704
 4000430:	10c00035 	stwio	r3,0(r2)
}
 4000434:	0001883a 	nop
 4000438:	e037883a 	mov	sp,fp
 400043c:	dfc00117 	ldw	ra,4(sp)
 4000440:	df000017 	ldw	fp,0(sp)
 4000444:	dec00204 	addi	sp,sp,8
 4000448:	f800283a 	ret

0400044c <printSignedHex1>:

void printSignedHex1(signed char value)
{
 400044c:	defffb04 	addi	sp,sp,-20
 4000450:	dfc00415 	stw	ra,16(sp)
 4000454:	df000315 	stw	fp,12(sp)
 4000458:	df000304 	addi	fp,sp,12
 400045c:	2005883a 	mov	r2,r4
 4000460:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000464:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4000468:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400046c:	00820034 	movhi	r2,2048
 4000470:	10849804 	addi	r2,r2,4704
 4000474:	10800037 	ldwio	r2,0(r2)
 4000478:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
 400047c:	e0bfff07 	ldb	r2,-4(fp)
 4000480:	1000060e 	bge	r2,zero,400049c <printSignedHex1+0x50>
	{
		setLED(10);
 4000484:	01000284 	movi	r4,10
 4000488:	40002900 	call	4000290 <setLED>
		value = -value;
 400048c:	e0bfff03 	ldbu	r2,-4(fp)
 4000490:	0085c83a 	sub	r2,zero,r2
 4000494:	e0bfff05 	stb	r2,-4(fp)
 4000498:	00000206 	br	40004a4 <printSignedHex1+0x58>
	}
	else
	{
		clearLED(10);
 400049c:	01000284 	movi	r4,10
 40004a0:	40002dc0 	call	40002dc <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40004a4:	e0bfff03 	ldbu	r2,-4(fp)
 40004a8:	108018c4 	addi	r2,r2,99
 40004ac:	10803fcc 	andi	r2,r2,255
 40004b0:	108031f0 	cmpltui	r2,r2,199
 40004b4:	1000031e 	bne	r2,zero,40004c4 <printSignedHex1+0x78>
		setLED(12);
 40004b8:	01000304 	movi	r4,12
 40004bc:	40002900 	call	4000290 <setLED>
 40004c0:	00000206 	br	40004cc <printSignedHex1+0x80>
	else
		clearLED(12);
 40004c4:	01000304 	movi	r4,12
 40004c8:	40002dc0 	call	40002dc <clearLED>

	value = value % 100;
 40004cc:	e0bfff07 	ldb	r2,-4(fp)
 40004d0:	01401904 	movi	r5,100
 40004d4:	1009883a 	mov	r4,r2
 40004d8:	400317c0 	call	400317c <__modsi3>
 40004dc:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40004e0:	e0bfff07 	ldb	r2,-4(fp)
 40004e4:	01400284 	movi	r5,10
 40004e8:	1009883a 	mov	r4,r2
 40004ec:	40030f80 	call	40030f8 <__divsi3>
 40004f0:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 40004f4:	e0bfff07 	ldb	r2,-4(fp)
 40004f8:	01400284 	movi	r5,10
 40004fc:	1009883a 	mov	r4,r2
 4000500:	400317c0 	call	400317c <__modsi3>
 4000504:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 4000508:	e0bfff07 	ldb	r2,-4(fp)
 400050c:	01400284 	movi	r5,10
 4000510:	1009883a 	mov	r4,r2
 4000514:	40030f80 	call	40030f8 <__divsi3>
 4000518:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 400051c:	e0bfff07 	ldb	r2,-4(fp)
 4000520:	01400284 	movi	r5,10
 4000524:	1009883a 	mov	r4,r2
 4000528:	400317c0 	call	400317c <__modsi3>
 400052c:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 4000530:	e0bffe17 	ldw	r2,-8(fp)
 4000534:	10bfc00c 	andi	r2,r2,65280
 4000538:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 400053c:	e0bffd03 	ldbu	r2,-12(fp)
 4000540:	1004913a 	slli	r2,r2,4
 4000544:	1007883a 	mov	r3,r2
 4000548:	e0bffe17 	ldw	r2,-8(fp)
 400054c:	10c4b03a 	or	r2,r2,r3
 4000550:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4000554:	e0bffd43 	ldbu	r2,-11(fp)
 4000558:	e0fffe17 	ldw	r3,-8(fp)
 400055c:	1884b03a 	or	r2,r3,r2
 4000560:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000564:	e0fffe17 	ldw	r3,-8(fp)
 4000568:	00820034 	movhi	r2,2048
 400056c:	10849804 	addi	r2,r2,4704
 4000570:	10c00035 	stwio	r3,0(r2)
}
 4000574:	0001883a 	nop
 4000578:	e037883a 	mov	sp,fp
 400057c:	dfc00117 	ldw	ra,4(sp)
 4000580:	df000017 	ldw	fp,0(sp)
 4000584:	dec00204 	addi	sp,sp,8
 4000588:	f800283a 	ret

0400058c <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 400058c:	defff604 	addi	sp,sp,-40
 4000590:	dfc00915 	stw	ra,36(sp)
 4000594:	df000815 	stw	fp,32(sp)
 4000598:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFFde;
 400059c:	00bff784 	movi	r2,-34
 40005a0:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 40005a4:	01010074 	movhi	r4,1025
 40005a8:	21142704 	addi	r4,r4,20636
 40005ac:	40048b40 	call	40048b4 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 40005b0:	00800044 	movi	r2,1
 40005b4:	e0bffd05 	stb	r2,-12(fp)
 40005b8:	00001f06 	br	4000638 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 40005bc:	e0bffd03 	ldbu	r2,-12(fp)
 40005c0:	1009883a 	mov	r4,r2
 40005c4:	4002fdc0 	call	4002fdc <GetDevtable>
 40005c8:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 40005cc:	e0bffe17 	ldw	r2,-8(fp)
 40005d0:	10800017 	ldw	r2,0(r2)
 40005d4:	10001526 	beq	r2,zero,400062c <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 40005d8:	e0bffd03 	ldbu	r2,-12(fp)
 40005dc:	100b883a 	mov	r5,r2
 40005e0:	01010074 	movhi	r4,1025
 40005e4:	21143004 	addi	r4,r4,20672
 40005e8:	40047b80 	call	40047b8 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 40005ec:	e0bffe17 	ldw	r2,-8(fp)
 40005f0:	10800103 	ldbu	r2,4(r2)
 40005f4:	10c03fcc 	andi	r3,r2,255
 40005f8:	00810074 	movhi	r2,1025
 40005fc:	10942304 	addi	r2,r2,20620
 4000600:	18c7883a 	add	r3,r3,r3
 4000604:	18c7883a 	add	r3,r3,r3
 4000608:	10c5883a 	add	r2,r2,r3
 400060c:	10800017 	ldw	r2,0(r2)
 4000610:	100b883a 	mov	r5,r2
 4000614:	01010074 	movhi	r4,1025
 4000618:	21143304 	addi	r4,r4,20684
 400061c:	40047b80 	call	40047b8 <printf>
			device = tpl_ptr->devclass;
 4000620:	e0bffe17 	ldw	r2,-8(fp)
 4000624:	10800103 	ldbu	r2,4(r2)
 4000628:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFFde;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 400062c:	e0bffd03 	ldbu	r2,-12(fp)
 4000630:	10800044 	addi	r2,r2,1
 4000634:	e0bffd05 	stb	r2,-12(fp)
 4000638:	e0bffd03 	ldbu	r2,-12(fp)
 400063c:	10800230 	cmpltui	r2,r2,8
 4000640:	103fde1e 	bne	r2,zero,40005bc <__alt_data_end+0xfc0005bc>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 4000644:	d0a00203 	ldbu	r2,-32760(gp)
 4000648:	11003fcc 	andi	r4,r2,255
 400064c:	d0a6f743 	ldbu	r2,-25635(gp)
 4000650:	10803fcc 	andi	r2,r2,255
 4000654:	e0ffff44 	addi	r3,fp,-3
 4000658:	d8c00415 	stw	r3,16(sp)
 400065c:	00c00044 	movi	r3,1
 4000660:	d8c00315 	stw	r3,12(sp)
 4000664:	d8800215 	stw	r2,8(sp)
 4000668:	d8000115 	stw	zero,4(sp)
 400066c:	d8000015 	stw	zero,0(sp)
 4000670:	01c00084 	movi	r7,2
 4000674:	01802844 	movi	r6,161
 4000678:	000b883a 	mov	r5,zero
 400067c:	40022380 	call	4002238 <XferCtrlReq>
 4000680:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 4000684:	e0bfff03 	ldbu	r2,-4(fp)
 4000688:	10000926 	beq	r2,zero,40006b0 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 400068c:	01010074 	movhi	r4,1025
 4000690:	21143504 	addi	r4,r4,20692
 4000694:	40047b80 	call	40047b8 <printf>
		printf("%x \n", rcode);
 4000698:	e0bfff03 	ldbu	r2,-4(fp)
 400069c:	100b883a 	mov	r5,r2
 40006a0:	01010074 	movhi	r4,1025
 40006a4:	21143c04 	addi	r4,r4,20720
 40006a8:	40047b80 	call	40047b8 <printf>
 40006ac:	00000906 	br	40006d4 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 40006b0:	01010074 	movhi	r4,1025
 40006b4:	21143e04 	addi	r4,r4,20728
 40006b8:	40047b80 	call	40047b8 <printf>
		printf("%x \n", tmpbyte);
 40006bc:	e0bfff43 	ldbu	r2,-3(fp)
 40006c0:	10803fcc 	andi	r2,r2,255
 40006c4:	100b883a 	mov	r5,r2
 40006c8:	01010074 	movhi	r4,1025
 40006cc:	21143c04 	addi	r4,r4,20720
 40006d0:	40047b80 	call	40047b8 <printf>
	}
	printf("Protocol: ");
 40006d4:	01010074 	movhi	r4,1025
 40006d8:	21144204 	addi	r4,r4,20744
 40006dc:	40047b80 	call	40047b8 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 40006e0:	d0a00203 	ldbu	r2,-32760(gp)
 40006e4:	11003fcc 	andi	r4,r2,255
 40006e8:	d0a6f743 	ldbu	r2,-25635(gp)
 40006ec:	10803fcc 	andi	r2,r2,255
 40006f0:	e0ffff44 	addi	r3,fp,-3
 40006f4:	d8c00415 	stw	r3,16(sp)
 40006f8:	00c00044 	movi	r3,1
 40006fc:	d8c00315 	stw	r3,12(sp)
 4000700:	d8800215 	stw	r2,8(sp)
 4000704:	d8000115 	stw	zero,4(sp)
 4000708:	d8000015 	stw	zero,0(sp)
 400070c:	01c000c4 	movi	r7,3
 4000710:	01802844 	movi	r6,161
 4000714:	000b883a 	mov	r5,zero
 4000718:	40022380 	call	4002238 <XferCtrlReq>
 400071c:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 4000720:	e0bfff03 	ldbu	r2,-4(fp)
 4000724:	10000926 	beq	r2,zero,400074c <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 4000728:	01010074 	movhi	r4,1025
 400072c:	21144504 	addi	r4,r4,20756
 4000730:	40047b80 	call	40047b8 <printf>
		printf("%x \n", rcode);
 4000734:	e0bfff03 	ldbu	r2,-4(fp)
 4000738:	100b883a 	mov	r5,r2
 400073c:	01010074 	movhi	r4,1025
 4000740:	21143c04 	addi	r4,r4,20720
 4000744:	40047b80 	call	40047b8 <printf>
 4000748:	00000606 	br	4000764 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 400074c:	e0bfff43 	ldbu	r2,-3(fp)
 4000750:	10803fcc 	andi	r2,r2,255
 4000754:	100b883a 	mov	r5,r2
 4000758:	01010074 	movhi	r4,1025
 400075c:	21144c04 	addi	r4,r4,20784
 4000760:	40047b80 	call	40047b8 <printf>
	}
	return device;
 4000764:	e0bffd43 	ldbu	r2,-11(fp)
}
 4000768:	e037883a 	mov	sp,fp
 400076c:	dfc00117 	ldw	ra,4(sp)
 4000770:	df000017 	ldw	fp,0(sp)
 4000774:	dec00204 	addi	sp,sp,8
 4000778:	f800283a 	ret

0400077c <setKeycode>:

void setKeycode(WORD keycode, BYTE num)
{
 400077c:	defffd04 	addi	sp,sp,-12
 4000780:	df000215 	stw	fp,8(sp)
 4000784:	df000204 	addi	fp,sp,8
 4000788:	2007883a 	mov	r3,r4
 400078c:	2805883a 	mov	r2,r5
 4000790:	e0fffe0d 	sth	r3,-8(fp)
 4000794:	e0bfff05 	stb	r2,-4(fp)
	if(num == 0){
 4000798:	e0bfff03 	ldbu	r2,-4(fp)
 400079c:	1000051e 	bne	r2,zero,40007b4 <setKeycode+0x38>
		IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE0_BASE, keycode);
 40007a0:	e0fffe0b 	ldhu	r3,-8(fp)
 40007a4:	00820034 	movhi	r2,2048
 40007a8:	10849004 	addi	r2,r2,4672
 40007ac:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE1_BASE, keycode);
	}
	else if(num == 2){
		IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE2_BASE, keycode);
	}
}
 40007b0:	00000d06 	br	40007e8 <setKeycode+0x6c>
void setKeycode(WORD keycode, BYTE num)
{
	if(num == 0){
		IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE0_BASE, keycode);
	}
	else if(num == 1){
 40007b4:	e0bfff03 	ldbu	r2,-4(fp)
 40007b8:	10800058 	cmpnei	r2,r2,1
 40007bc:	1000041e 	bne	r2,zero,40007d0 <setKeycode+0x54>
			IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE1_BASE, keycode);
 40007c0:	e0bffe0b 	ldhu	r2,-8(fp)
 40007c4:	0007883a 	mov	r3,zero
 40007c8:	18800035 	stwio	r2,0(r3)
	}
	else if(num == 2){
		IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE2_BASE, keycode);
	}
}
 40007cc:	00000606 	br	40007e8 <setKeycode+0x6c>
		IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE0_BASE, keycode);
	}
	else if(num == 1){
			IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE1_BASE, keycode);
	}
	else if(num == 2){
 40007d0:	e0bfff03 	ldbu	r2,-4(fp)
 40007d4:	10800098 	cmpnei	r2,r2,2
 40007d8:	1000031e 	bne	r2,zero,40007e8 <setKeycode+0x6c>
		IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE2_BASE, keycode);
 40007dc:	e0fffe0b 	ldhu	r3,-8(fp)
 40007e0:	00800404 	movi	r2,16
 40007e4:	10c00035 	stwio	r3,0(r2)
	}
}
 40007e8:	0001883a 	nop
 40007ec:	e037883a 	mov	sp,fp
 40007f0:	df000017 	ldw	fp,0(sp)
 40007f4:	dec00104 	addi	sp,sp,4
 40007f8:	f800283a 	ret

040007fc <main>:

int main()
{
 40007fc:	deff7104 	addi	sp,sp,-572
 4000800:	dfc08e15 	stw	ra,568(sp)
 4000804:	df008d15 	stw	fp,564(sp)
 4000808:	df008d04 	addi	fp,sp,564
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 400080c:	01010074 	movhi	r4,1025
 4000810:	21144e04 	addi	r4,r4,20792
 4000814:	40114700 	call	4011470 <alt_avalon_i2c_open>
 4000818:	e0bf7915 	stw	r2,-540(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 400081c:	e0bf7917 	ldw	r2,-540(fp)
 4000820:	1000051e 	bne	r2,zero,4000838 <main+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 4000824:	01010074 	movhi	r4,1025
 4000828:	21145104 	addi	r4,r4,20804
 400082c:	40048b40 	call	40048b4 <puts>
		return 1;
 4000830:	00800044 	movi	r2,1
 4000834:	0001ea06 	br	4000fe0 <main+0x7e4>
	}
	printf ("I2C Test Program\n");
 4000838:	01010074 	movhi	r4,1025
 400083c:	21145904 	addi	r4,r4,20836
 4000840:	40048b40 	call	40048b4 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 4000844:	01400284 	movi	r5,10
 4000848:	e13f7917 	ldw	r4,-540(fp)
 400084c:	4011c400 	call	4011c40 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 4000850:	000b883a 	mov	r5,zero
 4000854:	e13f7917 	ldw	r4,-540(fp)
 4000858:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 400085c:	10bfffcc 	andi	r2,r2,65535
 4000860:	100b883a 	mov	r5,r2
 4000864:	01010074 	movhi	r4,1025
 4000868:	21145e04 	addi	r4,r4,20856
 400086c:	40047b80 	call	40047b8 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 4000870:	00800384 	movi	r2,14
 4000874:	e0bf7a05 	stb	r2,-536(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 4000878:	e0bf7a03 	ldbu	r2,-536(fp)
 400087c:	1009883a 	mov	r4,r2
 4000880:	4003cb80 	call	4003cb8 <__floatunsisf>
 4000884:	1007883a 	mov	r3,r2
 4000888:	180b883a 	mov	r5,r3
 400088c:	011059f4 	movhi	r4,16743
 4000890:	210d8144 	addi	r4,r4,13829
 4000894:	40037640 	call	4003764 <__subsf3>
 4000898:	1007883a 	mov	r3,r2
 400089c:	1805883a 	mov	r2,r3
 40008a0:	01514034 	movhi	r5,17664
 40008a4:	1009883a 	mov	r4,r2
 40008a8:	40033680 	call	4003368 <__mulsf3>
 40008ac:	1007883a 	mov	r3,r2
 40008b0:	1805883a 	mov	r2,r3
 40008b4:	1009883a 	mov	r4,r2
 40008b8:	40030980 	call	4003098 <__fixunssfsi>
 40008bc:	e0bf7a8d 	sth	r2,-534(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 40008c0:	e0bf7a03 	ldbu	r2,-536(fp)
 40008c4:	e0ff7a8b 	ldhu	r3,-534(fp)
 40008c8:	180d883a 	mov	r6,r3
 40008cc:	100b883a 	mov	r5,r2
 40008d0:	01010074 	movhi	r4,1025
 40008d4:	21146404 	addi	r4,r4,20880
 40008d8:	40047b80 	call	40047b8 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 40008dc:	e0bf7a03 	ldbu	r2,-536(fp)
 40008e0:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 40008e4:	1007883a 	mov	r3,r2
 40008e8:	e0bf7a8b 	ldhu	r2,-534(fp)
 40008ec:	1884b03a 	or	r2,r3,r2
 40008f0:	10bfffcc 	andi	r2,r2,65535
 40008f4:	100d883a 	mov	r6,r2
 40008f8:	01400c84 	movi	r5,50
 40008fc:	e13f7917 	ldw	r4,-540(fp)
 4000900:	40010a80 	call	40010a8 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 4000904:	01400c84 	movi	r5,50
 4000908:	e13f7917 	ldw	r4,-540(fp)
 400090c:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 4000910:	10bfffcc 	andi	r2,r2,65535
 4000914:	100b883a 	mov	r5,r2
 4000918:	01010074 	movhi	r4,1025
 400091c:	21147504 	addi	r4,r4,20948
 4000920:	40047b80 	call	40047b8 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 4000924:	01917f84 	movi	r6,17918
 4000928:	01400c04 	movi	r5,48
 400092c:	e13f7917 	ldw	r4,-540(fp)
 4000930:	40010a80 	call	40010a8 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 4000934:	01400c04 	movi	r5,48
 4000938:	e13f7917 	ldw	r4,-540(fp)
 400093c:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 4000940:	10bfffcc 	andi	r2,r2,65535
 4000944:	100b883a 	mov	r5,r2
 4000948:	01010074 	movhi	r4,1025
 400094c:	21147c04 	addi	r4,r4,20976
 4000950:	40047b80 	call	40047b8 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 4000954:	01801384 	movi	r6,78
 4000958:	01400a04 	movi	r5,40
 400095c:	e13f7917 	ldw	r4,-540(fp)
 4000960:	40010a80 	call	40010a8 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 4000964:	01400a04 	movi	r5,40
 4000968:	e13f7917 	ldw	r4,-540(fp)
 400096c:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 4000970:	10bfffcc 	andi	r2,r2,65535
 4000974:	100b883a 	mov	r5,r2
 4000978:	01010074 	movhi	r4,1025
 400097c:	21148404 	addi	r4,r4,21008
 4000980:	40047b80 	call	40047b8 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 4000984:	018018c4 	movi	r6,99
 4000988:	01400084 	movi	r5,2
 400098c:	e13f7917 	ldw	r4,-540(fp)
 4000990:	40010a80 	call	40010a8 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 4000994:	01400084 	movi	r5,2
 4000998:	e13f7917 	ldw	r4,-540(fp)
 400099c:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 40009a0:	10bfffcc 	andi	r2,r2,65535
 40009a4:	100b883a 	mov	r5,r2
 40009a8:	01010074 	movhi	r4,1025
 40009ac:	21148b04 	addi	r4,r4,21036
 40009b0:	40047b80 	call	40047b8 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 40009b4:	018001c4 	movi	r6,7
 40009b8:	01400104 	movi	r5,4
 40009bc:	e13f7917 	ldw	r4,-540(fp)
 40009c0:	40010a80 	call	40010a8 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 40009c4:	01400104 	movi	r5,4
 40009c8:	e13f7917 	ldw	r4,-540(fp)
 40009cc:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 40009d0:	10bfffcc 	andi	r2,r2,65535
 40009d4:	100b883a 	mov	r5,r2
 40009d8:	01010074 	movhi	r4,1025
 40009dc:	21149304 	addi	r4,r4,21068
 40009e0:	40047b80 	call	40047b8 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 40009e4:	01802004 	movi	r6,128
 40009e8:	01400184 	movi	r5,6
 40009ec:	e13f7917 	ldw	r4,-540(fp)
 40009f0:	40010a80 	call	40010a8 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 40009f4:	01400184 	movi	r5,6
 40009f8:	e13f7917 	ldw	r4,-540(fp)
 40009fc:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 4000a00:	10bfffcc 	andi	r2,r2,65535
 4000a04:	100b883a 	mov	r5,r2
 4000a08:	01010074 	movhi	r4,1025
 4000a0c:	21149a04 	addi	r4,r4,21096
 4000a10:	40047b80 	call	40047b8 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 4000a14:	01800104 	movi	r6,4
 4000a18:	01400904 	movi	r5,36
 4000a1c:	e13f7917 	ldw	r4,-540(fp)
 4000a20:	40010a80 	call	40010a8 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 4000a24:	01400904 	movi	r5,36
 4000a28:	e13f7917 	ldw	r4,-540(fp)
 4000a2c:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 4000a30:	10bfffcc 	andi	r2,r2,65535
 4000a34:	100b883a 	mov	r5,r2
 4000a38:	01010074 	movhi	r4,1025
 4000a3c:	2114a104 	addi	r4,r4,21124
 4000a40:	40047b80 	call	40047b8 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 4000a44:	01800404 	movi	r6,16
 4000a48:	01400284 	movi	r5,10
 4000a4c:	e13f7917 	ldw	r4,-540(fp)
 4000a50:	40010a80 	call	40010a8 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 4000a54:	01400284 	movi	r5,10
 4000a58:	e13f7917 	ldw	r4,-540(fp)
 4000a5c:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 4000a60:	10bfffcc 	andi	r2,r2,65535
 4000a64:	100b883a 	mov	r5,r2
 4000a68:	01010074 	movhi	r4,1025
 4000a6c:	2114a804 	addi	r4,r4,21152
 4000a70:	40047b80 	call	40047b8 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 4000a74:	01400904 	movi	r5,36
 4000a78:	e13f7917 	ldw	r4,-540(fp)
 4000a7c:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 4000a80:	10bfffcc 	andi	r2,r2,65535
 4000a84:	100b883a 	mov	r5,r2
 4000a88:	01010074 	movhi	r4,1025
 4000a8c:	2114a104 	addi	r4,r4,21124
 4000a90:	40047b80 	call	40047b8 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 4000a94:	000d883a 	mov	r6,zero
 4000a98:	01400384 	movi	r5,14
 4000a9c:	e13f7917 	ldw	r4,-540(fp)
 4000aa0:	40010a80 	call	40010a8 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 4000aa4:	01400384 	movi	r5,14
 4000aa8:	e13f7917 	ldw	r4,-540(fp)
 4000aac:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 4000ab0:	10bfffcc 	andi	r2,r2,65535
 4000ab4:	100b883a 	mov	r5,r2
 4000ab8:	01010074 	movhi	r4,1025
 4000abc:	2114af04 	addi	r4,r4,21180
 4000ac0:	40047b80 	call	40047b8 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 4000ac4:	01400504 	movi	r5,20
 4000ac8:	e13f7917 	ldw	r4,-540(fp)
 4000acc:	4000ff40 	call	4000ff4 <SGTL5000_Reg_Rd>
 4000ad0:	10bfffcc 	andi	r2,r2,65535
 4000ad4:	100b883a 	mov	r5,r2
 4000ad8:	01010074 	movhi	r4,1025
 4000adc:	2114b704 	addi	r4,r4,21212
 4000ae0:	40047b80 	call	40047b8 <printf>

	//Keyboard Section
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;
	BYTE keycodeOrder[6] = {0, 0, 0, 0, 0, 0};
 4000ae4:	e03f7fc5 	stb	zero,-513(fp)
 4000ae8:	e03f8005 	stb	zero,-512(fp)
 4000aec:	e03f8045 	stb	zero,-511(fp)
 4000af0:	e03f8085 	stb	zero,-510(fp)
 4000af4:	e03f80c5 	stb	zero,-509(fp)
 4000af8:	e03f8105 	stb	zero,-508(fp)
	BYTE contains;
	int param[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0, 0};
 4000afc:	e03f8215 	stw	zero,-504(fp)
 4000b00:	e03f8315 	stw	zero,-500(fp)
 4000b04:	e03f8415 	stw	zero,-496(fp)
 4000b08:	e03f8515 	stw	zero,-492(fp)
 4000b0c:	e03f8615 	stw	zero,-488(fp)
 4000b10:	e03f8715 	stw	zero,-484(fp)
 4000b14:	e03f8815 	stw	zero,-480(fp)
 4000b18:	e03f8915 	stw	zero,-476(fp)
 4000b1c:	e03f8a15 	stw	zero,-472(fp)
 4000b20:	e03f8b15 	stw	zero,-468(fp)
 4000b24:	e03f8c15 	stw	zero,-464(fp)
 4000b28:	e03f8d15 	stw	zero,-460(fp)
 4000b2c:	e03f8e15 	stw	zero,-456(fp)
 4000b30:	e03f8f15 	stw	zero,-452(fp)
	int dummy[14];
	short int paramprev = 0;
 4000b34:	e03f7b0d 	sth	zero,-532(fp)
	char paramnames[13][30] =
 4000b38:	00810074 	movhi	r2,1025
 4000b3c:	1094e204 	addi	r2,r2,21384
 4000b40:	e0ff9e04 	addi	r3,fp,-392
 4000b44:	1009883a 	mov	r4,r2
 4000b48:	00806184 	movi	r2,390
 4000b4c:	100d883a 	mov	r6,r2
 4000b50:	200b883a 	mov	r5,r4
 4000b54:	1809883a 	mov	r4,r3
 4000b58:	40046400 	call	4004640 <memcpy>
	"Operator 0 Fine Tune", "Operator 1 Fine Tune", "Operator 2 Fine Tune",
	"Operator 0 Envelope", "Operator 1 Envelope", "Operator 2 Envelope",
	"Operator 0 Scaling", "Operator 1 Scaling", "Operator 2 Scaling"};


	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 4000b5c:	e03f7345 	stb	zero,-563(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 4000b60:	e03f7385 	stb	zero,-562(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 4000b64:	01010074 	movhi	r4,1025
 4000b68:	2114bf04 	addi	r4,r4,21244
 4000b6c:	40048b40 	call	40048b4 <puts>
	MAX3421E_init();
 4000b70:	40020380 	call	4002038 <MAX3421E_init>
	printf("initializing USB...\n");
 4000b74:	01010074 	movhi	r4,1025
 4000b78:	2114c604 	addi	r4,r4,21272
 4000b7c:	40048b40 	call	40048b4 <puts>
	USB_init();
 4000b80:	40027d40 	call	40027d4 <USB_init>



	while (1) {
		//printf(".");
		MAX3421E_Task();
 4000b84:	40020cc0 	call	40020cc <MAX3421E_Task>
		USB_Task();
 4000b88:	400286c0 	call	400286c <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 4000b8c:	4002fbc0 	call	4002fbc <GetUsbTaskState>
 4000b90:	10803fcc 	andi	r2,r2,255
 4000b94:	10801018 	cmpnei	r2,r2,64
 4000b98:	103ffa1e 	bne	r2,zero,4000b84 <__alt_data_end+0xfc000b84>
			if (!runningdebugflag) {
 4000b9c:	e0bf7343 	ldbu	r2,-563(fp)
 4000ba0:	1000071e 	bne	r2,zero,4000bc0 <main+0x3c4>
				runningdebugflag = 1;
 4000ba4:	00800044 	movi	r2,1
 4000ba8:	e0bf7345 	stb	r2,-563(fp)
				setLED(9);
 4000bac:	01000244 	movi	r4,9
 4000bb0:	40002900 	call	4000290 <setLED>
				device = GetDriverandReport();
 4000bb4:	400058c0 	call	400058c <GetDriverandReport>
 4000bb8:	e0bf73c5 	stb	r2,-561(fp)
 4000bbc:	003ff106 	br	4000b84 <__alt_data_end+0xfc000b84>
			} else if (device == 1) {
 4000bc0:	e0bf73c3 	ldbu	r2,-561(fp)
 4000bc4:	10800058 	cmpnei	r2,r2,1
 4000bc8:	1000de1e 	bne	r2,zero,4000f44 <main+0x748>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 4000bcc:	e0bf7dc4 	addi	r2,fp,-521
 4000bd0:	1009883a 	mov	r4,r2
 4000bd4:	4001a200 	call	4001a20 <kbdPoll>
 4000bd8:	e0bf7b85 	stb	r2,-530(fp)
				if (rcode == hrNAK) {
 4000bdc:	e0bf7b83 	ldbu	r2,-530(fp)
 4000be0:	10800118 	cmpnei	r2,r2,4
 4000be4:	1000fc26 	beq	r2,zero,4000fd8 <main+0x7dc>
					continue; //NAK means no new data
				} else if (rcode) {
 4000be8:	e0bf7b83 	ldbu	r2,-530(fp)
 4000bec:	10000926 	beq	r2,zero,4000c14 <main+0x418>
					printf("Rcode: ");
 4000bf0:	01010074 	movhi	r4,1025
 4000bf4:	2114cb04 	addi	r4,r4,21292
 4000bf8:	40047b80 	call	40047b8 <printf>
					printf("%x \n", rcode);
 4000bfc:	e0bf7b83 	ldbu	r2,-530(fp)
 4000c00:	100b883a 	mov	r5,r2
 4000c04:	01010074 	movhi	r4,1025
 4000c08:	21143c04 	addi	r4,r4,20720
 4000c0c:	40047b80 	call	40047b8 <printf>
					continue;
 4000c10:	0000f206 	br	4000fdc <main+0x7e0>
				}
				//printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
 4000c14:	e03f7415 	stw	zero,-560(fp)
 4000c18:	00005606 	br	4000d74 <main+0x578>
					//printf("%x ", keycodeOrder[i]);
					contains = 0;
 4000c1c:	e03f7305 	stb	zero,-564(fp)
					if(!kbdbuf.keycode[i]){
 4000c20:	e0ff7e44 	addi	r3,fp,-519
 4000c24:	e0bf7417 	ldw	r2,-560(fp)
 4000c28:	1885883a 	add	r2,r3,r2
 4000c2c:	10800003 	ldbu	r2,0(r2)
 4000c30:	10803fcc 	andi	r2,r2,255
 4000c34:	10004b26 	beq	r2,zero,4000d64 <main+0x568>
						continue;
					}
					for(int j = 0; j < 6; j++){
 4000c38:	e03f7515 	stw	zero,-556(fp)
 4000c3c:	00001106 	br	4000c84 <main+0x488>
						if(keycodeOrder[j] == kbdbuf.keycode[i]){
 4000c40:	e0ff7fc4 	addi	r3,fp,-513
 4000c44:	e0bf7517 	ldw	r2,-556(fp)
 4000c48:	1885883a 	add	r2,r3,r2
 4000c4c:	11000003 	ldbu	r4,0(r2)
 4000c50:	e0ff7e44 	addi	r3,fp,-519
 4000c54:	e0bf7417 	ldw	r2,-560(fp)
 4000c58:	1885883a 	add	r2,r3,r2
 4000c5c:	10800003 	ldbu	r2,0(r2)
 4000c60:	20c03fcc 	andi	r3,r4,255
 4000c64:	10803fcc 	andi	r2,r2,255
 4000c68:	1880031e 	bne	r3,r2,4000c78 <main+0x47c>
							contains = 1;
 4000c6c:	00800044 	movi	r2,1
 4000c70:	e0bf7305 	stb	r2,-564(fp)
							break;
 4000c74:	00000606 	br	4000c90 <main+0x494>
					//printf("%x ", keycodeOrder[i]);
					contains = 0;
					if(!kbdbuf.keycode[i]){
						continue;
					}
					for(int j = 0; j < 6; j++){
 4000c78:	e0bf7517 	ldw	r2,-556(fp)
 4000c7c:	10800044 	addi	r2,r2,1
 4000c80:	e0bf7515 	stw	r2,-556(fp)
 4000c84:	e0bf7517 	ldw	r2,-556(fp)
 4000c88:	10800190 	cmplti	r2,r2,6
 4000c8c:	103fec1e 	bne	r2,zero,4000c40 <__alt_data_end+0xfc000c40>
						if(keycodeOrder[j] == kbdbuf.keycode[i]){
							contains = 1;
							break;
						}
					}
					if(!contains){
 4000c90:	e0bf7303 	ldbu	r2,-564(fp)
 4000c94:	1000341e 	bne	r2,zero,4000d68 <main+0x56c>
						if(keycodeOrder[0] == 0){
 4000c98:	e0bf7fc3 	ldbu	r2,-513(fp)
 4000c9c:	10803fcc 	andi	r2,r2,255
 4000ca0:	1000061e 	bne	r2,zero,4000cbc <main+0x4c0>
							keycodeOrder[0] = kbdbuf.keycode[i];
 4000ca4:	e0ff7e44 	addi	r3,fp,-519
 4000ca8:	e0bf7417 	ldw	r2,-560(fp)
 4000cac:	1885883a 	add	r2,r3,r2
 4000cb0:	10800003 	ldbu	r2,0(r2)
 4000cb4:	e0bf7fc5 	stb	r2,-513(fp)
 4000cb8:	00002b06 	br	4000d68 <main+0x56c>
						}else if(keycodeOrder[1] == 0){
 4000cbc:	e0bf8003 	ldbu	r2,-512(fp)
 4000cc0:	10803fcc 	andi	r2,r2,255
 4000cc4:	1000061e 	bne	r2,zero,4000ce0 <main+0x4e4>
							keycodeOrder[1] = kbdbuf.keycode[i];
 4000cc8:	e0ff7e44 	addi	r3,fp,-519
 4000ccc:	e0bf7417 	ldw	r2,-560(fp)
 4000cd0:	1885883a 	add	r2,r3,r2
 4000cd4:	10800003 	ldbu	r2,0(r2)
 4000cd8:	e0bf8005 	stb	r2,-512(fp)
 4000cdc:	00002206 	br	4000d68 <main+0x56c>
						}else if(keycodeOrder[2] == 0){
 4000ce0:	e0bf8043 	ldbu	r2,-511(fp)
 4000ce4:	10803fcc 	andi	r2,r2,255
 4000ce8:	1000061e 	bne	r2,zero,4000d04 <main+0x508>
							keycodeOrder[2] = kbdbuf.keycode[i];
 4000cec:	e0ff7e44 	addi	r3,fp,-519
 4000cf0:	e0bf7417 	ldw	r2,-560(fp)
 4000cf4:	1885883a 	add	r2,r3,r2
 4000cf8:	10800003 	ldbu	r2,0(r2)
 4000cfc:	e0bf8045 	stb	r2,-511(fp)
 4000d00:	00001906 	br	4000d68 <main+0x56c>
						}else if(keycodeOrder[3] == 0){
 4000d04:	e0bf8083 	ldbu	r2,-510(fp)
 4000d08:	10803fcc 	andi	r2,r2,255
 4000d0c:	1000061e 	bne	r2,zero,4000d28 <main+0x52c>
							keycodeOrder[3] = kbdbuf.keycode[i];
 4000d10:	e0ff7e44 	addi	r3,fp,-519
 4000d14:	e0bf7417 	ldw	r2,-560(fp)
 4000d18:	1885883a 	add	r2,r3,r2
 4000d1c:	10800003 	ldbu	r2,0(r2)
 4000d20:	e0bf8085 	stb	r2,-510(fp)
 4000d24:	00001006 	br	4000d68 <main+0x56c>
						}else if(keycodeOrder[4] == 0){
 4000d28:	e0bf80c3 	ldbu	r2,-509(fp)
 4000d2c:	10803fcc 	andi	r2,r2,255
 4000d30:	1000061e 	bne	r2,zero,4000d4c <main+0x550>
							keycodeOrder[4] = kbdbuf.keycode[i];
 4000d34:	e0ff7e44 	addi	r3,fp,-519
 4000d38:	e0bf7417 	ldw	r2,-560(fp)
 4000d3c:	1885883a 	add	r2,r3,r2
 4000d40:	10800003 	ldbu	r2,0(r2)
 4000d44:	e0bf80c5 	stb	r2,-509(fp)
 4000d48:	00000706 	br	4000d68 <main+0x56c>
						}else{
							keycodeOrder[5] = kbdbuf.keycode[i];
 4000d4c:	e0ff7e44 	addi	r3,fp,-519
 4000d50:	e0bf7417 	ldw	r2,-560(fp)
 4000d54:	1885883a 	add	r2,r3,r2
 4000d58:	10800003 	ldbu	r2,0(r2)
 4000d5c:	e0bf8105 	stb	r2,-508(fp)
 4000d60:	00000106 	br	4000d68 <main+0x56c>
				//printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
					//printf("%x ", keycodeOrder[i]);
					contains = 0;
					if(!kbdbuf.keycode[i]){
						continue;
 4000d64:	0001883a 	nop
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				//printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
 4000d68:	e0bf7417 	ldw	r2,-560(fp)
 4000d6c:	10800044 	addi	r2,r2,1
 4000d70:	e0bf7415 	stw	r2,-560(fp)
 4000d74:	e0bf7417 	ldw	r2,-560(fp)
 4000d78:	10800190 	cmplti	r2,r2,6
 4000d7c:	103fa71e 	bne	r2,zero,4000c1c <__alt_data_end+0xfc000c1c>
							keycodeOrder[5] = kbdbuf.keycode[i];
						}
					}
				}

				for(int i = 0; i < 6; i++){
 4000d80:	e03f7615 	stw	zero,-552(fp)
 4000d84:	00002606 	br	4000e20 <main+0x624>
					if(keycodeOrder[i]){
 4000d88:	e0ff7fc4 	addi	r3,fp,-513
 4000d8c:	e0bf7617 	ldw	r2,-552(fp)
 4000d90:	1885883a 	add	r2,r3,r2
 4000d94:	10800003 	ldbu	r2,0(r2)
 4000d98:	10803fcc 	andi	r2,r2,255
 4000d9c:	10001d26 	beq	r2,zero,4000e14 <main+0x618>
						contains = 0;
 4000da0:	e03f7305 	stb	zero,-564(fp)
						for(int j = 0; j < 6; j++){
 4000da4:	e03f7715 	stw	zero,-548(fp)
 4000da8:	00001106 	br	4000df0 <main+0x5f4>
							if(keycodeOrder[i] == kbdbuf.keycode[j]){
 4000dac:	e0ff7fc4 	addi	r3,fp,-513
 4000db0:	e0bf7617 	ldw	r2,-552(fp)
 4000db4:	1885883a 	add	r2,r3,r2
 4000db8:	11000003 	ldbu	r4,0(r2)
 4000dbc:	e0ff7e44 	addi	r3,fp,-519
 4000dc0:	e0bf7717 	ldw	r2,-548(fp)
 4000dc4:	1885883a 	add	r2,r3,r2
 4000dc8:	10800003 	ldbu	r2,0(r2)
 4000dcc:	20c03fcc 	andi	r3,r4,255
 4000dd0:	10803fcc 	andi	r2,r2,255
 4000dd4:	1880031e 	bne	r3,r2,4000de4 <main+0x5e8>
								contains = 1;
 4000dd8:	00800044 	movi	r2,1
 4000ddc:	e0bf7305 	stb	r2,-564(fp)
								break;
 4000de0:	00000606 	br	4000dfc <main+0x600>
				}

				for(int i = 0; i < 6; i++){
					if(keycodeOrder[i]){
						contains = 0;
						for(int j = 0; j < 6; j++){
 4000de4:	e0bf7717 	ldw	r2,-548(fp)
 4000de8:	10800044 	addi	r2,r2,1
 4000dec:	e0bf7715 	stw	r2,-548(fp)
 4000df0:	e0bf7717 	ldw	r2,-548(fp)
 4000df4:	10800190 	cmplti	r2,r2,6
 4000df8:	103fec1e 	bne	r2,zero,4000dac <__alt_data_end+0xfc000dac>
							if(keycodeOrder[i] == kbdbuf.keycode[j]){
								contains = 1;
								break;
							}
						}
						if(!contains){
 4000dfc:	e0bf7303 	ldbu	r2,-564(fp)
 4000e00:	1000041e 	bne	r2,zero,4000e14 <main+0x618>
							keycodeOrder[i] = 0;
 4000e04:	e0ff7fc4 	addi	r3,fp,-513
 4000e08:	e0bf7617 	ldw	r2,-552(fp)
 4000e0c:	1885883a 	add	r2,r3,r2
 4000e10:	10000005 	stb	zero,0(r2)
							keycodeOrder[5] = kbdbuf.keycode[i];
						}
					}
				}

				for(int i = 0; i < 6; i++){
 4000e14:	e0bf7617 	ldw	r2,-552(fp)
 4000e18:	10800044 	addi	r2,r2,1
 4000e1c:	e0bf7615 	stw	r2,-552(fp)
 4000e20:	e0bf7617 	ldw	r2,-552(fp)
 4000e24:	10800190 	cmplti	r2,r2,6
 4000e28:	103fd71e 	bne	r2,zero,4000d88 <__alt_data_end+0xfc000d88>
							keycodeOrder[i] = 0;
						}
					}
				}

				setKeycode(keycodeOrder[0], 0);
 4000e2c:	e0bf7fc3 	ldbu	r2,-513(fp)
 4000e30:	10803fcc 	andi	r2,r2,255
 4000e34:	000b883a 	mov	r5,zero
 4000e38:	1009883a 	mov	r4,r2
 4000e3c:	400077c0 	call	400077c <setKeycode>
				setKeycode(keycodeOrder[1], 1);
 4000e40:	e0bf8003 	ldbu	r2,-512(fp)
 4000e44:	10803fcc 	andi	r2,r2,255
 4000e48:	01400044 	movi	r5,1
 4000e4c:	1009883a 	mov	r4,r2
 4000e50:	400077c0 	call	400077c <setKeycode>
				setKeycode(keycodeOrder[2], 2);
 4000e54:	e0bf8043 	ldbu	r2,-511(fp)
 4000e58:	10803fcc 	andi	r2,r2,255
 4000e5c:	01400084 	movi	r5,2
 4000e60:	1009883a 	mov	r4,r2
 4000e64:	400077c0 	call	400077c <setKeycode>

				/*printf("\nParam value is: %d", *(PARAMVAL));
				printf("\nParam is: %d", *(PARAM));
				printf("\n");*/

				if(param[*(PARAM)] != *(PARAMVAL)){
 4000e68:	d0a00117 	ldw	r2,-32764(gp)
 4000e6c:	10800017 	ldw	r2,0(r2)
 4000e70:	1085883a 	add	r2,r2,r2
 4000e74:	1085883a 	add	r2,r2,r2
 4000e78:	e0ff7304 	addi	r3,fp,-564
 4000e7c:	1885883a 	add	r2,r3,r2
 4000e80:	10800f04 	addi	r2,r2,60
 4000e84:	10c00017 	ldw	r3,0(r2)
 4000e88:	d0a00017 	ldw	r2,-32768(gp)
 4000e8c:	10800017 	ldw	r2,0(r2)
 4000e90:	18bf3c26 	beq	r3,r2,4000b84 <__alt_data_end+0xfc000b84>
					param[*(PARAM)] = *(PARAMVAL);
 4000e94:	d0a00117 	ldw	r2,-32764(gp)
 4000e98:	10800017 	ldw	r2,0(r2)
 4000e9c:	d0e00017 	ldw	r3,-32768(gp)
 4000ea0:	18c00017 	ldw	r3,0(r3)
 4000ea4:	1085883a 	add	r2,r2,r2
 4000ea8:	1085883a 	add	r2,r2,r2
 4000eac:	e13f7304 	addi	r4,fp,-564
 4000eb0:	2085883a 	add	r2,r4,r2
 4000eb4:	10800f04 	addi	r2,r2,60
 4000eb8:	10c00015 	stw	r3,0(r2)
					param[13] = *(PARAM);
 4000ebc:	d0a00117 	ldw	r2,-32764(gp)
 4000ec0:	10800017 	ldw	r2,0(r2)
 4000ec4:	e0bf8f15 	stw	r2,-452(fp)
					for(int i = 0; i < 13; i++){
 4000ec8:	e03f7815 	stw	zero,-544(fp)
 4000ecc:	00001406 	br	4000f20 <main+0x724>
										printf("%d) %s : %d\n", i, paramnames[i], param[i]);}
 4000ed0:	e0ff9e04 	addi	r3,fp,-392
 4000ed4:	e0bf7817 	ldw	r2,-544(fp)
 4000ed8:	108007a4 	muli	r2,r2,30
 4000edc:	1887883a 	add	r3,r3,r2
 4000ee0:	e0bf7817 	ldw	r2,-544(fp)
 4000ee4:	1085883a 	add	r2,r2,r2
 4000ee8:	1085883a 	add	r2,r2,r2
 4000eec:	e13f7304 	addi	r4,fp,-564
 4000ef0:	2085883a 	add	r2,r4,r2
 4000ef4:	10800f04 	addi	r2,r2,60
 4000ef8:	10800017 	ldw	r2,0(r2)
 4000efc:	100f883a 	mov	r7,r2
 4000f00:	180d883a 	mov	r6,r3
 4000f04:	e17f7817 	ldw	r5,-544(fp)
 4000f08:	01010074 	movhi	r4,1025
 4000f0c:	2114cd04 	addi	r4,r4,21300
 4000f10:	40047b80 	call	40047b8 <printf>
				printf("\n");*/

				if(param[*(PARAM)] != *(PARAMVAL)){
					param[*(PARAM)] = *(PARAMVAL);
					param[13] = *(PARAM);
					for(int i = 0; i < 13; i++){
 4000f14:	e0bf7817 	ldw	r2,-544(fp)
 4000f18:	10800044 	addi	r2,r2,1
 4000f1c:	e0bf7815 	stw	r2,-544(fp)
 4000f20:	e0bf7817 	ldw	r2,-544(fp)
 4000f24:	10800350 	cmplti	r2,r2,13
 4000f28:	103fe91e 	bne	r2,zero,4000ed0 <__alt_data_end+0xfc000ed0>
										printf("%d) %s : %d\n", i, paramnames[i], param[i]);}
					printf("Selecting: %d\n", param[13]);
 4000f2c:	e0bf8f17 	ldw	r2,-452(fp)
 4000f30:	100b883a 	mov	r5,r2
 4000f34:	01010074 	movhi	r4,1025
 4000f38:	2114d104 	addi	r4,r4,21316
 4000f3c:	40047b80 	call	40047b8 <printf>
 4000f40:	003f1006 	br	4000b84 <__alt_data_end+0xfc000b84>
				}
			}

			 else if (GetUsbTaskState() == USB_STATE_ERROR) {
 4000f44:	4002fbc0 	call	4002fbc <GetUsbTaskState>
 4000f48:	10803fcc 	andi	r2,r2,255
 4000f4c:	10803fd8 	cmpnei	r2,r2,255
 4000f50:	10000a1e 	bne	r2,zero,4000f7c <main+0x780>
			if (!errorflag) {
 4000f54:	e0bf7383 	ldbu	r2,-562(fp)
 4000f58:	103f0a1e 	bne	r2,zero,4000b84 <__alt_data_end+0xfc000b84>
				errorflag = 1;
 4000f5c:	00800044 	movi	r2,1
 4000f60:	e0bf7385 	stb	r2,-562(fp)
				clearLED(9);
 4000f64:	01000244 	movi	r4,9
 4000f68:	40002dc0 	call	40002dc <clearLED>
				printf("USB Error State\n");
 4000f6c:	01010074 	movhi	r4,1025
 4000f70:	2114d504 	addi	r4,r4,21332
 4000f74:	40048b40 	call	40048b4 <puts>
 4000f78:	003f0206 	br	4000b84 <__alt_data_end+0xfc000b84>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 4000f7c:	01010074 	movhi	r4,1025
 4000f80:	2114d904 	addi	r4,r4,21348
 4000f84:	40047b80 	call	40047b8 <printf>
			printf("%x\n", GetUsbTaskState());
 4000f88:	4002fbc0 	call	4002fbc <GetUsbTaskState>
 4000f8c:	10803fcc 	andi	r2,r2,255
 4000f90:	100b883a 	mov	r5,r2
 4000f94:	01010074 	movhi	r4,1025
 4000f98:	2114de04 	addi	r4,r4,21368
 4000f9c:	40047b80 	call	40047b8 <printf>
			printf("device: %d\n", device);
 4000fa0:	e0bf73c3 	ldbu	r2,-561(fp)
 4000fa4:	100b883a 	mov	r5,r2
 4000fa8:	01010074 	movhi	r4,1025
 4000fac:	2114df04 	addi	r4,r4,21372
 4000fb0:	40047b80 	call	40047b8 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 4000fb4:	e0bf7343 	ldbu	r2,-563(fp)
 4000fb8:	10000326 	beq	r2,zero,4000fc8 <main+0x7cc>
				runningdebugflag = 0;
 4000fbc:	e03f7345 	stb	zero,-563(fp)
				MAX3421E_init();
 4000fc0:	40020380 	call	4002038 <MAX3421E_init>
				USB_init();
 4000fc4:	40027d40 	call	40027d4 <USB_init>
			}
			errorflag = 0;
 4000fc8:	e03f7385 	stb	zero,-562(fp)
			clearLED(9);
 4000fcc:	01000244 	movi	r4,9
 4000fd0:	40002dc0 	call	40002dc <clearLED>
 4000fd4:	003eeb06 	br	4000b84 <__alt_data_end+0xfc000b84>
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
 4000fd8:	0001883a 	nop
			}
			errorflag = 0;
			clearLED(9);
		}
		}
	}
 4000fdc:	003ee906 	br	4000b84 <__alt_data_end+0xfc000b84>

	return 0;
}
 4000fe0:	e037883a 	mov	sp,fp
 4000fe4:	dfc00117 	ldw	ra,4(sp)
 4000fe8:	df000017 	ldw	fp,0(sp)
 4000fec:	dec00204 	addi	sp,sp,8
 4000ff0:	f800283a 	ret

04000ff4 <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 4000ff4:	defff804 	addi	sp,sp,-32
 4000ff8:	dfc00715 	stw	ra,28(sp)
 4000ffc:	df000615 	stw	fp,24(sp)
 4001000:	df000604 	addi	fp,sp,24
 4001004:	e13ffe15 	stw	r4,-8(fp)
 4001008:	2805883a 	mov	r2,r5
 400100c:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4001010:	e0bfff0b 	ldhu	r2,-4(fp)
 4001014:	1004d23a 	srli	r2,r2,8
 4001018:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 400101c:	e0bfff0b 	ldhu	r2,-4(fp)
 4001020:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 4001024:	e13ffd84 	addi	r4,fp,-10
 4001028:	e0fffd84 	addi	r3,fp,-10
 400102c:	d8000115 	stw	zero,4(sp)
 4001030:	00800084 	movi	r2,2
 4001034:	d8800015 	stw	r2,0(sp)
 4001038:	200f883a 	mov	r7,r4
 400103c:	01800084 	movi	r6,2
 4001040:	180b883a 	mov	r5,r3
 4001044:	e13ffe17 	ldw	r4,-8(fp)
 4001048:	40120640 	call	4012064 <alt_avalon_i2c_master_tx_rx>
 400104c:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 4001050:	e0bffc17 	ldw	r2,-16(fp)
 4001054:	10000626 	beq	r2,zero,4001070 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 4001058:	e0bfff0b 	ldhu	r2,-4(fp)
 400105c:	100b883a 	mov	r5,r2
 4001060:	01010074 	movhi	r4,1025
 4001064:	21154404 	addi	r4,r4,21776
 4001068:	40047b80 	call	40047b8 <printf>
		while (1)
		{
			//hang here
		}
 400106c:	003fff06 	br	400106c <__alt_data_end+0xfc00106c>
	}
	value = (buffer[0] << 8) | buffer[1];
 4001070:	e0bffd83 	ldbu	r2,-10(fp)
 4001074:	10803fcc 	andi	r2,r2,255
 4001078:	1004923a 	slli	r2,r2,8
 400107c:	1007883a 	mov	r3,r2
 4001080:	e0bffdc3 	ldbu	r2,-9(fp)
 4001084:	10803fcc 	andi	r2,r2,255
 4001088:	1884b03a 	or	r2,r3,r2
 400108c:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 4001090:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4001094:	e037883a 	mov	sp,fp
 4001098:	dfc00117 	ldw	ra,4(sp)
 400109c:	df000017 	ldw	fp,0(sp)
 40010a0:	dec00204 	addi	sp,sp,8
 40010a4:	f800283a 	ret

040010a8 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 40010a8:	defff904 	addi	sp,sp,-28
 40010ac:	dfc00615 	stw	ra,24(sp)
 40010b0:	df000515 	stw	fp,20(sp)
 40010b4:	df000504 	addi	fp,sp,20
 40010b8:	e13ffd15 	stw	r4,-12(fp)
 40010bc:	2807883a 	mov	r3,r5
 40010c0:	3005883a 	mov	r2,r6
 40010c4:	e0fffe0d 	sth	r3,-8(fp)
 40010c8:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 40010cc:	e0bffe0b 	ldhu	r2,-8(fp)
 40010d0:	1004d23a 	srli	r2,r2,8
 40010d4:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 40010d8:	e0bffe0b 	ldhu	r2,-8(fp)
 40010dc:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 40010e0:	e0bfff0b 	ldhu	r2,-4(fp)
 40010e4:	1004d23a 	srli	r2,r2,8
 40010e8:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 40010ec:	e0bfff0b 	ldhu	r2,-4(fp)
 40010f0:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 40010f4:	e0bffc04 	addi	r2,fp,-16
 40010f8:	000f883a 	mov	r7,zero
 40010fc:	01800104 	movi	r6,4
 4001100:	100b883a 	mov	r5,r2
 4001104:	e13ffd17 	ldw	r4,-12(fp)
 4001108:	4011e400 	call	4011e40 <alt_avalon_i2c_master_tx>
 400110c:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 4001110:	e0bffb17 	ldw	r2,-20(fp)
 4001114:	10000626 	beq	r2,zero,4001130 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 4001118:	e0bffe0b 	ldhu	r2,-8(fp)
 400111c:	100b883a 	mov	r5,r2
 4001120:	01010074 	movhi	r4,1025
 4001124:	21154404 	addi	r4,r4,21776
 4001128:	40047b80 	call	40047b8 <printf>
		while (1)
		{
			//hang here
		}
 400112c:	003fff06 	br	400112c <__alt_data_end+0xfc00112c>
	}
	return DATA;
 4001130:	e0bfff0b 	ldhu	r2,-4(fp)
}
 4001134:	e037883a 	mov	sp,fp
 4001138:	dfc00117 	ldw	ra,4(sp)
 400113c:	df000017 	ldw	fp,0(sp)
 4001140:	dec00204 	addi	sp,sp,8
 4001144:	f800283a 	ret

04001148 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 4001148:	defff204 	addi	sp,sp,-56
 400114c:	dfc00d15 	stw	ra,52(sp)
 4001150:	df000c15 	stw	fp,48(sp)
 4001154:	df000c04 	addi	fp,sp,48
 4001158:	2005883a 	mov	r2,r4
 400115c:	e17fff15 	stw	r5,-4(fp)
 4001160:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 4001164:	008100b4 	movhi	r2,1026
 4001168:	10a43404 	addi	r2,r2,-28464
 400116c:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 4001170:	008100b4 	movhi	r2,1026
 4001174:	10a43404 	addi	r2,r2,-28464
 4001178:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 400117c:	e0fffe03 	ldbu	r3,-8(fp)
 4001180:	008100b4 	movhi	r2,1026
 4001184:	10a43404 	addi	r2,r2,-28464
 4001188:	d8800415 	stw	r2,16(sp)
 400118c:	00800244 	movi	r2,9
 4001190:	d8800315 	stw	r2,12(sp)
 4001194:	d8000215 	stw	zero,8(sp)
 4001198:	00800084 	movi	r2,2
 400119c:	d8800115 	stw	r2,4(sp)
 40011a0:	d8000015 	stw	zero,0(sp)
 40011a4:	01c00184 	movi	r7,6
 40011a8:	01802004 	movi	r6,128
 40011ac:	000b883a 	mov	r5,zero
 40011b0:	1809883a 	mov	r4,r3
 40011b4:	40022380 	call	4002238 <XferCtrlReq>
 40011b8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 40011bc:	e0bffc03 	ldbu	r2,-16(fp)
 40011c0:	10000226 	beq	r2,zero,40011cc <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 40011c4:	0005883a 	mov	r2,zero
 40011c8:	0000dc06 	br	400153c <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 40011cc:	e0bffa17 	ldw	r2,-24(fp)
 40011d0:	1080008b 	ldhu	r2,2(r2)
 40011d4:	10bfffcc 	andi	r2,r2,65535
 40011d8:	10804070 	cmpltui	r2,r2,257
 40011dc:	1000031e 	bne	r2,zero,40011ec <HIDMProbe+0xa4>
		total_length = 256;
 40011e0:	00804004 	movi	r2,256
 40011e4:	e0bff90d 	sth	r2,-28(fp)
 40011e8:	00000306 	br	40011f8 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 40011ec:	e0bffa17 	ldw	r2,-24(fp)
 40011f0:	1080008b 	ldhu	r2,2(r2)
 40011f4:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 40011f8:	e13ffe03 	ldbu	r4,-8(fp)
 40011fc:	e0fff90b 	ldhu	r3,-28(fp)
 4001200:	008100b4 	movhi	r2,1026
 4001204:	10a43404 	addi	r2,r2,-28464
 4001208:	d8800415 	stw	r2,16(sp)
 400120c:	d8c00315 	stw	r3,12(sp)
 4001210:	d8000215 	stw	zero,8(sp)
 4001214:	00800084 	movi	r2,2
 4001218:	d8800115 	stw	r2,4(sp)
 400121c:	d8000015 	stw	zero,0(sp)
 4001220:	01c00184 	movi	r7,6
 4001224:	01802004 	movi	r6,128
 4001228:	000b883a 	mov	r5,zero
 400122c:	40022380 	call	4002238 <XferCtrlReq>
 4001230:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 4001234:	e0bffc03 	ldbu	r2,-16(fp)
 4001238:	10000226 	beq	r2,zero,4001244 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 400123c:	0005883a 	mov	r2,zero
 4001240:	0000be06 	br	400153c <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 4001244:	e0bffa17 	ldw	r2,-24(fp)
 4001248:	10800143 	ldbu	r2,5(r2)
 400124c:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 4001250:	0000b306 	br	4001520 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 4001254:	e0bffa17 	ldw	r2,-24(fp)
 4001258:	10800043 	ldbu	r2,1(r2)
 400125c:	10803fcc 	andi	r2,r2,255
 4001260:	10800120 	cmpeqi	r2,r2,4
 4001264:	1000091e 	bne	r2,zero,400128c <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4001268:	e0bffa17 	ldw	r2,-24(fp)
 400126c:	10800003 	ldbu	r2,0(r2)
 4001270:	10803fcc 	andi	r2,r2,255
 4001274:	e0fffb17 	ldw	r3,-20(fp)
 4001278:	1885883a 	add	r2,r3,r2
 400127c:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 4001280:	e0bffb17 	ldw	r2,-20(fp)
 4001284:	e0bffa15 	stw	r2,-24(fp)
 4001288:	0000a506 	br	4001520 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 400128c:	e0bffa17 	ldw	r2,-24(fp)
 4001290:	10800143 	ldbu	r2,5(r2)
 4001294:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 4001298:	e0bffa17 	ldw	r2,-24(fp)
 400129c:	10800183 	ldbu	r2,6(r2)
 40012a0:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 40012a4:	e0bffa17 	ldw	r2,-24(fp)
 40012a8:	108001c3 	ldbu	r2,7(r2)
 40012ac:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 40012b0:	e0bffc83 	ldbu	r2,-14(fp)
 40012b4:	108000d8 	cmpnei	r2,r2,3
 40012b8:	1000971e 	bne	r2,zero,4001518 <HIDMProbe+0x3d0>
 40012bc:	e0bffcc3 	ldbu	r2,-13(fp)
 40012c0:	10800058 	cmpnei	r2,r2,1
 40012c4:	1000941e 	bne	r2,zero,4001518 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 40012c8:	e0bffd03 	ldbu	r2,-12(fp)
 40012cc:	10800098 	cmpnei	r2,r2,2
 40012d0:	1000911e 	bne	r2,zero,4001518 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 40012d4:	e0fffe03 	ldbu	r3,-8(fp)
 40012d8:	008100b4 	movhi	r2,1026
 40012dc:	10a47404 	addi	r2,r2,-28208
 40012e0:	180690fa 	slli	r3,r3,3
 40012e4:	10c5883a 	add	r2,r2,r3
 40012e8:	10800104 	addi	r2,r2,4
 40012ec:	00c00084 	movi	r3,2
 40012f0:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 40012f4:	e0fffe03 	ldbu	r3,-8(fp)
 40012f8:	008100b4 	movhi	r2,1026
 40012fc:	10a47404 	addi	r2,r2,-28208
 4001300:	180690fa 	slli	r3,r3,3
 4001304:	10c5883a 	add	r2,r2,r3
 4001308:	10800017 	ldw	r2,0(r2)
 400130c:	1080008b 	ldhu	r2,2(r2)
 4001310:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 4001314:	40019580 	call	4001958 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 4001318:	e0fffe03 	ldbu	r3,-8(fp)
 400131c:	008100b4 	movhi	r2,1026
 4001320:	10a47404 	addi	r2,r2,-28208
 4001324:	180690fa 	slli	r3,r3,3
 4001328:	10c7883a 	add	r3,r2,r3
 400132c:	008100b4 	movhi	r2,1026
 4001330:	10a42004 	addi	r2,r2,-28544
 4001334:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 4001338:	e0fffe03 	ldbu	r3,-8(fp)
 400133c:	008100b4 	movhi	r2,1026
 4001340:	10a47404 	addi	r2,r2,-28208
 4001344:	180690fa 	slli	r3,r3,3
 4001348:	10c5883a 	add	r2,r2,r3
 400134c:	10800017 	ldw	r2,0(r2)
 4001350:	e0fffd43 	ldbu	r3,-11(fp)
 4001354:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 4001358:	e0bffa17 	ldw	r2,-24(fp)
 400135c:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 4001360:	d0a6f745 	stb	r2,-25635(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 4001364:	e0bffe03 	ldbu	r2,-8(fp)
 4001368:	d0a6f705 	stb	r2,-25636(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400136c:	e0bffa17 	ldw	r2,-24(fp)
 4001370:	10800003 	ldbu	r2,0(r2)
 4001374:	10803fcc 	andi	r2,r2,255
 4001378:	e0fffb17 	ldw	r3,-20(fp)
 400137c:	1885883a 	add	r2,r3,r2
 4001380:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 4001384:	e0bffb17 	ldw	r2,-20(fp)
 4001388:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 400138c:	00005b06 	br	40014fc <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 4001390:	e0bffa17 	ldw	r2,-24(fp)
 4001394:	10800043 	ldbu	r2,1(r2)
 4001398:	10803fcc 	andi	r2,r2,255
 400139c:	10800160 	cmpeqi	r2,r2,5
 40013a0:	1000091e 	bne	r2,zero,40013c8 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 40013a4:	e0bffa17 	ldw	r2,-24(fp)
 40013a8:	10800003 	ldbu	r2,0(r2)
 40013ac:	10803fcc 	andi	r2,r2,255
 40013b0:	e0fffb17 	ldw	r3,-20(fp)
 40013b4:	1885883a 	add	r2,r3,r2
 40013b8:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 40013bc:	e0bffb17 	ldw	r2,-20(fp)
 40013c0:	e0bffa15 	stw	r2,-24(fp)
 40013c4:	00004d06 	br	40014fc <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 40013c8:	e0fffe03 	ldbu	r3,-8(fp)
 40013cc:	008100b4 	movhi	r2,1026
 40013d0:	10a47404 	addi	r2,r2,-28208
 40013d4:	180690fa 	slli	r3,r3,3
 40013d8:	10c5883a 	add	r2,r2,r3
 40013dc:	10800017 	ldw	r2,0(r2)
 40013e0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 40013e4:	e0fffa17 	ldw	r3,-24(fp)
 40013e8:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 40013ec:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 40013f0:	e0fffe03 	ldbu	r3,-8(fp)
 40013f4:	008100b4 	movhi	r2,1026
 40013f8:	10a47404 	addi	r2,r2,-28208
 40013fc:	180690fa 	slli	r3,r3,3
 4001400:	10c5883a 	add	r2,r2,r3
 4001404:	10800017 	ldw	r2,0(r2)
 4001408:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 400140c:	e0fffa17 	ldw	r3,-24(fp)
 4001410:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 4001414:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4001418:	e0fffe03 	ldbu	r3,-8(fp)
 400141c:	008100b4 	movhi	r2,1026
 4001420:	10a47404 	addi	r2,r2,-28208
 4001424:	180690fa 	slli	r3,r3,3
 4001428:	10c5883a 	add	r2,r2,r3
 400142c:	10800017 	ldw	r2,0(r2)
 4001430:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 4001434:	e0fffa17 	ldw	r3,-24(fp)
 4001438:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 400143c:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4001440:	e0fffe03 	ldbu	r3,-8(fp)
 4001444:	008100b4 	movhi	r2,1026
 4001448:	10a47404 	addi	r2,r2,-28208
 400144c:	180690fa 	slli	r3,r3,3
 4001450:	10c5883a 	add	r2,r2,r3
 4001454:	10800017 	ldw	r2,0(r2)
 4001458:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 400145c:	e0fffa17 	ldw	r3,-24(fp)
 4001460:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4001464:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 4001468:	e0fffe03 	ldbu	r3,-8(fp)
 400146c:	e0bffc43 	ldbu	r2,-15(fp)
 4001470:	d8000415 	stw	zero,16(sp)
 4001474:	d8000315 	stw	zero,12(sp)
 4001478:	d8000215 	stw	zero,8(sp)
 400147c:	d8000115 	stw	zero,4(sp)
 4001480:	d8800015 	stw	r2,0(sp)
 4001484:	01c00244 	movi	r7,9
 4001488:	000d883a 	mov	r6,zero
 400148c:	000b883a 	mov	r5,zero
 4001490:	1809883a 	mov	r4,r3
 4001494:	40022380 	call	4002238 <XferCtrlReq>
 4001498:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 400149c:	e0bffc03 	ldbu	r2,-16(fp)
 40014a0:	10000226 	beq	r2,zero,40014ac <HIDMProbe+0x364>
							return (FALSE);
 40014a4:	0005883a 	mov	r2,zero
 40014a8:	00002406 	br	400153c <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 40014ac:	e0fffe03 	ldbu	r3,-8(fp)
 40014b0:	d0a6f743 	ldbu	r2,-25635(gp)
 40014b4:	10803fcc 	andi	r2,r2,255
 40014b8:	d8000415 	stw	zero,16(sp)
 40014bc:	d8000315 	stw	zero,12(sp)
 40014c0:	d8800215 	stw	r2,8(sp)
 40014c4:	d8000115 	stw	zero,4(sp)
 40014c8:	d8000015 	stw	zero,0(sp)
 40014cc:	01c002c4 	movi	r7,11
 40014d0:	01800844 	movi	r6,33
 40014d4:	000b883a 	mov	r5,zero
 40014d8:	1809883a 	mov	r4,r3
 40014dc:	40022380 	call	4002238 <XferCtrlReq>
 40014e0:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 40014e4:	e0bffc03 	ldbu	r2,-16(fp)
 40014e8:	10000226 	beq	r2,zero,40014f4 <HIDMProbe+0x3ac>
							return (FALSE);
 40014ec:	0005883a 	mov	r2,zero
 40014f0:	00001206 	br	400153c <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 40014f4:	00800044 	movi	r2,1
 40014f8:	00001006 	br	400153c <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 40014fc:	e0fff90b 	ldhu	r3,-28(fp)
 4001500:	008100b4 	movhi	r2,1026
 4001504:	10a43404 	addi	r2,r2,-28464
 4001508:	1885883a 	add	r2,r3,r2
 400150c:	e0fffb17 	ldw	r3,-20(fp)
 4001510:	18bf9f36 	bltu	r3,r2,4001390 <__alt_data_end+0xfc001390>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 4001514:	00000206 	br	4001520 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 4001518:	0005883a 	mov	r2,zero
 400151c:	00000706 	br	400153c <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 4001520:	e0fff90b 	ldhu	r3,-28(fp)
 4001524:	008100b4 	movhi	r2,1026
 4001528:	10a43404 	addi	r2,r2,-28464
 400152c:	1885883a 	add	r2,r3,r2
 4001530:	e0fffb17 	ldw	r3,-20(fp)
 4001534:	18bf4736 	bltu	r3,r2,4001254 <__alt_data_end+0xfc001254>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 4001538:	0005883a 	mov	r2,zero
}
 400153c:	e037883a 	mov	sp,fp
 4001540:	dfc00117 	ldw	ra,4(sp)
 4001544:	df000017 	ldw	fp,0(sp)
 4001548:	dec00204 	addi	sp,sp,8
 400154c:	f800283a 	ret

04001550 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 4001550:	defff204 	addi	sp,sp,-56
 4001554:	dfc00d15 	stw	ra,52(sp)
 4001558:	df000c15 	stw	fp,48(sp)
 400155c:	df000c04 	addi	fp,sp,48
 4001560:	2005883a 	mov	r2,r4
 4001564:	e17fff15 	stw	r5,-4(fp)
 4001568:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 400156c:	008100b4 	movhi	r2,1026
 4001570:	10a43404 	addi	r2,r2,-28464
 4001574:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 4001578:	008100b4 	movhi	r2,1026
 400157c:	10a43404 	addi	r2,r2,-28464
 4001580:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 4001584:	e0fffe03 	ldbu	r3,-8(fp)
 4001588:	008100b4 	movhi	r2,1026
 400158c:	10a43404 	addi	r2,r2,-28464
 4001590:	d8800415 	stw	r2,16(sp)
 4001594:	00800244 	movi	r2,9
 4001598:	d8800315 	stw	r2,12(sp)
 400159c:	d8000215 	stw	zero,8(sp)
 40015a0:	00800084 	movi	r2,2
 40015a4:	d8800115 	stw	r2,4(sp)
 40015a8:	d8000015 	stw	zero,0(sp)
 40015ac:	01c00184 	movi	r7,6
 40015b0:	01802004 	movi	r6,128
 40015b4:	000b883a 	mov	r5,zero
 40015b8:	1809883a 	mov	r4,r3
 40015bc:	40022380 	call	4002238 <XferCtrlReq>
 40015c0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 40015c4:	e0bffc03 	ldbu	r2,-16(fp)
 40015c8:	10000226 	beq	r2,zero,40015d4 <HIDKProbe+0x84>
		return (FALSE);
 40015cc:	0005883a 	mov	r2,zero
 40015d0:	0000dc06 	br	4001944 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 40015d4:	e0bffa17 	ldw	r2,-24(fp)
 40015d8:	1080008b 	ldhu	r2,2(r2)
 40015dc:	10bfffcc 	andi	r2,r2,65535
 40015e0:	10804070 	cmpltui	r2,r2,257
 40015e4:	1000031e 	bne	r2,zero,40015f4 <HIDKProbe+0xa4>
		total_length = 256;
 40015e8:	00804004 	movi	r2,256
 40015ec:	e0bff90d 	sth	r2,-28(fp)
 40015f0:	00000306 	br	4001600 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 40015f4:	e0bffa17 	ldw	r2,-24(fp)
 40015f8:	1080008b 	ldhu	r2,2(r2)
 40015fc:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 4001600:	e13ffe03 	ldbu	r4,-8(fp)
 4001604:	e0fff90b 	ldhu	r3,-28(fp)
 4001608:	008100b4 	movhi	r2,1026
 400160c:	10a43404 	addi	r2,r2,-28464
 4001610:	d8800415 	stw	r2,16(sp)
 4001614:	d8c00315 	stw	r3,12(sp)
 4001618:	d8000215 	stw	zero,8(sp)
 400161c:	00800084 	movi	r2,2
 4001620:	d8800115 	stw	r2,4(sp)
 4001624:	d8000015 	stw	zero,0(sp)
 4001628:	01c00184 	movi	r7,6
 400162c:	01802004 	movi	r6,128
 4001630:	000b883a 	mov	r5,zero
 4001634:	40022380 	call	4002238 <XferCtrlReq>
 4001638:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 400163c:	e0bffc03 	ldbu	r2,-16(fp)
 4001640:	10000226 	beq	r2,zero,400164c <HIDKProbe+0xfc>
		return (FALSE);
 4001644:	0005883a 	mov	r2,zero
 4001648:	0000be06 	br	4001944 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 400164c:	e0bffa17 	ldw	r2,-24(fp)
 4001650:	10800143 	ldbu	r2,5(r2)
 4001654:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 4001658:	0000b306 	br	4001928 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 400165c:	e0bffa17 	ldw	r2,-24(fp)
 4001660:	10800043 	ldbu	r2,1(r2)
 4001664:	10803fcc 	andi	r2,r2,255
 4001668:	10800120 	cmpeqi	r2,r2,4
 400166c:	1000091e 	bne	r2,zero,4001694 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4001670:	e0bffa17 	ldw	r2,-24(fp)
 4001674:	10800003 	ldbu	r2,0(r2)
 4001678:	10803fcc 	andi	r2,r2,255
 400167c:	e0fffb17 	ldw	r3,-20(fp)
 4001680:	1885883a 	add	r2,r3,r2
 4001684:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 4001688:	e0bffb17 	ldw	r2,-20(fp)
 400168c:	e0bffa15 	stw	r2,-24(fp)
 4001690:	0000a506 	br	4001928 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 4001694:	e0bffa17 	ldw	r2,-24(fp)
 4001698:	10800143 	ldbu	r2,5(r2)
 400169c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 40016a0:	e0bffa17 	ldw	r2,-24(fp)
 40016a4:	10800183 	ldbu	r2,6(r2)
 40016a8:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 40016ac:	e0bffa17 	ldw	r2,-24(fp)
 40016b0:	108001c3 	ldbu	r2,7(r2)
 40016b4:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 40016b8:	e0bffc83 	ldbu	r2,-14(fp)
 40016bc:	108000d8 	cmpnei	r2,r2,3
 40016c0:	1000971e 	bne	r2,zero,4001920 <HIDKProbe+0x3d0>
 40016c4:	e0bffcc3 	ldbu	r2,-13(fp)
 40016c8:	10800058 	cmpnei	r2,r2,1
 40016cc:	1000941e 	bne	r2,zero,4001920 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 40016d0:	e0bffd03 	ldbu	r2,-12(fp)
 40016d4:	10800058 	cmpnei	r2,r2,1
 40016d8:	1000911e 	bne	r2,zero,4001920 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 40016dc:	e0fffe03 	ldbu	r3,-8(fp)
 40016e0:	008100b4 	movhi	r2,1026
 40016e4:	10a47404 	addi	r2,r2,-28208
 40016e8:	180690fa 	slli	r3,r3,3
 40016ec:	10c5883a 	add	r2,r2,r3
 40016f0:	10800104 	addi	r2,r2,4
 40016f4:	00c00044 	movi	r3,1
 40016f8:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 40016fc:	e0fffe03 	ldbu	r3,-8(fp)
 4001700:	008100b4 	movhi	r2,1026
 4001704:	10a47404 	addi	r2,r2,-28208
 4001708:	180690fa 	slli	r3,r3,3
 400170c:	10c5883a 	add	r2,r2,r3
 4001710:	10800017 	ldw	r2,0(r2)
 4001714:	1080008b 	ldhu	r2,2(r2)
 4001718:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 400171c:	40019580 	call	4001958 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 4001720:	e0fffe03 	ldbu	r3,-8(fp)
 4001724:	008100b4 	movhi	r2,1026
 4001728:	10a47404 	addi	r2,r2,-28208
 400172c:	180690fa 	slli	r3,r3,3
 4001730:	10c7883a 	add	r3,r2,r3
 4001734:	008100b4 	movhi	r2,1026
 4001738:	10a42004 	addi	r2,r2,-28544
 400173c:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 4001740:	e0fffe03 	ldbu	r3,-8(fp)
 4001744:	008100b4 	movhi	r2,1026
 4001748:	10a47404 	addi	r2,r2,-28208
 400174c:	180690fa 	slli	r3,r3,3
 4001750:	10c5883a 	add	r2,r2,r3
 4001754:	10800017 	ldw	r2,0(r2)
 4001758:	e0fffd43 	ldbu	r3,-11(fp)
 400175c:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 4001760:	e0bffa17 	ldw	r2,-24(fp)
 4001764:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 4001768:	d0a6f745 	stb	r2,-25635(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 400176c:	e0bffe03 	ldbu	r2,-8(fp)
 4001770:	d0a6f705 	stb	r2,-25636(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 4001774:	e0bffa17 	ldw	r2,-24(fp)
 4001778:	10800003 	ldbu	r2,0(r2)
 400177c:	10803fcc 	andi	r2,r2,255
 4001780:	e0fffb17 	ldw	r3,-20(fp)
 4001784:	1885883a 	add	r2,r3,r2
 4001788:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 400178c:	e0bffb17 	ldw	r2,-20(fp)
 4001790:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 4001794:	00005b06 	br	4001904 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 4001798:	e0bffa17 	ldw	r2,-24(fp)
 400179c:	10800043 	ldbu	r2,1(r2)
 40017a0:	10803fcc 	andi	r2,r2,255
 40017a4:	10800160 	cmpeqi	r2,r2,5
 40017a8:	1000091e 	bne	r2,zero,40017d0 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 40017ac:	e0bffa17 	ldw	r2,-24(fp)
 40017b0:	10800003 	ldbu	r2,0(r2)
 40017b4:	10803fcc 	andi	r2,r2,255
 40017b8:	e0fffb17 	ldw	r3,-20(fp)
 40017bc:	1885883a 	add	r2,r3,r2
 40017c0:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 40017c4:	e0bffb17 	ldw	r2,-20(fp)
 40017c8:	e0bffa15 	stw	r2,-24(fp)
 40017cc:	00004d06 	br	4001904 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 40017d0:	e0fffe03 	ldbu	r3,-8(fp)
 40017d4:	008100b4 	movhi	r2,1026
 40017d8:	10a47404 	addi	r2,r2,-28208
 40017dc:	180690fa 	slli	r3,r3,3
 40017e0:	10c5883a 	add	r2,r2,r3
 40017e4:	10800017 	ldw	r2,0(r2)
 40017e8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 40017ec:	e0fffa17 	ldw	r3,-24(fp)
 40017f0:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 40017f4:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 40017f8:	e0fffe03 	ldbu	r3,-8(fp)
 40017fc:	008100b4 	movhi	r2,1026
 4001800:	10a47404 	addi	r2,r2,-28208
 4001804:	180690fa 	slli	r3,r3,3
 4001808:	10c5883a 	add	r2,r2,r3
 400180c:	10800017 	ldw	r2,0(r2)
 4001810:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 4001814:	e0fffa17 	ldw	r3,-24(fp)
 4001818:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 400181c:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4001820:	e0fffe03 	ldbu	r3,-8(fp)
 4001824:	008100b4 	movhi	r2,1026
 4001828:	10a47404 	addi	r2,r2,-28208
 400182c:	180690fa 	slli	r3,r3,3
 4001830:	10c5883a 	add	r2,r2,r3
 4001834:	10800017 	ldw	r2,0(r2)
 4001838:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 400183c:	e0fffa17 	ldw	r3,-24(fp)
 4001840:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4001844:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4001848:	e0fffe03 	ldbu	r3,-8(fp)
 400184c:	008100b4 	movhi	r2,1026
 4001850:	10a47404 	addi	r2,r2,-28208
 4001854:	180690fa 	slli	r3,r3,3
 4001858:	10c5883a 	add	r2,r2,r3
 400185c:	10800017 	ldw	r2,0(r2)
 4001860:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 4001864:	e0fffa17 	ldw	r3,-24(fp)
 4001868:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400186c:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 4001870:	e0fffe03 	ldbu	r3,-8(fp)
 4001874:	e0bffc43 	ldbu	r2,-15(fp)
 4001878:	d8000415 	stw	zero,16(sp)
 400187c:	d8000315 	stw	zero,12(sp)
 4001880:	d8000215 	stw	zero,8(sp)
 4001884:	d8000115 	stw	zero,4(sp)
 4001888:	d8800015 	stw	r2,0(sp)
 400188c:	01c00244 	movi	r7,9
 4001890:	000d883a 	mov	r6,zero
 4001894:	000b883a 	mov	r5,zero
 4001898:	1809883a 	mov	r4,r3
 400189c:	40022380 	call	4002238 <XferCtrlReq>
 40018a0:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 40018a4:	e0bffc03 	ldbu	r2,-16(fp)
 40018a8:	10000226 	beq	r2,zero,40018b4 <HIDKProbe+0x364>
							return (FALSE);
 40018ac:	0005883a 	mov	r2,zero
 40018b0:	00002406 	br	4001944 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 40018b4:	e0fffe03 	ldbu	r3,-8(fp)
 40018b8:	d0a6f743 	ldbu	r2,-25635(gp)
 40018bc:	10803fcc 	andi	r2,r2,255
 40018c0:	d8000415 	stw	zero,16(sp)
 40018c4:	d8000315 	stw	zero,12(sp)
 40018c8:	d8800215 	stw	r2,8(sp)
 40018cc:	d8000115 	stw	zero,4(sp)
 40018d0:	d8000015 	stw	zero,0(sp)
 40018d4:	01c002c4 	movi	r7,11
 40018d8:	01800844 	movi	r6,33
 40018dc:	000b883a 	mov	r5,zero
 40018e0:	1809883a 	mov	r4,r3
 40018e4:	40022380 	call	4002238 <XferCtrlReq>
 40018e8:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 40018ec:	e0bffc03 	ldbu	r2,-16(fp)
 40018f0:	10000226 	beq	r2,zero,40018fc <HIDKProbe+0x3ac>
							return (FALSE);
 40018f4:	0005883a 	mov	r2,zero
 40018f8:	00001206 	br	4001944 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 40018fc:	00800044 	movi	r2,1
 4001900:	00001006 	br	4001944 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 4001904:	e0fff90b 	ldhu	r3,-28(fp)
 4001908:	008100b4 	movhi	r2,1026
 400190c:	10a43404 	addi	r2,r2,-28464
 4001910:	1885883a 	add	r2,r3,r2
 4001914:	e0fffb17 	ldw	r3,-20(fp)
 4001918:	18bf9f36 	bltu	r3,r2,4001798 <__alt_data_end+0xfc001798>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400191c:	00000206 	br	4001928 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 4001920:	0005883a 	mov	r2,zero
 4001924:	00000706 	br	4001944 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 4001928:	e0fff90b 	ldhu	r3,-28(fp)
 400192c:	008100b4 	movhi	r2,1026
 4001930:	10a43404 	addi	r2,r2,-28464
 4001934:	1885883a 	add	r2,r3,r2
 4001938:	e0fffb17 	ldw	r3,-20(fp)
 400193c:	18bf4736 	bltu	r3,r2,400165c <__alt_data_end+0xfc00165c>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 4001940:	0005883a 	mov	r2,zero
}
 4001944:	e037883a 	mov	sp,fp
 4001948:	dfc00117 	ldw	ra,4(sp)
 400194c:	df000017 	ldw	fp,0(sp)
 4001950:	dec00204 	addi	sp,sp,8
 4001954:	f800283a 	ret

04001958 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 4001958:	deffff04 	addi	sp,sp,-4
 400195c:	df000015 	stw	fp,0(sp)
 4001960:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 4001964:	008100b4 	movhi	r2,1026
 4001968:	10a42004 	addi	r2,r2,-28544
 400196c:	00c01004 	movi	r3,64
 4001970:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 4001974:	008100b4 	movhi	r2,1026
 4001978:	10a42004 	addi	r2,r2,-28544
 400197c:	00c00404 	movi	r3,16
 4001980:	10c00385 	stb	r3,14(r2)
}
 4001984:	0001883a 	nop
 4001988:	e037883a 	mov	sp,fp
 400198c:	df000017 	ldw	fp,0(sp)
 4001990:	dec00104 	addi	sp,sp,4
 4001994:	f800283a 	ret

04001998 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 4001998:	defffb04 	addi	sp,sp,-20
 400199c:	dfc00415 	stw	ra,16(sp)
 40019a0:	df000315 	stw	fp,12(sp)
 40019a4:	df000304 	addi	fp,sp,12
 40019a8:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 40019ac:	d0a6f703 	ldbu	r2,-25636(gp)
 40019b0:	10803fcc 	andi	r2,r2,255
 40019b4:	100b883a 	mov	r5,r2
 40019b8:	01003804 	movi	r4,224
 40019bc:	4001b740 	call	4001b74 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 40019c0:	d0a6f703 	ldbu	r2,-25636(gp)
 40019c4:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 40019c8:	d0a6f703 	ldbu	r2,-25636(gp)
 40019cc:	10c03fcc 	andi	r3,r2,255
 40019d0:	008100b4 	movhi	r2,1026
 40019d4:	10a47404 	addi	r2,r2,-28208
 40019d8:	180690fa 	slli	r3,r3,3
 40019dc:	10c5883a 	add	r2,r2,r3
 40019e0:	10800017 	ldw	r2,0(r2)
 40019e4:	10800204 	addi	r2,r2,8
 40019e8:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 40019ec:	10803fcc 	andi	r2,r2,255
 40019f0:	d8800015 	stw	r2,0(sp)
 40019f4:	e1ffff17 	ldw	r7,-4(fp)
 40019f8:	01800204 	movi	r6,8
 40019fc:	01400044 	movi	r5,1
 4001a00:	40026440 	call	4002644 <XferInTransfer>
 4001a04:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 4001a08:	e0bffe03 	ldbu	r2,-8(fp)
}
 4001a0c:	e037883a 	mov	sp,fp
 4001a10:	dfc00117 	ldw	ra,4(sp)
 4001a14:	df000017 	ldw	fp,0(sp)
 4001a18:	dec00204 	addi	sp,sp,8
 4001a1c:	f800283a 	ret

04001a20 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 4001a20:	defffb04 	addi	sp,sp,-20
 4001a24:	dfc00415 	stw	ra,16(sp)
 4001a28:	df000315 	stw	fp,12(sp)
 4001a2c:	df000304 	addi	fp,sp,12
 4001a30:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 4001a34:	d0a6f703 	ldbu	r2,-25636(gp)
 4001a38:	10803fcc 	andi	r2,r2,255
 4001a3c:	100b883a 	mov	r5,r2
 4001a40:	01003804 	movi	r4,224
 4001a44:	4001b740 	call	4001b74 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4001a48:	d0a6f703 	ldbu	r2,-25636(gp)
 4001a4c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 4001a50:	d0a6f703 	ldbu	r2,-25636(gp)
 4001a54:	10c03fcc 	andi	r3,r2,255
 4001a58:	008100b4 	movhi	r2,1026
 4001a5c:	10a47404 	addi	r2,r2,-28208
 4001a60:	180690fa 	slli	r3,r3,3
 4001a64:	10c5883a 	add	r2,r2,r3
 4001a68:	10800017 	ldw	r2,0(r2)
 4001a6c:	10800204 	addi	r2,r2,8
 4001a70:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4001a74:	10803fcc 	andi	r2,r2,255
 4001a78:	d8800015 	stw	r2,0(sp)
 4001a7c:	e1ffff17 	ldw	r7,-4(fp)
 4001a80:	01800204 	movi	r6,8
 4001a84:	01400044 	movi	r5,1
 4001a88:	40026440 	call	4002644 <XferInTransfer>
 4001a8c:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 4001a90:	e0bffe03 	ldbu	r2,-8(fp)
}
 4001a94:	e037883a 	mov	sp,fp
 4001a98:	dfc00117 	ldw	ra,4(sp)
 4001a9c:	df000017 	ldw	fp,0(sp)
 4001aa0:	dec00204 	addi	sp,sp,8
 4001aa4:	f800283a 	ret

04001aa8 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 4001aa8:	defffb04 	addi	sp,sp,-20
 4001aac:	df000415 	stw	fp,16(sp)
 4001ab0:	df000404 	addi	fp,sp,16
 4001ab4:	2007883a 	mov	r3,r4
 4001ab8:	2805883a 	mov	r2,r5
 4001abc:	e1bffe15 	stw	r6,-8(fp)
 4001ac0:	e1ffff15 	stw	r7,-4(fp)
 4001ac4:	e0fffc05 	stb	r3,-16(fp)
 4001ac8:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 4001acc:	0005883a 	mov	r2,zero
}
 4001ad0:	e037883a 	mov	sp,fp
 4001ad4:	df000017 	ldw	fp,0(sp)
 4001ad8:	dec00104 	addi	sp,sp,4
 4001adc:	f800283a 	ret

04001ae0 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 4001ae0:	defffb04 	addi	sp,sp,-20
 4001ae4:	df000415 	stw	fp,16(sp)
 4001ae8:	df000404 	addi	fp,sp,16
 4001aec:	2007883a 	mov	r3,r4
 4001af0:	2805883a 	mov	r2,r5
 4001af4:	e1bffe15 	stw	r6,-8(fp)
 4001af8:	e1ffff15 	stw	r7,-4(fp)
 4001afc:	e0fffc05 	stb	r3,-16(fp)
 4001b00:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 4001b04:	0005883a 	mov	r2,zero
}
 4001b08:	e037883a 	mov	sp,fp
 4001b0c:	df000017 	ldw	fp,0(sp)
 4001b10:	dec00104 	addi	sp,sp,4
 4001b14:	f800283a 	ret

04001b18 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 4001b18:	defffc04 	addi	sp,sp,-16
 4001b1c:	df000315 	stw	fp,12(sp)
 4001b20:	df000304 	addi	fp,sp,12
 4001b24:	2807883a 	mov	r3,r5
 4001b28:	3005883a 	mov	r2,r6
 4001b2c:	e13ffd05 	stb	r4,-12(fp)
 4001b30:	e0fffe05 	stb	r3,-8(fp)
 4001b34:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 4001b38:	0001883a 	nop
 4001b3c:	e037883a 	mov	sp,fp
 4001b40:	df000017 	ldw	fp,0(sp)
 4001b44:	dec00104 	addi	sp,sp,4
 4001b48:	f800283a 	ret

04001b4c <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 4001b4c:	defffe04 	addi	sp,sp,-8
 4001b50:	df000115 	stw	fp,4(sp)
 4001b54:	df000104 	addi	fp,sp,4
 4001b58:	2005883a 	mov	r2,r4
 4001b5c:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 4001b60:	0001883a 	nop
 4001b64:	e037883a 	mov	sp,fp
 4001b68:	df000017 	ldw	fp,0(sp)
 4001b6c:	dec00104 	addi	sp,sp,4
 4001b70:	f800283a 	ret

04001b74 <MAXreg_wr>:
//writes register to MAX3421E via SPI
int SPIBase = 0x8001160;
void MAXreg_wr(BYTE reg, BYTE val) {
 4001b74:	defff804 	addi	sp,sp,-32
 4001b78:	dfc00715 	stw	ra,28(sp)
 4001b7c:	df000615 	stw	fp,24(sp)
 4001b80:	df000604 	addi	fp,sp,24
 4001b84:	2007883a 	mov	r3,r4
 4001b88:	2805883a 	mov	r2,r5
 4001b8c:	e0fffe05 	stb	r3,-8(fp)
 4001b90:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)

	BYTE Tx[2] = {reg + 2, val};
 4001b94:	e0bffe03 	ldbu	r2,-8(fp)
 4001b98:	10800084 	addi	r2,r2,2
 4001b9c:	e0bffd05 	stb	r2,-12(fp)
 4001ba0:	e0bfff03 	ldbu	r2,-4(fp)
 4001ba4:	e0bffd45 	stb	r2,-11(fp)

	if(alt_avalon_spi_command(SPIBase, 0, 2, Tx, 0, 0, 0) < 0){
 4001ba8:	d0a00317 	ldw	r2,-32756(gp)
 4001bac:	d8000215 	stw	zero,8(sp)
 4001bb0:	d8000115 	stw	zero,4(sp)
 4001bb4:	d8000015 	stw	zero,0(sp)
 4001bb8:	e1fffd04 	addi	r7,fp,-12
 4001bbc:	01800084 	movi	r6,2
 4001bc0:	000b883a 	mov	r5,zero
 4001bc4:	1009883a 	mov	r4,r2
 4001bc8:	401379c0 	call	401379c <alt_avalon_spi_command>
 4001bcc:	1000040e 	bge	r2,zero,4001be0 <MAXreg_wr+0x6c>
		printf("MAXreg_wr error");
 4001bd0:	01010074 	movhi	r4,1025
 4001bd4:	21154c04 	addi	r4,r4,21808
 4001bd8:	40047b80 	call	40047b8 <printf>
	}
	return;
 4001bdc:	0001883a 	nop
 4001be0:	0001883a 	nop
}
 4001be4:	e037883a 	mov	sp,fp
 4001be8:	dfc00117 	ldw	ra,4(sp)
 4001bec:	df000017 	ldw	fp,0(sp)
 4001bf0:	dec00204 	addi	sp,sp,8
 4001bf4:	f800283a 	ret

04001bf8 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 4001bf8:	defff604 	addi	sp,sp,-40
 4001bfc:	dfc00915 	stw	ra,36(sp)
 4001c00:	df000815 	stw	fp,32(sp)
 4001c04:	df000804 	addi	fp,sp,32
 4001c08:	2007883a 	mov	r3,r4
 4001c0c:	2805883a 	mov	r2,r5
 4001c10:	e1bfff15 	stw	r6,-4(fp)
 4001c14:	e0fffd05 	stb	r3,-12(fp)
 4001c18:	e0bffe05 	stb	r2,-8(fp)
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE *Tx = malloc(nbytes + 1);
 4001c1c:	e0bffe03 	ldbu	r2,-8(fp)
 4001c20:	10800044 	addi	r2,r2,1
 4001c24:	1009883a 	mov	r4,r2
 4001c28:	4003e0c0 	call	4003e0c <malloc>
 4001c2c:	e0bffc15 	stw	r2,-16(fp)
	Tx[0] = reg + 2;
 4001c30:	e0bffd03 	ldbu	r2,-12(fp)
 4001c34:	10800084 	addi	r2,r2,2
 4001c38:	1007883a 	mov	r3,r2
 4001c3c:	e0bffc17 	ldw	r2,-16(fp)
 4001c40:	10c00005 	stb	r3,0(r2)
	int i = 0;
 4001c44:	e03ffb15 	stw	zero,-20(fp)
	for(i = 0; i < nbytes; i++){
 4001c48:	e03ffb15 	stw	zero,-20(fp)
 4001c4c:	00000c06 	br	4001c80 <MAXbytes_wr+0x88>
		Tx[i + 1] = data[i];
 4001c50:	e0bffb17 	ldw	r2,-20(fp)
 4001c54:	10800044 	addi	r2,r2,1
 4001c58:	e0fffc17 	ldw	r3,-16(fp)
 4001c5c:	1885883a 	add	r2,r3,r2
 4001c60:	e0fffb17 	ldw	r3,-20(fp)
 4001c64:	e13fff17 	ldw	r4,-4(fp)
 4001c68:	20c7883a 	add	r3,r4,r3
 4001c6c:	18c00003 	ldbu	r3,0(r3)
 4001c70:	10c00005 	stb	r3,0(r2)
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE *Tx = malloc(nbytes + 1);
	Tx[0] = reg + 2;
	int i = 0;
	for(i = 0; i < nbytes; i++){
 4001c74:	e0bffb17 	ldw	r2,-20(fp)
 4001c78:	10800044 	addi	r2,r2,1
 4001c7c:	e0bffb15 	stw	r2,-20(fp)
 4001c80:	e0bffe03 	ldbu	r2,-8(fp)
 4001c84:	e0fffb17 	ldw	r3,-20(fp)
 4001c88:	18bff116 	blt	r3,r2,4001c50 <__alt_data_end+0xfc001c50>
		Tx[i + 1] = data[i];
	}

	if(alt_avalon_spi_command(SPIBase, 0, nbytes + 1, Tx, 0, 0, 0) < 0){
 4001c8c:	d0a00317 	ldw	r2,-32756(gp)
 4001c90:	1007883a 	mov	r3,r2
 4001c94:	e0bffe03 	ldbu	r2,-8(fp)
 4001c98:	10800044 	addi	r2,r2,1
 4001c9c:	d8000215 	stw	zero,8(sp)
 4001ca0:	d8000115 	stw	zero,4(sp)
 4001ca4:	d8000015 	stw	zero,0(sp)
 4001ca8:	e1fffc17 	ldw	r7,-16(fp)
 4001cac:	100d883a 	mov	r6,r2
 4001cb0:	000b883a 	mov	r5,zero
 4001cb4:	1809883a 	mov	r4,r3
 4001cb8:	401379c0 	call	401379c <alt_avalon_spi_command>
 4001cbc:	1000030e 	bge	r2,zero,4001ccc <MAXbytes_wr+0xd4>
		printf("MAXbytes_wr error");
 4001cc0:	01010074 	movhi	r4,1025
 4001cc4:	21155004 	addi	r4,r4,21824
 4001cc8:	40047b80 	call	40047b8 <printf>
	}

	free(Tx);
 4001ccc:	e13ffc17 	ldw	r4,-16(fp)
 4001cd0:	4003e200 	call	4003e20 <free>
	return (data + nbytes);
 4001cd4:	e0bffe03 	ldbu	r2,-8(fp)
 4001cd8:	e0ffff17 	ldw	r3,-4(fp)
 4001cdc:	1885883a 	add	r2,r3,r2
}
 4001ce0:	e037883a 	mov	sp,fp
 4001ce4:	dfc00117 	ldw	ra,4(sp)
 4001ce8:	df000017 	ldw	fp,0(sp)
 4001cec:	dec00204 	addi	sp,sp,8
 4001cf0:	f800283a 	ret

04001cf4 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 4001cf4:	defff904 	addi	sp,sp,-28
 4001cf8:	dfc00615 	stw	ra,24(sp)
 4001cfc:	df000515 	stw	fp,20(sp)
 4001d00:	df000504 	addi	fp,sp,20
 4001d04:	2005883a 	mov	r2,r4
 4001d08:	e0bfff05 	stb	r2,-4(fp)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	BYTE val;

	if(alt_avalon_spi_command(SPIBase, 0, 1, &reg, 1, &val, 0) < 0){
 4001d0c:	d0a00317 	ldw	r2,-32756(gp)
 4001d10:	1009883a 	mov	r4,r2
 4001d14:	e0ffff04 	addi	r3,fp,-4
 4001d18:	d8000215 	stw	zero,8(sp)
 4001d1c:	e0bffe04 	addi	r2,fp,-8
 4001d20:	d8800115 	stw	r2,4(sp)
 4001d24:	00800044 	movi	r2,1
 4001d28:	d8800015 	stw	r2,0(sp)
 4001d2c:	180f883a 	mov	r7,r3
 4001d30:	01800044 	movi	r6,1
 4001d34:	000b883a 	mov	r5,zero
 4001d38:	401379c0 	call	401379c <alt_avalon_spi_command>
 4001d3c:	1000030e 	bge	r2,zero,4001d4c <MAXreg_rd+0x58>
		printf("MAXreg_rd error");
 4001d40:	01010074 	movhi	r4,1025
 4001d44:	21155504 	addi	r4,r4,21844
 4001d48:	40047b80 	call	40047b8 <printf>
	}
	return val;
 4001d4c:	e0bffe03 	ldbu	r2,-8(fp)
}
 4001d50:	e037883a 	mov	sp,fp
 4001d54:	dfc00117 	ldw	ra,4(sp)
 4001d58:	df000017 	ldw	fp,0(sp)
 4001d5c:	dec00204 	addi	sp,sp,8
 4001d60:	f800283a 	ret

04001d64 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 4001d64:	defff804 	addi	sp,sp,-32
 4001d68:	dfc00715 	stw	ra,28(sp)
 4001d6c:	df000615 	stw	fp,24(sp)
 4001d70:	df000604 	addi	fp,sp,24
 4001d74:	2007883a 	mov	r3,r4
 4001d78:	2805883a 	mov	r2,r5
 4001d7c:	e1bfff15 	stw	r6,-4(fp)
 4001d80:	e0fffd05 	stb	r3,-12(fp)
 4001d84:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);

	if(alt_avalon_spi_command(SPIBase, 0, 1, &reg, nbytes, data, 0) < 0){
 4001d88:	d0a00317 	ldw	r2,-32756(gp)
 4001d8c:	1009883a 	mov	r4,r2
 4001d90:	e0bffe03 	ldbu	r2,-8(fp)
 4001d94:	d8000215 	stw	zero,8(sp)
 4001d98:	e0ffff17 	ldw	r3,-4(fp)
 4001d9c:	d8c00115 	stw	r3,4(sp)
 4001da0:	d8800015 	stw	r2,0(sp)
 4001da4:	e1fffd04 	addi	r7,fp,-12
 4001da8:	01800044 	movi	r6,1
 4001dac:	000b883a 	mov	r5,zero
 4001db0:	401379c0 	call	401379c <alt_avalon_spi_command>
 4001db4:	1000030e 	bge	r2,zero,4001dc4 <MAXbytes_rd+0x60>
		printf("MAXbytes_rd error");
 4001db8:	01010074 	movhi	r4,1025
 4001dbc:	21155904 	addi	r4,r4,21860
 4001dc0:	40047b80 	call	40047b8 <printf>
	}
	return (data + nbytes);
 4001dc4:	e0bffe03 	ldbu	r2,-8(fp)
 4001dc8:	e0ffff17 	ldw	r3,-4(fp)
 4001dcc:	1885883a 	add	r2,r3,r2
}
 4001dd0:	e037883a 	mov	sp,fp
 4001dd4:	dfc00117 	ldw	ra,4(sp)
 4001dd8:	df000017 	ldw	fp,0(sp)
 4001ddc:	dec00204 	addi	sp,sp,8
 4001de0:	f800283a 	ret

04001de4 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 4001de4:	defffd04 	addi	sp,sp,-12
 4001de8:	dfc00215 	stw	ra,8(sp)
 4001dec:	df000115 	stw	fp,4(sp)
 4001df0:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 4001df4:	0007883a 	mov	r3,zero
 4001df8:	00820034 	movhi	r2,2048
 4001dfc:	10848404 	addi	r2,r2,4624
 4001e00:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 4001e04:	010003f4 	movhi	r4,15
 4001e08:	21109004 	addi	r4,r4,16960
 4001e0c:	4010ef00 	call	4010ef0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 4001e10:	00c00044 	movi	r3,1
 4001e14:	00820034 	movhi	r2,2048
 4001e18:	10848404 	addi	r2,r2,4624
 4001e1c:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 4001e20:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 4001e24:	01400804 	movi	r5,32
 4001e28:	01001e04 	movi	r4,120
 4001e2c:	4001b740 	call	4001b74 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 4001e30:	000b883a 	mov	r5,zero
 4001e34:	01001e04 	movi	r4,120
 4001e38:	4001b740 	call	4001b74 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 4001e3c:	00000806 	br	4001e60 <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
 4001e40:	e0bfff03 	ldbu	r2,-4(fp)
 4001e44:	10800044 	addi	r2,r2,1
 4001e48:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 4001e4c:	e0bfff03 	ldbu	r2,-4(fp)
 4001e50:	1000031e 	bne	r2,zero,4001e60 <MAX3421E_reset+0x7c>
			printf("reset timeout!");
 4001e54:	01010074 	movhi	r4,1025
 4001e58:	21155e04 	addi	r4,r4,21880
 4001e5c:	40047b80 	call	40047b8 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 4001e60:	01001a04 	movi	r4,104
 4001e64:	4001cf40 	call	4001cf4 <MAXreg_rd>
 4001e68:	10803fcc 	andi	r2,r2,255
 4001e6c:	1080004c 	andi	r2,r2,1
 4001e70:	103ff326 	beq	r2,zero,4001e40 <__alt_data_end+0xfc001e40>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 4001e74:	0001883a 	nop
 4001e78:	e037883a 	mov	sp,fp
 4001e7c:	dfc00117 	ldw	ra,4(sp)
 4001e80:	df000017 	ldw	fp,0(sp)
 4001e84:	dec00204 	addi	sp,sp,8
 4001e88:	f800283a 	ret

04001e8c <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 4001e8c:	defffe04 	addi	sp,sp,-8
 4001e90:	df000115 	stw	fp,4(sp)
 4001e94:	df000104 	addi	fp,sp,4
 4001e98:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 4001e9c:	00800044 	movi	r2,1
}
 4001ea0:	e037883a 	mov	sp,fp
 4001ea4:	df000017 	ldw	fp,0(sp)
 4001ea8:	dec00104 	addi	sp,sp,4
 4001eac:	f800283a 	ret

04001eb0 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 4001eb0:	defffd04 	addi	sp,sp,-12
 4001eb4:	dfc00215 	stw	ra,8(sp)
 4001eb8:	df000115 	stw	fp,4(sp)
 4001ebc:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 4001ec0:	01003e04 	movi	r4,248
 4001ec4:	4001cf40 	call	4001cf4 <MAXreg_rd>
 4001ec8:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 4001ecc:	e0ffff03 	ldbu	r3,-4(fp)
 4001ed0:	00bff004 	movi	r2,-64
 4001ed4:	1884703a 	and	r2,r3,r2
 4001ed8:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 4001edc:	e0bfff03 	ldbu	r2,-4(fp)
 4001ee0:	10c01020 	cmpeqi	r3,r2,64
 4001ee4:	1800221e 	bne	r3,zero,4001f70 <MAX_busprobe+0xc0>
 4001ee8:	10c01048 	cmpgei	r3,r2,65
 4001eec:	1800021e 	bne	r3,zero,4001ef8 <MAX_busprobe+0x48>
 4001ef0:	10003b26 	beq	r2,zero,4001fe0 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4001ef4:	00004a06 	br	4002020 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 4001ef8:	10c02020 	cmpeqi	r3,r2,128
 4001efc:	1800031e 	bne	r3,zero,4001f0c <MAX_busprobe+0x5c>
 4001f00:	10803020 	cmpeqi	r2,r2,192
 4001f04:	1000331e 	bne	r2,zero,4001fd4 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4001f08:	00004506 	br	4002020 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 4001f0c:	d0a00603 	ldbu	r2,-32744(gp)
 4001f10:	10803fcc 	andi	r2,r2,255
 4001f14:	108004e0 	cmpeqi	r2,r2,19
 4001f18:	10003e1e 	bne	r2,zero,4002014 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 4001f1c:	01003604 	movi	r4,216
 4001f20:	4001cf40 	call	4001cf4 <MAXreg_rd>
 4001f24:	10803fcc 	andi	r2,r2,255
 4001f28:	1080008c 	andi	r2,r2,2
 4001f2c:	1000071e 	bne	r2,zero,4001f4c <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 4001f30:	01403244 	movi	r5,201
 4001f34:	01003604 	movi	r4,216
 4001f38:	4001b740 	call	4001b74 <MAXreg_wr>
				printf("Starting in full speed\n");
 4001f3c:	01010074 	movhi	r4,1025
 4001f40:	21156204 	addi	r4,r4,21896
 4001f44:	40048b40 	call	40048b4 <puts>
 4001f48:	00000606 	br	4001f64 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 4001f4c:	014032c4 	movi	r5,203
 4001f50:	01003604 	movi	r4,216
 4001f54:	4001b740 	call	4001b74 <MAXreg_wr>
				printf("Starting in low speed\n");
 4001f58:	01010074 	movhi	r4,1025
 4001f5c:	21156804 	addi	r4,r4,21920
 4001f60:	40048b40 	call	40048b4 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 4001f64:	00800404 	movi	r2,16
 4001f68:	d0a00605 	stb	r2,-32744(gp)
		}
		break;
 4001f6c:	00002906 	br	4002014 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 4001f70:	d0a00603 	ldbu	r2,-32744(gp)
 4001f74:	10803fcc 	andi	r2,r2,255
 4001f78:	108004e0 	cmpeqi	r2,r2,19
 4001f7c:	1000271e 	bne	r2,zero,400201c <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 4001f80:	01003604 	movi	r4,216
 4001f84:	4001cf40 	call	4001cf4 <MAXreg_rd>
 4001f88:	10803fcc 	andi	r2,r2,255
 4001f8c:	1080008c 	andi	r2,r2,2
 4001f90:	1000071e 	bne	r2,zero,4001fb0 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 4001f94:	014032c4 	movi	r5,203
 4001f98:	01003604 	movi	r4,216
 4001f9c:	4001b740 	call	4001b74 <MAXreg_wr>
				printf("Starting in low speed\n");
 4001fa0:	01010074 	movhi	r4,1025
 4001fa4:	21156804 	addi	r4,r4,21920
 4001fa8:	40048b40 	call	40048b4 <puts>
 4001fac:	00000606 	br	4001fc8 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 4001fb0:	01403244 	movi	r5,201
 4001fb4:	01003604 	movi	r4,216
 4001fb8:	4001b740 	call	4001b74 <MAXreg_wr>
				printf("Starting in full speed\n");
 4001fbc:	01010074 	movhi	r4,1025
 4001fc0:	21156204 	addi	r4,r4,21896
 4001fc4:	40048b40 	call	40048b4 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 4001fc8:	00800404 	movi	r2,16
 4001fcc:	d0a00605 	stb	r2,-32744(gp)
		}
		break;
 4001fd0:	00001206 	br	400201c <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 4001fd4:	00800104 	movi	r2,4
 4001fd8:	d0a00605 	stb	r2,-32744(gp)
		break;
 4001fdc:	00001006 	br	4002020 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 4001fe0:	d0a00603 	ldbu	r2,-32744(gp)
 4001fe4:	10803fcc 	andi	r2,r2,255
 4001fe8:	10803c0c 	andi	r2,r2,240
 4001fec:	10000326 	beq	r2,zero,4001ffc <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 4001ff0:	00800044 	movi	r2,1
 4001ff4:	d0a00605 	stb	r2,-32744(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 4001ff8:	00000906 	br	4002020 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 4001ffc:	01403244 	movi	r5,201
 4002000:	01003604 	movi	r4,216
 4002004:	4001b740 	call	4001b74 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 4002008:	008000c4 	movi	r2,3
 400200c:	d0a00605 	stb	r2,-32744(gp)
		}
		break;
 4002010:	00000306 	br	4002020 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 4002014:	0001883a 	nop
 4002018:	00000106 	br	4002020 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 400201c:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4002020:	0001883a 	nop
 4002024:	e037883a 	mov	sp,fp
 4002028:	dfc00117 	ldw	ra,4(sp)
 400202c:	df000017 	ldw	fp,0(sp)
 4002030:	dec00204 	addi	sp,sp,8
 4002034:	f800283a 	ret

04002038 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 4002038:	defffe04 	addi	sp,sp,-8
 400203c:	dfc00115 	stw	ra,4(sp)
 4002040:	df000015 	stw	fp,0(sp)
 4002044:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 4002048:	01400684 	movi	r5,26
 400204c:	01002204 	movi	r4,136
 4002050:	4001b740 	call	4001b74 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 4002054:	4001de40 	call	4001de4 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 4002058:	0009883a 	mov	r4,zero
 400205c:	4001e8c0 	call	4001e8c <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 4002060:	01402004 	movi	r5,128
 4002064:	01002e04 	movi	r4,184
 4002068:	4001b740 	call	4001b74 <MAXreg_wr>
	Vbus_power( ON);
 400206c:	01000044 	movi	r4,1
 4002070:	4001e8c0 	call	4001e8c <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 4002074:	01403444 	movi	r5,209
 4002078:	01003604 	movi	r4,216
 400207c:	4001b740 	call	4001b74 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 4002080:	01400804 	movi	r5,32
 4002084:	01003404 	movi	r4,208
 4002088:	4001b740 	call	4001b74 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 400208c:	01400104 	movi	r5,4
 4002090:	01003a04 	movi	r4,232
 4002094:	4001b740 	call	4001b74 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 4002098:	4001eb00 	call	4001eb0 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 400209c:	01400804 	movi	r5,32
 40020a0:	01003204 	movi	r4,200
 40020a4:	4001b740 	call	4001b74 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 40020a8:	01400044 	movi	r5,1
 40020ac:	01002004 	movi	r4,128
 40020b0:	4001b740 	call	4001b74 <MAXreg_wr>
}
 40020b4:	0001883a 	nop
 40020b8:	e037883a 	mov	sp,fp
 40020bc:	dfc00117 	ldw	ra,4(sp)
 40020c0:	df000017 	ldw	fp,0(sp)
 40020c4:	dec00204 	addi	sp,sp,8
 40020c8:	f800283a 	ret

040020cc <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 40020cc:	defffe04 	addi	sp,sp,-8
 40020d0:	dfc00115 	stw	ra,4(sp)
 40020d4:	df000015 	stw	fp,0(sp)
 40020d8:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 40020dc:	00820034 	movhi	r2,2048
 40020e0:	10848c04 	addi	r2,r2,4656
 40020e4:	10800037 	ldwio	r2,0(r2)
 40020e8:	1000041e 	bne	r2,zero,40020fc <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
 40020ec:	01010074 	movhi	r4,1025
 40020f0:	21156e04 	addi	r4,r4,21944
 40020f4:	40047b80 	call	40047b8 <printf>
		MaxIntHandler();
 40020f8:	40021380 	call	4002138 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 40020fc:	00820034 	movhi	r2,2048
 4002100:	10848804 	addi	r2,r2,4640
 4002104:	10800037 	ldwio	r2,0(r2)
 4002108:	10800058 	cmpnei	r2,r2,1
 400210c:	1000041e 	bne	r2,zero,4002120 <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
 4002110:	01010074 	movhi	r4,1025
 4002114:	21157204 	addi	r4,r4,21960
 4002118:	40047b80 	call	40047b8 <printf>
		MaxGpxHandler();
 400211c:	40022040 	call	4002204 <MaxGpxHandler>
	}
}
 4002120:	0001883a 	nop
 4002124:	e037883a 	mov	sp,fp
 4002128:	dfc00117 	ldw	ra,4(sp)
 400212c:	df000017 	ldw	fp,0(sp)
 4002130:	dec00204 	addi	sp,sp,8
 4002134:	f800283a 	ret

04002138 <MaxIntHandler>:

void MaxIntHandler(void) {
 4002138:	defffd04 	addi	sp,sp,-12
 400213c:	dfc00215 	stw	ra,8(sp)
 4002140:	df000115 	stw	fp,4(sp)
 4002144:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 4002148:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 400214c:	01003204 	movi	r4,200
 4002150:	4001cf40 	call	4001cf4 <MAXreg_rd>
 4002154:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 4002158:	e0bfff43 	ldbu	r2,-3(fp)
 400215c:	100b883a 	mov	r5,r2
 4002160:	01010074 	movhi	r4,1025
 4002164:	21157604 	addi	r4,r4,21976
 4002168:	40047b80 	call	40047b8 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 400216c:	e0bfff43 	ldbu	r2,-3(fp)
 4002170:	1080100c 	andi	r2,r2,64
 4002174:	10000326 	beq	r2,zero,4002184 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 4002178:	e0bfff03 	ldbu	r2,-4(fp)
 400217c:	10801014 	ori	r2,r2,64
 4002180:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 4002184:	e0bfff43 	ldbu	r2,-3(fp)
 4002188:	1080080c 	andi	r2,r2,32
 400218c:	10000426 	beq	r2,zero,40021a0 <MaxIntHandler+0x68>
		MAX_busprobe();
 4002190:	4001eb00 	call	4001eb0 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 4002194:	e0bfff03 	ldbu	r2,-4(fp)
 4002198:	10800814 	ori	r2,r2,32
 400219c:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 40021a0:	e0bfff43 	ldbu	r2,-3(fp)
 40021a4:	1080020c 	andi	r2,r2,8
 40021a8:	10000326 	beq	r2,zero,40021b8 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 40021ac:	000b883a 	mov	r5,zero
 40021b0:	01000e04 	movi	r4,56
 40021b4:	4001b740 	call	4001b74 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 40021b8:	e0bfff43 	ldbu	r2,-3(fp)
 40021bc:	1080004c 	andi	r2,r2,1
 40021c0:	10000626 	beq	r2,zero,40021dc <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 40021c4:	d0a00603 	ldbu	r2,-32744(gp)
 40021c8:	10800044 	addi	r2,r2,1
 40021cc:	d0a00605 	stb	r2,-32744(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 40021d0:	e0bfff03 	ldbu	r2,-4(fp)
 40021d4:	10800054 	ori	r2,r2,1
 40021d8:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 40021dc:	e0bfff03 	ldbu	r2,-4(fp)
 40021e0:	100b883a 	mov	r5,r2
 40021e4:	01003204 	movi	r4,200
 40021e8:	4001b740 	call	4001b74 <MAXreg_wr>
}
 40021ec:	0001883a 	nop
 40021f0:	e037883a 	mov	sp,fp
 40021f4:	dfc00117 	ldw	ra,4(sp)
 40021f8:	df000017 	ldw	fp,0(sp)
 40021fc:	dec00204 	addi	sp,sp,8
 4002200:	f800283a 	ret

04002204 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 4002204:	defffd04 	addi	sp,sp,-12
 4002208:	dfc00215 	stw	ra,8(sp)
 400220c:	df000115 	stw	fp,4(sp)
 4002210:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 4002214:	01002c04 	movi	r4,176
 4002218:	4001cf40 	call	4001cf4 <MAXreg_rd>
 400221c:	e0bfff05 	stb	r2,-4(fp)
}
 4002220:	0001883a 	nop
 4002224:	e037883a 	mov	sp,fp
 4002228:	dfc00117 	ldw	ra,4(sp)
 400222c:	df000017 	ldw	fp,0(sp)
 4002230:	dec00204 	addi	sp,sp,8
 4002234:	f800283a 	ret

04002238 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 4002238:	defff104 	addi	sp,sp,-60
 400223c:	dfc00e15 	stw	ra,56(sp)
 4002240:	df000d15 	stw	fp,52(sp)
 4002244:	df000d04 	addi	fp,sp,52
 4002248:	2015883a 	mov	r10,r4
 400224c:	2813883a 	mov	r9,r5
 4002250:	3011883a 	mov	r8,r6
 4002254:	380d883a 	mov	r6,r7
 4002258:	e1400217 	ldw	r5,8(fp)
 400225c:	e1000317 	ldw	r4,12(fp)
 4002260:	e0c00417 	ldw	r3,16(fp)
 4002264:	e0800517 	ldw	r2,20(fp)
 4002268:	e2bff805 	stb	r10,-32(fp)
 400226c:	e27ff905 	stb	r9,-28(fp)
 4002270:	e23ffa05 	stb	r8,-24(fp)
 4002274:	e1bffb05 	stb	r6,-20(fp)
 4002278:	e17ffc05 	stb	r5,-16(fp)
 400227c:	e13ffd05 	stb	r4,-12(fp)
 4002280:	e0fffe0d 	sth	r3,-8(fp)
 4002284:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 4002288:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 400228c:	00800044 	movi	r2,1
 4002290:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 4002294:	e0800617 	ldw	r2,24(fp)
 4002298:	1000011e 	bne	r2,zero,40022a0 <XferCtrlReq+0x68>
        datastage = 0;
 400229c:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 40022a0:	e0bff803 	ldbu	r2,-32(fp)
 40022a4:	100b883a 	mov	r5,r2
 40022a8:	01003804 	movi	r4,224
 40022ac:	4001b740 	call	4001b74 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 40022b0:	e0bffa03 	ldbu	r2,-24(fp)
 40022b4:	10803fcc 	andi	r2,r2,255
 40022b8:	1080201c 	xori	r2,r2,128
 40022bc:	10bfe004 	addi	r2,r2,-128
 40022c0:	1000020e 	bge	r2,zero,40022cc <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 40022c4:	00800044 	movi	r2,1
 40022c8:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 40022cc:	e0bffa03 	ldbu	r2,-24(fp)
 40022d0:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 40022d4:	e0bffb03 	ldbu	r2,-20(fp)
 40022d8:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 40022dc:	e0bffc03 	ldbu	r2,-16(fp)
 40022e0:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 40022e4:	e0bffd03 	ldbu	r2,-12(fp)
 40022e8:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 40022ec:	e0bffe0b 	ldhu	r2,-8(fp)
 40022f0:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 40022f4:	e0bfff0b 	ldhu	r2,-4(fp)
 40022f8:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 40022fc:	e0bff584 	addi	r2,fp,-42
 4002300:	100d883a 	mov	r6,r2
 4002304:	01400204 	movi	r5,8
 4002308:	01000804 	movi	r4,32
 400230c:	4001bf80 	call	4001bf8 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 4002310:	e0bff903 	ldbu	r2,-28(fp)
 4002314:	100b883a 	mov	r5,r2
 4002318:	01000404 	movi	r4,16
 400231c:	40024e00 	call	40024e0 <XferDispatchPkt>
 4002320:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 4002324:	e0bff543 	ldbu	r2,-43(fp)
 4002328:	10000226 	beq	r2,zero,4002334 <XferCtrlReq+0xfc>
        return( rcode );
 400232c:	e0bff543 	ldbu	r2,-43(fp)
 4002330:	00000f06 	br	4002370 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 4002334:	e0bff503 	ldbu	r2,-44(fp)
 4002338:	1085883a 	add	r2,r2,r2
 400233c:	1087883a 	add	r3,r2,r2
 4002340:	d0a00404 	addi	r2,gp,-32752
 4002344:	1885883a 	add	r2,r3,r2
 4002348:	10800017 	ldw	r2,0(r2)
 400234c:	e13ff803 	ldbu	r4,-32(fp)
 4002350:	e17ff903 	ldbu	r5,-28(fp)
 4002354:	e1bfff0b 	ldhu	r6,-4(fp)
 4002358:	e0fff417 	ldw	r3,-48(fp)
 400235c:	d8c00015 	stw	r3,0(sp)
 4002360:	e1c00617 	ldw	r7,24(fp)
 4002364:	103ee83a 	callr	r2
 4002368:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 400236c:	e0bff543 	ldbu	r2,-43(fp)
}
 4002370:	e037883a 	mov	sp,fp
 4002374:	dfc00117 	ldw	ra,4(sp)
 4002378:	df000017 	ldw	fp,0(sp)
 400237c:	dec00204 	addi	sp,sp,8
 4002380:	f800283a 	ret

04002384 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 4002384:	defff804 	addi	sp,sp,-32
 4002388:	dfc00715 	stw	ra,28(sp)
 400238c:	df000615 	stw	fp,24(sp)
 4002390:	df000604 	addi	fp,sp,24
 4002394:	2807883a 	mov	r3,r5
 4002398:	3005883a 	mov	r2,r6
 400239c:	e1ffff15 	stw	r7,-4(fp)
 40023a0:	e13ffc05 	stb	r4,-16(fp)
 40023a4:	e0fffd05 	stb	r3,-12(fp)
 40023a8:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 40023ac:	e0800217 	ldw	r2,8(fp)
 40023b0:	10002826 	beq	r2,zero,4002454 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 40023b4:	e0fffc03 	ldbu	r3,-16(fp)
 40023b8:	008100b4 	movhi	r2,1026
 40023bc:	10a47404 	addi	r2,r2,-28208
 40023c0:	180690fa 	slli	r3,r3,3
 40023c4:	10c5883a 	add	r2,r2,r3
 40023c8:	10c00017 	ldw	r3,0(r2)
 40023cc:	e0bffd03 	ldbu	r2,-12(fp)
 40023d0:	100490fa 	slli	r2,r2,3
 40023d4:	1885883a 	add	r2,r3,r2
 40023d8:	00c00804 	movi	r3,32
 40023dc:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 40023e0:	e13ffc03 	ldbu	r4,-16(fp)
 40023e4:	e17ffd03 	ldbu	r5,-12(fp)
 40023e8:	e1bffe0b 	ldhu	r6,-8(fp)
 40023ec:	e0fffc03 	ldbu	r3,-16(fp)
 40023f0:	008100b4 	movhi	r2,1026
 40023f4:	10a47404 	addi	r2,r2,-28208
 40023f8:	180690fa 	slli	r3,r3,3
 40023fc:	10c5883a 	add	r2,r2,r3
 4002400:	10c00017 	ldw	r3,0(r2)
 4002404:	e0bffd03 	ldbu	r2,-12(fp)
 4002408:	100490fa 	slli	r2,r2,3
 400240c:	1885883a 	add	r2,r3,r2
 4002410:	1080008b 	ldhu	r2,2(r2)
 4002414:	10803fcc 	andi	r2,r2,255
 4002418:	d8800015 	stw	r2,0(sp)
 400241c:	e1ffff17 	ldw	r7,-4(fp)
 4002420:	40026440 	call	4002644 <XferInTransfer>
 4002424:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 4002428:	e0bffb03 	ldbu	r2,-20(fp)
 400242c:	10000226 	beq	r2,zero,4002438 <XferCtrlData+0xb4>
        return( rcode );
 4002430:	e0bffb03 	ldbu	r2,-20(fp)
 4002434:	00000806 	br	4002458 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 4002438:	e0bffd03 	ldbu	r2,-12(fp)
 400243c:	100b883a 	mov	r5,r2
 4002440:	01002804 	movi	r4,160
 4002444:	40024e00 	call	40024e0 <XferDispatchPkt>
 4002448:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 400244c:	e0bffb03 	ldbu	r2,-20(fp)
 4002450:	00000106 	br	4002458 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 4002454:	00bfffc4 	movi	r2,-1
    }
}
 4002458:	e037883a 	mov	sp,fp
 400245c:	dfc00117 	ldw	ra,4(sp)
 4002460:	df000017 	ldw	fp,0(sp)
 4002464:	dec00204 	addi	sp,sp,8
 4002468:	f800283a 	ret

0400246c <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 400246c:	defff904 	addi	sp,sp,-28
 4002470:	dfc00615 	stw	ra,24(sp)
 4002474:	df000515 	stw	fp,20(sp)
 4002478:	df000504 	addi	fp,sp,20
 400247c:	2807883a 	mov	r3,r5
 4002480:	3005883a 	mov	r2,r6
 4002484:	e1ffff15 	stw	r7,-4(fp)
 4002488:	e13ffc05 	stb	r4,-16(fp)
 400248c:	e0fffd05 	stb	r3,-12(fp)
 4002490:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 4002494:	e0800217 	ldw	r2,8(fp)
 4002498:	10000626 	beq	r2,zero,40024b4 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 400249c:	e0bffd03 	ldbu	r2,-12(fp)
 40024a0:	100b883a 	mov	r5,r2
 40024a4:	01002804 	movi	r4,160
 40024a8:	40024e00 	call	40024e0 <XferDispatchPkt>
 40024ac:	e0bffb05 	stb	r2,-20(fp)
 40024b0:	00000506 	br	40024c8 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 40024b4:	e0bffd03 	ldbu	r2,-12(fp)
 40024b8:	100b883a 	mov	r5,r2
 40024bc:	01002004 	movi	r4,128
 40024c0:	40024e00 	call	40024e0 <XferDispatchPkt>
 40024c4:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 40024c8:	e0bffb03 	ldbu	r2,-20(fp)
}
 40024cc:	e037883a 	mov	sp,fp
 40024d0:	dfc00117 	ldw	ra,4(sp)
 40024d4:	df000017 	ldw	fp,0(sp)
 40024d8:	dec00204 	addi	sp,sp,8
 40024dc:	f800283a 	ret

040024e0 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 40024e0:	defff904 	addi	sp,sp,-28
 40024e4:	dfc00615 	stw	ra,24(sp)
 40024e8:	df000515 	stw	fp,20(sp)
 40024ec:	df000504 	addi	fp,sp,20
 40024f0:	2007883a 	mov	r3,r4
 40024f4:	2805883a 	mov	r2,r5
 40024f8:	e0fffe05 	stb	r3,-8(fp)
 40024fc:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4002500:	d0a70817 	ldw	r2,-25568(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 4002504:	1080fa24 	muli	r2,r2,1000
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4002508:	d0e70717 	ldw	r3,-25572(gp)
 400250c:	180b883a 	mov	r5,r3
 4002510:	1009883a 	mov	r4,r2
 4002514:	40031f00 	call	40031f0 <__udivsi3>
 4002518:	1084e204 	addi	r2,r2,5000
 400251c:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 4002520:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 4002524:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 4002528:	e0fffe03 	ldbu	r3,-8(fp)
 400252c:	e0bfff03 	ldbu	r2,-4(fp)
 4002530:	1884b03a 	or	r2,r3,r2
 4002534:	10803fcc 	andi	r2,r2,255
 4002538:	100b883a 	mov	r5,r2
 400253c:	01003c04 	movi	r4,240
 4002540:	4001b740 	call	4001b74 <MAXreg_wr>
        rcode = 0xff;
 4002544:	00bfffc4 	movi	r2,-1
 4002548:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 400254c:	00000d06 	br	4002584 <XferDispatchPkt+0xa4>
            tmpdata = MAXreg_rd( rHIRQ );
 4002550:	01003204 	movi	r4,200
 4002554:	4001cf40 	call	4001cf4 <MAXreg_rd>
 4002558:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 400255c:	e0bffd03 	ldbu	r2,-12(fp)
 4002560:	10803fcc 	andi	r2,r2,255
 4002564:	1080201c 	xori	r2,r2,128
 4002568:	10bfe004 	addi	r2,r2,-128
 400256c:	1000050e 	bge	r2,zero,4002584 <XferDispatchPkt+0xa4>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 4002570:	01402004 	movi	r5,128
 4002574:	01003204 	movi	r4,200
 4002578:	4001b740 	call	4001b74 <MAXreg_wr>
                rcode = 0x00;
 400257c:	e03ffb05 	stb	zero,-20(fp)
                break;
 4002580:	00000906 	br	40025a8 <XferDispatchPkt+0xc8>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4002584:	d0a70817 	ldw	r2,-25568(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 4002588:	1080fa24 	muli	r2,r2,1000
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400258c:	d0e70717 	ldw	r3,-25572(gp)
 4002590:	180b883a 	mov	r5,r3
 4002594:	1009883a 	mov	r4,r2
 4002598:	40031f00 	call	40031f0 <__udivsi3>
 400259c:	1007883a 	mov	r3,r2
 40025a0:	e0bffc17 	ldw	r2,-16(fp)
 40025a4:	18bfea36 	bltu	r3,r2,4002550 <__alt_data_end+0xfc002550>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 40025a8:	e0bffb03 	ldbu	r2,-20(fp)
 40025ac:	10000226 	beq	r2,zero,40025b8 <XferDispatchPkt+0xd8>
            return( rcode );
 40025b0:	e0bffb03 	ldbu	r2,-20(fp)
 40025b4:	00001e06 	br	4002630 <XferDispatchPkt+0x150>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 40025b8:	01003e04 	movi	r4,248
 40025bc:	4001cf40 	call	4001cf4 <MAXreg_rd>
 40025c0:	108003cc 	andi	r2,r2,15
 40025c4:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 40025c8:	e0bffb03 	ldbu	r2,-20(fp)
 40025cc:	10800118 	cmpnei	r2,r2,4
 40025d0:	1000071e 	bne	r2,zero,40025f0 <XferDispatchPkt+0x110>
            nak_count++;
 40025d4:	e0bffb83 	ldbu	r2,-18(fp)
 40025d8:	10800044 	addi	r2,r2,1
 40025dc:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 40025e0:	e0bffb83 	ldbu	r2,-18(fp)
 40025e4:	10803218 	cmpnei	r2,r2,200
 40025e8:	10000b1e 	bne	r2,zero,4002618 <XferDispatchPkt+0x138>
                break;
 40025ec:	00000f06 	br	400262c <XferDispatchPkt+0x14c>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 40025f0:	e0bffb03 	ldbu	r2,-20(fp)
 40025f4:	10800398 	cmpnei	r2,r2,14
 40025f8:	1000091e 	bne	r2,zero,4002620 <XferDispatchPkt+0x140>
            retry_count++;
 40025fc:	e0bffb43 	ldbu	r2,-19(fp)
 4002600:	10800044 	addi	r2,r2,1
 4002604:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 4002608:	e0bffb47 	ldb	r2,-19(fp)
 400260c:	108000d8 	cmpnei	r2,r2,3
 4002610:	10000526 	beq	r2,zero,4002628 <XferDispatchPkt+0x148>
                break;
            }
            else {
                continue;
 4002614:	00000106 	br	400261c <XferDispatchPkt+0x13c>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 4002618:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 400261c:	003fc206 	br	4002528 <__alt_data_end+0xfc002528>
            }
            else {
                continue;
            }
        }
        else break;
 4002620:	0001883a 	nop
 4002624:	00000106 	br	400262c <XferDispatchPkt+0x14c>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 4002628:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 400262c:	e0bffb03 	ldbu	r2,-20(fp)
}
 4002630:	e037883a 	mov	sp,fp
 4002634:	dfc00117 	ldw	ra,4(sp)
 4002638:	df000017 	ldw	fp,0(sp)
 400263c:	dec00204 	addi	sp,sp,8
 4002640:	f800283a 	ret

04002644 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 4002644:	defff804 	addi	sp,sp,-32
 4002648:	dfc00715 	stw	ra,28(sp)
 400264c:	df000615 	stw	fp,24(sp)
 4002650:	df000604 	addi	fp,sp,24
 4002654:	2011883a 	mov	r8,r4
 4002658:	2809883a 	mov	r4,r5
 400265c:	3007883a 	mov	r3,r6
 4002660:	e1fffe15 	stw	r7,-8(fp)
 4002664:	e0800217 	ldw	r2,8(fp)
 4002668:	e23ffb05 	stb	r8,-20(fp)
 400266c:	e13ffc05 	stb	r4,-16(fp)
 4002670:	e0fffd0d 	sth	r3,-12(fp)
 4002674:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 4002678:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 400267c:	e0fffb03 	ldbu	r3,-20(fp)
 4002680:	008100b4 	movhi	r2,1026
 4002684:	10a47404 	addi	r2,r2,-28208
 4002688:	180690fa 	slli	r3,r3,3
 400268c:	10c5883a 	add	r2,r2,r3
 4002690:	10c00017 	ldw	r3,0(r2)
 4002694:	e0bffc03 	ldbu	r2,-16(fp)
 4002698:	100490fa 	slli	r2,r2,3
 400269c:	1885883a 	add	r2,r3,r2
 40026a0:	10800183 	ldbu	r2,6(r2)
 40026a4:	10803fcc 	andi	r2,r2,255
 40026a8:	100b883a 	mov	r5,r2
 40026ac:	01003a04 	movi	r4,232
 40026b0:	4001b740 	call	4001b74 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 40026b4:	e0bffc03 	ldbu	r2,-16(fp)
 40026b8:	100b883a 	mov	r5,r2
 40026bc:	0009883a 	mov	r4,zero
 40026c0:	40024e00 	call	40024e0 <XferDispatchPkt>
 40026c4:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 40026c8:	e0bffa83 	ldbu	r2,-22(fp)
 40026cc:	10000226 	beq	r2,zero,40026d8 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 40026d0:	e0bffa83 	ldbu	r2,-22(fp)
 40026d4:	00003a06 	br	40027c0 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 40026d8:	01003204 	movi	r4,200
 40026dc:	4001cf40 	call	4001cf4 <MAXreg_rd>
 40026e0:	10803fcc 	andi	r2,r2,255
 40026e4:	1080010c 	andi	r2,r2,4
 40026e8:	1000021e 	bne	r2,zero,40026f4 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 40026ec:	00bffc04 	movi	r2,-16
 40026f0:	00003306 	br	40027c0 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 40026f4:	01000c04 	movi	r4,48
 40026f8:	4001cf40 	call	4001cf4 <MAXreg_rd>
 40026fc:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 4002700:	e0bffac3 	ldbu	r2,-21(fp)
 4002704:	e1bffe17 	ldw	r6,-8(fp)
 4002708:	100b883a 	mov	r5,r2
 400270c:	01000204 	movi	r4,8
 4002710:	4001d640 	call	4001d64 <MAXbytes_rd>
 4002714:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 4002718:	01400104 	movi	r5,4
 400271c:	01003204 	movi	r4,200
 4002720:	4001b740 	call	4001b74 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 4002724:	e0fffac3 	ldbu	r3,-21(fp)
 4002728:	e0bffa0b 	ldhu	r2,-24(fp)
 400272c:	1885883a 	add	r2,r3,r2
 4002730:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 4002734:	e0fffac3 	ldbu	r3,-21(fp)
 4002738:	e0bfff03 	ldbu	r2,-4(fp)
 400273c:	18800336 	bltu	r3,r2,400274c <XferInTransfer+0x108>
 4002740:	e0fffa0b 	ldhu	r3,-24(fp)
 4002744:	e0bffd0b 	ldhu	r2,-12(fp)
 4002748:	18bfda36 	bltu	r3,r2,40026b4 <__alt_data_end+0xfc0026b4>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 400274c:	01003e04 	movi	r4,248
 4002750:	4001cf40 	call	4001cf4 <MAXreg_rd>
 4002754:	10803fcc 	andi	r2,r2,255
 4002758:	1080040c 	andi	r2,r2,16
 400275c:	10000c26 	beq	r2,zero,4002790 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 4002760:	e0fffb03 	ldbu	r3,-20(fp)
 4002764:	008100b4 	movhi	r2,1026
 4002768:	10a47404 	addi	r2,r2,-28208
 400276c:	180690fa 	slli	r3,r3,3
 4002770:	10c5883a 	add	r2,r2,r3
 4002774:	10c00017 	ldw	r3,0(r2)
 4002778:	e0bffc03 	ldbu	r2,-16(fp)
 400277c:	100490fa 	slli	r2,r2,3
 4002780:	1885883a 	add	r2,r3,r2
 4002784:	00c00804 	movi	r3,32
 4002788:	10c00185 	stb	r3,6(r2)
 400278c:	00000b06 	br	40027bc <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 4002790:	e0fffb03 	ldbu	r3,-20(fp)
 4002794:	008100b4 	movhi	r2,1026
 4002798:	10a47404 	addi	r2,r2,-28208
 400279c:	180690fa 	slli	r3,r3,3
 40027a0:	10c5883a 	add	r2,r2,r3
 40027a4:	10c00017 	ldw	r3,0(r2)
 40027a8:	e0bffc03 	ldbu	r2,-16(fp)
 40027ac:	100490fa 	slli	r2,r2,3
 40027b0:	1885883a 	add	r2,r3,r2
 40027b4:	00c00404 	movi	r3,16
 40027b8:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 40027bc:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 40027c0:	e037883a 	mov	sp,fp
 40027c4:	dfc00117 	ldw	ra,4(sp)
 40027c8:	df000017 	ldw	fp,0(sp)
 40027cc:	dec00204 	addi	sp,sp,8
 40027d0:	f800283a 	ret

040027d4 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 40027d4:	defffe04 	addi	sp,sp,-8
 40027d8:	df000115 	stw	fp,4(sp)
 40027dc:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 40027e0:	e03fff05 	stb	zero,-4(fp)
 40027e4:	00001006 	br	4002828 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 40027e8:	e0ffff03 	ldbu	r3,-4(fp)
 40027ec:	008100b4 	movhi	r2,1026
 40027f0:	10a47404 	addi	r2,r2,-28208
 40027f4:	180690fa 	slli	r3,r3,3
 40027f8:	10c5883a 	add	r2,r2,r3
 40027fc:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 4002800:	e0ffff03 	ldbu	r3,-4(fp)
 4002804:	008100b4 	movhi	r2,1026
 4002808:	10a47404 	addi	r2,r2,-28208
 400280c:	180690fa 	slli	r3,r3,3
 4002810:	10c5883a 	add	r2,r2,r3
 4002814:	10800104 	addi	r2,r2,4
 4002818:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 400281c:	e0bfff03 	ldbu	r2,-4(fp)
 4002820:	10800044 	addi	r2,r2,1
 4002824:	e0bfff05 	stb	r2,-4(fp)
 4002828:	e0bfff03 	ldbu	r2,-4(fp)
 400282c:	10800270 	cmpltui	r2,r2,9
 4002830:	103fed1e 	bne	r2,zero,40027e8 <__alt_data_end+0xfc0027e8>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 4002834:	008100b4 	movhi	r2,1026
 4002838:	10a47404 	addi	r2,r2,-28208
 400283c:	d0e6f804 	addi	r3,gp,-25632
 4002840:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 4002844:	d026f88d 	sth	zero,-25630(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 4002848:	00801004 	movi	r2,64
 400284c:	d0a6f945 	stb	r2,-25627(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 4002850:	00800404 	movi	r2,16
 4002854:	d0a6f985 	stb	r2,-25626(gp)
}
 4002858:	0001883a 	nop
 400285c:	e037883a 	mov	sp,fp
 4002860:	df000017 	ldw	fp,0(sp)
 4002864:	dec00104 	addi	sp,sp,4
 4002868:	f800283a 	ret

0400286c <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 400286c:	deffb204 	addi	sp,sp,-312
 4002870:	dfc04d15 	stw	ra,308(sp)
 4002874:	df004c15 	stw	fp,304(sp)
 4002878:	dc004b15 	stw	r16,300(sp)
 400287c:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 4002880:	d0a00603 	ldbu	r2,-32744(gp)
 4002884:	10803fcc 	andi	r2,r2,255
 4002888:	10803c0c 	andi	r2,r2,240
 400288c:	10c00820 	cmpeqi	r3,r2,32
 4002890:	18010c1e 	bne	r3,zero,4002cc4 <USB_Task+0x458>
 4002894:	10c00848 	cmpgei	r3,r2,33
 4002898:	1800041e 	bne	r3,zero,40028ac <USB_Task+0x40>
 400289c:	10000a26 	beq	r2,zero,40028c8 <USB_Task+0x5c>
 40028a0:	10800420 	cmpeqi	r2,r2,16
 40028a4:	10001b1e 	bne	r2,zero,4002914 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 40028a8:	00017206 	br	4002e74 <USB_Task+0x608>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 40028ac:	10c01020 	cmpeqi	r3,r2,64
 40028b0:	1801671e 	bne	r3,zero,4002e50 <USB_Task+0x5e4>
 40028b4:	10c03fe0 	cmpeqi	r3,r2,255
 40028b8:	1801671e 	bne	r3,zero,4002e58 <USB_Task+0x5ec>
 40028bc:	10800c20 	cmpeqi	r2,r2,48
 40028c0:	10013e1e 	bne	r2,zero,4002dbc <USB_Task+0x550>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 40028c4:	00016b06 	br	4002e74 <USB_Task+0x608>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 40028c8:	d0a00603 	ldbu	r2,-32744(gp)
 40028cc:	10803fcc 	andi	r2,r2,255
 40028d0:	10c000e0 	cmpeqi	r3,r2,3
 40028d4:	1800091e 	bne	r3,zero,40028fc <USB_Task+0x90>
 40028d8:	10c00120 	cmpeqi	r3,r2,4
 40028dc:	18000b1e 	bne	r3,zero,400290c <USB_Task+0xa0>
 40028e0:	10800060 	cmpeqi	r2,r2,1
 40028e4:	1000011e 	bne	r2,zero,40028ec <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 40028e8:	00016206 	br	4002e74 <USB_Task+0x608>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 40028ec:	40027d40 	call	40027d4 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 40028f0:	008000c4 	movi	r2,3
 40028f4:	d0a00605 	stb	r2,-32744(gp)
                    break;
 40028f8:	00000506 	br	4002910 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 40028fc:	01400104 	movi	r5,4
 4002900:	01003a04 	movi	r4,232
 4002904:	4001b740 	call	4001b74 <MAXreg_wr>
                    break;
 4002908:	00000106 	br	4002910 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 400290c:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 4002910:	00015806 	br	4002e74 <USB_Task+0x608>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 4002914:	d0a00603 	ldbu	r2,-32744(gp)
 4002918:	10803fcc 	andi	r2,r2,255
 400291c:	10bffc04 	addi	r2,r2,-16
 4002920:	10c001a8 	cmpgeui	r3,r2,6
 4002924:	18014e1e 	bne	r3,zero,4002e60 <USB_Task+0x5f4>
 4002928:	100690ba 	slli	r3,r2,2
 400292c:	00810034 	movhi	r2,1024
 4002930:	108a5004 	addi	r2,r2,10560
 4002934:	1885883a 	add	r2,r3,r2
 4002938:	10800017 	ldw	r2,0(r2)
 400293c:	1000683a 	jmp	r2
 4002940:	04002958 	cmpnei	r16,zero,165
 4002944:	04002984 	movi	r16,166
 4002948:	040029b4 	movhi	r16,166
 400294c:	040029d8 	cmpnei	r16,zero,167
 4002950:	04002a18 	cmpnei	r16,zero,168
 4002954:	04002a2c 	andhi	r16,zero,168
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4002958:	d0a70817 	ldw	r2,-25568(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 400295c:	1080fa24 	muli	r2,r2,1000
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4002960:	d0e70717 	ldw	r3,-25572(gp)
 4002964:	180b883a 	mov	r5,r3
 4002968:	1009883a 	mov	r4,r2
 400296c:	40031f00 	call	40031f0 <__udivsi3>
 4002970:	10803204 	addi	r2,r2,200
 4002974:	d0a6fb15 	stw	r2,-25620(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 4002978:	00800444 	movi	r2,17
 400297c:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_STATE_ATTACHED )
 4002980:	0000cf06 	br	4002cc0 <USB_Task+0x454>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4002984:	d0a70817 	ldw	r2,-25568(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 4002988:	1080fa24 	muli	r2,r2,1000
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400298c:	d0e70717 	ldw	r3,-25572(gp)
 4002990:	180b883a 	mov	r5,r3
 4002994:	1009883a 	mov	r4,r2
 4002998:	40031f00 	call	40031f0 <__udivsi3>
 400299c:	1007883a 	mov	r3,r2
 40029a0:	d0a6fb17 	ldw	r2,-25620(gp)
 40029a4:	10c0c32e 	bgeu	r2,r3,4002cb4 <USB_Task+0x448>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 40029a8:	00800484 	movi	r2,18
 40029ac:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 40029b0:	0000c006 	br	4002cb4 <USB_Task+0x448>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 40029b4:	01400044 	movi	r5,1
 40029b8:	01003204 	movi	r4,200
 40029bc:	4001b740 	call	4001b74 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 40029c0:	01400044 	movi	r5,1
 40029c4:	01003a04 	movi	r4,232
 40029c8:	4001b740 	call	4001b74 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 40029cc:	008004c4 	movi	r2,19
 40029d0:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 40029d4:	0000ba06 	br	4002cc0 <USB_Task+0x454>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 40029d8:	01003a04 	movi	r4,232
 40029dc:	4001cf40 	call	4001cf4 <MAXreg_rd>
 40029e0:	10803fcc 	andi	r2,r2,255
 40029e4:	1080004c 	andi	r2,r2,1
 40029e8:	1000b41e 	bne	r2,zero,4002cbc <USB_Task+0x450>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 40029ec:	01003604 	movi	r4,216
 40029f0:	4001cf40 	call	4001cf4 <MAXreg_rd>
 40029f4:	10800214 	ori	r2,r2,8
 40029f8:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 40029fc:	e0bfb943 	ldbu	r2,-283(fp)
 4002a00:	100b883a 	mov	r5,r2
 4002a04:	01003604 	movi	r4,216
 4002a08:	4001b740 	call	4001b74 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 4002a0c:	00800504 	movi	r2,20
 4002a10:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 4002a14:	0000a906 	br	4002cbc <USB_Task+0x450>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 4002a18:	01003204 	movi	r4,200
 4002a1c:	4001cf40 	call	4001cf4 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 4002a20:	00800544 	movi	r2,21
 4002a24:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 4002a28:	0000a506 	br	4002cc0 <USB_Task+0x454>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 4002a2c:	008100b4 	movhi	r2,1026
 4002a30:	10a47404 	addi	r2,r2,-28208
 4002a34:	10800017 	ldw	r2,0(r2)
 4002a38:	00c00204 	movi	r3,8
 4002a3c:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 4002a40:	e0bfba04 	addi	r2,fp,-280
 4002a44:	d8800415 	stw	r2,16(sp)
 4002a48:	00800204 	movi	r2,8
 4002a4c:	d8800315 	stw	r2,12(sp)
 4002a50:	d8000215 	stw	zero,8(sp)
 4002a54:	00800044 	movi	r2,1
 4002a58:	d8800115 	stw	r2,4(sp)
 4002a5c:	d8000015 	stw	zero,0(sp)
 4002a60:	01c00184 	movi	r7,6
 4002a64:	01802004 	movi	r6,128
 4002a68:	000b883a 	mov	r5,zero
 4002a6c:	0009883a 	mov	r4,zero
 4002a70:	40022380 	call	4002238 <XferCtrlReq>
 4002a74:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 4002a78:	e0bfb983 	ldbu	r2,-282(fp)
 4002a7c:	1000861e 	bne	r2,zero,4002c98 <USB_Task+0x42c>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 4002a80:	008100b4 	movhi	r2,1026
 4002a84:	10a47404 	addi	r2,r2,-28208
 4002a88:	10800017 	ldw	r2,0(r2)
 4002a8c:	e0ffbbc3 	ldbu	r3,-273(fp)
 4002a90:	18c03fcc 	andi	r3,r3,255
 4002a94:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 4002a98:	e0bfba03 	ldbu	r2,-280(fp)
 4002a9c:	10803fcc 	andi	r2,r2,255
 4002aa0:	e0ffba04 	addi	r3,fp,-280
 4002aa4:	d8c00415 	stw	r3,16(sp)
 4002aa8:	d8800315 	stw	r2,12(sp)
 4002aac:	d8000215 	stw	zero,8(sp)
 4002ab0:	00800044 	movi	r2,1
 4002ab4:	d8800115 	stw	r2,4(sp)
 4002ab8:	d8000015 	stw	zero,0(sp)
 4002abc:	01c00184 	movi	r7,6
 4002ac0:	01802004 	movi	r6,128
 4002ac4:	000b883a 	mov	r5,zero
 4002ac8:	0009883a 	mov	r4,zero
 4002acc:	40022380 	call	4002238 <XferCtrlReq>
 4002ad0:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 4002ad4:	e0bfbd83 	ldbu	r2,-266(fp)
 4002ad8:	10803fcc 	andi	r2,r2,255
 4002adc:	10003426 	beq	r2,zero,4002bb0 <USB_Task+0x344>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 4002ae0:	e0bfbd83 	ldbu	r2,-266(fp)
 4002ae4:	10803fcc 	andi	r2,r2,255
 4002ae8:	e0ffbe84 	addi	r3,fp,-262
 4002aec:	d8c00415 	stw	r3,16(sp)
 4002af0:	00c00084 	movi	r3,2
 4002af4:	d8c00315 	stw	r3,12(sp)
 4002af8:	00c10244 	movi	r3,1033
 4002afc:	d8c00215 	stw	r3,8(sp)
 4002b00:	00c000c4 	movi	r3,3
 4002b04:	d8c00115 	stw	r3,4(sp)
 4002b08:	d8800015 	stw	r2,0(sp)
 4002b0c:	01c00184 	movi	r7,6
 4002b10:	01802004 	movi	r6,128
 4002b14:	000b883a 	mov	r5,zero
 4002b18:	0009883a 	mov	r4,zero
 4002b1c:	40022380 	call	4002238 <XferCtrlReq>
 4002b20:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 4002b24:	e0bfbd83 	ldbu	r2,-266(fp)
 4002b28:	10803fcc 	andi	r2,r2,255
 4002b2c:	e0ffbe83 	ldbu	r3,-262(fp)
 4002b30:	18c03fcc 	andi	r3,r3,255
 4002b34:	e13fbe84 	addi	r4,fp,-262
 4002b38:	d9000415 	stw	r4,16(sp)
 4002b3c:	d8c00315 	stw	r3,12(sp)
 4002b40:	00c10244 	movi	r3,1033
 4002b44:	d8c00215 	stw	r3,8(sp)
 4002b48:	00c000c4 	movi	r3,3
 4002b4c:	d8c00115 	stw	r3,4(sp)
 4002b50:	d8800015 	stw	r2,0(sp)
 4002b54:	01c00184 	movi	r7,6
 4002b58:	01802004 	movi	r6,128
 4002b5c:	000b883a 	mov	r5,zero
 4002b60:	0009883a 	mov	r4,zero
 4002b64:	40022380 	call	4002238 <XferCtrlReq>
 4002b68:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 4002b6c:	e0bfbd83 	ldbu	r2,-266(fp)
 4002b70:	14003fcc 	andi	r16,r2,255
 4002b74:	e0bfbe83 	ldbu	r2,-262(fp)
 4002b78:	10803fcc 	andi	r2,r2,255
 4002b7c:	1004d07a 	srli	r2,r2,1
 4002b80:	10bfffc4 	addi	r2,r2,-1
 4002b84:	10c03fcc 	andi	r3,r2,255
 4002b88:	e0bfbe84 	addi	r2,fp,-262
 4002b8c:	10800084 	addi	r2,r2,2
 4002b90:	180b883a 	mov	r5,r3
 4002b94:	1009883a 	mov	r4,r2
 4002b98:	40030140 	call	4003014 <ConvUTF8ToStr>
 4002b9c:	100d883a 	mov	r6,r2
 4002ba0:	800b883a 	mov	r5,r16
 4002ba4:	01010074 	movhi	r4,1025
 4002ba8:	21157904 	addi	r4,r4,21988
 4002bac:	40047b80 	call	40047b8 <printf>
                		}
                		if (buf.iProduct != 0)
 4002bb0:	e0bfbdc3 	ldbu	r2,-265(fp)
 4002bb4:	10803fcc 	andi	r2,r2,255
 4002bb8:	10003426 	beq	r2,zero,4002c8c <USB_Task+0x420>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 4002bbc:	e0bfbdc3 	ldbu	r2,-265(fp)
 4002bc0:	10803fcc 	andi	r2,r2,255
 4002bc4:	e0ffbe84 	addi	r3,fp,-262
 4002bc8:	d8c00415 	stw	r3,16(sp)
 4002bcc:	00c00084 	movi	r3,2
 4002bd0:	d8c00315 	stw	r3,12(sp)
 4002bd4:	00c10244 	movi	r3,1033
 4002bd8:	d8c00215 	stw	r3,8(sp)
 4002bdc:	00c000c4 	movi	r3,3
 4002be0:	d8c00115 	stw	r3,4(sp)
 4002be4:	d8800015 	stw	r2,0(sp)
 4002be8:	01c00184 	movi	r7,6
 4002bec:	01802004 	movi	r6,128
 4002bf0:	000b883a 	mov	r5,zero
 4002bf4:	0009883a 	mov	r4,zero
 4002bf8:	40022380 	call	4002238 <XferCtrlReq>
 4002bfc:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 4002c00:	e0bfbdc3 	ldbu	r2,-265(fp)
 4002c04:	10803fcc 	andi	r2,r2,255
 4002c08:	e0ffbe83 	ldbu	r3,-262(fp)
 4002c0c:	18c03fcc 	andi	r3,r3,255
 4002c10:	e13fbe84 	addi	r4,fp,-262
 4002c14:	d9000415 	stw	r4,16(sp)
 4002c18:	d8c00315 	stw	r3,12(sp)
 4002c1c:	00c10244 	movi	r3,1033
 4002c20:	d8c00215 	stw	r3,8(sp)
 4002c24:	00c000c4 	movi	r3,3
 4002c28:	d8c00115 	stw	r3,4(sp)
 4002c2c:	d8800015 	stw	r2,0(sp)
 4002c30:	01c00184 	movi	r7,6
 4002c34:	01802004 	movi	r6,128
 4002c38:	000b883a 	mov	r5,zero
 4002c3c:	0009883a 	mov	r4,zero
 4002c40:	40022380 	call	4002238 <XferCtrlReq>
 4002c44:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 4002c48:	e0bfbdc3 	ldbu	r2,-265(fp)
 4002c4c:	14003fcc 	andi	r16,r2,255
 4002c50:	e0bfbe83 	ldbu	r2,-262(fp)
 4002c54:	10803fcc 	andi	r2,r2,255
 4002c58:	1004d07a 	srli	r2,r2,1
 4002c5c:	10bfffc4 	addi	r2,r2,-1
 4002c60:	10c03fcc 	andi	r3,r2,255
 4002c64:	e0bfbe84 	addi	r2,fp,-262
 4002c68:	10800084 	addi	r2,r2,2
 4002c6c:	180b883a 	mov	r5,r3
 4002c70:	1009883a 	mov	r4,r2
 4002c74:	40030140 	call	4003014 <ConvUTF8ToStr>
 4002c78:	100d883a 	mov	r6,r2
 4002c7c:	800b883a 	mov	r5,r16
 4002c80:	01010074 	movhi	r4,1025
 4002c84:	21157f04 	addi	r4,r4,22012
 4002c88:	40047b80 	call	40047b8 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 4002c8c:	00800804 	movi	r2,32
 4002c90:	d0a00605 	stb	r2,-32744(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 4002c94:	00000a06 	br	4002cc0 <USB_Task+0x454>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 4002c98:	e0bfb983 	ldbu	r2,-282(fp)
 4002c9c:	d0a6fc45 	stb	r2,-25615(gp)
                        last_usb_task_state = usb_task_state;
 4002ca0:	d0a00603 	ldbu	r2,-32744(gp)
 4002ca4:	d0a6fa05 	stb	r2,-25624(gp)
                        usb_task_state = USB_STATE_ERROR;
 4002ca8:	00bfffc4 	movi	r2,-1
 4002cac:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 4002cb0:	00000306 	br	4002cc0 <USB_Task+0x454>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 4002cb4:	0001883a 	nop
 4002cb8:	00006906 	br	4002e60 <USB_Task+0x5f4>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 4002cbc:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 4002cc0:	00006706 	br	4002e60 <USB_Task+0x5f4>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 4002cc4:	00800044 	movi	r2,1
 4002cc8:	e0bfb905 	stb	r2,-284(fp)
 4002ccc:	00002d06 	br	4002d84 <USB_Task+0x518>
                if( devtable[ i ].epinfo == NULL ) {
 4002cd0:	e0ffb903 	ldbu	r3,-284(fp)
 4002cd4:	008100b4 	movhi	r2,1026
 4002cd8:	10a47404 	addi	r2,r2,-28208
 4002cdc:	180690fa 	slli	r3,r3,3
 4002ce0:	10c5883a 	add	r2,r2,r3
 4002ce4:	10800017 	ldw	r2,0(r2)
 4002ce8:	1000231e 	bne	r2,zero,4002d78 <USB_Task+0x50c>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 4002cec:	e13fb903 	ldbu	r4,-284(fp)
 4002cf0:	008100b4 	movhi	r2,1026
 4002cf4:	10a47404 	addi	r2,r2,-28208
 4002cf8:	10c00017 	ldw	r3,0(r2)
 4002cfc:	008100b4 	movhi	r2,1026
 4002d00:	10a47404 	addi	r2,r2,-28208
 4002d04:	200890fa 	slli	r4,r4,3
 4002d08:	1105883a 	add	r2,r2,r4
 4002d0c:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 4002d10:	e0bfb903 	ldbu	r2,-284(fp)
 4002d14:	d8000415 	stw	zero,16(sp)
 4002d18:	d8000315 	stw	zero,12(sp)
 4002d1c:	d8000215 	stw	zero,8(sp)
 4002d20:	d8000115 	stw	zero,4(sp)
 4002d24:	d8800015 	stw	r2,0(sp)
 4002d28:	01c00144 	movi	r7,5
 4002d2c:	000d883a 	mov	r6,zero
 4002d30:	000b883a 	mov	r5,zero
 4002d34:	0009883a 	mov	r4,zero
 4002d38:	40022380 	call	4002238 <XferCtrlReq>
 4002d3c:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 4002d40:	e0bfb983 	ldbu	r2,-282(fp)
 4002d44:	1000051e 	bne	r2,zero,4002d5c <USB_Task+0x4f0>
                        tmp_addr = i;
 4002d48:	e0bfb903 	ldbu	r2,-284(fp)
 4002d4c:	d0a6fc05 	stb	r2,-25616(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 4002d50:	00800c04 	movi	r2,48
 4002d54:	d0a00605 	stb	r2,-32744(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 4002d58:	00000d06 	br	4002d90 <USB_Task+0x524>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 4002d5c:	e0bfb983 	ldbu	r2,-282(fp)
 4002d60:	d0a6fc45 	stb	r2,-25615(gp)
                        last_usb_task_state = usb_task_state;
 4002d64:	d0a00603 	ldbu	r2,-32744(gp)
 4002d68:	d0a6fa05 	stb	r2,-25624(gp)
                        usb_task_state = USB_STATE_ERROR;
 4002d6c:	00bfffc4 	movi	r2,-1
 4002d70:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 4002d74:	00000606 	br	4002d90 <USB_Task+0x524>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 4002d78:	e0bfb903 	ldbu	r2,-284(fp)
 4002d7c:	10800044 	addi	r2,r2,1
 4002d80:	e0bfb905 	stb	r2,-284(fp)
 4002d84:	e0bfb903 	ldbu	r2,-284(fp)
 4002d88:	10800230 	cmpltui	r2,r2,8
 4002d8c:	103fd01e 	bne	r2,zero,4002cd0 <__alt_data_end+0xfc002cd0>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 4002d90:	d0a00603 	ldbu	r2,-32744(gp)
 4002d94:	10803fcc 	andi	r2,r2,255
 4002d98:	10800818 	cmpnei	r2,r2,32
 4002d9c:	1000321e 	bne	r2,zero,4002e68 <USB_Task+0x5fc>
                usb_error = 0xfe;
 4002da0:	00bfff84 	movi	r2,-2
 4002da4:	d0a6fc45 	stb	r2,-25615(gp)
                last_usb_task_state = usb_task_state;
 4002da8:	d0a00603 	ldbu	r2,-32744(gp)
 4002dac:	d0a6fa05 	stb	r2,-25624(gp)
                usb_task_state = USB_STATE_ERROR;
 4002db0:	00bfffc4 	movi	r2,-1
 4002db4:	d0a00605 	stb	r2,-32744(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 4002db8:	00002b06 	br	4002e68 <USB_Task+0x5fc>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 4002dbc:	e03fb905 	stb	zero,-284(fp)
 4002dc0:	00001506 	br	4002e18 <USB_Task+0x5ac>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 4002dc4:	e0ffb903 	ldbu	r3,-284(fp)
 4002dc8:	00810074 	movhi	r2,1025
 4002dcc:	10965004 	addi	r2,r2,22848
 4002dd0:	18c00324 	muli	r3,r3,12
 4002dd4:	10c5883a 	add	r2,r2,r3
 4002dd8:	10800017 	ldw	r2,0(r2)
 4002ddc:	d0e6fc03 	ldbu	r3,-25616(gp)
 4002de0:	18c03fcc 	andi	r3,r3,255
 4002de4:	000b883a 	mov	r5,zero
 4002de8:	1809883a 	mov	r4,r3
 4002dec:	103ee83a 	callr	r2
 4002df0:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 4002df4:	e0bfb983 	ldbu	r2,-282(fp)
 4002df8:	10800058 	cmpnei	r2,r2,1
 4002dfc:	1000031e 	bne	r2,zero,4002e0c <USB_Task+0x5a0>
			        usb_task_state = USB_STATE_RUNNING;
 4002e00:	00801004 	movi	r2,64
 4002e04:	d0a00605 	stb	r2,-32744(gp)
                    break;
 4002e08:	00000606 	br	4002e24 <USB_Task+0x5b8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 4002e0c:	e0bfb903 	ldbu	r2,-284(fp)
 4002e10:	10800044 	addi	r2,r2,1
 4002e14:	e0bfb905 	stb	r2,-284(fp)
 4002e18:	e0bfb903 	ldbu	r2,-284(fp)
 4002e1c:	10800130 	cmpltui	r2,r2,4
 4002e20:	103fe81e 	bne	r2,zero,4002dc4 <__alt_data_end+0xfc002dc4>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 4002e24:	d0a00603 	ldbu	r2,-32744(gp)
 4002e28:	10803fcc 	andi	r2,r2,255
 4002e2c:	10800c18 	cmpnei	r2,r2,48
 4002e30:	10000f1e 	bne	r2,zero,4002e70 <USB_Task+0x604>
                usb_error = 0xfd;
 4002e34:	00bfff44 	movi	r2,-3
 4002e38:	d0a6fc45 	stb	r2,-25615(gp)
                last_usb_task_state = usb_task_state;
 4002e3c:	d0a00603 	ldbu	r2,-32744(gp)
 4002e40:	d0a6fa05 	stb	r2,-25624(gp)
                usb_task_state = USB_STATE_ERROR;
 4002e44:	00bfffc4 	movi	r2,-1
 4002e48:	d0a00605 	stb	r2,-32744(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 4002e4c:	00000806 	br	4002e70 <USB_Task+0x604>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 4002e50:	0001883a 	nop
 4002e54:	00000706 	br	4002e74 <USB_Task+0x608>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 4002e58:	0001883a 	nop
 4002e5c:	00000506 	br	4002e74 <USB_Task+0x608>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 4002e60:	0001883a 	nop
 4002e64:	00000306 	br	4002e74 <USB_Task+0x608>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 4002e68:	0001883a 	nop
 4002e6c:	00000106 	br	4002e74 <USB_Task+0x608>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 4002e70:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 4002e74:	0001883a 	nop
 4002e78:	e6ffff04 	addi	sp,fp,-4
 4002e7c:	dfc00217 	ldw	ra,8(sp)
 4002e80:	df000117 	ldw	fp,4(sp)
 4002e84:	dc000017 	ldw	r16,0(sp)
 4002e88:	dec00304 	addi	sp,sp,12
 4002e8c:	f800283a 	ret

04002e90 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 4002e90:	defffd04 	addi	sp,sp,-12
 4002e94:	df000215 	stw	fp,8(sp)
 4002e98:	df000204 	addi	fp,sp,8
 4002e9c:	2005883a 	mov	r2,r4
 4002ea0:	e17fff15 	stw	r5,-4(fp)
 4002ea4:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 4002ea8:	0005883a 	mov	r2,zero
}
 4002eac:	e037883a 	mov	sp,fp
 4002eb0:	df000017 	ldw	fp,0(sp)
 4002eb4:	dec00104 	addi	sp,sp,4
 4002eb8:	f800283a 	ret

04002ebc <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 4002ebc:	defffb04 	addi	sp,sp,-20
 4002ec0:	df000415 	stw	fp,16(sp)
 4002ec4:	df000404 	addi	fp,sp,16
 4002ec8:	2007883a 	mov	r3,r4
 4002ecc:	2805883a 	mov	r2,r5
 4002ed0:	e1bffe15 	stw	r6,-8(fp)
 4002ed4:	e1ffff15 	stw	r7,-4(fp)
 4002ed8:	e0fffc05 	stb	r3,-16(fp)
 4002edc:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 4002ee0:	0005883a 	mov	r2,zero

}
 4002ee4:	e037883a 	mov	sp,fp
 4002ee8:	df000017 	ldw	fp,0(sp)
 4002eec:	dec00104 	addi	sp,sp,4
 4002ef0:	f800283a 	ret

04002ef4 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 4002ef4:	defffd04 	addi	sp,sp,-12
 4002ef8:	df000215 	stw	fp,8(sp)
 4002efc:	df000204 	addi	fp,sp,8
 4002f00:	2005883a 	mov	r2,r4
 4002f04:	e17fff15 	stw	r5,-4(fp)
 4002f08:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 4002f0c:	0005883a 	mov	r2,zero

}
 4002f10:	e037883a 	mov	sp,fp
 4002f14:	df000017 	ldw	fp,0(sp)
 4002f18:	dec00104 	addi	sp,sp,4
 4002f1c:	f800283a 	ret

04002f20 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 4002f20:	defffb04 	addi	sp,sp,-20
 4002f24:	df000415 	stw	fp,16(sp)
 4002f28:	df000404 	addi	fp,sp,16
 4002f2c:	2007883a 	mov	r3,r4
 4002f30:	2805883a 	mov	r2,r5
 4002f34:	e1bffe15 	stw	r6,-8(fp)
 4002f38:	e1ffff15 	stw	r7,-4(fp)
 4002f3c:	e0fffc05 	stb	r3,-16(fp)
 4002f40:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 4002f44:	0005883a 	mov	r2,zero
}
 4002f48:	e037883a 	mov	sp,fp
 4002f4c:	df000017 	ldw	fp,0(sp)
 4002f50:	dec00104 	addi	sp,sp,4
 4002f54:	f800283a 	ret

04002f58 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 4002f58:	defffd04 	addi	sp,sp,-12
 4002f5c:	df000215 	stw	fp,8(sp)
 4002f60:	df000204 	addi	fp,sp,8
 4002f64:	2005883a 	mov	r2,r4
 4002f68:	e17fff15 	stw	r5,-4(fp)
 4002f6c:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 4002f70:	0005883a 	mov	r2,zero
}
 4002f74:	e037883a 	mov	sp,fp
 4002f78:	df000017 	ldw	fp,0(sp)
 4002f7c:	dec00104 	addi	sp,sp,4
 4002f80:	f800283a 	ret

04002f84 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 4002f84:	defffb04 	addi	sp,sp,-20
 4002f88:	df000415 	stw	fp,16(sp)
 4002f8c:	df000404 	addi	fp,sp,16
 4002f90:	2007883a 	mov	r3,r4
 4002f94:	2805883a 	mov	r2,r5
 4002f98:	e1bffe15 	stw	r6,-8(fp)
 4002f9c:	e1ffff15 	stw	r7,-4(fp)
 4002fa0:	e0fffc05 	stb	r3,-16(fp)
 4002fa4:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 4002fa8:	0005883a 	mov	r2,zero
}
 4002fac:	e037883a 	mov	sp,fp
 4002fb0:	df000017 	ldw	fp,0(sp)
 4002fb4:	dec00104 	addi	sp,sp,4
 4002fb8:	f800283a 	ret

04002fbc <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 4002fbc:	deffff04 	addi	sp,sp,-4
 4002fc0:	df000015 	stw	fp,0(sp)
 4002fc4:	d839883a 	mov	fp,sp
    return( usb_task_state );
 4002fc8:	d0a00603 	ldbu	r2,-32744(gp)
}
 4002fcc:	e037883a 	mov	sp,fp
 4002fd0:	df000017 	ldw	fp,0(sp)
 4002fd4:	dec00104 	addi	sp,sp,4
 4002fd8:	f800283a 	ret

04002fdc <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 4002fdc:	defffe04 	addi	sp,sp,-8
 4002fe0:	df000115 	stw	fp,4(sp)
 4002fe4:	df000104 	addi	fp,sp,4
 4002fe8:	2005883a 	mov	r2,r4
 4002fec:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 4002ff0:	e0bfff03 	ldbu	r2,-4(fp)
 4002ff4:	100690fa 	slli	r3,r2,3
 4002ff8:	008100b4 	movhi	r2,1026
 4002ffc:	10a47404 	addi	r2,r2,-28208
 4003000:	1885883a 	add	r2,r3,r2
}
 4003004:	e037883a 	mov	sp,fp
 4003008:	df000017 	ldw	fp,0(sp)
 400300c:	dec00104 	addi	sp,sp,4
 4003010:	f800283a 	ret

04003014 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 4003014:	defffc04 	addi	sp,sp,-16
 4003018:	df000315 	stw	fp,12(sp)
 400301c:	df000304 	addi	fp,sp,12
 4003020:	e13ffe15 	stw	r4,-8(fp)
 4003024:	2805883a 	mov	r2,r5
 4003028:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 400302c:	e03ffd05 	stb	zero,-12(fp)
 4003030:	00000d06 	br	4003068 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 4003034:	e0bffd03 	ldbu	r2,-12(fp)
 4003038:	e0fffe17 	ldw	r3,-8(fp)
 400303c:	1887883a 	add	r3,r3,r2
 4003040:	e0bffd03 	ldbu	r2,-12(fp)
 4003044:	1085883a 	add	r2,r2,r2
 4003048:	1009883a 	mov	r4,r2
 400304c:	e0bffe17 	ldw	r2,-8(fp)
 4003050:	1105883a 	add	r2,r2,r4
 4003054:	10800003 	ldbu	r2,0(r2)
 4003058:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 400305c:	e0bffd03 	ldbu	r2,-12(fp)
 4003060:	10800044 	addi	r2,r2,1
 4003064:	e0bffd05 	stb	r2,-12(fp)
 4003068:	e0fffd03 	ldbu	r3,-12(fp)
 400306c:	e0bfff03 	ldbu	r2,-4(fp)
 4003070:	18bff036 	bltu	r3,r2,4003034 <__alt_data_end+0xfc003034>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 4003074:	e0bfff03 	ldbu	r2,-4(fp)
 4003078:	e0fffe17 	ldw	r3,-8(fp)
 400307c:	1885883a 	add	r2,r3,r2
 4003080:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 4003084:	e0bffe17 	ldw	r2,-8(fp)
}
 4003088:	e037883a 	mov	sp,fp
 400308c:	df000017 	ldw	fp,0(sp)
 4003090:	dec00104 	addi	sp,sp,4
 4003094:	f800283a 	ret

04003098 <__fixunssfsi>:
 4003098:	defffd04 	addi	sp,sp,-12
 400309c:	dc000015 	stw	r16,0(sp)
 40030a0:	0413c034 	movhi	r16,20224
 40030a4:	800b883a 	mov	r5,r16
 40030a8:	dc400115 	stw	r17,4(sp)
 40030ac:	dfc00215 	stw	ra,8(sp)
 40030b0:	2023883a 	mov	r17,r4
 40030b4:	40032ac0 	call	40032ac <__gesf2>
 40030b8:	1000070e 	bge	r2,zero,40030d8 <__fixunssfsi+0x40>
 40030bc:	8809883a 	mov	r4,r17
 40030c0:	4003c480 	call	4003c48 <__fixsfsi>
 40030c4:	dfc00217 	ldw	ra,8(sp)
 40030c8:	dc400117 	ldw	r17,4(sp)
 40030cc:	dc000017 	ldw	r16,0(sp)
 40030d0:	dec00304 	addi	sp,sp,12
 40030d4:	f800283a 	ret
 40030d8:	800b883a 	mov	r5,r16
 40030dc:	8809883a 	mov	r4,r17
 40030e0:	40037640 	call	4003764 <__subsf3>
 40030e4:	1009883a 	mov	r4,r2
 40030e8:	4003c480 	call	4003c48 <__fixsfsi>
 40030ec:	00e00034 	movhi	r3,32768
 40030f0:	10c5883a 	add	r2,r2,r3
 40030f4:	003ff306 	br	40030c4 <__alt_data_end+0xfc0030c4>

040030f8 <__divsi3>:
 40030f8:	20001b16 	blt	r4,zero,4003168 <__divsi3+0x70>
 40030fc:	000f883a 	mov	r7,zero
 4003100:	28001616 	blt	r5,zero,400315c <__divsi3+0x64>
 4003104:	200d883a 	mov	r6,r4
 4003108:	29001a2e 	bgeu	r5,r4,4003174 <__divsi3+0x7c>
 400310c:	00800804 	movi	r2,32
 4003110:	00c00044 	movi	r3,1
 4003114:	00000106 	br	400311c <__divsi3+0x24>
 4003118:	10000d26 	beq	r2,zero,4003150 <__divsi3+0x58>
 400311c:	294b883a 	add	r5,r5,r5
 4003120:	10bfffc4 	addi	r2,r2,-1
 4003124:	18c7883a 	add	r3,r3,r3
 4003128:	293ffb36 	bltu	r5,r4,4003118 <__alt_data_end+0xfc003118>
 400312c:	0005883a 	mov	r2,zero
 4003130:	18000726 	beq	r3,zero,4003150 <__divsi3+0x58>
 4003134:	0005883a 	mov	r2,zero
 4003138:	31400236 	bltu	r6,r5,4003144 <__divsi3+0x4c>
 400313c:	314dc83a 	sub	r6,r6,r5
 4003140:	10c4b03a 	or	r2,r2,r3
 4003144:	1806d07a 	srli	r3,r3,1
 4003148:	280ad07a 	srli	r5,r5,1
 400314c:	183ffa1e 	bne	r3,zero,4003138 <__alt_data_end+0xfc003138>
 4003150:	38000126 	beq	r7,zero,4003158 <__divsi3+0x60>
 4003154:	0085c83a 	sub	r2,zero,r2
 4003158:	f800283a 	ret
 400315c:	014bc83a 	sub	r5,zero,r5
 4003160:	39c0005c 	xori	r7,r7,1
 4003164:	003fe706 	br	4003104 <__alt_data_end+0xfc003104>
 4003168:	0109c83a 	sub	r4,zero,r4
 400316c:	01c00044 	movi	r7,1
 4003170:	003fe306 	br	4003100 <__alt_data_end+0xfc003100>
 4003174:	00c00044 	movi	r3,1
 4003178:	003fee06 	br	4003134 <__alt_data_end+0xfc003134>

0400317c <__modsi3>:
 400317c:	20001716 	blt	r4,zero,40031dc <__modsi3+0x60>
 4003180:	000f883a 	mov	r7,zero
 4003184:	2005883a 	mov	r2,r4
 4003188:	28001216 	blt	r5,zero,40031d4 <__modsi3+0x58>
 400318c:	2900162e 	bgeu	r5,r4,40031e8 <__modsi3+0x6c>
 4003190:	01800804 	movi	r6,32
 4003194:	00c00044 	movi	r3,1
 4003198:	00000106 	br	40031a0 <__modsi3+0x24>
 400319c:	30000a26 	beq	r6,zero,40031c8 <__modsi3+0x4c>
 40031a0:	294b883a 	add	r5,r5,r5
 40031a4:	31bfffc4 	addi	r6,r6,-1
 40031a8:	18c7883a 	add	r3,r3,r3
 40031ac:	293ffb36 	bltu	r5,r4,400319c <__alt_data_end+0xfc00319c>
 40031b0:	18000526 	beq	r3,zero,40031c8 <__modsi3+0x4c>
 40031b4:	1806d07a 	srli	r3,r3,1
 40031b8:	11400136 	bltu	r2,r5,40031c0 <__modsi3+0x44>
 40031bc:	1145c83a 	sub	r2,r2,r5
 40031c0:	280ad07a 	srli	r5,r5,1
 40031c4:	183ffb1e 	bne	r3,zero,40031b4 <__alt_data_end+0xfc0031b4>
 40031c8:	38000126 	beq	r7,zero,40031d0 <__modsi3+0x54>
 40031cc:	0085c83a 	sub	r2,zero,r2
 40031d0:	f800283a 	ret
 40031d4:	014bc83a 	sub	r5,zero,r5
 40031d8:	003fec06 	br	400318c <__alt_data_end+0xfc00318c>
 40031dc:	0109c83a 	sub	r4,zero,r4
 40031e0:	01c00044 	movi	r7,1
 40031e4:	003fe706 	br	4003184 <__alt_data_end+0xfc003184>
 40031e8:	00c00044 	movi	r3,1
 40031ec:	003ff106 	br	40031b4 <__alt_data_end+0xfc0031b4>

040031f0 <__udivsi3>:
 40031f0:	200d883a 	mov	r6,r4
 40031f4:	2900152e 	bgeu	r5,r4,400324c <__udivsi3+0x5c>
 40031f8:	28001416 	blt	r5,zero,400324c <__udivsi3+0x5c>
 40031fc:	00800804 	movi	r2,32
 4003200:	00c00044 	movi	r3,1
 4003204:	00000206 	br	4003210 <__udivsi3+0x20>
 4003208:	10000e26 	beq	r2,zero,4003244 <__udivsi3+0x54>
 400320c:	28000516 	blt	r5,zero,4003224 <__udivsi3+0x34>
 4003210:	294b883a 	add	r5,r5,r5
 4003214:	10bfffc4 	addi	r2,r2,-1
 4003218:	18c7883a 	add	r3,r3,r3
 400321c:	293ffa36 	bltu	r5,r4,4003208 <__alt_data_end+0xfc003208>
 4003220:	18000826 	beq	r3,zero,4003244 <__udivsi3+0x54>
 4003224:	0005883a 	mov	r2,zero
 4003228:	31400236 	bltu	r6,r5,4003234 <__udivsi3+0x44>
 400322c:	314dc83a 	sub	r6,r6,r5
 4003230:	10c4b03a 	or	r2,r2,r3
 4003234:	1806d07a 	srli	r3,r3,1
 4003238:	280ad07a 	srli	r5,r5,1
 400323c:	183ffa1e 	bne	r3,zero,4003228 <__alt_data_end+0xfc003228>
 4003240:	f800283a 	ret
 4003244:	0005883a 	mov	r2,zero
 4003248:	f800283a 	ret
 400324c:	00c00044 	movi	r3,1
 4003250:	003ff406 	br	4003224 <__alt_data_end+0xfc003224>

04003254 <__umodsi3>:
 4003254:	2005883a 	mov	r2,r4
 4003258:	2900122e 	bgeu	r5,r4,40032a4 <__umodsi3+0x50>
 400325c:	28001116 	blt	r5,zero,40032a4 <__umodsi3+0x50>
 4003260:	01800804 	movi	r6,32
 4003264:	00c00044 	movi	r3,1
 4003268:	00000206 	br	4003274 <__umodsi3+0x20>
 400326c:	30000c26 	beq	r6,zero,40032a0 <__umodsi3+0x4c>
 4003270:	28000516 	blt	r5,zero,4003288 <__umodsi3+0x34>
 4003274:	294b883a 	add	r5,r5,r5
 4003278:	31bfffc4 	addi	r6,r6,-1
 400327c:	18c7883a 	add	r3,r3,r3
 4003280:	293ffa36 	bltu	r5,r4,400326c <__alt_data_end+0xfc00326c>
 4003284:	18000626 	beq	r3,zero,40032a0 <__umodsi3+0x4c>
 4003288:	1806d07a 	srli	r3,r3,1
 400328c:	11400136 	bltu	r2,r5,4003294 <__umodsi3+0x40>
 4003290:	1145c83a 	sub	r2,r2,r5
 4003294:	280ad07a 	srli	r5,r5,1
 4003298:	183ffb1e 	bne	r3,zero,4003288 <__alt_data_end+0xfc003288>
 400329c:	f800283a 	ret
 40032a0:	f800283a 	ret
 40032a4:	00c00044 	movi	r3,1
 40032a8:	003ff706 	br	4003288 <__alt_data_end+0xfc003288>

040032ac <__gesf2>:
 40032ac:	2004d5fa 	srli	r2,r4,23
 40032b0:	2806d5fa 	srli	r3,r5,23
 40032b4:	01802034 	movhi	r6,128
 40032b8:	31bfffc4 	addi	r6,r6,-1
 40032bc:	10803fcc 	andi	r2,r2,255
 40032c0:	01c03fc4 	movi	r7,255
 40032c4:	3110703a 	and	r8,r6,r4
 40032c8:	18c03fcc 	andi	r3,r3,255
 40032cc:	314c703a 	and	r6,r6,r5
 40032d0:	2008d7fa 	srli	r4,r4,31
 40032d4:	280ad7fa 	srli	r5,r5,31
 40032d8:	11c01926 	beq	r2,r7,4003340 <__gesf2+0x94>
 40032dc:	01c03fc4 	movi	r7,255
 40032e0:	19c00f26 	beq	r3,r7,4003320 <__gesf2+0x74>
 40032e4:	1000061e 	bne	r2,zero,4003300 <__gesf2+0x54>
 40032e8:	400f003a 	cmpeq	r7,r8,zero
 40032ec:	1800071e 	bne	r3,zero,400330c <__gesf2+0x60>
 40032f0:	3000061e 	bne	r6,zero,400330c <__gesf2+0x60>
 40032f4:	0005883a 	mov	r2,zero
 40032f8:	40000e1e 	bne	r8,zero,4003334 <__gesf2+0x88>
 40032fc:	f800283a 	ret
 4003300:	18000a1e 	bne	r3,zero,400332c <__gesf2+0x80>
 4003304:	30000b26 	beq	r6,zero,4003334 <__gesf2+0x88>
 4003308:	000f883a 	mov	r7,zero
 400330c:	29403fcc 	andi	r5,r5,255
 4003310:	38000726 	beq	r7,zero,4003330 <__gesf2+0x84>
 4003314:	28000826 	beq	r5,zero,4003338 <__gesf2+0x8c>
 4003318:	00800044 	movi	r2,1
 400331c:	f800283a 	ret
 4003320:	303ff026 	beq	r6,zero,40032e4 <__alt_data_end+0xfc0032e4>
 4003324:	00bfff84 	movi	r2,-2
 4003328:	f800283a 	ret
 400332c:	29403fcc 	andi	r5,r5,255
 4003330:	21400526 	beq	r4,r5,4003348 <__gesf2+0x9c>
 4003334:	203ff826 	beq	r4,zero,4003318 <__alt_data_end+0xfc003318>
 4003338:	00bfffc4 	movi	r2,-1
 400333c:	f800283a 	ret
 4003340:	403fe626 	beq	r8,zero,40032dc <__alt_data_end+0xfc0032dc>
 4003344:	003ff706 	br	4003324 <__alt_data_end+0xfc003324>
 4003348:	18bffa16 	blt	r3,r2,4003334 <__alt_data_end+0xfc003334>
 400334c:	10c00216 	blt	r2,r3,4003358 <__gesf2+0xac>
 4003350:	323ff836 	bltu	r6,r8,4003334 <__alt_data_end+0xfc003334>
 4003354:	4180022e 	bgeu	r8,r6,4003360 <__gesf2+0xb4>
 4003358:	203fef1e 	bne	r4,zero,4003318 <__alt_data_end+0xfc003318>
 400335c:	003ff606 	br	4003338 <__alt_data_end+0xfc003338>
 4003360:	0005883a 	mov	r2,zero
 4003364:	f800283a 	ret

04003368 <__mulsf3>:
 4003368:	defff504 	addi	sp,sp,-44
 400336c:	dc000115 	stw	r16,4(sp)
 4003370:	2020d5fa 	srli	r16,r4,23
 4003374:	dd400615 	stw	r21,24(sp)
 4003378:	202ad7fa 	srli	r21,r4,31
 400337c:	dc800315 	stw	r18,12(sp)
 4003380:	04802034 	movhi	r18,128
 4003384:	df000915 	stw	fp,36(sp)
 4003388:	dd000515 	stw	r20,20(sp)
 400338c:	94bfffc4 	addi	r18,r18,-1
 4003390:	dfc00a15 	stw	ra,40(sp)
 4003394:	ddc00815 	stw	r23,32(sp)
 4003398:	dd800715 	stw	r22,28(sp)
 400339c:	dcc00415 	stw	r19,16(sp)
 40033a0:	dc400215 	stw	r17,8(sp)
 40033a4:	84003fcc 	andi	r16,r16,255
 40033a8:	9124703a 	and	r18,r18,r4
 40033ac:	a829883a 	mov	r20,r21
 40033b0:	af003fcc 	andi	fp,r21,255
 40033b4:	80005426 	beq	r16,zero,4003508 <__mulsf3+0x1a0>
 40033b8:	00803fc4 	movi	r2,255
 40033bc:	80802f26 	beq	r16,r2,400347c <__mulsf3+0x114>
 40033c0:	91002034 	orhi	r4,r18,128
 40033c4:	202490fa 	slli	r18,r4,3
 40033c8:	843fe044 	addi	r16,r16,-127
 40033cc:	0023883a 	mov	r17,zero
 40033d0:	002f883a 	mov	r23,zero
 40033d4:	2804d5fa 	srli	r2,r5,23
 40033d8:	282cd7fa 	srli	r22,r5,31
 40033dc:	01002034 	movhi	r4,128
 40033e0:	213fffc4 	addi	r4,r4,-1
 40033e4:	10803fcc 	andi	r2,r2,255
 40033e8:	2166703a 	and	r19,r4,r5
 40033ec:	b1803fcc 	andi	r6,r22,255
 40033f0:	10004c26 	beq	r2,zero,4003524 <__mulsf3+0x1bc>
 40033f4:	00c03fc4 	movi	r3,255
 40033f8:	10c04726 	beq	r2,r3,4003518 <__mulsf3+0x1b0>
 40033fc:	99002034 	orhi	r4,r19,128
 4003400:	202690fa 	slli	r19,r4,3
 4003404:	10bfe044 	addi	r2,r2,-127
 4003408:	0007883a 	mov	r3,zero
 400340c:	80a1883a 	add	r16,r16,r2
 4003410:	010003c4 	movi	r4,15
 4003414:	1c44b03a 	or	r2,r3,r17
 4003418:	b56af03a 	xor	r21,r22,r21
 400341c:	81c00044 	addi	r7,r16,1
 4003420:	20806b36 	bltu	r4,r2,40035d0 <__mulsf3+0x268>
 4003424:	100490ba 	slli	r2,r2,2
 4003428:	01010034 	movhi	r4,1024
 400342c:	210d0f04 	addi	r4,r4,13372
 4003430:	1105883a 	add	r2,r2,r4
 4003434:	10800017 	ldw	r2,0(r2)
 4003438:	1000683a 	jmp	r2
 400343c:	040035d0 	cmplti	r16,zero,215
 4003440:	04003490 	cmplti	r16,zero,210
 4003444:	04003490 	cmplti	r16,zero,210
 4003448:	0400348c 	andi	r16,zero,210
 400344c:	040035b4 	movhi	r16,214
 4003450:	040035b4 	movhi	r16,214
 4003454:	040035a0 	cmpeqi	r16,zero,214
 4003458:	0400348c 	andi	r16,zero,210
 400345c:	040035b4 	movhi	r16,214
 4003460:	040035a0 	cmpeqi	r16,zero,214
 4003464:	040035b4 	movhi	r16,214
 4003468:	0400348c 	andi	r16,zero,210
 400346c:	040035c0 	call	40035c <__reset-0x3bffca4>
 4003470:	040035c0 	call	40035c <__reset-0x3bffca4>
 4003474:	040035c0 	call	40035c <__reset-0x3bffca4>
 4003478:	0400369c 	xori	r16,zero,218
 400347c:	90003b1e 	bne	r18,zero,400356c <__mulsf3+0x204>
 4003480:	04400204 	movi	r17,8
 4003484:	05c00084 	movi	r23,2
 4003488:	003fd206 	br	40033d4 <__alt_data_end+0xfc0033d4>
 400348c:	302b883a 	mov	r21,r6
 4003490:	00800084 	movi	r2,2
 4003494:	18802626 	beq	r3,r2,4003530 <__mulsf3+0x1c8>
 4003498:	008000c4 	movi	r2,3
 400349c:	1880ab26 	beq	r3,r2,400374c <__mulsf3+0x3e4>
 40034a0:	00800044 	movi	r2,1
 40034a4:	1880a21e 	bne	r3,r2,4003730 <__mulsf3+0x3c8>
 40034a8:	a829883a 	mov	r20,r21
 40034ac:	0007883a 	mov	r3,zero
 40034b0:	0009883a 	mov	r4,zero
 40034b4:	18803fcc 	andi	r2,r3,255
 40034b8:	100695fa 	slli	r3,r2,23
 40034bc:	a0803fcc 	andi	r2,r20,255
 40034c0:	100a97fa 	slli	r5,r2,31
 40034c4:	00802034 	movhi	r2,128
 40034c8:	10bfffc4 	addi	r2,r2,-1
 40034cc:	2084703a 	and	r2,r4,r2
 40034d0:	10c4b03a 	or	r2,r2,r3
 40034d4:	1144b03a 	or	r2,r2,r5
 40034d8:	dfc00a17 	ldw	ra,40(sp)
 40034dc:	df000917 	ldw	fp,36(sp)
 40034e0:	ddc00817 	ldw	r23,32(sp)
 40034e4:	dd800717 	ldw	r22,28(sp)
 40034e8:	dd400617 	ldw	r21,24(sp)
 40034ec:	dd000517 	ldw	r20,20(sp)
 40034f0:	dcc00417 	ldw	r19,16(sp)
 40034f4:	dc800317 	ldw	r18,12(sp)
 40034f8:	dc400217 	ldw	r17,8(sp)
 40034fc:	dc000117 	ldw	r16,4(sp)
 4003500:	dec00b04 	addi	sp,sp,44
 4003504:	f800283a 	ret
 4003508:	90000d1e 	bne	r18,zero,4003540 <__mulsf3+0x1d8>
 400350c:	04400104 	movi	r17,4
 4003510:	05c00044 	movi	r23,1
 4003514:	003faf06 	br	40033d4 <__alt_data_end+0xfc0033d4>
 4003518:	9806c03a 	cmpne	r3,r19,zero
 400351c:	18c00084 	addi	r3,r3,2
 4003520:	003fba06 	br	400340c <__alt_data_end+0xfc00340c>
 4003524:	9800141e 	bne	r19,zero,4003578 <__mulsf3+0x210>
 4003528:	00c00044 	movi	r3,1
 400352c:	003fb706 	br	400340c <__alt_data_end+0xfc00340c>
 4003530:	a829883a 	mov	r20,r21
 4003534:	00ffffc4 	movi	r3,-1
 4003538:	0009883a 	mov	r4,zero
 400353c:	003fdd06 	br	40034b4 <__alt_data_end+0xfc0034b4>
 4003540:	9009883a 	mov	r4,r18
 4003544:	d9400015 	stw	r5,0(sp)
 4003548:	4003da80 	call	4003da8 <__clzsi2>
 400354c:	10fffec4 	addi	r3,r2,-5
 4003550:	10801d84 	addi	r2,r2,118
 4003554:	90e4983a 	sll	r18,r18,r3
 4003558:	00a1c83a 	sub	r16,zero,r2
 400355c:	0023883a 	mov	r17,zero
 4003560:	002f883a 	mov	r23,zero
 4003564:	d9400017 	ldw	r5,0(sp)
 4003568:	003f9a06 	br	40033d4 <__alt_data_end+0xfc0033d4>
 400356c:	04400304 	movi	r17,12
 4003570:	05c000c4 	movi	r23,3
 4003574:	003f9706 	br	40033d4 <__alt_data_end+0xfc0033d4>
 4003578:	9809883a 	mov	r4,r19
 400357c:	d9800015 	stw	r6,0(sp)
 4003580:	4003da80 	call	4003da8 <__clzsi2>
 4003584:	10fffec4 	addi	r3,r2,-5
 4003588:	10801d84 	addi	r2,r2,118
 400358c:	98e6983a 	sll	r19,r19,r3
 4003590:	0085c83a 	sub	r2,zero,r2
 4003594:	0007883a 	mov	r3,zero
 4003598:	d9800017 	ldw	r6,0(sp)
 400359c:	003f9b06 	br	400340c <__alt_data_end+0xfc00340c>
 40035a0:	01002034 	movhi	r4,128
 40035a4:	0029883a 	mov	r20,zero
 40035a8:	213fffc4 	addi	r4,r4,-1
 40035ac:	00ffffc4 	movi	r3,-1
 40035b0:	003fc006 	br	40034b4 <__alt_data_end+0xfc0034b4>
 40035b4:	9027883a 	mov	r19,r18
 40035b8:	b807883a 	mov	r3,r23
 40035bc:	003fb406 	br	4003490 <__alt_data_end+0xfc003490>
 40035c0:	9027883a 	mov	r19,r18
 40035c4:	e02b883a 	mov	r21,fp
 40035c8:	b807883a 	mov	r3,r23
 40035cc:	003fb006 	br	4003490 <__alt_data_end+0xfc003490>
 40035d0:	9004d43a 	srli	r2,r18,16
 40035d4:	9810d43a 	srli	r8,r19,16
 40035d8:	94bfffcc 	andi	r18,r18,65535
 40035dc:	993fffcc 	andi	r4,r19,65535
 40035e0:	910d383a 	mul	r6,r18,r4
 40035e4:	20a7383a 	mul	r19,r4,r2
 40035e8:	9225383a 	mul	r18,r18,r8
 40035ec:	3006d43a 	srli	r3,r6,16
 40035f0:	1211383a 	mul	r8,r2,r8
 40035f4:	94e5883a 	add	r18,r18,r19
 40035f8:	1c87883a 	add	r3,r3,r18
 40035fc:	1cc0022e 	bgeu	r3,r19,4003608 <__mulsf3+0x2a0>
 4003600:	00800074 	movhi	r2,1
 4003604:	4091883a 	add	r8,r8,r2
 4003608:	1804943a 	slli	r2,r3,16
 400360c:	31bfffcc 	andi	r6,r6,65535
 4003610:	1806d43a 	srli	r3,r3,16
 4003614:	1185883a 	add	r2,r2,r6
 4003618:	102691ba 	slli	r19,r2,6
 400361c:	1a07883a 	add	r3,r3,r8
 4003620:	1004d6ba 	srli	r2,r2,26
 4003624:	180891ba 	slli	r4,r3,6
 4003628:	9826c03a 	cmpne	r19,r19,zero
 400362c:	9884b03a 	or	r2,r19,r2
 4003630:	1126b03a 	or	r19,r2,r4
 4003634:	9882002c 	andhi	r2,r19,2048
 4003638:	10000426 	beq	r2,zero,400364c <__mulsf3+0x2e4>
 400363c:	9804d07a 	srli	r2,r19,1
 4003640:	9900004c 	andi	r4,r19,1
 4003644:	3821883a 	mov	r16,r7
 4003648:	1126b03a 	or	r19,r2,r4
 400364c:	80c01fc4 	addi	r3,r16,127
 4003650:	00c0210e 	bge	zero,r3,40036d8 <__mulsf3+0x370>
 4003654:	988001cc 	andi	r2,r19,7
 4003658:	10000426 	beq	r2,zero,400366c <__mulsf3+0x304>
 400365c:	988003cc 	andi	r2,r19,15
 4003660:	01000104 	movi	r4,4
 4003664:	11000126 	beq	r2,r4,400366c <__mulsf3+0x304>
 4003668:	9927883a 	add	r19,r19,r4
 400366c:	9882002c 	andhi	r2,r19,2048
 4003670:	10000426 	beq	r2,zero,4003684 <__mulsf3+0x31c>
 4003674:	00be0034 	movhi	r2,63488
 4003678:	10bfffc4 	addi	r2,r2,-1
 400367c:	80c02004 	addi	r3,r16,128
 4003680:	98a6703a 	and	r19,r19,r2
 4003684:	00803f84 	movi	r2,254
 4003688:	10ffa916 	blt	r2,r3,4003530 <__alt_data_end+0xfc003530>
 400368c:	980891ba 	slli	r4,r19,6
 4003690:	a829883a 	mov	r20,r21
 4003694:	2008d27a 	srli	r4,r4,9
 4003698:	003f8606 	br	40034b4 <__alt_data_end+0xfc0034b4>
 400369c:	9080102c 	andhi	r2,r18,64
 40036a0:	10000826 	beq	r2,zero,40036c4 <__mulsf3+0x35c>
 40036a4:	9880102c 	andhi	r2,r19,64
 40036a8:	1000061e 	bne	r2,zero,40036c4 <__mulsf3+0x35c>
 40036ac:	00802034 	movhi	r2,128
 40036b0:	99001034 	orhi	r4,r19,64
 40036b4:	10bfffc4 	addi	r2,r2,-1
 40036b8:	b029883a 	mov	r20,r22
 40036bc:	2088703a 	and	r4,r4,r2
 40036c0:	003fba06 	br	40035ac <__alt_data_end+0xfc0035ac>
 40036c4:	00802034 	movhi	r2,128
 40036c8:	91001034 	orhi	r4,r18,64
 40036cc:	10bfffc4 	addi	r2,r2,-1
 40036d0:	2088703a 	and	r4,r4,r2
 40036d4:	003fb506 	br	40035ac <__alt_data_end+0xfc0035ac>
 40036d8:	00800044 	movi	r2,1
 40036dc:	10c7c83a 	sub	r3,r2,r3
 40036e0:	008006c4 	movi	r2,27
 40036e4:	10ff7016 	blt	r2,r3,40034a8 <__alt_data_end+0xfc0034a8>
 40036e8:	00800804 	movi	r2,32
 40036ec:	10c5c83a 	sub	r2,r2,r3
 40036f0:	9884983a 	sll	r2,r19,r2
 40036f4:	98c6d83a 	srl	r3,r19,r3
 40036f8:	1004c03a 	cmpne	r2,r2,zero
 40036fc:	1884b03a 	or	r2,r3,r2
 4003700:	10c001cc 	andi	r3,r2,7
 4003704:	18000426 	beq	r3,zero,4003718 <__mulsf3+0x3b0>
 4003708:	10c003cc 	andi	r3,r2,15
 400370c:	01000104 	movi	r4,4
 4003710:	19000126 	beq	r3,r4,4003718 <__mulsf3+0x3b0>
 4003714:	1105883a 	add	r2,r2,r4
 4003718:	10c1002c 	andhi	r3,r2,1024
 400371c:	18000626 	beq	r3,zero,4003738 <__mulsf3+0x3d0>
 4003720:	a829883a 	mov	r20,r21
 4003724:	00c00044 	movi	r3,1
 4003728:	0009883a 	mov	r4,zero
 400372c:	003f6106 	br	40034b4 <__alt_data_end+0xfc0034b4>
 4003730:	3821883a 	mov	r16,r7
 4003734:	003fc506 	br	400364c <__alt_data_end+0xfc00364c>
 4003738:	100491ba 	slli	r2,r2,6
 400373c:	a829883a 	mov	r20,r21
 4003740:	0007883a 	mov	r3,zero
 4003744:	1008d27a 	srli	r4,r2,9
 4003748:	003f5a06 	br	40034b4 <__alt_data_end+0xfc0034b4>
 400374c:	00802034 	movhi	r2,128
 4003750:	99001034 	orhi	r4,r19,64
 4003754:	10bfffc4 	addi	r2,r2,-1
 4003758:	a829883a 	mov	r20,r21
 400375c:	2088703a 	and	r4,r4,r2
 4003760:	003f9206 	br	40035ac <__alt_data_end+0xfc0035ac>

04003764 <__subsf3>:
 4003764:	defffc04 	addi	sp,sp,-16
 4003768:	280cd5fa 	srli	r6,r5,23
 400376c:	dc000015 	stw	r16,0(sp)
 4003770:	01c02034 	movhi	r7,128
 4003774:	2020d5fa 	srli	r16,r4,23
 4003778:	39ffffc4 	addi	r7,r7,-1
 400377c:	3906703a 	and	r3,r7,r4
 4003780:	dc400115 	stw	r17,4(sp)
 4003784:	394e703a 	and	r7,r7,r5
 4003788:	2022d7fa 	srli	r17,r4,31
 400378c:	dfc00315 	stw	ra,12(sp)
 4003790:	dc800215 	stw	r18,8(sp)
 4003794:	31803fcc 	andi	r6,r6,255
 4003798:	01003fc4 	movi	r4,255
 400379c:	84003fcc 	andi	r16,r16,255
 40037a0:	180690fa 	slli	r3,r3,3
 40037a4:	2804d7fa 	srli	r2,r5,31
 40037a8:	380e90fa 	slli	r7,r7,3
 40037ac:	31006d26 	beq	r6,r4,4003964 <__subsf3+0x200>
 40037b0:	1080005c 	xori	r2,r2,1
 40037b4:	8189c83a 	sub	r4,r16,r6
 40037b8:	14404f26 	beq	r2,r17,40038f8 <__subsf3+0x194>
 40037bc:	0100770e 	bge	zero,r4,400399c <__subsf3+0x238>
 40037c0:	30001e1e 	bne	r6,zero,400383c <__subsf3+0xd8>
 40037c4:	38006a1e 	bne	r7,zero,4003970 <__subsf3+0x20c>
 40037c8:	188001cc 	andi	r2,r3,7
 40037cc:	10000426 	beq	r2,zero,40037e0 <__subsf3+0x7c>
 40037d0:	188003cc 	andi	r2,r3,15
 40037d4:	01000104 	movi	r4,4
 40037d8:	11000126 	beq	r2,r4,40037e0 <__subsf3+0x7c>
 40037dc:	1907883a 	add	r3,r3,r4
 40037e0:	1881002c 	andhi	r2,r3,1024
 40037e4:	10003926 	beq	r2,zero,40038cc <__subsf3+0x168>
 40037e8:	84000044 	addi	r16,r16,1
 40037ec:	00803fc4 	movi	r2,255
 40037f0:	80807526 	beq	r16,r2,40039c8 <__subsf3+0x264>
 40037f4:	180691ba 	slli	r3,r3,6
 40037f8:	8880004c 	andi	r2,r17,1
 40037fc:	180ad27a 	srli	r5,r3,9
 4003800:	84003fcc 	andi	r16,r16,255
 4003804:	800695fa 	slli	r3,r16,23
 4003808:	10803fcc 	andi	r2,r2,255
 400380c:	01002034 	movhi	r4,128
 4003810:	213fffc4 	addi	r4,r4,-1
 4003814:	100497fa 	slli	r2,r2,31
 4003818:	2920703a 	and	r16,r5,r4
 400381c:	80e0b03a 	or	r16,r16,r3
 4003820:	8084b03a 	or	r2,r16,r2
 4003824:	dfc00317 	ldw	ra,12(sp)
 4003828:	dc800217 	ldw	r18,8(sp)
 400382c:	dc400117 	ldw	r17,4(sp)
 4003830:	dc000017 	ldw	r16,0(sp)
 4003834:	dec00404 	addi	sp,sp,16
 4003838:	f800283a 	ret
 400383c:	00803fc4 	movi	r2,255
 4003840:	80bfe126 	beq	r16,r2,40037c8 <__alt_data_end+0xfc0037c8>
 4003844:	39c10034 	orhi	r7,r7,1024
 4003848:	008006c4 	movi	r2,27
 400384c:	11007416 	blt	r2,r4,4003a20 <__subsf3+0x2bc>
 4003850:	00800804 	movi	r2,32
 4003854:	1105c83a 	sub	r2,r2,r4
 4003858:	3884983a 	sll	r2,r7,r2
 400385c:	390ed83a 	srl	r7,r7,r4
 4003860:	1008c03a 	cmpne	r4,r2,zero
 4003864:	390eb03a 	or	r7,r7,r4
 4003868:	19c7c83a 	sub	r3,r3,r7
 400386c:	1881002c 	andhi	r2,r3,1024
 4003870:	10001426 	beq	r2,zero,40038c4 <__subsf3+0x160>
 4003874:	04810034 	movhi	r18,1024
 4003878:	94bfffc4 	addi	r18,r18,-1
 400387c:	1ca4703a 	and	r18,r3,r18
 4003880:	9009883a 	mov	r4,r18
 4003884:	4003da80 	call	4003da8 <__clzsi2>
 4003888:	10bffec4 	addi	r2,r2,-5
 400388c:	90a4983a 	sll	r18,r18,r2
 4003890:	14005116 	blt	r2,r16,40039d8 <__subsf3+0x274>
 4003894:	1405c83a 	sub	r2,r2,r16
 4003898:	10c00044 	addi	r3,r2,1
 400389c:	00800804 	movi	r2,32
 40038a0:	10c5c83a 	sub	r2,r2,r3
 40038a4:	9084983a 	sll	r2,r18,r2
 40038a8:	90e4d83a 	srl	r18,r18,r3
 40038ac:	0021883a 	mov	r16,zero
 40038b0:	1006c03a 	cmpne	r3,r2,zero
 40038b4:	90c6b03a 	or	r3,r18,r3
 40038b8:	003fc306 	br	40037c8 <__alt_data_end+0xfc0037c8>
 40038bc:	2000e026 	beq	r4,zero,4003c40 <__subsf3+0x4dc>
 40038c0:	2007883a 	mov	r3,r4
 40038c4:	188001cc 	andi	r2,r3,7
 40038c8:	103fc11e 	bne	r2,zero,40037d0 <__alt_data_end+0xfc0037d0>
 40038cc:	180ad0fa 	srli	r5,r3,3
 40038d0:	00c03fc4 	movi	r3,255
 40038d4:	8880004c 	andi	r2,r17,1
 40038d8:	80c0031e 	bne	r16,r3,40038e8 <__subsf3+0x184>
 40038dc:	28006d26 	beq	r5,zero,4003a94 <__subsf3+0x330>
 40038e0:	29401034 	orhi	r5,r5,64
 40038e4:	043fffc4 	movi	r16,-1
 40038e8:	00c02034 	movhi	r3,128
 40038ec:	18ffffc4 	addi	r3,r3,-1
 40038f0:	28ca703a 	and	r5,r5,r3
 40038f4:	003fc206 	br	4003800 <__alt_data_end+0xfc003800>
 40038f8:	01003c0e 	bge	zero,r4,40039ec <__subsf3+0x288>
 40038fc:	30002126 	beq	r6,zero,4003984 <__subsf3+0x220>
 4003900:	01403fc4 	movi	r5,255
 4003904:	817fb026 	beq	r16,r5,40037c8 <__alt_data_end+0xfc0037c8>
 4003908:	39c10034 	orhi	r7,r7,1024
 400390c:	014006c4 	movi	r5,27
 4003910:	29007416 	blt	r5,r4,4003ae4 <__subsf3+0x380>
 4003914:	01400804 	movi	r5,32
 4003918:	290bc83a 	sub	r5,r5,r4
 400391c:	394a983a 	sll	r5,r7,r5
 4003920:	390ed83a 	srl	r7,r7,r4
 4003924:	2808c03a 	cmpne	r4,r5,zero
 4003928:	390eb03a 	or	r7,r7,r4
 400392c:	19c7883a 	add	r3,r3,r7
 4003930:	1901002c 	andhi	r4,r3,1024
 4003934:	20003826 	beq	r4,zero,4003a18 <__subsf3+0x2b4>
 4003938:	84000044 	addi	r16,r16,1
 400393c:	01003fc4 	movi	r4,255
 4003940:	81005426 	beq	r16,r4,4003a94 <__subsf3+0x330>
 4003944:	1023883a 	mov	r17,r2
 4003948:	00bf0034 	movhi	r2,64512
 400394c:	10bfffc4 	addi	r2,r2,-1
 4003950:	1900004c 	andi	r4,r3,1
 4003954:	1886703a 	and	r3,r3,r2
 4003958:	1806d07a 	srli	r3,r3,1
 400395c:	1906b03a 	or	r3,r3,r4
 4003960:	003f9906 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003964:	383f9226 	beq	r7,zero,40037b0 <__alt_data_end+0xfc0037b0>
 4003968:	10803fcc 	andi	r2,r2,255
 400396c:	003f9106 	br	40037b4 <__alt_data_end+0xfc0037b4>
 4003970:	213fffc4 	addi	r4,r4,-1
 4003974:	203fbc26 	beq	r4,zero,4003868 <__alt_data_end+0xfc003868>
 4003978:	00803fc4 	movi	r2,255
 400397c:	80bfb21e 	bne	r16,r2,4003848 <__alt_data_end+0xfc003848>
 4003980:	003f9106 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003984:	383f9026 	beq	r7,zero,40037c8 <__alt_data_end+0xfc0037c8>
 4003988:	213fffc4 	addi	r4,r4,-1
 400398c:	203fe726 	beq	r4,zero,400392c <__alt_data_end+0xfc00392c>
 4003990:	01403fc4 	movi	r5,255
 4003994:	817fdd1e 	bne	r16,r5,400390c <__alt_data_end+0xfc00390c>
 4003998:	003f8b06 	br	40037c8 <__alt_data_end+0xfc0037c8>
 400399c:	2000221e 	bne	r4,zero,4003a28 <__subsf3+0x2c4>
 40039a0:	81000044 	addi	r4,r16,1
 40039a4:	21003fcc 	andi	r4,r4,255
 40039a8:	01400044 	movi	r5,1
 40039ac:	2900470e 	bge	r5,r4,4003acc <__subsf3+0x368>
 40039b0:	19e5c83a 	sub	r18,r3,r7
 40039b4:	9141002c 	andhi	r5,r18,1024
 40039b8:	28002d26 	beq	r5,zero,4003a70 <__subsf3+0x30c>
 40039bc:	38e5c83a 	sub	r18,r7,r3
 40039c0:	1023883a 	mov	r17,r2
 40039c4:	003fae06 	br	4003880 <__alt_data_end+0xfc003880>
 40039c8:	8880004c 	andi	r2,r17,1
 40039cc:	043fffc4 	movi	r16,-1
 40039d0:	000b883a 	mov	r5,zero
 40039d4:	003f8a06 	br	4003800 <__alt_data_end+0xfc003800>
 40039d8:	00ff0034 	movhi	r3,64512
 40039dc:	18ffffc4 	addi	r3,r3,-1
 40039e0:	80a1c83a 	sub	r16,r16,r2
 40039e4:	90c6703a 	and	r3,r18,r3
 40039e8:	003f7706 	br	40037c8 <__alt_data_end+0xfc0037c8>
 40039ec:	2000431e 	bne	r4,zero,4003afc <__subsf3+0x398>
 40039f0:	81000044 	addi	r4,r16,1
 40039f4:	21803fcc 	andi	r6,r4,255
 40039f8:	01400044 	movi	r5,1
 40039fc:	2980280e 	bge	r5,r6,4003aa0 <__subsf3+0x33c>
 4003a00:	01403fc4 	movi	r5,255
 4003a04:	21402326 	beq	r4,r5,4003a94 <__subsf3+0x330>
 4003a08:	19c7883a 	add	r3,r3,r7
 4003a0c:	1806d07a 	srli	r3,r3,1
 4003a10:	2021883a 	mov	r16,r4
 4003a14:	003f6c06 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003a18:	1023883a 	mov	r17,r2
 4003a1c:	003fa906 	br	40038c4 <__alt_data_end+0xfc0038c4>
 4003a20:	01c00044 	movi	r7,1
 4003a24:	003f9006 	br	4003868 <__alt_data_end+0xfc003868>
 4003a28:	8000151e 	bne	r16,zero,4003a80 <__subsf3+0x31c>
 4003a2c:	18002f26 	beq	r3,zero,4003aec <__subsf3+0x388>
 4003a30:	0108303a 	nor	r4,zero,r4
 4003a34:	20000a26 	beq	r4,zero,4003a60 <__subsf3+0x2fc>
 4003a38:	01403fc4 	movi	r5,255
 4003a3c:	31402b26 	beq	r6,r5,4003aec <__subsf3+0x388>
 4003a40:	014006c4 	movi	r5,27
 4003a44:	29006e16 	blt	r5,r4,4003c00 <__subsf3+0x49c>
 4003a48:	01400804 	movi	r5,32
 4003a4c:	290bc83a 	sub	r5,r5,r4
 4003a50:	194a983a 	sll	r5,r3,r5
 4003a54:	1908d83a 	srl	r4,r3,r4
 4003a58:	2806c03a 	cmpne	r3,r5,zero
 4003a5c:	20c6b03a 	or	r3,r4,r3
 4003a60:	38c7c83a 	sub	r3,r7,r3
 4003a64:	3021883a 	mov	r16,r6
 4003a68:	1023883a 	mov	r17,r2
 4003a6c:	003f7f06 	br	400386c <__alt_data_end+0xfc00386c>
 4003a70:	903f831e 	bne	r18,zero,4003880 <__alt_data_end+0xfc003880>
 4003a74:	0005883a 	mov	r2,zero
 4003a78:	0021883a 	mov	r16,zero
 4003a7c:	003f9a06 	br	40038e8 <__alt_data_end+0xfc0038e8>
 4003a80:	01403fc4 	movi	r5,255
 4003a84:	31401926 	beq	r6,r5,4003aec <__subsf3+0x388>
 4003a88:	0109c83a 	sub	r4,zero,r4
 4003a8c:	18c10034 	orhi	r3,r3,1024
 4003a90:	003feb06 	br	4003a40 <__alt_data_end+0xfc003a40>
 4003a94:	043fffc4 	movi	r16,-1
 4003a98:	000b883a 	mov	r5,zero
 4003a9c:	003f5806 	br	4003800 <__alt_data_end+0xfc003800>
 4003aa0:	8000481e 	bne	r16,zero,4003bc4 <__subsf3+0x460>
 4003aa4:	18006226 	beq	r3,zero,4003c30 <__subsf3+0x4cc>
 4003aa8:	383f4726 	beq	r7,zero,40037c8 <__alt_data_end+0xfc0037c8>
 4003aac:	19c7883a 	add	r3,r3,r7
 4003ab0:	1881002c 	andhi	r2,r3,1024
 4003ab4:	103f8326 	beq	r2,zero,40038c4 <__alt_data_end+0xfc0038c4>
 4003ab8:	00bf0034 	movhi	r2,64512
 4003abc:	10bfffc4 	addi	r2,r2,-1
 4003ac0:	2821883a 	mov	r16,r5
 4003ac4:	1886703a 	and	r3,r3,r2
 4003ac8:	003f3f06 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003acc:	80001c1e 	bne	r16,zero,4003b40 <__subsf3+0x3dc>
 4003ad0:	1800261e 	bne	r3,zero,4003b6c <__subsf3+0x408>
 4003ad4:	38004c26 	beq	r7,zero,4003c08 <__subsf3+0x4a4>
 4003ad8:	3807883a 	mov	r3,r7
 4003adc:	1023883a 	mov	r17,r2
 4003ae0:	003f3906 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003ae4:	01c00044 	movi	r7,1
 4003ae8:	003f9006 	br	400392c <__alt_data_end+0xfc00392c>
 4003aec:	3807883a 	mov	r3,r7
 4003af0:	3021883a 	mov	r16,r6
 4003af4:	1023883a 	mov	r17,r2
 4003af8:	003f3306 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003afc:	8000161e 	bne	r16,zero,4003b58 <__subsf3+0x3f4>
 4003b00:	18002d26 	beq	r3,zero,4003bb8 <__subsf3+0x454>
 4003b04:	0108303a 	nor	r4,zero,r4
 4003b08:	20000a26 	beq	r4,zero,4003b34 <__subsf3+0x3d0>
 4003b0c:	01403fc4 	movi	r5,255
 4003b10:	31402926 	beq	r6,r5,4003bb8 <__subsf3+0x454>
 4003b14:	014006c4 	movi	r5,27
 4003b18:	29004716 	blt	r5,r4,4003c38 <__subsf3+0x4d4>
 4003b1c:	01400804 	movi	r5,32
 4003b20:	290bc83a 	sub	r5,r5,r4
 4003b24:	194a983a 	sll	r5,r3,r5
 4003b28:	1908d83a 	srl	r4,r3,r4
 4003b2c:	2806c03a 	cmpne	r3,r5,zero
 4003b30:	20c6b03a 	or	r3,r4,r3
 4003b34:	19c7883a 	add	r3,r3,r7
 4003b38:	3021883a 	mov	r16,r6
 4003b3c:	003f7c06 	br	4003930 <__alt_data_end+0xfc003930>
 4003b40:	1800111e 	bne	r3,zero,4003b88 <__subsf3+0x424>
 4003b44:	38003326 	beq	r7,zero,4003c14 <__subsf3+0x4b0>
 4003b48:	3807883a 	mov	r3,r7
 4003b4c:	1023883a 	mov	r17,r2
 4003b50:	04003fc4 	movi	r16,255
 4003b54:	003f1c06 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003b58:	01403fc4 	movi	r5,255
 4003b5c:	31401626 	beq	r6,r5,4003bb8 <__subsf3+0x454>
 4003b60:	0109c83a 	sub	r4,zero,r4
 4003b64:	18c10034 	orhi	r3,r3,1024
 4003b68:	003fea06 	br	4003b14 <__alt_data_end+0xfc003b14>
 4003b6c:	383f1626 	beq	r7,zero,40037c8 <__alt_data_end+0xfc0037c8>
 4003b70:	19c9c83a 	sub	r4,r3,r7
 4003b74:	2141002c 	andhi	r5,r4,1024
 4003b78:	283f5026 	beq	r5,zero,40038bc <__alt_data_end+0xfc0038bc>
 4003b7c:	38c7c83a 	sub	r3,r7,r3
 4003b80:	1023883a 	mov	r17,r2
 4003b84:	003f1006 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003b88:	38001b26 	beq	r7,zero,4003bf8 <__subsf3+0x494>
 4003b8c:	1806d0fa 	srli	r3,r3,3
 4003b90:	1900102c 	andhi	r4,r3,64
 4003b94:	20000526 	beq	r4,zero,4003bac <__subsf3+0x448>
 4003b98:	380ed0fa 	srli	r7,r7,3
 4003b9c:	3900102c 	andhi	r4,r7,64
 4003ba0:	2000021e 	bne	r4,zero,4003bac <__subsf3+0x448>
 4003ba4:	3807883a 	mov	r3,r7
 4003ba8:	1023883a 	mov	r17,r2
 4003bac:	180690fa 	slli	r3,r3,3
 4003bb0:	04003fc4 	movi	r16,255
 4003bb4:	003f0406 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003bb8:	3807883a 	mov	r3,r7
 4003bbc:	3021883a 	mov	r16,r6
 4003bc0:	003f0106 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003bc4:	18001726 	beq	r3,zero,4003c24 <__subsf3+0x4c0>
 4003bc8:	38000b26 	beq	r7,zero,4003bf8 <__subsf3+0x494>
 4003bcc:	1806d0fa 	srli	r3,r3,3
 4003bd0:	1900102c 	andhi	r4,r3,64
 4003bd4:	20000426 	beq	r4,zero,4003be8 <__subsf3+0x484>
 4003bd8:	380ed0fa 	srli	r7,r7,3
 4003bdc:	3900102c 	andhi	r4,r7,64
 4003be0:	2000011e 	bne	r4,zero,4003be8 <__subsf3+0x484>
 4003be4:	3807883a 	mov	r3,r7
 4003be8:	180690fa 	slli	r3,r3,3
 4003bec:	1023883a 	mov	r17,r2
 4003bf0:	04003fc4 	movi	r16,255
 4003bf4:	003ef406 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003bf8:	04003fc4 	movi	r16,255
 4003bfc:	003ef206 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003c00:	00c00044 	movi	r3,1
 4003c04:	003f9606 	br	4003a60 <__alt_data_end+0xfc003a60>
 4003c08:	000b883a 	mov	r5,zero
 4003c0c:	0005883a 	mov	r2,zero
 4003c10:	003f3506 	br	40038e8 <__alt_data_end+0xfc0038e8>
 4003c14:	01402034 	movhi	r5,128
 4003c18:	297fffc4 	addi	r5,r5,-1
 4003c1c:	0005883a 	mov	r2,zero
 4003c20:	003f2f06 	br	40038e0 <__alt_data_end+0xfc0038e0>
 4003c24:	3807883a 	mov	r3,r7
 4003c28:	04003fc4 	movi	r16,255
 4003c2c:	003ee606 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003c30:	3807883a 	mov	r3,r7
 4003c34:	003ee406 	br	40037c8 <__alt_data_end+0xfc0037c8>
 4003c38:	00c00044 	movi	r3,1
 4003c3c:	003fbd06 	br	4003b34 <__alt_data_end+0xfc003b34>
 4003c40:	0005883a 	mov	r2,zero
 4003c44:	003f2806 	br	40038e8 <__alt_data_end+0xfc0038e8>

04003c48 <__fixsfsi>:
 4003c48:	200ad5fa 	srli	r5,r4,23
 4003c4c:	00c02034 	movhi	r3,128
 4003c50:	18ffffc4 	addi	r3,r3,-1
 4003c54:	29403fcc 	andi	r5,r5,255
 4003c58:	00801f84 	movi	r2,126
 4003c5c:	1906703a 	and	r3,r3,r4
 4003c60:	2008d7fa 	srli	r4,r4,31
 4003c64:	11400e0e 	bge	r2,r5,4003ca0 <__fixsfsi+0x58>
 4003c68:	00802744 	movi	r2,157
 4003c6c:	11400816 	blt	r2,r5,4003c90 <__fixsfsi+0x48>
 4003c70:	00802544 	movi	r2,149
 4003c74:	18c02034 	orhi	r3,r3,128
 4003c78:	11400b0e 	bge	r2,r5,4003ca8 <__fixsfsi+0x60>
 4003c7c:	28bfda84 	addi	r2,r5,-150
 4003c80:	1884983a 	sll	r2,r3,r2
 4003c84:	20000726 	beq	r4,zero,4003ca4 <__fixsfsi+0x5c>
 4003c88:	0085c83a 	sub	r2,zero,r2
 4003c8c:	f800283a 	ret
 4003c90:	00a00034 	movhi	r2,32768
 4003c94:	10bfffc4 	addi	r2,r2,-1
 4003c98:	2085883a 	add	r2,r4,r2
 4003c9c:	f800283a 	ret
 4003ca0:	0005883a 	mov	r2,zero
 4003ca4:	f800283a 	ret
 4003ca8:	00802584 	movi	r2,150
 4003cac:	1145c83a 	sub	r2,r2,r5
 4003cb0:	1884d83a 	srl	r2,r3,r2
 4003cb4:	003ff306 	br	4003c84 <__alt_data_end+0xfc003c84>

04003cb8 <__floatunsisf>:
 4003cb8:	defffe04 	addi	sp,sp,-8
 4003cbc:	dfc00115 	stw	ra,4(sp)
 4003cc0:	dc000015 	stw	r16,0(sp)
 4003cc4:	20002c26 	beq	r4,zero,4003d78 <__floatunsisf+0xc0>
 4003cc8:	2021883a 	mov	r16,r4
 4003ccc:	4003da80 	call	4003da8 <__clzsi2>
 4003cd0:	00c02784 	movi	r3,158
 4003cd4:	1887c83a 	sub	r3,r3,r2
 4003cd8:	01002584 	movi	r4,150
 4003cdc:	20c00f16 	blt	r4,r3,4003d1c <__floatunsisf+0x64>
 4003ce0:	20c9c83a 	sub	r4,r4,r3
 4003ce4:	8108983a 	sll	r4,r16,r4
 4003ce8:	00802034 	movhi	r2,128
 4003cec:	10bfffc4 	addi	r2,r2,-1
 4003cf0:	2088703a 	and	r4,r4,r2
 4003cf4:	18803fcc 	andi	r2,r3,255
 4003cf8:	100695fa 	slli	r3,r2,23
 4003cfc:	00802034 	movhi	r2,128
 4003d00:	10bfffc4 	addi	r2,r2,-1
 4003d04:	2084703a 	and	r2,r4,r2
 4003d08:	10c4b03a 	or	r2,r2,r3
 4003d0c:	dfc00117 	ldw	ra,4(sp)
 4003d10:	dc000017 	ldw	r16,0(sp)
 4003d14:	dec00204 	addi	sp,sp,8
 4003d18:	f800283a 	ret
 4003d1c:	01002644 	movi	r4,153
 4003d20:	20c01816 	blt	r4,r3,4003d84 <__floatunsisf+0xcc>
 4003d24:	20c9c83a 	sub	r4,r4,r3
 4003d28:	8108983a 	sll	r4,r16,r4
 4003d2c:	017f0034 	movhi	r5,64512
 4003d30:	297fffc4 	addi	r5,r5,-1
 4003d34:	218001cc 	andi	r6,r4,7
 4003d38:	214a703a 	and	r5,r4,r5
 4003d3c:	30000426 	beq	r6,zero,4003d50 <__floatunsisf+0x98>
 4003d40:	210003cc 	andi	r4,r4,15
 4003d44:	01800104 	movi	r6,4
 4003d48:	21800126 	beq	r4,r6,4003d50 <__floatunsisf+0x98>
 4003d4c:	298b883a 	add	r5,r5,r6
 4003d50:	2901002c 	andhi	r4,r5,1024
 4003d54:	20000526 	beq	r4,zero,4003d6c <__floatunsisf+0xb4>
 4003d58:	00c027c4 	movi	r3,159
 4003d5c:	1887c83a 	sub	r3,r3,r2
 4003d60:	00bf0034 	movhi	r2,64512
 4003d64:	10bfffc4 	addi	r2,r2,-1
 4003d68:	288a703a 	and	r5,r5,r2
 4003d6c:	280891ba 	slli	r4,r5,6
 4003d70:	2008d27a 	srli	r4,r4,9
 4003d74:	003fdf06 	br	4003cf4 <__alt_data_end+0xfc003cf4>
 4003d78:	0007883a 	mov	r3,zero
 4003d7c:	0009883a 	mov	r4,zero
 4003d80:	003fdc06 	br	4003cf4 <__alt_data_end+0xfc003cf4>
 4003d84:	01402e44 	movi	r5,185
 4003d88:	28cbc83a 	sub	r5,r5,r3
 4003d8c:	01000144 	movi	r4,5
 4003d90:	2089c83a 	sub	r4,r4,r2
 4003d94:	814a983a 	sll	r5,r16,r5
 4003d98:	8108d83a 	srl	r4,r16,r4
 4003d9c:	2820c03a 	cmpne	r16,r5,zero
 4003da0:	2408b03a 	or	r4,r4,r16
 4003da4:	003fe106 	br	4003d2c <__alt_data_end+0xfc003d2c>

04003da8 <__clzsi2>:
 4003da8:	00bfffd4 	movui	r2,65535
 4003dac:	11000536 	bltu	r2,r4,4003dc4 <__clzsi2+0x1c>
 4003db0:	00803fc4 	movi	r2,255
 4003db4:	11000f36 	bltu	r2,r4,4003df4 <__clzsi2+0x4c>
 4003db8:	00800804 	movi	r2,32
 4003dbc:	0007883a 	mov	r3,zero
 4003dc0:	00000506 	br	4003dd8 <__clzsi2+0x30>
 4003dc4:	00804034 	movhi	r2,256
 4003dc8:	10bfffc4 	addi	r2,r2,-1
 4003dcc:	11000c2e 	bgeu	r2,r4,4003e00 <__clzsi2+0x58>
 4003dd0:	00800204 	movi	r2,8
 4003dd4:	00c00604 	movi	r3,24
 4003dd8:	20c8d83a 	srl	r4,r4,r3
 4003ddc:	00c10074 	movhi	r3,1025
 4003de0:	18d58504 	addi	r3,r3,22036
 4003de4:	1909883a 	add	r4,r3,r4
 4003de8:	20c00003 	ldbu	r3,0(r4)
 4003dec:	10c5c83a 	sub	r2,r2,r3
 4003df0:	f800283a 	ret
 4003df4:	00800604 	movi	r2,24
 4003df8:	00c00204 	movi	r3,8
 4003dfc:	003ff606 	br	4003dd8 <__alt_data_end+0xfc003dd8>
 4003e00:	00800404 	movi	r2,16
 4003e04:	1007883a 	mov	r3,r2
 4003e08:	003ff306 	br	4003dd8 <__alt_data_end+0xfc003dd8>

04003e0c <malloc>:
 4003e0c:	00810074 	movhi	r2,1025
 4003e10:	109d1f04 	addi	r2,r2,29820
 4003e14:	200b883a 	mov	r5,r4
 4003e18:	11000017 	ldw	r4,0(r2)
 4003e1c:	4003e341 	jmpi	4003e34 <_malloc_r>

04003e20 <free>:
 4003e20:	00810074 	movhi	r2,1025
 4003e24:	109d1f04 	addi	r2,r2,29820
 4003e28:	200b883a 	mov	r5,r4
 4003e2c:	11000017 	ldw	r4,0(r2)
 4003e30:	4008dcc1 	jmpi	4008dcc <_free_r>

04003e34 <_malloc_r>:
 4003e34:	defff504 	addi	sp,sp,-44
 4003e38:	dc800315 	stw	r18,12(sp)
 4003e3c:	dfc00a15 	stw	ra,40(sp)
 4003e40:	df000915 	stw	fp,36(sp)
 4003e44:	ddc00815 	stw	r23,32(sp)
 4003e48:	dd800715 	stw	r22,28(sp)
 4003e4c:	dd400615 	stw	r21,24(sp)
 4003e50:	dd000515 	stw	r20,20(sp)
 4003e54:	dcc00415 	stw	r19,16(sp)
 4003e58:	dc400215 	stw	r17,8(sp)
 4003e5c:	dc000115 	stw	r16,4(sp)
 4003e60:	288002c4 	addi	r2,r5,11
 4003e64:	00c00584 	movi	r3,22
 4003e68:	2025883a 	mov	r18,r4
 4003e6c:	18807f2e 	bgeu	r3,r2,400406c <_malloc_r+0x238>
 4003e70:	047ffe04 	movi	r17,-8
 4003e74:	1462703a 	and	r17,r2,r17
 4003e78:	8800a316 	blt	r17,zero,4004108 <_malloc_r+0x2d4>
 4003e7c:	8940a236 	bltu	r17,r5,4004108 <_malloc_r+0x2d4>
 4003e80:	4010ab80 	call	4010ab8 <__malloc_lock>
 4003e84:	00807dc4 	movi	r2,503
 4003e88:	1441e92e 	bgeu	r2,r17,4004630 <_malloc_r+0x7fc>
 4003e8c:	8804d27a 	srli	r2,r17,9
 4003e90:	1000a126 	beq	r2,zero,4004118 <_malloc_r+0x2e4>
 4003e94:	00c00104 	movi	r3,4
 4003e98:	18811e36 	bltu	r3,r2,4004314 <_malloc_r+0x4e0>
 4003e9c:	8804d1ba 	srli	r2,r17,6
 4003ea0:	12000e44 	addi	r8,r2,57
 4003ea4:	11c00e04 	addi	r7,r2,56
 4003ea8:	4209883a 	add	r4,r8,r8
 4003eac:	04c10074 	movhi	r19,1025
 4003eb0:	2109883a 	add	r4,r4,r4
 4003eb4:	9cd65c04 	addi	r19,r19,22896
 4003eb8:	2109883a 	add	r4,r4,r4
 4003ebc:	9909883a 	add	r4,r19,r4
 4003ec0:	24000117 	ldw	r16,4(r4)
 4003ec4:	213ffe04 	addi	r4,r4,-8
 4003ec8:	24009726 	beq	r4,r16,4004128 <_malloc_r+0x2f4>
 4003ecc:	80800117 	ldw	r2,4(r16)
 4003ed0:	01bfff04 	movi	r6,-4
 4003ed4:	014003c4 	movi	r5,15
 4003ed8:	1184703a 	and	r2,r2,r6
 4003edc:	1447c83a 	sub	r3,r2,r17
 4003ee0:	28c00716 	blt	r5,r3,4003f00 <_malloc_r+0xcc>
 4003ee4:	1800920e 	bge	r3,zero,4004130 <_malloc_r+0x2fc>
 4003ee8:	84000317 	ldw	r16,12(r16)
 4003eec:	24008e26 	beq	r4,r16,4004128 <_malloc_r+0x2f4>
 4003ef0:	80800117 	ldw	r2,4(r16)
 4003ef4:	1184703a 	and	r2,r2,r6
 4003ef8:	1447c83a 	sub	r3,r2,r17
 4003efc:	28fff90e 	bge	r5,r3,4003ee4 <__alt_data_end+0xfc003ee4>
 4003f00:	3809883a 	mov	r4,r7
 4003f04:	01810074 	movhi	r6,1025
 4003f08:	9c000417 	ldw	r16,16(r19)
 4003f0c:	31965c04 	addi	r6,r6,22896
 4003f10:	32000204 	addi	r8,r6,8
 4003f14:	82013426 	beq	r16,r8,40043e8 <_malloc_r+0x5b4>
 4003f18:	80c00117 	ldw	r3,4(r16)
 4003f1c:	00bfff04 	movi	r2,-4
 4003f20:	188e703a 	and	r7,r3,r2
 4003f24:	3c45c83a 	sub	r2,r7,r17
 4003f28:	00c003c4 	movi	r3,15
 4003f2c:	18811f16 	blt	r3,r2,40043ac <_malloc_r+0x578>
 4003f30:	32000515 	stw	r8,20(r6)
 4003f34:	32000415 	stw	r8,16(r6)
 4003f38:	10007f0e 	bge	r2,zero,4004138 <_malloc_r+0x304>
 4003f3c:	00807fc4 	movi	r2,511
 4003f40:	11c0fd36 	bltu	r2,r7,4004338 <_malloc_r+0x504>
 4003f44:	3806d0fa 	srli	r3,r7,3
 4003f48:	01c00044 	movi	r7,1
 4003f4c:	30800117 	ldw	r2,4(r6)
 4003f50:	19400044 	addi	r5,r3,1
 4003f54:	294b883a 	add	r5,r5,r5
 4003f58:	1807d0ba 	srai	r3,r3,2
 4003f5c:	294b883a 	add	r5,r5,r5
 4003f60:	294b883a 	add	r5,r5,r5
 4003f64:	298b883a 	add	r5,r5,r6
 4003f68:	38c6983a 	sll	r3,r7,r3
 4003f6c:	29c00017 	ldw	r7,0(r5)
 4003f70:	2a7ffe04 	addi	r9,r5,-8
 4003f74:	1886b03a 	or	r3,r3,r2
 4003f78:	82400315 	stw	r9,12(r16)
 4003f7c:	81c00215 	stw	r7,8(r16)
 4003f80:	30c00115 	stw	r3,4(r6)
 4003f84:	2c000015 	stw	r16,0(r5)
 4003f88:	3c000315 	stw	r16,12(r7)
 4003f8c:	2005d0ba 	srai	r2,r4,2
 4003f90:	01400044 	movi	r5,1
 4003f94:	288a983a 	sll	r5,r5,r2
 4003f98:	19406f36 	bltu	r3,r5,4004158 <_malloc_r+0x324>
 4003f9c:	28c4703a 	and	r2,r5,r3
 4003fa0:	10000a1e 	bne	r2,zero,4003fcc <_malloc_r+0x198>
 4003fa4:	00bfff04 	movi	r2,-4
 4003fa8:	294b883a 	add	r5,r5,r5
 4003fac:	2088703a 	and	r4,r4,r2
 4003fb0:	28c4703a 	and	r2,r5,r3
 4003fb4:	21000104 	addi	r4,r4,4
 4003fb8:	1000041e 	bne	r2,zero,4003fcc <_malloc_r+0x198>
 4003fbc:	294b883a 	add	r5,r5,r5
 4003fc0:	28c4703a 	and	r2,r5,r3
 4003fc4:	21000104 	addi	r4,r4,4
 4003fc8:	103ffc26 	beq	r2,zero,4003fbc <__alt_data_end+0xfc003fbc>
 4003fcc:	02bfff04 	movi	r10,-4
 4003fd0:	024003c4 	movi	r9,15
 4003fd4:	21800044 	addi	r6,r4,1
 4003fd8:	318d883a 	add	r6,r6,r6
 4003fdc:	318d883a 	add	r6,r6,r6
 4003fe0:	318d883a 	add	r6,r6,r6
 4003fe4:	998d883a 	add	r6,r19,r6
 4003fe8:	333ffe04 	addi	r12,r6,-8
 4003fec:	2017883a 	mov	r11,r4
 4003ff0:	31800104 	addi	r6,r6,4
 4003ff4:	34000017 	ldw	r16,0(r6)
 4003ff8:	31fffd04 	addi	r7,r6,-12
 4003ffc:	81c0041e 	bne	r16,r7,4004010 <_malloc_r+0x1dc>
 4004000:	0000fb06 	br	40043f0 <_malloc_r+0x5bc>
 4004004:	1801030e 	bge	r3,zero,4004414 <_malloc_r+0x5e0>
 4004008:	84000317 	ldw	r16,12(r16)
 400400c:	81c0f826 	beq	r16,r7,40043f0 <_malloc_r+0x5bc>
 4004010:	80800117 	ldw	r2,4(r16)
 4004014:	1284703a 	and	r2,r2,r10
 4004018:	1447c83a 	sub	r3,r2,r17
 400401c:	48fff90e 	bge	r9,r3,4004004 <__alt_data_end+0xfc004004>
 4004020:	80800317 	ldw	r2,12(r16)
 4004024:	81000217 	ldw	r4,8(r16)
 4004028:	89400054 	ori	r5,r17,1
 400402c:	81400115 	stw	r5,4(r16)
 4004030:	20800315 	stw	r2,12(r4)
 4004034:	11000215 	stw	r4,8(r2)
 4004038:	8463883a 	add	r17,r16,r17
 400403c:	9c400515 	stw	r17,20(r19)
 4004040:	9c400415 	stw	r17,16(r19)
 4004044:	18800054 	ori	r2,r3,1
 4004048:	88800115 	stw	r2,4(r17)
 400404c:	8a000315 	stw	r8,12(r17)
 4004050:	8a000215 	stw	r8,8(r17)
 4004054:	88e3883a 	add	r17,r17,r3
 4004058:	88c00015 	stw	r3,0(r17)
 400405c:	9009883a 	mov	r4,r18
 4004060:	4010adc0 	call	4010adc <__malloc_unlock>
 4004064:	80800204 	addi	r2,r16,8
 4004068:	00001b06 	br	40040d8 <_malloc_r+0x2a4>
 400406c:	04400404 	movi	r17,16
 4004070:	89402536 	bltu	r17,r5,4004108 <_malloc_r+0x2d4>
 4004074:	4010ab80 	call	4010ab8 <__malloc_lock>
 4004078:	00800184 	movi	r2,6
 400407c:	01000084 	movi	r4,2
 4004080:	04c10074 	movhi	r19,1025
 4004084:	1085883a 	add	r2,r2,r2
 4004088:	9cd65c04 	addi	r19,r19,22896
 400408c:	1085883a 	add	r2,r2,r2
 4004090:	9885883a 	add	r2,r19,r2
 4004094:	14000117 	ldw	r16,4(r2)
 4004098:	10fffe04 	addi	r3,r2,-8
 400409c:	80c0d926 	beq	r16,r3,4004404 <_malloc_r+0x5d0>
 40040a0:	80c00117 	ldw	r3,4(r16)
 40040a4:	81000317 	ldw	r4,12(r16)
 40040a8:	00bfff04 	movi	r2,-4
 40040ac:	1884703a 	and	r2,r3,r2
 40040b0:	81400217 	ldw	r5,8(r16)
 40040b4:	8085883a 	add	r2,r16,r2
 40040b8:	10c00117 	ldw	r3,4(r2)
 40040bc:	29000315 	stw	r4,12(r5)
 40040c0:	21400215 	stw	r5,8(r4)
 40040c4:	18c00054 	ori	r3,r3,1
 40040c8:	10c00115 	stw	r3,4(r2)
 40040cc:	9009883a 	mov	r4,r18
 40040d0:	4010adc0 	call	4010adc <__malloc_unlock>
 40040d4:	80800204 	addi	r2,r16,8
 40040d8:	dfc00a17 	ldw	ra,40(sp)
 40040dc:	df000917 	ldw	fp,36(sp)
 40040e0:	ddc00817 	ldw	r23,32(sp)
 40040e4:	dd800717 	ldw	r22,28(sp)
 40040e8:	dd400617 	ldw	r21,24(sp)
 40040ec:	dd000517 	ldw	r20,20(sp)
 40040f0:	dcc00417 	ldw	r19,16(sp)
 40040f4:	dc800317 	ldw	r18,12(sp)
 40040f8:	dc400217 	ldw	r17,8(sp)
 40040fc:	dc000117 	ldw	r16,4(sp)
 4004100:	dec00b04 	addi	sp,sp,44
 4004104:	f800283a 	ret
 4004108:	00800304 	movi	r2,12
 400410c:	90800015 	stw	r2,0(r18)
 4004110:	0005883a 	mov	r2,zero
 4004114:	003ff006 	br	40040d8 <__alt_data_end+0xfc0040d8>
 4004118:	01002004 	movi	r4,128
 400411c:	02001004 	movi	r8,64
 4004120:	01c00fc4 	movi	r7,63
 4004124:	003f6106 	br	4003eac <__alt_data_end+0xfc003eac>
 4004128:	4009883a 	mov	r4,r8
 400412c:	003f7506 	br	4003f04 <__alt_data_end+0xfc003f04>
 4004130:	81000317 	ldw	r4,12(r16)
 4004134:	003fde06 	br	40040b0 <__alt_data_end+0xfc0040b0>
 4004138:	81c5883a 	add	r2,r16,r7
 400413c:	11400117 	ldw	r5,4(r2)
 4004140:	9009883a 	mov	r4,r18
 4004144:	29400054 	ori	r5,r5,1
 4004148:	11400115 	stw	r5,4(r2)
 400414c:	4010adc0 	call	4010adc <__malloc_unlock>
 4004150:	80800204 	addi	r2,r16,8
 4004154:	003fe006 	br	40040d8 <__alt_data_end+0xfc0040d8>
 4004158:	9c000217 	ldw	r16,8(r19)
 400415c:	00bfff04 	movi	r2,-4
 4004160:	85800117 	ldw	r22,4(r16)
 4004164:	b0ac703a 	and	r22,r22,r2
 4004168:	b4400336 	bltu	r22,r17,4004178 <_malloc_r+0x344>
 400416c:	b445c83a 	sub	r2,r22,r17
 4004170:	00c003c4 	movi	r3,15
 4004174:	18805d16 	blt	r3,r2,40042ec <_malloc_r+0x4b8>
 4004178:	05c10074 	movhi	r23,1025
 400417c:	008100b4 	movhi	r2,1026
 4004180:	10a41404 	addi	r2,r2,-28592
 4004184:	bddd1c04 	addi	r23,r23,29808
 4004188:	15400017 	ldw	r21,0(r2)
 400418c:	b8c00017 	ldw	r3,0(r23)
 4004190:	00bfffc4 	movi	r2,-1
 4004194:	858d883a 	add	r6,r16,r22
 4004198:	8d6b883a 	add	r21,r17,r21
 400419c:	1880ea26 	beq	r3,r2,4004548 <_malloc_r+0x714>
 40041a0:	ad4403c4 	addi	r21,r21,4111
 40041a4:	00bc0004 	movi	r2,-4096
 40041a8:	a8aa703a 	and	r21,r21,r2
 40041ac:	a80b883a 	mov	r5,r21
 40041b0:	9009883a 	mov	r4,r18
 40041b4:	d9800015 	stw	r6,0(sp)
 40041b8:	40048c80 	call	40048c8 <_sbrk_r>
 40041bc:	1029883a 	mov	r20,r2
 40041c0:	00bfffc4 	movi	r2,-1
 40041c4:	d9800017 	ldw	r6,0(sp)
 40041c8:	a080e826 	beq	r20,r2,400456c <_malloc_r+0x738>
 40041cc:	a180a636 	bltu	r20,r6,4004468 <_malloc_r+0x634>
 40041d0:	070100b4 	movhi	fp,1026
 40041d4:	e7242a04 	addi	fp,fp,-28504
 40041d8:	e0800017 	ldw	r2,0(fp)
 40041dc:	a887883a 	add	r3,r21,r2
 40041e0:	e0c00015 	stw	r3,0(fp)
 40041e4:	3500e626 	beq	r6,r20,4004580 <_malloc_r+0x74c>
 40041e8:	b9000017 	ldw	r4,0(r23)
 40041ec:	00bfffc4 	movi	r2,-1
 40041f0:	2080ee26 	beq	r4,r2,40045ac <_malloc_r+0x778>
 40041f4:	a185c83a 	sub	r2,r20,r6
 40041f8:	10c5883a 	add	r2,r2,r3
 40041fc:	e0800015 	stw	r2,0(fp)
 4004200:	a0c001cc 	andi	r3,r20,7
 4004204:	1800bc26 	beq	r3,zero,40044f8 <_malloc_r+0x6c4>
 4004208:	a0e9c83a 	sub	r20,r20,r3
 400420c:	00840204 	movi	r2,4104
 4004210:	a5000204 	addi	r20,r20,8
 4004214:	10c7c83a 	sub	r3,r2,r3
 4004218:	a545883a 	add	r2,r20,r21
 400421c:	1083ffcc 	andi	r2,r2,4095
 4004220:	18abc83a 	sub	r21,r3,r2
 4004224:	a80b883a 	mov	r5,r21
 4004228:	9009883a 	mov	r4,r18
 400422c:	40048c80 	call	40048c8 <_sbrk_r>
 4004230:	00ffffc4 	movi	r3,-1
 4004234:	10c0e126 	beq	r2,r3,40045bc <_malloc_r+0x788>
 4004238:	1505c83a 	sub	r2,r2,r20
 400423c:	1545883a 	add	r2,r2,r21
 4004240:	10800054 	ori	r2,r2,1
 4004244:	e0c00017 	ldw	r3,0(fp)
 4004248:	9d000215 	stw	r20,8(r19)
 400424c:	a0800115 	stw	r2,4(r20)
 4004250:	a8c7883a 	add	r3,r21,r3
 4004254:	e0c00015 	stw	r3,0(fp)
 4004258:	84c00e26 	beq	r16,r19,4004294 <_malloc_r+0x460>
 400425c:	018003c4 	movi	r6,15
 4004260:	3580a72e 	bgeu	r6,r22,4004500 <_malloc_r+0x6cc>
 4004264:	81400117 	ldw	r5,4(r16)
 4004268:	013ffe04 	movi	r4,-8
 400426c:	b0bffd04 	addi	r2,r22,-12
 4004270:	1104703a 	and	r2,r2,r4
 4004274:	2900004c 	andi	r4,r5,1
 4004278:	2088b03a 	or	r4,r4,r2
 400427c:	81000115 	stw	r4,4(r16)
 4004280:	01400144 	movi	r5,5
 4004284:	8089883a 	add	r4,r16,r2
 4004288:	21400115 	stw	r5,4(r4)
 400428c:	21400215 	stw	r5,8(r4)
 4004290:	3080cd36 	bltu	r6,r2,40045c8 <_malloc_r+0x794>
 4004294:	008100b4 	movhi	r2,1026
 4004298:	10a41304 	addi	r2,r2,-28596
 400429c:	11000017 	ldw	r4,0(r2)
 40042a0:	20c0012e 	bgeu	r4,r3,40042a8 <_malloc_r+0x474>
 40042a4:	10c00015 	stw	r3,0(r2)
 40042a8:	008100b4 	movhi	r2,1026
 40042ac:	10a41204 	addi	r2,r2,-28600
 40042b0:	11000017 	ldw	r4,0(r2)
 40042b4:	9c000217 	ldw	r16,8(r19)
 40042b8:	20c0012e 	bgeu	r4,r3,40042c0 <_malloc_r+0x48c>
 40042bc:	10c00015 	stw	r3,0(r2)
 40042c0:	80c00117 	ldw	r3,4(r16)
 40042c4:	00bfff04 	movi	r2,-4
 40042c8:	1886703a 	and	r3,r3,r2
 40042cc:	1c45c83a 	sub	r2,r3,r17
 40042d0:	1c400236 	bltu	r3,r17,40042dc <_malloc_r+0x4a8>
 40042d4:	00c003c4 	movi	r3,15
 40042d8:	18800416 	blt	r3,r2,40042ec <_malloc_r+0x4b8>
 40042dc:	9009883a 	mov	r4,r18
 40042e0:	4010adc0 	call	4010adc <__malloc_unlock>
 40042e4:	0005883a 	mov	r2,zero
 40042e8:	003f7b06 	br	40040d8 <__alt_data_end+0xfc0040d8>
 40042ec:	88c00054 	ori	r3,r17,1
 40042f0:	80c00115 	stw	r3,4(r16)
 40042f4:	8463883a 	add	r17,r16,r17
 40042f8:	10800054 	ori	r2,r2,1
 40042fc:	9c400215 	stw	r17,8(r19)
 4004300:	88800115 	stw	r2,4(r17)
 4004304:	9009883a 	mov	r4,r18
 4004308:	4010adc0 	call	4010adc <__malloc_unlock>
 400430c:	80800204 	addi	r2,r16,8
 4004310:	003f7106 	br	40040d8 <__alt_data_end+0xfc0040d8>
 4004314:	00c00504 	movi	r3,20
 4004318:	18804a2e 	bgeu	r3,r2,4004444 <_malloc_r+0x610>
 400431c:	00c01504 	movi	r3,84
 4004320:	18806e36 	bltu	r3,r2,40044dc <_malloc_r+0x6a8>
 4004324:	8804d33a 	srli	r2,r17,12
 4004328:	12001bc4 	addi	r8,r2,111
 400432c:	11c01b84 	addi	r7,r2,110
 4004330:	4209883a 	add	r4,r8,r8
 4004334:	003edd06 	br	4003eac <__alt_data_end+0xfc003eac>
 4004338:	3804d27a 	srli	r2,r7,9
 400433c:	00c00104 	movi	r3,4
 4004340:	1880442e 	bgeu	r3,r2,4004454 <_malloc_r+0x620>
 4004344:	00c00504 	movi	r3,20
 4004348:	18808136 	bltu	r3,r2,4004550 <_malloc_r+0x71c>
 400434c:	11401704 	addi	r5,r2,92
 4004350:	10c016c4 	addi	r3,r2,91
 4004354:	294b883a 	add	r5,r5,r5
 4004358:	294b883a 	add	r5,r5,r5
 400435c:	294b883a 	add	r5,r5,r5
 4004360:	994b883a 	add	r5,r19,r5
 4004364:	28800017 	ldw	r2,0(r5)
 4004368:	01810074 	movhi	r6,1025
 400436c:	297ffe04 	addi	r5,r5,-8
 4004370:	31965c04 	addi	r6,r6,22896
 4004374:	28806526 	beq	r5,r2,400450c <_malloc_r+0x6d8>
 4004378:	01bfff04 	movi	r6,-4
 400437c:	10c00117 	ldw	r3,4(r2)
 4004380:	1986703a 	and	r3,r3,r6
 4004384:	38c0022e 	bgeu	r7,r3,4004390 <_malloc_r+0x55c>
 4004388:	10800217 	ldw	r2,8(r2)
 400438c:	28bffb1e 	bne	r5,r2,400437c <__alt_data_end+0xfc00437c>
 4004390:	11400317 	ldw	r5,12(r2)
 4004394:	98c00117 	ldw	r3,4(r19)
 4004398:	81400315 	stw	r5,12(r16)
 400439c:	80800215 	stw	r2,8(r16)
 40043a0:	2c000215 	stw	r16,8(r5)
 40043a4:	14000315 	stw	r16,12(r2)
 40043a8:	003ef806 	br	4003f8c <__alt_data_end+0xfc003f8c>
 40043ac:	88c00054 	ori	r3,r17,1
 40043b0:	80c00115 	stw	r3,4(r16)
 40043b4:	8463883a 	add	r17,r16,r17
 40043b8:	34400515 	stw	r17,20(r6)
 40043bc:	34400415 	stw	r17,16(r6)
 40043c0:	10c00054 	ori	r3,r2,1
 40043c4:	8a000315 	stw	r8,12(r17)
 40043c8:	8a000215 	stw	r8,8(r17)
 40043cc:	88c00115 	stw	r3,4(r17)
 40043d0:	88a3883a 	add	r17,r17,r2
 40043d4:	88800015 	stw	r2,0(r17)
 40043d8:	9009883a 	mov	r4,r18
 40043dc:	4010adc0 	call	4010adc <__malloc_unlock>
 40043e0:	80800204 	addi	r2,r16,8
 40043e4:	003f3c06 	br	40040d8 <__alt_data_end+0xfc0040d8>
 40043e8:	30c00117 	ldw	r3,4(r6)
 40043ec:	003ee706 	br	4003f8c <__alt_data_end+0xfc003f8c>
 40043f0:	5ac00044 	addi	r11,r11,1
 40043f4:	588000cc 	andi	r2,r11,3
 40043f8:	31800204 	addi	r6,r6,8
 40043fc:	103efd1e 	bne	r2,zero,4003ff4 <__alt_data_end+0xfc003ff4>
 4004400:	00002406 	br	4004494 <_malloc_r+0x660>
 4004404:	14000317 	ldw	r16,12(r2)
 4004408:	143f251e 	bne	r2,r16,40040a0 <__alt_data_end+0xfc0040a0>
 400440c:	21000084 	addi	r4,r4,2
 4004410:	003ebc06 	br	4003f04 <__alt_data_end+0xfc003f04>
 4004414:	8085883a 	add	r2,r16,r2
 4004418:	10c00117 	ldw	r3,4(r2)
 400441c:	81000317 	ldw	r4,12(r16)
 4004420:	81400217 	ldw	r5,8(r16)
 4004424:	18c00054 	ori	r3,r3,1
 4004428:	10c00115 	stw	r3,4(r2)
 400442c:	29000315 	stw	r4,12(r5)
 4004430:	21400215 	stw	r5,8(r4)
 4004434:	9009883a 	mov	r4,r18
 4004438:	4010adc0 	call	4010adc <__malloc_unlock>
 400443c:	80800204 	addi	r2,r16,8
 4004440:	003f2506 	br	40040d8 <__alt_data_end+0xfc0040d8>
 4004444:	12001704 	addi	r8,r2,92
 4004448:	11c016c4 	addi	r7,r2,91
 400444c:	4209883a 	add	r4,r8,r8
 4004450:	003e9606 	br	4003eac <__alt_data_end+0xfc003eac>
 4004454:	3804d1ba 	srli	r2,r7,6
 4004458:	11400e44 	addi	r5,r2,57
 400445c:	10c00e04 	addi	r3,r2,56
 4004460:	294b883a 	add	r5,r5,r5
 4004464:	003fbc06 	br	4004358 <__alt_data_end+0xfc004358>
 4004468:	84ff5926 	beq	r16,r19,40041d0 <__alt_data_end+0xfc0041d0>
 400446c:	00810074 	movhi	r2,1025
 4004470:	10965c04 	addi	r2,r2,22896
 4004474:	14000217 	ldw	r16,8(r2)
 4004478:	00bfff04 	movi	r2,-4
 400447c:	80c00117 	ldw	r3,4(r16)
 4004480:	1886703a 	and	r3,r3,r2
 4004484:	003f9106 	br	40042cc <__alt_data_end+0xfc0042cc>
 4004488:	60800217 	ldw	r2,8(r12)
 400448c:	213fffc4 	addi	r4,r4,-1
 4004490:	1300651e 	bne	r2,r12,4004628 <_malloc_r+0x7f4>
 4004494:	208000cc 	andi	r2,r4,3
 4004498:	633ffe04 	addi	r12,r12,-8
 400449c:	103ffa1e 	bne	r2,zero,4004488 <__alt_data_end+0xfc004488>
 40044a0:	98800117 	ldw	r2,4(r19)
 40044a4:	0146303a 	nor	r3,zero,r5
 40044a8:	1884703a 	and	r2,r3,r2
 40044ac:	98800115 	stw	r2,4(r19)
 40044b0:	294b883a 	add	r5,r5,r5
 40044b4:	117f2836 	bltu	r2,r5,4004158 <__alt_data_end+0xfc004158>
 40044b8:	283f2726 	beq	r5,zero,4004158 <__alt_data_end+0xfc004158>
 40044bc:	2886703a 	and	r3,r5,r2
 40044c0:	5809883a 	mov	r4,r11
 40044c4:	183ec31e 	bne	r3,zero,4003fd4 <__alt_data_end+0xfc003fd4>
 40044c8:	294b883a 	add	r5,r5,r5
 40044cc:	2886703a 	and	r3,r5,r2
 40044d0:	21000104 	addi	r4,r4,4
 40044d4:	183ffc26 	beq	r3,zero,40044c8 <__alt_data_end+0xfc0044c8>
 40044d8:	003ebe06 	br	4003fd4 <__alt_data_end+0xfc003fd4>
 40044dc:	00c05504 	movi	r3,340
 40044e0:	18801236 	bltu	r3,r2,400452c <_malloc_r+0x6f8>
 40044e4:	8804d3fa 	srli	r2,r17,15
 40044e8:	12001e04 	addi	r8,r2,120
 40044ec:	11c01dc4 	addi	r7,r2,119
 40044f0:	4209883a 	add	r4,r8,r8
 40044f4:	003e6d06 	br	4003eac <__alt_data_end+0xfc003eac>
 40044f8:	00c40004 	movi	r3,4096
 40044fc:	003f4606 	br	4004218 <__alt_data_end+0xfc004218>
 4004500:	00800044 	movi	r2,1
 4004504:	a0800115 	stw	r2,4(r20)
 4004508:	003f7406 	br	40042dc <__alt_data_end+0xfc0042dc>
 400450c:	1805d0ba 	srai	r2,r3,2
 4004510:	01c00044 	movi	r7,1
 4004514:	30c00117 	ldw	r3,4(r6)
 4004518:	388e983a 	sll	r7,r7,r2
 400451c:	2805883a 	mov	r2,r5
 4004520:	38c6b03a 	or	r3,r7,r3
 4004524:	30c00115 	stw	r3,4(r6)
 4004528:	003f9b06 	br	4004398 <__alt_data_end+0xfc004398>
 400452c:	00c15504 	movi	r3,1364
 4004530:	18801a36 	bltu	r3,r2,400459c <_malloc_r+0x768>
 4004534:	8804d4ba 	srli	r2,r17,18
 4004538:	12001f44 	addi	r8,r2,125
 400453c:	11c01f04 	addi	r7,r2,124
 4004540:	4209883a 	add	r4,r8,r8
 4004544:	003e5906 	br	4003eac <__alt_data_end+0xfc003eac>
 4004548:	ad400404 	addi	r21,r21,16
 400454c:	003f1706 	br	40041ac <__alt_data_end+0xfc0041ac>
 4004550:	00c01504 	movi	r3,84
 4004554:	18802336 	bltu	r3,r2,40045e4 <_malloc_r+0x7b0>
 4004558:	3804d33a 	srli	r2,r7,12
 400455c:	11401bc4 	addi	r5,r2,111
 4004560:	10c01b84 	addi	r3,r2,110
 4004564:	294b883a 	add	r5,r5,r5
 4004568:	003f7b06 	br	4004358 <__alt_data_end+0xfc004358>
 400456c:	9c000217 	ldw	r16,8(r19)
 4004570:	00bfff04 	movi	r2,-4
 4004574:	80c00117 	ldw	r3,4(r16)
 4004578:	1886703a 	and	r3,r3,r2
 400457c:	003f5306 	br	40042cc <__alt_data_end+0xfc0042cc>
 4004580:	3083ffcc 	andi	r2,r6,4095
 4004584:	103f181e 	bne	r2,zero,40041e8 <__alt_data_end+0xfc0041e8>
 4004588:	99000217 	ldw	r4,8(r19)
 400458c:	b545883a 	add	r2,r22,r21
 4004590:	10800054 	ori	r2,r2,1
 4004594:	20800115 	stw	r2,4(r4)
 4004598:	003f3e06 	br	4004294 <__alt_data_end+0xfc004294>
 400459c:	01003f84 	movi	r4,254
 40045a0:	02001fc4 	movi	r8,127
 40045a4:	01c01f84 	movi	r7,126
 40045a8:	003e4006 	br	4003eac <__alt_data_end+0xfc003eac>
 40045ac:	00810074 	movhi	r2,1025
 40045b0:	109d1c04 	addi	r2,r2,29808
 40045b4:	15000015 	stw	r20,0(r2)
 40045b8:	003f1106 	br	4004200 <__alt_data_end+0xfc004200>
 40045bc:	00800044 	movi	r2,1
 40045c0:	002b883a 	mov	r21,zero
 40045c4:	003f1f06 	br	4004244 <__alt_data_end+0xfc004244>
 40045c8:	81400204 	addi	r5,r16,8
 40045cc:	9009883a 	mov	r4,r18
 40045d0:	4008dcc0 	call	4008dcc <_free_r>
 40045d4:	008100b4 	movhi	r2,1026
 40045d8:	10a42a04 	addi	r2,r2,-28504
 40045dc:	10c00017 	ldw	r3,0(r2)
 40045e0:	003f2c06 	br	4004294 <__alt_data_end+0xfc004294>
 40045e4:	00c05504 	movi	r3,340
 40045e8:	18800536 	bltu	r3,r2,4004600 <_malloc_r+0x7cc>
 40045ec:	3804d3fa 	srli	r2,r7,15
 40045f0:	11401e04 	addi	r5,r2,120
 40045f4:	10c01dc4 	addi	r3,r2,119
 40045f8:	294b883a 	add	r5,r5,r5
 40045fc:	003f5606 	br	4004358 <__alt_data_end+0xfc004358>
 4004600:	00c15504 	movi	r3,1364
 4004604:	18800536 	bltu	r3,r2,400461c <_malloc_r+0x7e8>
 4004608:	3804d4ba 	srli	r2,r7,18
 400460c:	11401f44 	addi	r5,r2,125
 4004610:	10c01f04 	addi	r3,r2,124
 4004614:	294b883a 	add	r5,r5,r5
 4004618:	003f4f06 	br	4004358 <__alt_data_end+0xfc004358>
 400461c:	01403f84 	movi	r5,254
 4004620:	00c01f84 	movi	r3,126
 4004624:	003f4c06 	br	4004358 <__alt_data_end+0xfc004358>
 4004628:	98800117 	ldw	r2,4(r19)
 400462c:	003fa006 	br	40044b0 <__alt_data_end+0xfc0044b0>
 4004630:	8808d0fa 	srli	r4,r17,3
 4004634:	20800044 	addi	r2,r4,1
 4004638:	1085883a 	add	r2,r2,r2
 400463c:	003e9006 	br	4004080 <__alt_data_end+0xfc004080>

04004640 <memcpy>:
 4004640:	defffd04 	addi	sp,sp,-12
 4004644:	dfc00215 	stw	ra,8(sp)
 4004648:	dc400115 	stw	r17,4(sp)
 400464c:	dc000015 	stw	r16,0(sp)
 4004650:	00c003c4 	movi	r3,15
 4004654:	2005883a 	mov	r2,r4
 4004658:	1980452e 	bgeu	r3,r6,4004770 <memcpy+0x130>
 400465c:	2906b03a 	or	r3,r5,r4
 4004660:	18c000cc 	andi	r3,r3,3
 4004664:	1800441e 	bne	r3,zero,4004778 <memcpy+0x138>
 4004668:	347ffc04 	addi	r17,r6,-16
 400466c:	8822d13a 	srli	r17,r17,4
 4004670:	28c00104 	addi	r3,r5,4
 4004674:	23400104 	addi	r13,r4,4
 4004678:	8820913a 	slli	r16,r17,4
 400467c:	2b000204 	addi	r12,r5,8
 4004680:	22c00204 	addi	r11,r4,8
 4004684:	84000504 	addi	r16,r16,20
 4004688:	2a800304 	addi	r10,r5,12
 400468c:	22400304 	addi	r9,r4,12
 4004690:	2c21883a 	add	r16,r5,r16
 4004694:	2811883a 	mov	r8,r5
 4004698:	200f883a 	mov	r7,r4
 400469c:	41000017 	ldw	r4,0(r8)
 40046a0:	1fc00017 	ldw	ra,0(r3)
 40046a4:	63c00017 	ldw	r15,0(r12)
 40046a8:	39000015 	stw	r4,0(r7)
 40046ac:	53800017 	ldw	r14,0(r10)
 40046b0:	6fc00015 	stw	ra,0(r13)
 40046b4:	5bc00015 	stw	r15,0(r11)
 40046b8:	4b800015 	stw	r14,0(r9)
 40046bc:	18c00404 	addi	r3,r3,16
 40046c0:	39c00404 	addi	r7,r7,16
 40046c4:	42000404 	addi	r8,r8,16
 40046c8:	6b400404 	addi	r13,r13,16
 40046cc:	63000404 	addi	r12,r12,16
 40046d0:	5ac00404 	addi	r11,r11,16
 40046d4:	52800404 	addi	r10,r10,16
 40046d8:	4a400404 	addi	r9,r9,16
 40046dc:	1c3fef1e 	bne	r3,r16,400469c <__alt_data_end+0xfc00469c>
 40046e0:	89c00044 	addi	r7,r17,1
 40046e4:	380e913a 	slli	r7,r7,4
 40046e8:	310003cc 	andi	r4,r6,15
 40046ec:	02c000c4 	movi	r11,3
 40046f0:	11c7883a 	add	r3,r2,r7
 40046f4:	29cb883a 	add	r5,r5,r7
 40046f8:	5900212e 	bgeu	r11,r4,4004780 <memcpy+0x140>
 40046fc:	1813883a 	mov	r9,r3
 4004700:	2811883a 	mov	r8,r5
 4004704:	200f883a 	mov	r7,r4
 4004708:	42800017 	ldw	r10,0(r8)
 400470c:	4a400104 	addi	r9,r9,4
 4004710:	39ffff04 	addi	r7,r7,-4
 4004714:	4abfff15 	stw	r10,-4(r9)
 4004718:	42000104 	addi	r8,r8,4
 400471c:	59fffa36 	bltu	r11,r7,4004708 <__alt_data_end+0xfc004708>
 4004720:	213fff04 	addi	r4,r4,-4
 4004724:	2008d0ba 	srli	r4,r4,2
 4004728:	318000cc 	andi	r6,r6,3
 400472c:	21000044 	addi	r4,r4,1
 4004730:	2109883a 	add	r4,r4,r4
 4004734:	2109883a 	add	r4,r4,r4
 4004738:	1907883a 	add	r3,r3,r4
 400473c:	290b883a 	add	r5,r5,r4
 4004740:	30000626 	beq	r6,zero,400475c <memcpy+0x11c>
 4004744:	198d883a 	add	r6,r3,r6
 4004748:	29c00003 	ldbu	r7,0(r5)
 400474c:	18c00044 	addi	r3,r3,1
 4004750:	29400044 	addi	r5,r5,1
 4004754:	19ffffc5 	stb	r7,-1(r3)
 4004758:	19bffb1e 	bne	r3,r6,4004748 <__alt_data_end+0xfc004748>
 400475c:	dfc00217 	ldw	ra,8(sp)
 4004760:	dc400117 	ldw	r17,4(sp)
 4004764:	dc000017 	ldw	r16,0(sp)
 4004768:	dec00304 	addi	sp,sp,12
 400476c:	f800283a 	ret
 4004770:	2007883a 	mov	r3,r4
 4004774:	003ff206 	br	4004740 <__alt_data_end+0xfc004740>
 4004778:	2007883a 	mov	r3,r4
 400477c:	003ff106 	br	4004744 <__alt_data_end+0xfc004744>
 4004780:	200d883a 	mov	r6,r4
 4004784:	003fee06 	br	4004740 <__alt_data_end+0xfc004740>

04004788 <_printf_r>:
 4004788:	defffd04 	addi	sp,sp,-12
 400478c:	2805883a 	mov	r2,r5
 4004790:	dfc00015 	stw	ra,0(sp)
 4004794:	d9800115 	stw	r6,4(sp)
 4004798:	d9c00215 	stw	r7,8(sp)
 400479c:	21400217 	ldw	r5,8(r4)
 40047a0:	d9c00104 	addi	r7,sp,4
 40047a4:	100d883a 	mov	r6,r2
 40047a8:	40049b40 	call	40049b4 <___vfprintf_internal_r>
 40047ac:	dfc00017 	ldw	ra,0(sp)
 40047b0:	dec00304 	addi	sp,sp,12
 40047b4:	f800283a 	ret

040047b8 <printf>:
 40047b8:	defffc04 	addi	sp,sp,-16
 40047bc:	dfc00015 	stw	ra,0(sp)
 40047c0:	d9400115 	stw	r5,4(sp)
 40047c4:	d9800215 	stw	r6,8(sp)
 40047c8:	d9c00315 	stw	r7,12(sp)
 40047cc:	00810074 	movhi	r2,1025
 40047d0:	109d1f04 	addi	r2,r2,29820
 40047d4:	10800017 	ldw	r2,0(r2)
 40047d8:	200b883a 	mov	r5,r4
 40047dc:	d9800104 	addi	r6,sp,4
 40047e0:	11000217 	ldw	r4,8(r2)
 40047e4:	4006bac0 	call	4006bac <__vfprintf_internal>
 40047e8:	dfc00017 	ldw	ra,0(sp)
 40047ec:	dec00404 	addi	sp,sp,16
 40047f0:	f800283a 	ret

040047f4 <_puts_r>:
 40047f4:	defff604 	addi	sp,sp,-40
 40047f8:	dc000715 	stw	r16,28(sp)
 40047fc:	2021883a 	mov	r16,r4
 4004800:	2809883a 	mov	r4,r5
 4004804:	dc400815 	stw	r17,32(sp)
 4004808:	dfc00915 	stw	ra,36(sp)
 400480c:	2823883a 	mov	r17,r5
 4004810:	400491c0 	call	400491c <strlen>
 4004814:	10c00044 	addi	r3,r2,1
 4004818:	d8800115 	stw	r2,4(sp)
 400481c:	00810074 	movhi	r2,1025
 4004820:	1095c504 	addi	r2,r2,22292
 4004824:	d8800215 	stw	r2,8(sp)
 4004828:	00800044 	movi	r2,1
 400482c:	d8800315 	stw	r2,12(sp)
 4004830:	00800084 	movi	r2,2
 4004834:	dc400015 	stw	r17,0(sp)
 4004838:	d8c00615 	stw	r3,24(sp)
 400483c:	dec00415 	stw	sp,16(sp)
 4004840:	d8800515 	stw	r2,20(sp)
 4004844:	80000226 	beq	r16,zero,4004850 <_puts_r+0x5c>
 4004848:	80800e17 	ldw	r2,56(r16)
 400484c:	10001426 	beq	r2,zero,40048a0 <_puts_r+0xac>
 4004850:	81400217 	ldw	r5,8(r16)
 4004854:	2880030b 	ldhu	r2,12(r5)
 4004858:	10c8000c 	andi	r3,r2,8192
 400485c:	1800061e 	bne	r3,zero,4004878 <_puts_r+0x84>
 4004860:	29001917 	ldw	r4,100(r5)
 4004864:	00f7ffc4 	movi	r3,-8193
 4004868:	10880014 	ori	r2,r2,8192
 400486c:	20c6703a 	and	r3,r4,r3
 4004870:	2880030d 	sth	r2,12(r5)
 4004874:	28c01915 	stw	r3,100(r5)
 4004878:	d9800404 	addi	r6,sp,16
 400487c:	8009883a 	mov	r4,r16
 4004880:	40090dc0 	call	40090dc <__sfvwrite_r>
 4004884:	1000091e 	bne	r2,zero,40048ac <_puts_r+0xb8>
 4004888:	00800284 	movi	r2,10
 400488c:	dfc00917 	ldw	ra,36(sp)
 4004890:	dc400817 	ldw	r17,32(sp)
 4004894:	dc000717 	ldw	r16,28(sp)
 4004898:	dec00a04 	addi	sp,sp,40
 400489c:	f800283a 	ret
 40048a0:	8009883a 	mov	r4,r16
 40048a4:	4008c580 	call	4008c58 <__sinit>
 40048a8:	003fe906 	br	4004850 <__alt_data_end+0xfc004850>
 40048ac:	00bfffc4 	movi	r2,-1
 40048b0:	003ff606 	br	400488c <__alt_data_end+0xfc00488c>

040048b4 <puts>:
 40048b4:	00810074 	movhi	r2,1025
 40048b8:	109d1f04 	addi	r2,r2,29820
 40048bc:	200b883a 	mov	r5,r4
 40048c0:	11000017 	ldw	r4,0(r2)
 40048c4:	40047f41 	jmpi	40047f4 <_puts_r>

040048c8 <_sbrk_r>:
 40048c8:	defffd04 	addi	sp,sp,-12
 40048cc:	dc000015 	stw	r16,0(sp)
 40048d0:	040100b4 	movhi	r16,1026
 40048d4:	dc400115 	stw	r17,4(sp)
 40048d8:	84241504 	addi	r16,r16,-28588
 40048dc:	2023883a 	mov	r17,r4
 40048e0:	2809883a 	mov	r4,r5
 40048e4:	dfc00215 	stw	ra,8(sp)
 40048e8:	80000015 	stw	zero,0(r16)
 40048ec:	4010c9c0 	call	4010c9c <sbrk>
 40048f0:	00ffffc4 	movi	r3,-1
 40048f4:	10c00526 	beq	r2,r3,400490c <_sbrk_r+0x44>
 40048f8:	dfc00217 	ldw	ra,8(sp)
 40048fc:	dc400117 	ldw	r17,4(sp)
 4004900:	dc000017 	ldw	r16,0(sp)
 4004904:	dec00304 	addi	sp,sp,12
 4004908:	f800283a 	ret
 400490c:	80c00017 	ldw	r3,0(r16)
 4004910:	183ff926 	beq	r3,zero,40048f8 <__alt_data_end+0xfc0048f8>
 4004914:	88c00015 	stw	r3,0(r17)
 4004918:	003ff706 	br	40048f8 <__alt_data_end+0xfc0048f8>

0400491c <strlen>:
 400491c:	208000cc 	andi	r2,r4,3
 4004920:	10002026 	beq	r2,zero,40049a4 <strlen+0x88>
 4004924:	20800007 	ldb	r2,0(r4)
 4004928:	10002026 	beq	r2,zero,40049ac <strlen+0x90>
 400492c:	2005883a 	mov	r2,r4
 4004930:	00000206 	br	400493c <strlen+0x20>
 4004934:	10c00007 	ldb	r3,0(r2)
 4004938:	18001826 	beq	r3,zero,400499c <strlen+0x80>
 400493c:	10800044 	addi	r2,r2,1
 4004940:	10c000cc 	andi	r3,r2,3
 4004944:	183ffb1e 	bne	r3,zero,4004934 <__alt_data_end+0xfc004934>
 4004948:	10c00017 	ldw	r3,0(r2)
 400494c:	01ffbff4 	movhi	r7,65279
 4004950:	39ffbfc4 	addi	r7,r7,-257
 4004954:	00ca303a 	nor	r5,zero,r3
 4004958:	01a02074 	movhi	r6,32897
 400495c:	19c7883a 	add	r3,r3,r7
 4004960:	31a02004 	addi	r6,r6,-32640
 4004964:	1946703a 	and	r3,r3,r5
 4004968:	1986703a 	and	r3,r3,r6
 400496c:	1800091e 	bne	r3,zero,4004994 <strlen+0x78>
 4004970:	10800104 	addi	r2,r2,4
 4004974:	10c00017 	ldw	r3,0(r2)
 4004978:	19cb883a 	add	r5,r3,r7
 400497c:	00c6303a 	nor	r3,zero,r3
 4004980:	28c6703a 	and	r3,r5,r3
 4004984:	1986703a 	and	r3,r3,r6
 4004988:	183ff926 	beq	r3,zero,4004970 <__alt_data_end+0xfc004970>
 400498c:	00000106 	br	4004994 <strlen+0x78>
 4004990:	10800044 	addi	r2,r2,1
 4004994:	10c00007 	ldb	r3,0(r2)
 4004998:	183ffd1e 	bne	r3,zero,4004990 <__alt_data_end+0xfc004990>
 400499c:	1105c83a 	sub	r2,r2,r4
 40049a0:	f800283a 	ret
 40049a4:	2005883a 	mov	r2,r4
 40049a8:	003fe706 	br	4004948 <__alt_data_end+0xfc004948>
 40049ac:	0005883a 	mov	r2,zero
 40049b0:	f800283a 	ret

040049b4 <___vfprintf_internal_r>:
 40049b4:	deffb804 	addi	sp,sp,-288
 40049b8:	dfc04715 	stw	ra,284(sp)
 40049bc:	ddc04515 	stw	r23,276(sp)
 40049c0:	dd404315 	stw	r21,268(sp)
 40049c4:	d9002c15 	stw	r4,176(sp)
 40049c8:	282f883a 	mov	r23,r5
 40049cc:	302b883a 	mov	r21,r6
 40049d0:	d9c02d15 	stw	r7,180(sp)
 40049d4:	df004615 	stw	fp,280(sp)
 40049d8:	dd804415 	stw	r22,272(sp)
 40049dc:	dd004215 	stw	r20,264(sp)
 40049e0:	dcc04115 	stw	r19,260(sp)
 40049e4:	dc804015 	stw	r18,256(sp)
 40049e8:	dc403f15 	stw	r17,252(sp)
 40049ec:	dc003e15 	stw	r16,248(sp)
 40049f0:	40097cc0 	call	40097cc <_localeconv_r>
 40049f4:	10800017 	ldw	r2,0(r2)
 40049f8:	1009883a 	mov	r4,r2
 40049fc:	d8803415 	stw	r2,208(sp)
 4004a00:	400491c0 	call	400491c <strlen>
 4004a04:	d8803715 	stw	r2,220(sp)
 4004a08:	d8802c17 	ldw	r2,176(sp)
 4004a0c:	10000226 	beq	r2,zero,4004a18 <___vfprintf_internal_r+0x64>
 4004a10:	10800e17 	ldw	r2,56(r2)
 4004a14:	1000f926 	beq	r2,zero,4004dfc <___vfprintf_internal_r+0x448>
 4004a18:	b880030b 	ldhu	r2,12(r23)
 4004a1c:	10c8000c 	andi	r3,r2,8192
 4004a20:	1800061e 	bne	r3,zero,4004a3c <___vfprintf_internal_r+0x88>
 4004a24:	b9001917 	ldw	r4,100(r23)
 4004a28:	00f7ffc4 	movi	r3,-8193
 4004a2c:	10880014 	ori	r2,r2,8192
 4004a30:	20c6703a 	and	r3,r4,r3
 4004a34:	b880030d 	sth	r2,12(r23)
 4004a38:	b8c01915 	stw	r3,100(r23)
 4004a3c:	10c0020c 	andi	r3,r2,8
 4004a40:	1800c126 	beq	r3,zero,4004d48 <___vfprintf_internal_r+0x394>
 4004a44:	b8c00417 	ldw	r3,16(r23)
 4004a48:	1800bf26 	beq	r3,zero,4004d48 <___vfprintf_internal_r+0x394>
 4004a4c:	1080068c 	andi	r2,r2,26
 4004a50:	00c00284 	movi	r3,10
 4004a54:	10c0c426 	beq	r2,r3,4004d68 <___vfprintf_internal_r+0x3b4>
 4004a58:	d8c00404 	addi	r3,sp,16
 4004a5c:	05010074 	movhi	r20,1025
 4004a60:	d9001e04 	addi	r4,sp,120
 4004a64:	a515d684 	addi	r20,r20,22362
 4004a68:	d8c01e15 	stw	r3,120(sp)
 4004a6c:	d8002015 	stw	zero,128(sp)
 4004a70:	d8001f15 	stw	zero,124(sp)
 4004a74:	d8003315 	stw	zero,204(sp)
 4004a78:	d8003615 	stw	zero,216(sp)
 4004a7c:	d8003815 	stw	zero,224(sp)
 4004a80:	1811883a 	mov	r8,r3
 4004a84:	d8003915 	stw	zero,228(sp)
 4004a88:	d8003a15 	stw	zero,232(sp)
 4004a8c:	d8002f15 	stw	zero,188(sp)
 4004a90:	d9002815 	stw	r4,160(sp)
 4004a94:	a8800007 	ldb	r2,0(r21)
 4004a98:	10027b26 	beq	r2,zero,4005488 <___vfprintf_internal_r+0xad4>
 4004a9c:	00c00944 	movi	r3,37
 4004aa0:	a821883a 	mov	r16,r21
 4004aa4:	10c0021e 	bne	r2,r3,4004ab0 <___vfprintf_internal_r+0xfc>
 4004aa8:	00001406 	br	4004afc <___vfprintf_internal_r+0x148>
 4004aac:	10c00326 	beq	r2,r3,4004abc <___vfprintf_internal_r+0x108>
 4004ab0:	84000044 	addi	r16,r16,1
 4004ab4:	80800007 	ldb	r2,0(r16)
 4004ab8:	103ffc1e 	bne	r2,zero,4004aac <__alt_data_end+0xfc004aac>
 4004abc:	8563c83a 	sub	r17,r16,r21
 4004ac0:	88000e26 	beq	r17,zero,4004afc <___vfprintf_internal_r+0x148>
 4004ac4:	d8c02017 	ldw	r3,128(sp)
 4004ac8:	d8801f17 	ldw	r2,124(sp)
 4004acc:	45400015 	stw	r21,0(r8)
 4004ad0:	1c47883a 	add	r3,r3,r17
 4004ad4:	10800044 	addi	r2,r2,1
 4004ad8:	d8c02015 	stw	r3,128(sp)
 4004adc:	44400115 	stw	r17,4(r8)
 4004ae0:	d8801f15 	stw	r2,124(sp)
 4004ae4:	00c001c4 	movi	r3,7
 4004ae8:	1880a716 	blt	r3,r2,4004d88 <___vfprintf_internal_r+0x3d4>
 4004aec:	42000204 	addi	r8,r8,8
 4004af0:	d9402f17 	ldw	r5,188(sp)
 4004af4:	2c4b883a 	add	r5,r5,r17
 4004af8:	d9402f15 	stw	r5,188(sp)
 4004afc:	80800007 	ldb	r2,0(r16)
 4004b00:	1000a826 	beq	r2,zero,4004da4 <___vfprintf_internal_r+0x3f0>
 4004b04:	84400047 	ldb	r17,1(r16)
 4004b08:	00bfffc4 	movi	r2,-1
 4004b0c:	85400044 	addi	r21,r16,1
 4004b10:	d8002785 	stb	zero,158(sp)
 4004b14:	0007883a 	mov	r3,zero
 4004b18:	000f883a 	mov	r7,zero
 4004b1c:	d8802915 	stw	r2,164(sp)
 4004b20:	d8003115 	stw	zero,196(sp)
 4004b24:	0025883a 	mov	r18,zero
 4004b28:	01401604 	movi	r5,88
 4004b2c:	01800244 	movi	r6,9
 4004b30:	02800a84 	movi	r10,42
 4004b34:	02401b04 	movi	r9,108
 4004b38:	ad400044 	addi	r21,r21,1
 4004b3c:	88bff804 	addi	r2,r17,-32
 4004b40:	28830436 	bltu	r5,r2,4005754 <___vfprintf_internal_r+0xda0>
 4004b44:	100490ba 	slli	r2,r2,2
 4004b48:	01010034 	movhi	r4,1024
 4004b4c:	2112d704 	addi	r4,r4,19292
 4004b50:	1105883a 	add	r2,r2,r4
 4004b54:	10800017 	ldw	r2,0(r2)
 4004b58:	1000683a 	jmp	r2
 4004b5c:	04005674 	movhi	r16,345
 4004b60:	04005754 	movui	r16,349
 4004b64:	04005754 	movui	r16,349
 4004b68:	04005694 	movui	r16,346
 4004b6c:	04005754 	movui	r16,349
 4004b70:	04005754 	movui	r16,349
 4004b74:	04005754 	movui	r16,349
 4004b78:	04005754 	movui	r16,349
 4004b7c:	04005754 	movui	r16,349
 4004b80:	04005754 	movui	r16,349
 4004b84:	04004e08 	cmpgei	r16,zero,312
 4004b88:	040055b0 	cmpltui	r16,zero,342
 4004b8c:	04005754 	movui	r16,349
 4004b90:	04004cd0 	cmplti	r16,zero,307
 4004b94:	04004e30 	cmpltui	r16,zero,312
 4004b98:	04005754 	movui	r16,349
 4004b9c:	04004e70 	cmpltui	r16,zero,313
 4004ba0:	04004e7c 	xorhi	r16,zero,313
 4004ba4:	04004e7c 	xorhi	r16,zero,313
 4004ba8:	04004e7c 	xorhi	r16,zero,313
 4004bac:	04004e7c 	xorhi	r16,zero,313
 4004bb0:	04004e7c 	xorhi	r16,zero,313
 4004bb4:	04004e7c 	xorhi	r16,zero,313
 4004bb8:	04004e7c 	xorhi	r16,zero,313
 4004bbc:	04004e7c 	xorhi	r16,zero,313
 4004bc0:	04004e7c 	xorhi	r16,zero,313
 4004bc4:	04005754 	movui	r16,349
 4004bc8:	04005754 	movui	r16,349
 4004bcc:	04005754 	movui	r16,349
 4004bd0:	04005754 	movui	r16,349
 4004bd4:	04005754 	movui	r16,349
 4004bd8:	04005754 	movui	r16,349
 4004bdc:	04005754 	movui	r16,349
 4004be0:	04005754 	movui	r16,349
 4004be4:	04005754 	movui	r16,349
 4004be8:	04005754 	movui	r16,349
 4004bec:	04004eb0 	cmpltui	r16,zero,314
 4004bf0:	04004f6c 	andhi	r16,zero,317
 4004bf4:	04005754 	movui	r16,349
 4004bf8:	04004f6c 	andhi	r16,zero,317
 4004bfc:	04005754 	movui	r16,349
 4004c00:	04005754 	movui	r16,349
 4004c04:	04005754 	movui	r16,349
 4004c08:	04005754 	movui	r16,349
 4004c0c:	0400500c 	andi	r16,zero,320
 4004c10:	04005754 	movui	r16,349
 4004c14:	04005754 	movui	r16,349
 4004c18:	04005018 	cmpnei	r16,zero,320
 4004c1c:	04005754 	movui	r16,349
 4004c20:	04005754 	movui	r16,349
 4004c24:	04005754 	movui	r16,349
 4004c28:	04005754 	movui	r16,349
 4004c2c:	04005754 	movui	r16,349
 4004c30:	04005490 	cmplti	r16,zero,338
 4004c34:	04005754 	movui	r16,349
 4004c38:	04005754 	movui	r16,349
 4004c3c:	040054f0 	cmpltui	r16,zero,339
 4004c40:	04005754 	movui	r16,349
 4004c44:	04005754 	movui	r16,349
 4004c48:	04005754 	movui	r16,349
 4004c4c:	04005754 	movui	r16,349
 4004c50:	04005754 	movui	r16,349
 4004c54:	04005754 	movui	r16,349
 4004c58:	04005754 	movui	r16,349
 4004c5c:	04005754 	movui	r16,349
 4004c60:	04005754 	movui	r16,349
 4004c64:	04005754 	movui	r16,349
 4004c68:	04005700 	call	400570 <__reset-0x3bffa90>
 4004c6c:	040056a0 	cmpeqi	r16,zero,346
 4004c70:	04004f6c 	andhi	r16,zero,317
 4004c74:	04004f6c 	andhi	r16,zero,317
 4004c78:	04004f6c 	andhi	r16,zero,317
 4004c7c:	040056b0 	cmpltui	r16,zero,346
 4004c80:	040056a0 	cmpeqi	r16,zero,346
 4004c84:	04005754 	movui	r16,349
 4004c88:	04005754 	movui	r16,349
 4004c8c:	040056bc 	xorhi	r16,zero,346
 4004c90:	04005754 	movui	r16,349
 4004c94:	040056cc 	andi	r16,zero,347
 4004c98:	040055a0 	cmpeqi	r16,zero,342
 4004c9c:	04004cdc 	xori	r16,zero,307
 4004ca0:	040055c0 	call	40055c <__reset-0x3bffaa4>
 4004ca4:	04005754 	movui	r16,349
 4004ca8:	040055cc 	andi	r16,zero,343
 4004cac:	04005754 	movui	r16,349
 4004cb0:	04005628 	cmpgeui	r16,zero,344
 4004cb4:	04005754 	movui	r16,349
 4004cb8:	04005754 	movui	r16,349
 4004cbc:	04005638 	rdprs	r16,zero,344
 4004cc0:	d9003117 	ldw	r4,196(sp)
 4004cc4:	d8802d15 	stw	r2,180(sp)
 4004cc8:	0109c83a 	sub	r4,zero,r4
 4004ccc:	d9003115 	stw	r4,196(sp)
 4004cd0:	94800114 	ori	r18,r18,4
 4004cd4:	ac400007 	ldb	r17,0(r21)
 4004cd8:	003f9706 	br	4004b38 <__alt_data_end+0xfc004b38>
 4004cdc:	00800c04 	movi	r2,48
 4004ce0:	d9002d17 	ldw	r4,180(sp)
 4004ce4:	d9402917 	ldw	r5,164(sp)
 4004ce8:	d8802705 	stb	r2,156(sp)
 4004cec:	00801e04 	movi	r2,120
 4004cf0:	d8802745 	stb	r2,157(sp)
 4004cf4:	d8002785 	stb	zero,158(sp)
 4004cf8:	20c00104 	addi	r3,r4,4
 4004cfc:	24c00017 	ldw	r19,0(r4)
 4004d00:	002d883a 	mov	r22,zero
 4004d04:	90800094 	ori	r2,r18,2
 4004d08:	28029a16 	blt	r5,zero,4005774 <___vfprintf_internal_r+0xdc0>
 4004d0c:	00bfdfc4 	movi	r2,-129
 4004d10:	90a4703a 	and	r18,r18,r2
 4004d14:	d8c02d15 	stw	r3,180(sp)
 4004d18:	94800094 	ori	r18,r18,2
 4004d1c:	9802871e 	bne	r19,zero,400573c <___vfprintf_internal_r+0xd88>
 4004d20:	00810074 	movhi	r2,1025
 4004d24:	1095cf04 	addi	r2,r2,22332
 4004d28:	d8803915 	stw	r2,228(sp)
 4004d2c:	04401e04 	movi	r17,120
 4004d30:	d8802917 	ldw	r2,164(sp)
 4004d34:	0039883a 	mov	fp,zero
 4004d38:	1001e926 	beq	r2,zero,40054e0 <___vfprintf_internal_r+0xb2c>
 4004d3c:	0027883a 	mov	r19,zero
 4004d40:	002d883a 	mov	r22,zero
 4004d44:	00020506 	br	400555c <___vfprintf_internal_r+0xba8>
 4004d48:	d9002c17 	ldw	r4,176(sp)
 4004d4c:	b80b883a 	mov	r5,r23
 4004d50:	4006c840 	call	4006c84 <__swsetup_r>
 4004d54:	1005ac1e 	bne	r2,zero,4006408 <___vfprintf_internal_r+0x1a54>
 4004d58:	b880030b 	ldhu	r2,12(r23)
 4004d5c:	00c00284 	movi	r3,10
 4004d60:	1080068c 	andi	r2,r2,26
 4004d64:	10ff3c1e 	bne	r2,r3,4004a58 <__alt_data_end+0xfc004a58>
 4004d68:	b880038f 	ldh	r2,14(r23)
 4004d6c:	103f3a16 	blt	r2,zero,4004a58 <__alt_data_end+0xfc004a58>
 4004d70:	d9c02d17 	ldw	r7,180(sp)
 4004d74:	d9002c17 	ldw	r4,176(sp)
 4004d78:	a80d883a 	mov	r6,r21
 4004d7c:	b80b883a 	mov	r5,r23
 4004d80:	4006bc80 	call	4006bc8 <__sbprintf>
 4004d84:	00001106 	br	4004dcc <___vfprintf_internal_r+0x418>
 4004d88:	d9002c17 	ldw	r4,176(sp)
 4004d8c:	d9801e04 	addi	r6,sp,120
 4004d90:	b80b883a 	mov	r5,r23
 4004d94:	400b6080 	call	400b608 <__sprint_r>
 4004d98:	1000081e 	bne	r2,zero,4004dbc <___vfprintf_internal_r+0x408>
 4004d9c:	da000404 	addi	r8,sp,16
 4004da0:	003f5306 	br	4004af0 <__alt_data_end+0xfc004af0>
 4004da4:	d8802017 	ldw	r2,128(sp)
 4004da8:	10000426 	beq	r2,zero,4004dbc <___vfprintf_internal_r+0x408>
 4004dac:	d9002c17 	ldw	r4,176(sp)
 4004db0:	d9801e04 	addi	r6,sp,120
 4004db4:	b80b883a 	mov	r5,r23
 4004db8:	400b6080 	call	400b608 <__sprint_r>
 4004dbc:	b880030b 	ldhu	r2,12(r23)
 4004dc0:	1080100c 	andi	r2,r2,64
 4004dc4:	1005901e 	bne	r2,zero,4006408 <___vfprintf_internal_r+0x1a54>
 4004dc8:	d8802f17 	ldw	r2,188(sp)
 4004dcc:	dfc04717 	ldw	ra,284(sp)
 4004dd0:	df004617 	ldw	fp,280(sp)
 4004dd4:	ddc04517 	ldw	r23,276(sp)
 4004dd8:	dd804417 	ldw	r22,272(sp)
 4004ddc:	dd404317 	ldw	r21,268(sp)
 4004de0:	dd004217 	ldw	r20,264(sp)
 4004de4:	dcc04117 	ldw	r19,260(sp)
 4004de8:	dc804017 	ldw	r18,256(sp)
 4004dec:	dc403f17 	ldw	r17,252(sp)
 4004df0:	dc003e17 	ldw	r16,248(sp)
 4004df4:	dec04804 	addi	sp,sp,288
 4004df8:	f800283a 	ret
 4004dfc:	d9002c17 	ldw	r4,176(sp)
 4004e00:	4008c580 	call	4008c58 <__sinit>
 4004e04:	003f0406 	br	4004a18 <__alt_data_end+0xfc004a18>
 4004e08:	d8802d17 	ldw	r2,180(sp)
 4004e0c:	d9002d17 	ldw	r4,180(sp)
 4004e10:	10800017 	ldw	r2,0(r2)
 4004e14:	d8803115 	stw	r2,196(sp)
 4004e18:	20800104 	addi	r2,r4,4
 4004e1c:	d9003117 	ldw	r4,196(sp)
 4004e20:	203fa716 	blt	r4,zero,4004cc0 <__alt_data_end+0xfc004cc0>
 4004e24:	d8802d15 	stw	r2,180(sp)
 4004e28:	ac400007 	ldb	r17,0(r21)
 4004e2c:	003f4206 	br	4004b38 <__alt_data_end+0xfc004b38>
 4004e30:	ac400007 	ldb	r17,0(r21)
 4004e34:	aac00044 	addi	r11,r21,1
 4004e38:	8a872826 	beq	r17,r10,4006adc <___vfprintf_internal_r+0x2128>
 4004e3c:	88bff404 	addi	r2,r17,-48
 4004e40:	0009883a 	mov	r4,zero
 4004e44:	30867d36 	bltu	r6,r2,400683c <___vfprintf_internal_r+0x1e88>
 4004e48:	5c400007 	ldb	r17,0(r11)
 4004e4c:	210002a4 	muli	r4,r4,10
 4004e50:	5d400044 	addi	r21,r11,1
 4004e54:	a817883a 	mov	r11,r21
 4004e58:	2089883a 	add	r4,r4,r2
 4004e5c:	88bff404 	addi	r2,r17,-48
 4004e60:	30bff92e 	bgeu	r6,r2,4004e48 <__alt_data_end+0xfc004e48>
 4004e64:	2005c916 	blt	r4,zero,400658c <___vfprintf_internal_r+0x1bd8>
 4004e68:	d9002915 	stw	r4,164(sp)
 4004e6c:	003f3306 	br	4004b3c <__alt_data_end+0xfc004b3c>
 4004e70:	94802014 	ori	r18,r18,128
 4004e74:	ac400007 	ldb	r17,0(r21)
 4004e78:	003f2f06 	br	4004b38 <__alt_data_end+0xfc004b38>
 4004e7c:	a809883a 	mov	r4,r21
 4004e80:	d8003115 	stw	zero,196(sp)
 4004e84:	88bff404 	addi	r2,r17,-48
 4004e88:	0017883a 	mov	r11,zero
 4004e8c:	24400007 	ldb	r17,0(r4)
 4004e90:	5ac002a4 	muli	r11,r11,10
 4004e94:	ad400044 	addi	r21,r21,1
 4004e98:	a809883a 	mov	r4,r21
 4004e9c:	12d7883a 	add	r11,r2,r11
 4004ea0:	88bff404 	addi	r2,r17,-48
 4004ea4:	30bff92e 	bgeu	r6,r2,4004e8c <__alt_data_end+0xfc004e8c>
 4004ea8:	dac03115 	stw	r11,196(sp)
 4004eac:	003f2306 	br	4004b3c <__alt_data_end+0xfc004b3c>
 4004eb0:	18c03fcc 	andi	r3,r3,255
 4004eb4:	18072b1e 	bne	r3,zero,4006b64 <___vfprintf_internal_r+0x21b0>
 4004eb8:	94800414 	ori	r18,r18,16
 4004ebc:	9080080c 	andi	r2,r18,32
 4004ec0:	10037b26 	beq	r2,zero,4005cb0 <___vfprintf_internal_r+0x12fc>
 4004ec4:	d9402d17 	ldw	r5,180(sp)
 4004ec8:	28800117 	ldw	r2,4(r5)
 4004ecc:	2cc00017 	ldw	r19,0(r5)
 4004ed0:	29400204 	addi	r5,r5,8
 4004ed4:	d9402d15 	stw	r5,180(sp)
 4004ed8:	102d883a 	mov	r22,r2
 4004edc:	10044b16 	blt	r2,zero,400600c <___vfprintf_internal_r+0x1658>
 4004ee0:	d9402917 	ldw	r5,164(sp)
 4004ee4:	df002783 	ldbu	fp,158(sp)
 4004ee8:	2803bc16 	blt	r5,zero,4005ddc <___vfprintf_internal_r+0x1428>
 4004eec:	00ffdfc4 	movi	r3,-129
 4004ef0:	9d84b03a 	or	r2,r19,r22
 4004ef4:	90e4703a 	and	r18,r18,r3
 4004ef8:	10017726 	beq	r2,zero,40054d8 <___vfprintf_internal_r+0xb24>
 4004efc:	b0038326 	beq	r22,zero,4005d0c <___vfprintf_internal_r+0x1358>
 4004f00:	dc402a15 	stw	r17,168(sp)
 4004f04:	dc001e04 	addi	r16,sp,120
 4004f08:	b023883a 	mov	r17,r22
 4004f0c:	402d883a 	mov	r22,r8
 4004f10:	9809883a 	mov	r4,r19
 4004f14:	880b883a 	mov	r5,r17
 4004f18:	01800284 	movi	r6,10
 4004f1c:	000f883a 	mov	r7,zero
 4004f20:	400da000 	call	400da00 <__umoddi3>
 4004f24:	10800c04 	addi	r2,r2,48
 4004f28:	843fffc4 	addi	r16,r16,-1
 4004f2c:	9809883a 	mov	r4,r19
 4004f30:	880b883a 	mov	r5,r17
 4004f34:	80800005 	stb	r2,0(r16)
 4004f38:	01800284 	movi	r6,10
 4004f3c:	000f883a 	mov	r7,zero
 4004f40:	400d4880 	call	400d488 <__udivdi3>
 4004f44:	1027883a 	mov	r19,r2
 4004f48:	10c4b03a 	or	r2,r2,r3
 4004f4c:	1823883a 	mov	r17,r3
 4004f50:	103fef1e 	bne	r2,zero,4004f10 <__alt_data_end+0xfc004f10>
 4004f54:	d8c02817 	ldw	r3,160(sp)
 4004f58:	dc402a17 	ldw	r17,168(sp)
 4004f5c:	b011883a 	mov	r8,r22
 4004f60:	1c07c83a 	sub	r3,r3,r16
 4004f64:	d8c02e15 	stw	r3,184(sp)
 4004f68:	00005906 	br	40050d0 <___vfprintf_internal_r+0x71c>
 4004f6c:	18c03fcc 	andi	r3,r3,255
 4004f70:	1806fa1e 	bne	r3,zero,4006b5c <___vfprintf_internal_r+0x21a8>
 4004f74:	9080020c 	andi	r2,r18,8
 4004f78:	10048a26 	beq	r2,zero,40061a4 <___vfprintf_internal_r+0x17f0>
 4004f7c:	d8c02d17 	ldw	r3,180(sp)
 4004f80:	d9002d17 	ldw	r4,180(sp)
 4004f84:	d9402d17 	ldw	r5,180(sp)
 4004f88:	18c00017 	ldw	r3,0(r3)
 4004f8c:	21000117 	ldw	r4,4(r4)
 4004f90:	29400204 	addi	r5,r5,8
 4004f94:	d8c03615 	stw	r3,216(sp)
 4004f98:	d9003815 	stw	r4,224(sp)
 4004f9c:	d9402d15 	stw	r5,180(sp)
 4004fa0:	d9003617 	ldw	r4,216(sp)
 4004fa4:	d9403817 	ldw	r5,224(sp)
 4004fa8:	da003d15 	stw	r8,244(sp)
 4004fac:	04000044 	movi	r16,1
 4004fb0:	400b2800 	call	400b280 <__fpclassifyd>
 4004fb4:	da003d17 	ldw	r8,244(sp)
 4004fb8:	14041f1e 	bne	r2,r16,4006038 <___vfprintf_internal_r+0x1684>
 4004fbc:	d9003617 	ldw	r4,216(sp)
 4004fc0:	d9403817 	ldw	r5,224(sp)
 4004fc4:	000d883a 	mov	r6,zero
 4004fc8:	000f883a 	mov	r7,zero
 4004fcc:	400f2300 	call	400f230 <__ledf2>
 4004fd0:	da003d17 	ldw	r8,244(sp)
 4004fd4:	1005be16 	blt	r2,zero,40066d0 <___vfprintf_internal_r+0x1d1c>
 4004fd8:	df002783 	ldbu	fp,158(sp)
 4004fdc:	008011c4 	movi	r2,71
 4004fe0:	1445330e 	bge	r2,r17,40064b0 <___vfprintf_internal_r+0x1afc>
 4004fe4:	04010074 	movhi	r16,1025
 4004fe8:	8415c704 	addi	r16,r16,22300
 4004fec:	00c000c4 	movi	r3,3
 4004ff0:	00bfdfc4 	movi	r2,-129
 4004ff4:	d8c02a15 	stw	r3,168(sp)
 4004ff8:	90a4703a 	and	r18,r18,r2
 4004ffc:	d8c02e15 	stw	r3,184(sp)
 4005000:	d8002915 	stw	zero,164(sp)
 4005004:	d8003215 	stw	zero,200(sp)
 4005008:	00003706 	br	40050e8 <___vfprintf_internal_r+0x734>
 400500c:	94800214 	ori	r18,r18,8
 4005010:	ac400007 	ldb	r17,0(r21)
 4005014:	003ec806 	br	4004b38 <__alt_data_end+0xfc004b38>
 4005018:	18c03fcc 	andi	r3,r3,255
 400501c:	1806db1e 	bne	r3,zero,4006b8c <___vfprintf_internal_r+0x21d8>
 4005020:	94800414 	ori	r18,r18,16
 4005024:	9080080c 	andi	r2,r18,32
 4005028:	1002d826 	beq	r2,zero,4005b8c <___vfprintf_internal_r+0x11d8>
 400502c:	d9402d17 	ldw	r5,180(sp)
 4005030:	d8c02917 	ldw	r3,164(sp)
 4005034:	d8002785 	stb	zero,158(sp)
 4005038:	28800204 	addi	r2,r5,8
 400503c:	2cc00017 	ldw	r19,0(r5)
 4005040:	2d800117 	ldw	r22,4(r5)
 4005044:	18048f16 	blt	r3,zero,4006284 <___vfprintf_internal_r+0x18d0>
 4005048:	013fdfc4 	movi	r4,-129
 400504c:	9d86b03a 	or	r3,r19,r22
 4005050:	d8802d15 	stw	r2,180(sp)
 4005054:	9124703a 	and	r18,r18,r4
 4005058:	1802d91e 	bne	r3,zero,4005bc0 <___vfprintf_internal_r+0x120c>
 400505c:	d8c02917 	ldw	r3,164(sp)
 4005060:	0039883a 	mov	fp,zero
 4005064:	1805c326 	beq	r3,zero,4006774 <___vfprintf_internal_r+0x1dc0>
 4005068:	0027883a 	mov	r19,zero
 400506c:	002d883a 	mov	r22,zero
 4005070:	dc001e04 	addi	r16,sp,120
 4005074:	9806d0fa 	srli	r3,r19,3
 4005078:	b008977a 	slli	r4,r22,29
 400507c:	b02cd0fa 	srli	r22,r22,3
 4005080:	9cc001cc 	andi	r19,r19,7
 4005084:	98800c04 	addi	r2,r19,48
 4005088:	843fffc4 	addi	r16,r16,-1
 400508c:	20e6b03a 	or	r19,r4,r3
 4005090:	80800005 	stb	r2,0(r16)
 4005094:	9d86b03a 	or	r3,r19,r22
 4005098:	183ff61e 	bne	r3,zero,4005074 <__alt_data_end+0xfc005074>
 400509c:	90c0004c 	andi	r3,r18,1
 40050a0:	18013b26 	beq	r3,zero,4005590 <___vfprintf_internal_r+0xbdc>
 40050a4:	10803fcc 	andi	r2,r2,255
 40050a8:	1080201c 	xori	r2,r2,128
 40050ac:	10bfe004 	addi	r2,r2,-128
 40050b0:	00c00c04 	movi	r3,48
 40050b4:	10c13626 	beq	r2,r3,4005590 <___vfprintf_internal_r+0xbdc>
 40050b8:	80ffffc5 	stb	r3,-1(r16)
 40050bc:	d8c02817 	ldw	r3,160(sp)
 40050c0:	80bfffc4 	addi	r2,r16,-1
 40050c4:	1021883a 	mov	r16,r2
 40050c8:	1887c83a 	sub	r3,r3,r2
 40050cc:	d8c02e15 	stw	r3,184(sp)
 40050d0:	d8802e17 	ldw	r2,184(sp)
 40050d4:	d9002917 	ldw	r4,164(sp)
 40050d8:	1100010e 	bge	r2,r4,40050e0 <___vfprintf_internal_r+0x72c>
 40050dc:	2005883a 	mov	r2,r4
 40050e0:	d8802a15 	stw	r2,168(sp)
 40050e4:	d8003215 	stw	zero,200(sp)
 40050e8:	e7003fcc 	andi	fp,fp,255
 40050ec:	e700201c 	xori	fp,fp,128
 40050f0:	e73fe004 	addi	fp,fp,-128
 40050f4:	e0000326 	beq	fp,zero,4005104 <___vfprintf_internal_r+0x750>
 40050f8:	d8c02a17 	ldw	r3,168(sp)
 40050fc:	18c00044 	addi	r3,r3,1
 4005100:	d8c02a15 	stw	r3,168(sp)
 4005104:	90c0008c 	andi	r3,r18,2
 4005108:	d8c02b15 	stw	r3,172(sp)
 400510c:	18000326 	beq	r3,zero,400511c <___vfprintf_internal_r+0x768>
 4005110:	d8c02a17 	ldw	r3,168(sp)
 4005114:	18c00084 	addi	r3,r3,2
 4005118:	d8c02a15 	stw	r3,168(sp)
 400511c:	90c0210c 	andi	r3,r18,132
 4005120:	d8c03015 	stw	r3,192(sp)
 4005124:	1801a31e 	bne	r3,zero,40057b4 <___vfprintf_internal_r+0xe00>
 4005128:	d9003117 	ldw	r4,196(sp)
 400512c:	d8c02a17 	ldw	r3,168(sp)
 4005130:	20e7c83a 	sub	r19,r4,r3
 4005134:	04c19f0e 	bge	zero,r19,40057b4 <___vfprintf_internal_r+0xe00>
 4005138:	02400404 	movi	r9,16
 400513c:	d8c02017 	ldw	r3,128(sp)
 4005140:	d8801f17 	ldw	r2,124(sp)
 4005144:	4cc50d0e 	bge	r9,r19,400657c <___vfprintf_internal_r+0x1bc8>
 4005148:	01410074 	movhi	r5,1025
 400514c:	2955da84 	addi	r5,r5,22378
 4005150:	dc403b15 	stw	r17,236(sp)
 4005154:	d9403515 	stw	r5,212(sp)
 4005158:	9823883a 	mov	r17,r19
 400515c:	482d883a 	mov	r22,r9
 4005160:	9027883a 	mov	r19,r18
 4005164:	070001c4 	movi	fp,7
 4005168:	8025883a 	mov	r18,r16
 400516c:	dc002c17 	ldw	r16,176(sp)
 4005170:	00000306 	br	4005180 <___vfprintf_internal_r+0x7cc>
 4005174:	8c7ffc04 	addi	r17,r17,-16
 4005178:	42000204 	addi	r8,r8,8
 400517c:	b440130e 	bge	r22,r17,40051cc <___vfprintf_internal_r+0x818>
 4005180:	01010074 	movhi	r4,1025
 4005184:	18c00404 	addi	r3,r3,16
 4005188:	10800044 	addi	r2,r2,1
 400518c:	2115da84 	addi	r4,r4,22378
 4005190:	41000015 	stw	r4,0(r8)
 4005194:	45800115 	stw	r22,4(r8)
 4005198:	d8c02015 	stw	r3,128(sp)
 400519c:	d8801f15 	stw	r2,124(sp)
 40051a0:	e0bff40e 	bge	fp,r2,4005174 <__alt_data_end+0xfc005174>
 40051a4:	d9801e04 	addi	r6,sp,120
 40051a8:	b80b883a 	mov	r5,r23
 40051ac:	8009883a 	mov	r4,r16
 40051b0:	400b6080 	call	400b608 <__sprint_r>
 40051b4:	103f011e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 40051b8:	8c7ffc04 	addi	r17,r17,-16
 40051bc:	d8c02017 	ldw	r3,128(sp)
 40051c0:	d8801f17 	ldw	r2,124(sp)
 40051c4:	da000404 	addi	r8,sp,16
 40051c8:	b47fed16 	blt	r22,r17,4005180 <__alt_data_end+0xfc005180>
 40051cc:	9021883a 	mov	r16,r18
 40051d0:	9825883a 	mov	r18,r19
 40051d4:	8827883a 	mov	r19,r17
 40051d8:	dc403b17 	ldw	r17,236(sp)
 40051dc:	d9403517 	ldw	r5,212(sp)
 40051e0:	98c7883a 	add	r3,r19,r3
 40051e4:	10800044 	addi	r2,r2,1
 40051e8:	41400015 	stw	r5,0(r8)
 40051ec:	44c00115 	stw	r19,4(r8)
 40051f0:	d8c02015 	stw	r3,128(sp)
 40051f4:	d8801f15 	stw	r2,124(sp)
 40051f8:	010001c4 	movi	r4,7
 40051fc:	2082a316 	blt	r4,r2,4005c8c <___vfprintf_internal_r+0x12d8>
 4005200:	df002787 	ldb	fp,158(sp)
 4005204:	42000204 	addi	r8,r8,8
 4005208:	e0000c26 	beq	fp,zero,400523c <___vfprintf_internal_r+0x888>
 400520c:	d8801f17 	ldw	r2,124(sp)
 4005210:	d9002784 	addi	r4,sp,158
 4005214:	18c00044 	addi	r3,r3,1
 4005218:	10800044 	addi	r2,r2,1
 400521c:	41000015 	stw	r4,0(r8)
 4005220:	01000044 	movi	r4,1
 4005224:	41000115 	stw	r4,4(r8)
 4005228:	d8c02015 	stw	r3,128(sp)
 400522c:	d8801f15 	stw	r2,124(sp)
 4005230:	010001c4 	movi	r4,7
 4005234:	20823c16 	blt	r4,r2,4005b28 <___vfprintf_internal_r+0x1174>
 4005238:	42000204 	addi	r8,r8,8
 400523c:	d8802b17 	ldw	r2,172(sp)
 4005240:	10000c26 	beq	r2,zero,4005274 <___vfprintf_internal_r+0x8c0>
 4005244:	d8801f17 	ldw	r2,124(sp)
 4005248:	d9002704 	addi	r4,sp,156
 400524c:	18c00084 	addi	r3,r3,2
 4005250:	10800044 	addi	r2,r2,1
 4005254:	41000015 	stw	r4,0(r8)
 4005258:	01000084 	movi	r4,2
 400525c:	41000115 	stw	r4,4(r8)
 4005260:	d8c02015 	stw	r3,128(sp)
 4005264:	d8801f15 	stw	r2,124(sp)
 4005268:	010001c4 	movi	r4,7
 400526c:	20823616 	blt	r4,r2,4005b48 <___vfprintf_internal_r+0x1194>
 4005270:	42000204 	addi	r8,r8,8
 4005274:	d9003017 	ldw	r4,192(sp)
 4005278:	00802004 	movi	r2,128
 400527c:	20819926 	beq	r4,r2,40058e4 <___vfprintf_internal_r+0xf30>
 4005280:	d9402917 	ldw	r5,164(sp)
 4005284:	d8802e17 	ldw	r2,184(sp)
 4005288:	28adc83a 	sub	r22,r5,r2
 400528c:	0580310e 	bge	zero,r22,4005354 <___vfprintf_internal_r+0x9a0>
 4005290:	07000404 	movi	fp,16
 4005294:	d8801f17 	ldw	r2,124(sp)
 4005298:	e584140e 	bge	fp,r22,40062ec <___vfprintf_internal_r+0x1938>
 400529c:	01410074 	movhi	r5,1025
 40052a0:	2955d684 	addi	r5,r5,22362
 40052a4:	dc402915 	stw	r17,164(sp)
 40052a8:	d9402b15 	stw	r5,172(sp)
 40052ac:	b023883a 	mov	r17,r22
 40052b0:	04c001c4 	movi	r19,7
 40052b4:	a82d883a 	mov	r22,r21
 40052b8:	902b883a 	mov	r21,r18
 40052bc:	8025883a 	mov	r18,r16
 40052c0:	dc002c17 	ldw	r16,176(sp)
 40052c4:	00000306 	br	40052d4 <___vfprintf_internal_r+0x920>
 40052c8:	8c7ffc04 	addi	r17,r17,-16
 40052cc:	42000204 	addi	r8,r8,8
 40052d0:	e440110e 	bge	fp,r17,4005318 <___vfprintf_internal_r+0x964>
 40052d4:	18c00404 	addi	r3,r3,16
 40052d8:	10800044 	addi	r2,r2,1
 40052dc:	45000015 	stw	r20,0(r8)
 40052e0:	47000115 	stw	fp,4(r8)
 40052e4:	d8c02015 	stw	r3,128(sp)
 40052e8:	d8801f15 	stw	r2,124(sp)
 40052ec:	98bff60e 	bge	r19,r2,40052c8 <__alt_data_end+0xfc0052c8>
 40052f0:	d9801e04 	addi	r6,sp,120
 40052f4:	b80b883a 	mov	r5,r23
 40052f8:	8009883a 	mov	r4,r16
 40052fc:	400b6080 	call	400b608 <__sprint_r>
 4005300:	103eae1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005304:	8c7ffc04 	addi	r17,r17,-16
 4005308:	d8c02017 	ldw	r3,128(sp)
 400530c:	d8801f17 	ldw	r2,124(sp)
 4005310:	da000404 	addi	r8,sp,16
 4005314:	e47fef16 	blt	fp,r17,40052d4 <__alt_data_end+0xfc0052d4>
 4005318:	9021883a 	mov	r16,r18
 400531c:	a825883a 	mov	r18,r21
 4005320:	b02b883a 	mov	r21,r22
 4005324:	882d883a 	mov	r22,r17
 4005328:	dc402917 	ldw	r17,164(sp)
 400532c:	d9002b17 	ldw	r4,172(sp)
 4005330:	1d87883a 	add	r3,r3,r22
 4005334:	10800044 	addi	r2,r2,1
 4005338:	41000015 	stw	r4,0(r8)
 400533c:	45800115 	stw	r22,4(r8)
 4005340:	d8c02015 	stw	r3,128(sp)
 4005344:	d8801f15 	stw	r2,124(sp)
 4005348:	010001c4 	movi	r4,7
 400534c:	2081ee16 	blt	r4,r2,4005b08 <___vfprintf_internal_r+0x1154>
 4005350:	42000204 	addi	r8,r8,8
 4005354:	9080400c 	andi	r2,r18,256
 4005358:	1001181e 	bne	r2,zero,40057bc <___vfprintf_internal_r+0xe08>
 400535c:	d9402e17 	ldw	r5,184(sp)
 4005360:	d8801f17 	ldw	r2,124(sp)
 4005364:	44000015 	stw	r16,0(r8)
 4005368:	1947883a 	add	r3,r3,r5
 400536c:	10800044 	addi	r2,r2,1
 4005370:	41400115 	stw	r5,4(r8)
 4005374:	d8c02015 	stw	r3,128(sp)
 4005378:	d8801f15 	stw	r2,124(sp)
 400537c:	010001c4 	movi	r4,7
 4005380:	2081d316 	blt	r4,r2,4005ad0 <___vfprintf_internal_r+0x111c>
 4005384:	42000204 	addi	r8,r8,8
 4005388:	9480010c 	andi	r18,r18,4
 400538c:	90003226 	beq	r18,zero,4005458 <___vfprintf_internal_r+0xaa4>
 4005390:	d9403117 	ldw	r5,196(sp)
 4005394:	d8802a17 	ldw	r2,168(sp)
 4005398:	28a1c83a 	sub	r16,r5,r2
 400539c:	04002e0e 	bge	zero,r16,4005458 <___vfprintf_internal_r+0xaa4>
 40053a0:	04400404 	movi	r17,16
 40053a4:	d8801f17 	ldw	r2,124(sp)
 40053a8:	8c04a20e 	bge	r17,r16,4006634 <___vfprintf_internal_r+0x1c80>
 40053ac:	01410074 	movhi	r5,1025
 40053b0:	2955da84 	addi	r5,r5,22378
 40053b4:	d9403515 	stw	r5,212(sp)
 40053b8:	048001c4 	movi	r18,7
 40053bc:	dcc02c17 	ldw	r19,176(sp)
 40053c0:	00000306 	br	40053d0 <___vfprintf_internal_r+0xa1c>
 40053c4:	843ffc04 	addi	r16,r16,-16
 40053c8:	42000204 	addi	r8,r8,8
 40053cc:	8c00130e 	bge	r17,r16,400541c <___vfprintf_internal_r+0xa68>
 40053d0:	01010074 	movhi	r4,1025
 40053d4:	18c00404 	addi	r3,r3,16
 40053d8:	10800044 	addi	r2,r2,1
 40053dc:	2115da84 	addi	r4,r4,22378
 40053e0:	41000015 	stw	r4,0(r8)
 40053e4:	44400115 	stw	r17,4(r8)
 40053e8:	d8c02015 	stw	r3,128(sp)
 40053ec:	d8801f15 	stw	r2,124(sp)
 40053f0:	90bff40e 	bge	r18,r2,40053c4 <__alt_data_end+0xfc0053c4>
 40053f4:	d9801e04 	addi	r6,sp,120
 40053f8:	b80b883a 	mov	r5,r23
 40053fc:	9809883a 	mov	r4,r19
 4005400:	400b6080 	call	400b608 <__sprint_r>
 4005404:	103e6d1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005408:	843ffc04 	addi	r16,r16,-16
 400540c:	d8c02017 	ldw	r3,128(sp)
 4005410:	d8801f17 	ldw	r2,124(sp)
 4005414:	da000404 	addi	r8,sp,16
 4005418:	8c3fed16 	blt	r17,r16,40053d0 <__alt_data_end+0xfc0053d0>
 400541c:	d9403517 	ldw	r5,212(sp)
 4005420:	1c07883a 	add	r3,r3,r16
 4005424:	10800044 	addi	r2,r2,1
 4005428:	41400015 	stw	r5,0(r8)
 400542c:	44000115 	stw	r16,4(r8)
 4005430:	d8c02015 	stw	r3,128(sp)
 4005434:	d8801f15 	stw	r2,124(sp)
 4005438:	010001c4 	movi	r4,7
 400543c:	2080060e 	bge	r4,r2,4005458 <___vfprintf_internal_r+0xaa4>
 4005440:	d9002c17 	ldw	r4,176(sp)
 4005444:	d9801e04 	addi	r6,sp,120
 4005448:	b80b883a 	mov	r5,r23
 400544c:	400b6080 	call	400b608 <__sprint_r>
 4005450:	103e5a1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005454:	d8c02017 	ldw	r3,128(sp)
 4005458:	d8803117 	ldw	r2,196(sp)
 400545c:	d9002a17 	ldw	r4,168(sp)
 4005460:	1100010e 	bge	r2,r4,4005468 <___vfprintf_internal_r+0xab4>
 4005464:	2005883a 	mov	r2,r4
 4005468:	d9402f17 	ldw	r5,188(sp)
 400546c:	288b883a 	add	r5,r5,r2
 4005470:	d9402f15 	stw	r5,188(sp)
 4005474:	18019e1e 	bne	r3,zero,4005af0 <___vfprintf_internal_r+0x113c>
 4005478:	a8800007 	ldb	r2,0(r21)
 400547c:	d8001f15 	stw	zero,124(sp)
 4005480:	da000404 	addi	r8,sp,16
 4005484:	103d851e 	bne	r2,zero,4004a9c <__alt_data_end+0xfc004a9c>
 4005488:	a821883a 	mov	r16,r21
 400548c:	003d9b06 	br	4004afc <__alt_data_end+0xfc004afc>
 4005490:	18c03fcc 	andi	r3,r3,255
 4005494:	1805c11e 	bne	r3,zero,4006b9c <___vfprintf_internal_r+0x21e8>
 4005498:	94800414 	ori	r18,r18,16
 400549c:	9080080c 	andi	r2,r18,32
 40054a0:	10020c26 	beq	r2,zero,4005cd4 <___vfprintf_internal_r+0x1320>
 40054a4:	d8802d17 	ldw	r2,180(sp)
 40054a8:	d9002917 	ldw	r4,164(sp)
 40054ac:	d8002785 	stb	zero,158(sp)
 40054b0:	10c00204 	addi	r3,r2,8
 40054b4:	14c00017 	ldw	r19,0(r2)
 40054b8:	15800117 	ldw	r22,4(r2)
 40054bc:	20040f16 	blt	r4,zero,40064fc <___vfprintf_internal_r+0x1b48>
 40054c0:	013fdfc4 	movi	r4,-129
 40054c4:	9d84b03a 	or	r2,r19,r22
 40054c8:	d8c02d15 	stw	r3,180(sp)
 40054cc:	9124703a 	and	r18,r18,r4
 40054d0:	0039883a 	mov	fp,zero
 40054d4:	103e891e 	bne	r2,zero,4004efc <__alt_data_end+0xfc004efc>
 40054d8:	d9002917 	ldw	r4,164(sp)
 40054dc:	2002c11e 	bne	r4,zero,4005fe4 <___vfprintf_internal_r+0x1630>
 40054e0:	d8002915 	stw	zero,164(sp)
 40054e4:	d8002e15 	stw	zero,184(sp)
 40054e8:	dc001e04 	addi	r16,sp,120
 40054ec:	003ef806 	br	40050d0 <__alt_data_end+0xfc0050d0>
 40054f0:	18c03fcc 	andi	r3,r3,255
 40054f4:	18059d1e 	bne	r3,zero,4006b6c <___vfprintf_internal_r+0x21b8>
 40054f8:	01410074 	movhi	r5,1025
 40054fc:	2955ca04 	addi	r5,r5,22312
 4005500:	d9403915 	stw	r5,228(sp)
 4005504:	9080080c 	andi	r2,r18,32
 4005508:	10005226 	beq	r2,zero,4005654 <___vfprintf_internal_r+0xca0>
 400550c:	d8802d17 	ldw	r2,180(sp)
 4005510:	14c00017 	ldw	r19,0(r2)
 4005514:	15800117 	ldw	r22,4(r2)
 4005518:	10800204 	addi	r2,r2,8
 400551c:	d8802d15 	stw	r2,180(sp)
 4005520:	9080004c 	andi	r2,r18,1
 4005524:	10019026 	beq	r2,zero,4005b68 <___vfprintf_internal_r+0x11b4>
 4005528:	9d84b03a 	or	r2,r19,r22
 400552c:	10036926 	beq	r2,zero,40062d4 <___vfprintf_internal_r+0x1920>
 4005530:	d8c02917 	ldw	r3,164(sp)
 4005534:	00800c04 	movi	r2,48
 4005538:	d8802705 	stb	r2,156(sp)
 400553c:	dc402745 	stb	r17,157(sp)
 4005540:	d8002785 	stb	zero,158(sp)
 4005544:	90800094 	ori	r2,r18,2
 4005548:	18045d16 	blt	r3,zero,40066c0 <___vfprintf_internal_r+0x1d0c>
 400554c:	00bfdfc4 	movi	r2,-129
 4005550:	90a4703a 	and	r18,r18,r2
 4005554:	94800094 	ori	r18,r18,2
 4005558:	0039883a 	mov	fp,zero
 400555c:	d9003917 	ldw	r4,228(sp)
 4005560:	dc001e04 	addi	r16,sp,120
 4005564:	988003cc 	andi	r2,r19,15
 4005568:	b006973a 	slli	r3,r22,28
 400556c:	2085883a 	add	r2,r4,r2
 4005570:	9826d13a 	srli	r19,r19,4
 4005574:	10800003 	ldbu	r2,0(r2)
 4005578:	b02cd13a 	srli	r22,r22,4
 400557c:	843fffc4 	addi	r16,r16,-1
 4005580:	1ce6b03a 	or	r19,r3,r19
 4005584:	80800005 	stb	r2,0(r16)
 4005588:	9d84b03a 	or	r2,r19,r22
 400558c:	103ff51e 	bne	r2,zero,4005564 <__alt_data_end+0xfc005564>
 4005590:	d8c02817 	ldw	r3,160(sp)
 4005594:	1c07c83a 	sub	r3,r3,r16
 4005598:	d8c02e15 	stw	r3,184(sp)
 400559c:	003ecc06 	br	40050d0 <__alt_data_end+0xfc0050d0>
 40055a0:	18c03fcc 	andi	r3,r3,255
 40055a4:	183e9f26 	beq	r3,zero,4005024 <__alt_data_end+0xfc005024>
 40055a8:	d9c02785 	stb	r7,158(sp)
 40055ac:	003e9d06 	br	4005024 <__alt_data_end+0xfc005024>
 40055b0:	00c00044 	movi	r3,1
 40055b4:	01c00ac4 	movi	r7,43
 40055b8:	ac400007 	ldb	r17,0(r21)
 40055bc:	003d5e06 	br	4004b38 <__alt_data_end+0xfc004b38>
 40055c0:	94800814 	ori	r18,r18,32
 40055c4:	ac400007 	ldb	r17,0(r21)
 40055c8:	003d5b06 	br	4004b38 <__alt_data_end+0xfc004b38>
 40055cc:	d8c02d17 	ldw	r3,180(sp)
 40055d0:	d8002785 	stb	zero,158(sp)
 40055d4:	1c000017 	ldw	r16,0(r3)
 40055d8:	1cc00104 	addi	r19,r3,4
 40055dc:	80041926 	beq	r16,zero,4006644 <___vfprintf_internal_r+0x1c90>
 40055e0:	d9002917 	ldw	r4,164(sp)
 40055e4:	2003d016 	blt	r4,zero,4006528 <___vfprintf_internal_r+0x1b74>
 40055e8:	200d883a 	mov	r6,r4
 40055ec:	000b883a 	mov	r5,zero
 40055f0:	8009883a 	mov	r4,r16
 40055f4:	da003d15 	stw	r8,244(sp)
 40055f8:	40099b80 	call	40099b8 <memchr>
 40055fc:	da003d17 	ldw	r8,244(sp)
 4005600:	10045426 	beq	r2,zero,4006754 <___vfprintf_internal_r+0x1da0>
 4005604:	1405c83a 	sub	r2,r2,r16
 4005608:	d8802e15 	stw	r2,184(sp)
 400560c:	1003cc16 	blt	r2,zero,4006540 <___vfprintf_internal_r+0x1b8c>
 4005610:	df002783 	ldbu	fp,158(sp)
 4005614:	d8802a15 	stw	r2,168(sp)
 4005618:	dcc02d15 	stw	r19,180(sp)
 400561c:	d8002915 	stw	zero,164(sp)
 4005620:	d8003215 	stw	zero,200(sp)
 4005624:	003eb006 	br	40050e8 <__alt_data_end+0xfc0050e8>
 4005628:	18c03fcc 	andi	r3,r3,255
 400562c:	183f9b26 	beq	r3,zero,400549c <__alt_data_end+0xfc00549c>
 4005630:	d9c02785 	stb	r7,158(sp)
 4005634:	003f9906 	br	400549c <__alt_data_end+0xfc00549c>
 4005638:	18c03fcc 	andi	r3,r3,255
 400563c:	1805551e 	bne	r3,zero,4006b94 <___vfprintf_internal_r+0x21e0>
 4005640:	01410074 	movhi	r5,1025
 4005644:	2955cf04 	addi	r5,r5,22332
 4005648:	d9403915 	stw	r5,228(sp)
 400564c:	9080080c 	andi	r2,r18,32
 4005650:	103fae1e 	bne	r2,zero,400550c <__alt_data_end+0xfc00550c>
 4005654:	9080040c 	andi	r2,r18,16
 4005658:	1002de26 	beq	r2,zero,40061d4 <___vfprintf_internal_r+0x1820>
 400565c:	d8c02d17 	ldw	r3,180(sp)
 4005660:	002d883a 	mov	r22,zero
 4005664:	1cc00017 	ldw	r19,0(r3)
 4005668:	18c00104 	addi	r3,r3,4
 400566c:	d8c02d15 	stw	r3,180(sp)
 4005670:	003fab06 	br	4005520 <__alt_data_end+0xfc005520>
 4005674:	38803fcc 	andi	r2,r7,255
 4005678:	1080201c 	xori	r2,r2,128
 400567c:	10bfe004 	addi	r2,r2,-128
 4005680:	1002d21e 	bne	r2,zero,40061cc <___vfprintf_internal_r+0x1818>
 4005684:	00c00044 	movi	r3,1
 4005688:	01c00804 	movi	r7,32
 400568c:	ac400007 	ldb	r17,0(r21)
 4005690:	003d2906 	br	4004b38 <__alt_data_end+0xfc004b38>
 4005694:	94800054 	ori	r18,r18,1
 4005698:	ac400007 	ldb	r17,0(r21)
 400569c:	003d2606 	br	4004b38 <__alt_data_end+0xfc004b38>
 40056a0:	18c03fcc 	andi	r3,r3,255
 40056a4:	183e0526 	beq	r3,zero,4004ebc <__alt_data_end+0xfc004ebc>
 40056a8:	d9c02785 	stb	r7,158(sp)
 40056ac:	003e0306 	br	4004ebc <__alt_data_end+0xfc004ebc>
 40056b0:	94801014 	ori	r18,r18,64
 40056b4:	ac400007 	ldb	r17,0(r21)
 40056b8:	003d1f06 	br	4004b38 <__alt_data_end+0xfc004b38>
 40056bc:	ac400007 	ldb	r17,0(r21)
 40056c0:	8a438726 	beq	r17,r9,40064e0 <___vfprintf_internal_r+0x1b2c>
 40056c4:	94800414 	ori	r18,r18,16
 40056c8:	003d1b06 	br	4004b38 <__alt_data_end+0xfc004b38>
 40056cc:	18c03fcc 	andi	r3,r3,255
 40056d0:	1805341e 	bne	r3,zero,4006ba4 <___vfprintf_internal_r+0x21f0>
 40056d4:	9080080c 	andi	r2,r18,32
 40056d8:	1002cd26 	beq	r2,zero,4006210 <___vfprintf_internal_r+0x185c>
 40056dc:	d9402d17 	ldw	r5,180(sp)
 40056e0:	d9002f17 	ldw	r4,188(sp)
 40056e4:	28800017 	ldw	r2,0(r5)
 40056e8:	2007d7fa 	srai	r3,r4,31
 40056ec:	29400104 	addi	r5,r5,4
 40056f0:	d9402d15 	stw	r5,180(sp)
 40056f4:	11000015 	stw	r4,0(r2)
 40056f8:	10c00115 	stw	r3,4(r2)
 40056fc:	003ce506 	br	4004a94 <__alt_data_end+0xfc004a94>
 4005700:	d8c02d17 	ldw	r3,180(sp)
 4005704:	d9002d17 	ldw	r4,180(sp)
 4005708:	d8002785 	stb	zero,158(sp)
 400570c:	18800017 	ldw	r2,0(r3)
 4005710:	21000104 	addi	r4,r4,4
 4005714:	00c00044 	movi	r3,1
 4005718:	d8c02a15 	stw	r3,168(sp)
 400571c:	d8801405 	stb	r2,80(sp)
 4005720:	d9002d15 	stw	r4,180(sp)
 4005724:	d8c02e15 	stw	r3,184(sp)
 4005728:	d8002915 	stw	zero,164(sp)
 400572c:	d8003215 	stw	zero,200(sp)
 4005730:	dc001404 	addi	r16,sp,80
 4005734:	0039883a 	mov	fp,zero
 4005738:	003e7206 	br	4005104 <__alt_data_end+0xfc005104>
 400573c:	01010074 	movhi	r4,1025
 4005740:	2115cf04 	addi	r4,r4,22332
 4005744:	0039883a 	mov	fp,zero
 4005748:	d9003915 	stw	r4,228(sp)
 400574c:	04401e04 	movi	r17,120
 4005750:	003f8206 	br	400555c <__alt_data_end+0xfc00555c>
 4005754:	18c03fcc 	andi	r3,r3,255
 4005758:	1805061e 	bne	r3,zero,4006b74 <___vfprintf_internal_r+0x21c0>
 400575c:	883d9126 	beq	r17,zero,4004da4 <__alt_data_end+0xfc004da4>
 4005760:	00c00044 	movi	r3,1
 4005764:	d8c02a15 	stw	r3,168(sp)
 4005768:	dc401405 	stb	r17,80(sp)
 400576c:	d8002785 	stb	zero,158(sp)
 4005770:	003fec06 	br	4005724 <__alt_data_end+0xfc005724>
 4005774:	01410074 	movhi	r5,1025
 4005778:	2955cf04 	addi	r5,r5,22332
 400577c:	d9403915 	stw	r5,228(sp)
 4005780:	d8c02d15 	stw	r3,180(sp)
 4005784:	1025883a 	mov	r18,r2
 4005788:	04401e04 	movi	r17,120
 400578c:	9d84b03a 	or	r2,r19,r22
 4005790:	1000fc1e 	bne	r2,zero,4005b84 <___vfprintf_internal_r+0x11d0>
 4005794:	0039883a 	mov	fp,zero
 4005798:	00800084 	movi	r2,2
 400579c:	10803fcc 	andi	r2,r2,255
 40057a0:	00c00044 	movi	r3,1
 40057a4:	10c20f26 	beq	r2,r3,4005fe4 <___vfprintf_internal_r+0x1630>
 40057a8:	00c00084 	movi	r3,2
 40057ac:	10fd6326 	beq	r2,r3,4004d3c <__alt_data_end+0xfc004d3c>
 40057b0:	003e2d06 	br	4005068 <__alt_data_end+0xfc005068>
 40057b4:	d8c02017 	ldw	r3,128(sp)
 40057b8:	003e9306 	br	4005208 <__alt_data_end+0xfc005208>
 40057bc:	00801944 	movi	r2,101
 40057c0:	14407e0e 	bge	r2,r17,40059bc <___vfprintf_internal_r+0x1008>
 40057c4:	d9003617 	ldw	r4,216(sp)
 40057c8:	d9403817 	ldw	r5,224(sp)
 40057cc:	000d883a 	mov	r6,zero
 40057d0:	000f883a 	mov	r7,zero
 40057d4:	d8c03c15 	stw	r3,240(sp)
 40057d8:	da003d15 	stw	r8,244(sp)
 40057dc:	400f0cc0 	call	400f0cc <__eqdf2>
 40057e0:	d8c03c17 	ldw	r3,240(sp)
 40057e4:	da003d17 	ldw	r8,244(sp)
 40057e8:	1000f71e 	bne	r2,zero,4005bc8 <___vfprintf_internal_r+0x1214>
 40057ec:	d8801f17 	ldw	r2,124(sp)
 40057f0:	01010074 	movhi	r4,1025
 40057f4:	2115d604 	addi	r4,r4,22360
 40057f8:	18c00044 	addi	r3,r3,1
 40057fc:	10800044 	addi	r2,r2,1
 4005800:	41000015 	stw	r4,0(r8)
 4005804:	01000044 	movi	r4,1
 4005808:	41000115 	stw	r4,4(r8)
 400580c:	d8c02015 	stw	r3,128(sp)
 4005810:	d8801f15 	stw	r2,124(sp)
 4005814:	010001c4 	movi	r4,7
 4005818:	2082b816 	blt	r4,r2,40062fc <___vfprintf_internal_r+0x1948>
 400581c:	42000204 	addi	r8,r8,8
 4005820:	d8802617 	ldw	r2,152(sp)
 4005824:	d9403317 	ldw	r5,204(sp)
 4005828:	11400216 	blt	r2,r5,4005834 <___vfprintf_internal_r+0xe80>
 400582c:	9080004c 	andi	r2,r18,1
 4005830:	103ed526 	beq	r2,zero,4005388 <__alt_data_end+0xfc005388>
 4005834:	d8803717 	ldw	r2,220(sp)
 4005838:	d9003417 	ldw	r4,208(sp)
 400583c:	d9403717 	ldw	r5,220(sp)
 4005840:	1887883a 	add	r3,r3,r2
 4005844:	d8801f17 	ldw	r2,124(sp)
 4005848:	41000015 	stw	r4,0(r8)
 400584c:	41400115 	stw	r5,4(r8)
 4005850:	10800044 	addi	r2,r2,1
 4005854:	d8c02015 	stw	r3,128(sp)
 4005858:	d8801f15 	stw	r2,124(sp)
 400585c:	010001c4 	movi	r4,7
 4005860:	20832916 	blt	r4,r2,4006508 <___vfprintf_internal_r+0x1b54>
 4005864:	42000204 	addi	r8,r8,8
 4005868:	d8803317 	ldw	r2,204(sp)
 400586c:	143fffc4 	addi	r16,r2,-1
 4005870:	043ec50e 	bge	zero,r16,4005388 <__alt_data_end+0xfc005388>
 4005874:	04400404 	movi	r17,16
 4005878:	d8801f17 	ldw	r2,124(sp)
 400587c:	8c00880e 	bge	r17,r16,4005aa0 <___vfprintf_internal_r+0x10ec>
 4005880:	01410074 	movhi	r5,1025
 4005884:	2955d684 	addi	r5,r5,22362
 4005888:	d9402b15 	stw	r5,172(sp)
 400588c:	058001c4 	movi	r22,7
 4005890:	dcc02c17 	ldw	r19,176(sp)
 4005894:	00000306 	br	40058a4 <___vfprintf_internal_r+0xef0>
 4005898:	42000204 	addi	r8,r8,8
 400589c:	843ffc04 	addi	r16,r16,-16
 40058a0:	8c00820e 	bge	r17,r16,4005aac <___vfprintf_internal_r+0x10f8>
 40058a4:	18c00404 	addi	r3,r3,16
 40058a8:	10800044 	addi	r2,r2,1
 40058ac:	45000015 	stw	r20,0(r8)
 40058b0:	44400115 	stw	r17,4(r8)
 40058b4:	d8c02015 	stw	r3,128(sp)
 40058b8:	d8801f15 	stw	r2,124(sp)
 40058bc:	b0bff60e 	bge	r22,r2,4005898 <__alt_data_end+0xfc005898>
 40058c0:	d9801e04 	addi	r6,sp,120
 40058c4:	b80b883a 	mov	r5,r23
 40058c8:	9809883a 	mov	r4,r19
 40058cc:	400b6080 	call	400b608 <__sprint_r>
 40058d0:	103d3a1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 40058d4:	d8c02017 	ldw	r3,128(sp)
 40058d8:	d8801f17 	ldw	r2,124(sp)
 40058dc:	da000404 	addi	r8,sp,16
 40058e0:	003fee06 	br	400589c <__alt_data_end+0xfc00589c>
 40058e4:	d9403117 	ldw	r5,196(sp)
 40058e8:	d8802a17 	ldw	r2,168(sp)
 40058ec:	28adc83a 	sub	r22,r5,r2
 40058f0:	05be630e 	bge	zero,r22,4005280 <__alt_data_end+0xfc005280>
 40058f4:	07000404 	movi	fp,16
 40058f8:	d8801f17 	ldw	r2,124(sp)
 40058fc:	e5838f0e 	bge	fp,r22,400673c <___vfprintf_internal_r+0x1d88>
 4005900:	01410074 	movhi	r5,1025
 4005904:	2955d684 	addi	r5,r5,22362
 4005908:	dc403015 	stw	r17,192(sp)
 400590c:	d9402b15 	stw	r5,172(sp)
 4005910:	b023883a 	mov	r17,r22
 4005914:	04c001c4 	movi	r19,7
 4005918:	a82d883a 	mov	r22,r21
 400591c:	902b883a 	mov	r21,r18
 4005920:	8025883a 	mov	r18,r16
 4005924:	dc002c17 	ldw	r16,176(sp)
 4005928:	00000306 	br	4005938 <___vfprintf_internal_r+0xf84>
 400592c:	8c7ffc04 	addi	r17,r17,-16
 4005930:	42000204 	addi	r8,r8,8
 4005934:	e440110e 	bge	fp,r17,400597c <___vfprintf_internal_r+0xfc8>
 4005938:	18c00404 	addi	r3,r3,16
 400593c:	10800044 	addi	r2,r2,1
 4005940:	45000015 	stw	r20,0(r8)
 4005944:	47000115 	stw	fp,4(r8)
 4005948:	d8c02015 	stw	r3,128(sp)
 400594c:	d8801f15 	stw	r2,124(sp)
 4005950:	98bff60e 	bge	r19,r2,400592c <__alt_data_end+0xfc00592c>
 4005954:	d9801e04 	addi	r6,sp,120
 4005958:	b80b883a 	mov	r5,r23
 400595c:	8009883a 	mov	r4,r16
 4005960:	400b6080 	call	400b608 <__sprint_r>
 4005964:	103d151e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005968:	8c7ffc04 	addi	r17,r17,-16
 400596c:	d8c02017 	ldw	r3,128(sp)
 4005970:	d8801f17 	ldw	r2,124(sp)
 4005974:	da000404 	addi	r8,sp,16
 4005978:	e47fef16 	blt	fp,r17,4005938 <__alt_data_end+0xfc005938>
 400597c:	9021883a 	mov	r16,r18
 4005980:	a825883a 	mov	r18,r21
 4005984:	b02b883a 	mov	r21,r22
 4005988:	882d883a 	mov	r22,r17
 400598c:	dc403017 	ldw	r17,192(sp)
 4005990:	d9002b17 	ldw	r4,172(sp)
 4005994:	1d87883a 	add	r3,r3,r22
 4005998:	10800044 	addi	r2,r2,1
 400599c:	41000015 	stw	r4,0(r8)
 40059a0:	45800115 	stw	r22,4(r8)
 40059a4:	d8c02015 	stw	r3,128(sp)
 40059a8:	d8801f15 	stw	r2,124(sp)
 40059ac:	010001c4 	movi	r4,7
 40059b0:	20818e16 	blt	r4,r2,4005fec <___vfprintf_internal_r+0x1638>
 40059b4:	42000204 	addi	r8,r8,8
 40059b8:	003e3106 	br	4005280 <__alt_data_end+0xfc005280>
 40059bc:	d9403317 	ldw	r5,204(sp)
 40059c0:	00800044 	movi	r2,1
 40059c4:	18c00044 	addi	r3,r3,1
 40059c8:	1141530e 	bge	r2,r5,4005f18 <___vfprintf_internal_r+0x1564>
 40059cc:	dc401f17 	ldw	r17,124(sp)
 40059d0:	00800044 	movi	r2,1
 40059d4:	40800115 	stw	r2,4(r8)
 40059d8:	8c400044 	addi	r17,r17,1
 40059dc:	44000015 	stw	r16,0(r8)
 40059e0:	d8c02015 	stw	r3,128(sp)
 40059e4:	dc401f15 	stw	r17,124(sp)
 40059e8:	008001c4 	movi	r2,7
 40059ec:	14416b16 	blt	r2,r17,4005f9c <___vfprintf_internal_r+0x15e8>
 40059f0:	42000204 	addi	r8,r8,8
 40059f4:	d8803717 	ldw	r2,220(sp)
 40059f8:	d9003417 	ldw	r4,208(sp)
 40059fc:	8c400044 	addi	r17,r17,1
 4005a00:	10c7883a 	add	r3,r2,r3
 4005a04:	40800115 	stw	r2,4(r8)
 4005a08:	41000015 	stw	r4,0(r8)
 4005a0c:	d8c02015 	stw	r3,128(sp)
 4005a10:	dc401f15 	stw	r17,124(sp)
 4005a14:	008001c4 	movi	r2,7
 4005a18:	14416916 	blt	r2,r17,4005fc0 <___vfprintf_internal_r+0x160c>
 4005a1c:	45800204 	addi	r22,r8,8
 4005a20:	d9003617 	ldw	r4,216(sp)
 4005a24:	d9403817 	ldw	r5,224(sp)
 4005a28:	000d883a 	mov	r6,zero
 4005a2c:	000f883a 	mov	r7,zero
 4005a30:	d8c03c15 	stw	r3,240(sp)
 4005a34:	400f0cc0 	call	400f0cc <__eqdf2>
 4005a38:	d8c03c17 	ldw	r3,240(sp)
 4005a3c:	1000bc26 	beq	r2,zero,4005d30 <___vfprintf_internal_r+0x137c>
 4005a40:	d9403317 	ldw	r5,204(sp)
 4005a44:	84000044 	addi	r16,r16,1
 4005a48:	8c400044 	addi	r17,r17,1
 4005a4c:	28bfffc4 	addi	r2,r5,-1
 4005a50:	1887883a 	add	r3,r3,r2
 4005a54:	b0800115 	stw	r2,4(r22)
 4005a58:	b4000015 	stw	r16,0(r22)
 4005a5c:	d8c02015 	stw	r3,128(sp)
 4005a60:	dc401f15 	stw	r17,124(sp)
 4005a64:	008001c4 	movi	r2,7
 4005a68:	14414316 	blt	r2,r17,4005f78 <___vfprintf_internal_r+0x15c4>
 4005a6c:	b5800204 	addi	r22,r22,8
 4005a70:	d9003a17 	ldw	r4,232(sp)
 4005a74:	df0022c4 	addi	fp,sp,139
 4005a78:	8c400044 	addi	r17,r17,1
 4005a7c:	20c7883a 	add	r3,r4,r3
 4005a80:	b7000015 	stw	fp,0(r22)
 4005a84:	b1000115 	stw	r4,4(r22)
 4005a88:	d8c02015 	stw	r3,128(sp)
 4005a8c:	dc401f15 	stw	r17,124(sp)
 4005a90:	008001c4 	movi	r2,7
 4005a94:	14400e16 	blt	r2,r17,4005ad0 <___vfprintf_internal_r+0x111c>
 4005a98:	b2000204 	addi	r8,r22,8
 4005a9c:	003e3a06 	br	4005388 <__alt_data_end+0xfc005388>
 4005aa0:	01010074 	movhi	r4,1025
 4005aa4:	2115d684 	addi	r4,r4,22362
 4005aa8:	d9002b15 	stw	r4,172(sp)
 4005aac:	d9002b17 	ldw	r4,172(sp)
 4005ab0:	1c07883a 	add	r3,r3,r16
 4005ab4:	44000115 	stw	r16,4(r8)
 4005ab8:	41000015 	stw	r4,0(r8)
 4005abc:	10800044 	addi	r2,r2,1
 4005ac0:	d8c02015 	stw	r3,128(sp)
 4005ac4:	d8801f15 	stw	r2,124(sp)
 4005ac8:	010001c4 	movi	r4,7
 4005acc:	20be2d0e 	bge	r4,r2,4005384 <__alt_data_end+0xfc005384>
 4005ad0:	d9002c17 	ldw	r4,176(sp)
 4005ad4:	d9801e04 	addi	r6,sp,120
 4005ad8:	b80b883a 	mov	r5,r23
 4005adc:	400b6080 	call	400b608 <__sprint_r>
 4005ae0:	103cb61e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005ae4:	d8c02017 	ldw	r3,128(sp)
 4005ae8:	da000404 	addi	r8,sp,16
 4005aec:	003e2606 	br	4005388 <__alt_data_end+0xfc005388>
 4005af0:	d9002c17 	ldw	r4,176(sp)
 4005af4:	d9801e04 	addi	r6,sp,120
 4005af8:	b80b883a 	mov	r5,r23
 4005afc:	400b6080 	call	400b608 <__sprint_r>
 4005b00:	103e5d26 	beq	r2,zero,4005478 <__alt_data_end+0xfc005478>
 4005b04:	003cad06 	br	4004dbc <__alt_data_end+0xfc004dbc>
 4005b08:	d9002c17 	ldw	r4,176(sp)
 4005b0c:	d9801e04 	addi	r6,sp,120
 4005b10:	b80b883a 	mov	r5,r23
 4005b14:	400b6080 	call	400b608 <__sprint_r>
 4005b18:	103ca81e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005b1c:	d8c02017 	ldw	r3,128(sp)
 4005b20:	da000404 	addi	r8,sp,16
 4005b24:	003e0b06 	br	4005354 <__alt_data_end+0xfc005354>
 4005b28:	d9002c17 	ldw	r4,176(sp)
 4005b2c:	d9801e04 	addi	r6,sp,120
 4005b30:	b80b883a 	mov	r5,r23
 4005b34:	400b6080 	call	400b608 <__sprint_r>
 4005b38:	103ca01e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005b3c:	d8c02017 	ldw	r3,128(sp)
 4005b40:	da000404 	addi	r8,sp,16
 4005b44:	003dbd06 	br	400523c <__alt_data_end+0xfc00523c>
 4005b48:	d9002c17 	ldw	r4,176(sp)
 4005b4c:	d9801e04 	addi	r6,sp,120
 4005b50:	b80b883a 	mov	r5,r23
 4005b54:	400b6080 	call	400b608 <__sprint_r>
 4005b58:	103c981e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005b5c:	d8c02017 	ldw	r3,128(sp)
 4005b60:	da000404 	addi	r8,sp,16
 4005b64:	003dc306 	br	4005274 <__alt_data_end+0xfc005274>
 4005b68:	d8802917 	ldw	r2,164(sp)
 4005b6c:	d8002785 	stb	zero,158(sp)
 4005b70:	103f0616 	blt	r2,zero,400578c <__alt_data_end+0xfc00578c>
 4005b74:	00ffdfc4 	movi	r3,-129
 4005b78:	9d84b03a 	or	r2,r19,r22
 4005b7c:	90e4703a 	and	r18,r18,r3
 4005b80:	103c6b26 	beq	r2,zero,4004d30 <__alt_data_end+0xfc004d30>
 4005b84:	0039883a 	mov	fp,zero
 4005b88:	003e7406 	br	400555c <__alt_data_end+0xfc00555c>
 4005b8c:	9080040c 	andi	r2,r18,16
 4005b90:	1001b326 	beq	r2,zero,4006260 <___vfprintf_internal_r+0x18ac>
 4005b94:	d9002d17 	ldw	r4,180(sp)
 4005b98:	d9402917 	ldw	r5,164(sp)
 4005b9c:	d8002785 	stb	zero,158(sp)
 4005ba0:	20800104 	addi	r2,r4,4
 4005ba4:	24c00017 	ldw	r19,0(r4)
 4005ba8:	002d883a 	mov	r22,zero
 4005bac:	2801b516 	blt	r5,zero,4006284 <___vfprintf_internal_r+0x18d0>
 4005bb0:	00ffdfc4 	movi	r3,-129
 4005bb4:	d8802d15 	stw	r2,180(sp)
 4005bb8:	90e4703a 	and	r18,r18,r3
 4005bbc:	983d2726 	beq	r19,zero,400505c <__alt_data_end+0xfc00505c>
 4005bc0:	0039883a 	mov	fp,zero
 4005bc4:	003d2a06 	br	4005070 <__alt_data_end+0xfc005070>
 4005bc8:	dc402617 	ldw	r17,152(sp)
 4005bcc:	0441d30e 	bge	zero,r17,400631c <___vfprintf_internal_r+0x1968>
 4005bd0:	dc403217 	ldw	r17,200(sp)
 4005bd4:	d8803317 	ldw	r2,204(sp)
 4005bd8:	1440010e 	bge	r2,r17,4005be0 <___vfprintf_internal_r+0x122c>
 4005bdc:	1023883a 	mov	r17,r2
 4005be0:	04400a0e 	bge	zero,r17,4005c0c <___vfprintf_internal_r+0x1258>
 4005be4:	d8801f17 	ldw	r2,124(sp)
 4005be8:	1c47883a 	add	r3,r3,r17
 4005bec:	44000015 	stw	r16,0(r8)
 4005bf0:	10800044 	addi	r2,r2,1
 4005bf4:	44400115 	stw	r17,4(r8)
 4005bf8:	d8c02015 	stw	r3,128(sp)
 4005bfc:	d8801f15 	stw	r2,124(sp)
 4005c00:	010001c4 	movi	r4,7
 4005c04:	20826516 	blt	r4,r2,400659c <___vfprintf_internal_r+0x1be8>
 4005c08:	42000204 	addi	r8,r8,8
 4005c0c:	88026116 	blt	r17,zero,4006594 <___vfprintf_internal_r+0x1be0>
 4005c10:	d9003217 	ldw	r4,200(sp)
 4005c14:	2463c83a 	sub	r17,r4,r17
 4005c18:	04407b0e 	bge	zero,r17,4005e08 <___vfprintf_internal_r+0x1454>
 4005c1c:	05800404 	movi	r22,16
 4005c20:	d8801f17 	ldw	r2,124(sp)
 4005c24:	b4419d0e 	bge	r22,r17,400629c <___vfprintf_internal_r+0x18e8>
 4005c28:	01010074 	movhi	r4,1025
 4005c2c:	2115d684 	addi	r4,r4,22362
 4005c30:	d9002b15 	stw	r4,172(sp)
 4005c34:	070001c4 	movi	fp,7
 4005c38:	dcc02c17 	ldw	r19,176(sp)
 4005c3c:	00000306 	br	4005c4c <___vfprintf_internal_r+0x1298>
 4005c40:	42000204 	addi	r8,r8,8
 4005c44:	8c7ffc04 	addi	r17,r17,-16
 4005c48:	b441970e 	bge	r22,r17,40062a8 <___vfprintf_internal_r+0x18f4>
 4005c4c:	18c00404 	addi	r3,r3,16
 4005c50:	10800044 	addi	r2,r2,1
 4005c54:	45000015 	stw	r20,0(r8)
 4005c58:	45800115 	stw	r22,4(r8)
 4005c5c:	d8c02015 	stw	r3,128(sp)
 4005c60:	d8801f15 	stw	r2,124(sp)
 4005c64:	e0bff60e 	bge	fp,r2,4005c40 <__alt_data_end+0xfc005c40>
 4005c68:	d9801e04 	addi	r6,sp,120
 4005c6c:	b80b883a 	mov	r5,r23
 4005c70:	9809883a 	mov	r4,r19
 4005c74:	400b6080 	call	400b608 <__sprint_r>
 4005c78:	103c501e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005c7c:	d8c02017 	ldw	r3,128(sp)
 4005c80:	d8801f17 	ldw	r2,124(sp)
 4005c84:	da000404 	addi	r8,sp,16
 4005c88:	003fee06 	br	4005c44 <__alt_data_end+0xfc005c44>
 4005c8c:	d9002c17 	ldw	r4,176(sp)
 4005c90:	d9801e04 	addi	r6,sp,120
 4005c94:	b80b883a 	mov	r5,r23
 4005c98:	400b6080 	call	400b608 <__sprint_r>
 4005c9c:	103c471e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005ca0:	d8c02017 	ldw	r3,128(sp)
 4005ca4:	df002787 	ldb	fp,158(sp)
 4005ca8:	da000404 	addi	r8,sp,16
 4005cac:	003d5606 	br	4005208 <__alt_data_end+0xfc005208>
 4005cb0:	9080040c 	andi	r2,r18,16
 4005cb4:	10016126 	beq	r2,zero,400623c <___vfprintf_internal_r+0x1888>
 4005cb8:	d8802d17 	ldw	r2,180(sp)
 4005cbc:	14c00017 	ldw	r19,0(r2)
 4005cc0:	10800104 	addi	r2,r2,4
 4005cc4:	d8802d15 	stw	r2,180(sp)
 4005cc8:	982dd7fa 	srai	r22,r19,31
 4005ccc:	b005883a 	mov	r2,r22
 4005cd0:	003c8206 	br	4004edc <__alt_data_end+0xfc004edc>
 4005cd4:	9080040c 	andi	r2,r18,16
 4005cd8:	10003526 	beq	r2,zero,4005db0 <___vfprintf_internal_r+0x13fc>
 4005cdc:	d9402d17 	ldw	r5,180(sp)
 4005ce0:	d8c02917 	ldw	r3,164(sp)
 4005ce4:	d8002785 	stb	zero,158(sp)
 4005ce8:	28800104 	addi	r2,r5,4
 4005cec:	2cc00017 	ldw	r19,0(r5)
 4005cf0:	002d883a 	mov	r22,zero
 4005cf4:	18003716 	blt	r3,zero,4005dd4 <___vfprintf_internal_r+0x1420>
 4005cf8:	00ffdfc4 	movi	r3,-129
 4005cfc:	d8802d15 	stw	r2,180(sp)
 4005d00:	90e4703a 	and	r18,r18,r3
 4005d04:	0039883a 	mov	fp,zero
 4005d08:	983df326 	beq	r19,zero,40054d8 <__alt_data_end+0xfc0054d8>
 4005d0c:	00800244 	movi	r2,9
 4005d10:	14fc7b36 	bltu	r2,r19,4004f00 <__alt_data_end+0xfc004f00>
 4005d14:	d8c02817 	ldw	r3,160(sp)
 4005d18:	dc001dc4 	addi	r16,sp,119
 4005d1c:	9cc00c04 	addi	r19,r19,48
 4005d20:	1c07c83a 	sub	r3,r3,r16
 4005d24:	dcc01dc5 	stb	r19,119(sp)
 4005d28:	d8c02e15 	stw	r3,184(sp)
 4005d2c:	003ce806 	br	40050d0 <__alt_data_end+0xfc0050d0>
 4005d30:	d8803317 	ldw	r2,204(sp)
 4005d34:	143fffc4 	addi	r16,r2,-1
 4005d38:	043f4d0e 	bge	zero,r16,4005a70 <__alt_data_end+0xfc005a70>
 4005d3c:	07000404 	movi	fp,16
 4005d40:	e400810e 	bge	fp,r16,4005f48 <___vfprintf_internal_r+0x1594>
 4005d44:	01410074 	movhi	r5,1025
 4005d48:	2955d684 	addi	r5,r5,22362
 4005d4c:	d9402b15 	stw	r5,172(sp)
 4005d50:	01c001c4 	movi	r7,7
 4005d54:	dcc02c17 	ldw	r19,176(sp)
 4005d58:	00000306 	br	4005d68 <___vfprintf_internal_r+0x13b4>
 4005d5c:	b5800204 	addi	r22,r22,8
 4005d60:	843ffc04 	addi	r16,r16,-16
 4005d64:	e4007b0e 	bge	fp,r16,4005f54 <___vfprintf_internal_r+0x15a0>
 4005d68:	18c00404 	addi	r3,r3,16
 4005d6c:	8c400044 	addi	r17,r17,1
 4005d70:	b5000015 	stw	r20,0(r22)
 4005d74:	b7000115 	stw	fp,4(r22)
 4005d78:	d8c02015 	stw	r3,128(sp)
 4005d7c:	dc401f15 	stw	r17,124(sp)
 4005d80:	3c7ff60e 	bge	r7,r17,4005d5c <__alt_data_end+0xfc005d5c>
 4005d84:	d9801e04 	addi	r6,sp,120
 4005d88:	b80b883a 	mov	r5,r23
 4005d8c:	9809883a 	mov	r4,r19
 4005d90:	d9c03c15 	stw	r7,240(sp)
 4005d94:	400b6080 	call	400b608 <__sprint_r>
 4005d98:	d9c03c17 	ldw	r7,240(sp)
 4005d9c:	103c071e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005da0:	d8c02017 	ldw	r3,128(sp)
 4005da4:	dc401f17 	ldw	r17,124(sp)
 4005da8:	dd800404 	addi	r22,sp,16
 4005dac:	003fec06 	br	4005d60 <__alt_data_end+0xfc005d60>
 4005db0:	9080100c 	andi	r2,r18,64
 4005db4:	d8002785 	stb	zero,158(sp)
 4005db8:	10010e26 	beq	r2,zero,40061f4 <___vfprintf_internal_r+0x1840>
 4005dbc:	d9002d17 	ldw	r4,180(sp)
 4005dc0:	d9402917 	ldw	r5,164(sp)
 4005dc4:	002d883a 	mov	r22,zero
 4005dc8:	20800104 	addi	r2,r4,4
 4005dcc:	24c0000b 	ldhu	r19,0(r4)
 4005dd0:	283fc90e 	bge	r5,zero,4005cf8 <__alt_data_end+0xfc005cf8>
 4005dd4:	d8802d15 	stw	r2,180(sp)
 4005dd8:	0039883a 	mov	fp,zero
 4005ddc:	9d84b03a 	or	r2,r19,r22
 4005de0:	103c461e 	bne	r2,zero,4004efc <__alt_data_end+0xfc004efc>
 4005de4:	00800044 	movi	r2,1
 4005de8:	003e6c06 	br	400579c <__alt_data_end+0xfc00579c>
 4005dec:	d9002c17 	ldw	r4,176(sp)
 4005df0:	d9801e04 	addi	r6,sp,120
 4005df4:	b80b883a 	mov	r5,r23
 4005df8:	400b6080 	call	400b608 <__sprint_r>
 4005dfc:	103bef1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005e00:	d8c02017 	ldw	r3,128(sp)
 4005e04:	da000404 	addi	r8,sp,16
 4005e08:	d9003217 	ldw	r4,200(sp)
 4005e0c:	d8802617 	ldw	r2,152(sp)
 4005e10:	d9403317 	ldw	r5,204(sp)
 4005e14:	8123883a 	add	r17,r16,r4
 4005e18:	11400216 	blt	r2,r5,4005e24 <___vfprintf_internal_r+0x1470>
 4005e1c:	9100004c 	andi	r4,r18,1
 4005e20:	20000d26 	beq	r4,zero,4005e58 <___vfprintf_internal_r+0x14a4>
 4005e24:	d9003717 	ldw	r4,220(sp)
 4005e28:	d9403417 	ldw	r5,208(sp)
 4005e2c:	1907883a 	add	r3,r3,r4
 4005e30:	d9001f17 	ldw	r4,124(sp)
 4005e34:	41400015 	stw	r5,0(r8)
 4005e38:	d9403717 	ldw	r5,220(sp)
 4005e3c:	21000044 	addi	r4,r4,1
 4005e40:	d8c02015 	stw	r3,128(sp)
 4005e44:	41400115 	stw	r5,4(r8)
 4005e48:	d9001f15 	stw	r4,124(sp)
 4005e4c:	014001c4 	movi	r5,7
 4005e50:	2901e816 	blt	r5,r4,40065f4 <___vfprintf_internal_r+0x1c40>
 4005e54:	42000204 	addi	r8,r8,8
 4005e58:	d9003317 	ldw	r4,204(sp)
 4005e5c:	8121883a 	add	r16,r16,r4
 4005e60:	2085c83a 	sub	r2,r4,r2
 4005e64:	8461c83a 	sub	r16,r16,r17
 4005e68:	1400010e 	bge	r2,r16,4005e70 <___vfprintf_internal_r+0x14bc>
 4005e6c:	1021883a 	mov	r16,r2
 4005e70:	04000a0e 	bge	zero,r16,4005e9c <___vfprintf_internal_r+0x14e8>
 4005e74:	d9001f17 	ldw	r4,124(sp)
 4005e78:	1c07883a 	add	r3,r3,r16
 4005e7c:	44400015 	stw	r17,0(r8)
 4005e80:	21000044 	addi	r4,r4,1
 4005e84:	44000115 	stw	r16,4(r8)
 4005e88:	d8c02015 	stw	r3,128(sp)
 4005e8c:	d9001f15 	stw	r4,124(sp)
 4005e90:	014001c4 	movi	r5,7
 4005e94:	2901fb16 	blt	r5,r4,4006684 <___vfprintf_internal_r+0x1cd0>
 4005e98:	42000204 	addi	r8,r8,8
 4005e9c:	8001f716 	blt	r16,zero,400667c <___vfprintf_internal_r+0x1cc8>
 4005ea0:	1421c83a 	sub	r16,r2,r16
 4005ea4:	043d380e 	bge	zero,r16,4005388 <__alt_data_end+0xfc005388>
 4005ea8:	04400404 	movi	r17,16
 4005eac:	d8801f17 	ldw	r2,124(sp)
 4005eb0:	8c3efb0e 	bge	r17,r16,4005aa0 <__alt_data_end+0xfc005aa0>
 4005eb4:	01410074 	movhi	r5,1025
 4005eb8:	2955d684 	addi	r5,r5,22362
 4005ebc:	d9402b15 	stw	r5,172(sp)
 4005ec0:	058001c4 	movi	r22,7
 4005ec4:	dcc02c17 	ldw	r19,176(sp)
 4005ec8:	00000306 	br	4005ed8 <___vfprintf_internal_r+0x1524>
 4005ecc:	42000204 	addi	r8,r8,8
 4005ed0:	843ffc04 	addi	r16,r16,-16
 4005ed4:	8c3ef50e 	bge	r17,r16,4005aac <__alt_data_end+0xfc005aac>
 4005ed8:	18c00404 	addi	r3,r3,16
 4005edc:	10800044 	addi	r2,r2,1
 4005ee0:	45000015 	stw	r20,0(r8)
 4005ee4:	44400115 	stw	r17,4(r8)
 4005ee8:	d8c02015 	stw	r3,128(sp)
 4005eec:	d8801f15 	stw	r2,124(sp)
 4005ef0:	b0bff60e 	bge	r22,r2,4005ecc <__alt_data_end+0xfc005ecc>
 4005ef4:	d9801e04 	addi	r6,sp,120
 4005ef8:	b80b883a 	mov	r5,r23
 4005efc:	9809883a 	mov	r4,r19
 4005f00:	400b6080 	call	400b608 <__sprint_r>
 4005f04:	103bad1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005f08:	d8c02017 	ldw	r3,128(sp)
 4005f0c:	d8801f17 	ldw	r2,124(sp)
 4005f10:	da000404 	addi	r8,sp,16
 4005f14:	003fee06 	br	4005ed0 <__alt_data_end+0xfc005ed0>
 4005f18:	9088703a 	and	r4,r18,r2
 4005f1c:	203eab1e 	bne	r4,zero,40059cc <__alt_data_end+0xfc0059cc>
 4005f20:	dc401f17 	ldw	r17,124(sp)
 4005f24:	40800115 	stw	r2,4(r8)
 4005f28:	44000015 	stw	r16,0(r8)
 4005f2c:	8c400044 	addi	r17,r17,1
 4005f30:	d8c02015 	stw	r3,128(sp)
 4005f34:	dc401f15 	stw	r17,124(sp)
 4005f38:	008001c4 	movi	r2,7
 4005f3c:	14400e16 	blt	r2,r17,4005f78 <___vfprintf_internal_r+0x15c4>
 4005f40:	45800204 	addi	r22,r8,8
 4005f44:	003eca06 	br	4005a70 <__alt_data_end+0xfc005a70>
 4005f48:	01010074 	movhi	r4,1025
 4005f4c:	2115d684 	addi	r4,r4,22362
 4005f50:	d9002b15 	stw	r4,172(sp)
 4005f54:	d8802b17 	ldw	r2,172(sp)
 4005f58:	1c07883a 	add	r3,r3,r16
 4005f5c:	8c400044 	addi	r17,r17,1
 4005f60:	b0800015 	stw	r2,0(r22)
 4005f64:	b4000115 	stw	r16,4(r22)
 4005f68:	d8c02015 	stw	r3,128(sp)
 4005f6c:	dc401f15 	stw	r17,124(sp)
 4005f70:	008001c4 	movi	r2,7
 4005f74:	147ebd0e 	bge	r2,r17,4005a6c <__alt_data_end+0xfc005a6c>
 4005f78:	d9002c17 	ldw	r4,176(sp)
 4005f7c:	d9801e04 	addi	r6,sp,120
 4005f80:	b80b883a 	mov	r5,r23
 4005f84:	400b6080 	call	400b608 <__sprint_r>
 4005f88:	103b8c1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005f8c:	d8c02017 	ldw	r3,128(sp)
 4005f90:	dc401f17 	ldw	r17,124(sp)
 4005f94:	dd800404 	addi	r22,sp,16
 4005f98:	003eb506 	br	4005a70 <__alt_data_end+0xfc005a70>
 4005f9c:	d9002c17 	ldw	r4,176(sp)
 4005fa0:	d9801e04 	addi	r6,sp,120
 4005fa4:	b80b883a 	mov	r5,r23
 4005fa8:	400b6080 	call	400b608 <__sprint_r>
 4005fac:	103b831e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005fb0:	d8c02017 	ldw	r3,128(sp)
 4005fb4:	dc401f17 	ldw	r17,124(sp)
 4005fb8:	da000404 	addi	r8,sp,16
 4005fbc:	003e8d06 	br	40059f4 <__alt_data_end+0xfc0059f4>
 4005fc0:	d9002c17 	ldw	r4,176(sp)
 4005fc4:	d9801e04 	addi	r6,sp,120
 4005fc8:	b80b883a 	mov	r5,r23
 4005fcc:	400b6080 	call	400b608 <__sprint_r>
 4005fd0:	103b7a1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4005fd4:	d8c02017 	ldw	r3,128(sp)
 4005fd8:	dc401f17 	ldw	r17,124(sp)
 4005fdc:	dd800404 	addi	r22,sp,16
 4005fe0:	003e8f06 	br	4005a20 <__alt_data_end+0xfc005a20>
 4005fe4:	0027883a 	mov	r19,zero
 4005fe8:	003f4a06 	br	4005d14 <__alt_data_end+0xfc005d14>
 4005fec:	d9002c17 	ldw	r4,176(sp)
 4005ff0:	d9801e04 	addi	r6,sp,120
 4005ff4:	b80b883a 	mov	r5,r23
 4005ff8:	400b6080 	call	400b608 <__sprint_r>
 4005ffc:	103b6f1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4006000:	d8c02017 	ldw	r3,128(sp)
 4006004:	da000404 	addi	r8,sp,16
 4006008:	003c9d06 	br	4005280 <__alt_data_end+0xfc005280>
 400600c:	04e7c83a 	sub	r19,zero,r19
 4006010:	9804c03a 	cmpne	r2,r19,zero
 4006014:	05adc83a 	sub	r22,zero,r22
 4006018:	b0adc83a 	sub	r22,r22,r2
 400601c:	d8802917 	ldw	r2,164(sp)
 4006020:	07000b44 	movi	fp,45
 4006024:	df002785 	stb	fp,158(sp)
 4006028:	10017b16 	blt	r2,zero,4006618 <___vfprintf_internal_r+0x1c64>
 400602c:	00bfdfc4 	movi	r2,-129
 4006030:	90a4703a 	and	r18,r18,r2
 4006034:	003bb106 	br	4004efc <__alt_data_end+0xfc004efc>
 4006038:	d9003617 	ldw	r4,216(sp)
 400603c:	d9403817 	ldw	r5,224(sp)
 4006040:	da003d15 	stw	r8,244(sp)
 4006044:	400b2800 	call	400b280 <__fpclassifyd>
 4006048:	da003d17 	ldw	r8,244(sp)
 400604c:	1000f026 	beq	r2,zero,4006410 <___vfprintf_internal_r+0x1a5c>
 4006050:	d9002917 	ldw	r4,164(sp)
 4006054:	05bff7c4 	movi	r22,-33
 4006058:	00bfffc4 	movi	r2,-1
 400605c:	8dac703a 	and	r22,r17,r22
 4006060:	20820026 	beq	r4,r2,4006864 <___vfprintf_internal_r+0x1eb0>
 4006064:	008011c4 	movi	r2,71
 4006068:	b081f726 	beq	r22,r2,4006848 <___vfprintf_internal_r+0x1e94>
 400606c:	d9003817 	ldw	r4,224(sp)
 4006070:	90c04014 	ori	r3,r18,256
 4006074:	d8c02b15 	stw	r3,172(sp)
 4006078:	20021516 	blt	r4,zero,40068d0 <___vfprintf_internal_r+0x1f1c>
 400607c:	dcc03817 	ldw	r19,224(sp)
 4006080:	d8002a05 	stb	zero,168(sp)
 4006084:	00801984 	movi	r2,102
 4006088:	8881f926 	beq	r17,r2,4006870 <___vfprintf_internal_r+0x1ebc>
 400608c:	00801184 	movi	r2,70
 4006090:	88821c26 	beq	r17,r2,4006904 <___vfprintf_internal_r+0x1f50>
 4006094:	00801144 	movi	r2,69
 4006098:	b081ef26 	beq	r22,r2,4006858 <___vfprintf_internal_r+0x1ea4>
 400609c:	d8c02917 	ldw	r3,164(sp)
 40060a0:	d8802104 	addi	r2,sp,132
 40060a4:	d8800315 	stw	r2,12(sp)
 40060a8:	d9403617 	ldw	r5,216(sp)
 40060ac:	d8802504 	addi	r2,sp,148
 40060b0:	d9002c17 	ldw	r4,176(sp)
 40060b4:	d8800215 	stw	r2,8(sp)
 40060b8:	d8802604 	addi	r2,sp,152
 40060bc:	d8c00015 	stw	r3,0(sp)
 40060c0:	d8800115 	stw	r2,4(sp)
 40060c4:	01c00084 	movi	r7,2
 40060c8:	980d883a 	mov	r6,r19
 40060cc:	d8c03c15 	stw	r3,240(sp)
 40060d0:	da003d15 	stw	r8,244(sp)
 40060d4:	4006fd80 	call	4006fd8 <_dtoa_r>
 40060d8:	1021883a 	mov	r16,r2
 40060dc:	008019c4 	movi	r2,103
 40060e0:	d8c03c17 	ldw	r3,240(sp)
 40060e4:	da003d17 	ldw	r8,244(sp)
 40060e8:	88817126 	beq	r17,r2,40066b0 <___vfprintf_internal_r+0x1cfc>
 40060ec:	008011c4 	movi	r2,71
 40060f0:	88829226 	beq	r17,r2,4006b3c <___vfprintf_internal_r+0x2188>
 40060f4:	80f9883a 	add	fp,r16,r3
 40060f8:	d9003617 	ldw	r4,216(sp)
 40060fc:	000d883a 	mov	r6,zero
 4006100:	000f883a 	mov	r7,zero
 4006104:	980b883a 	mov	r5,r19
 4006108:	da003d15 	stw	r8,244(sp)
 400610c:	400f0cc0 	call	400f0cc <__eqdf2>
 4006110:	da003d17 	ldw	r8,244(sp)
 4006114:	10018d26 	beq	r2,zero,400674c <___vfprintf_internal_r+0x1d98>
 4006118:	d8802117 	ldw	r2,132(sp)
 400611c:	1700062e 	bgeu	r2,fp,4006138 <___vfprintf_internal_r+0x1784>
 4006120:	01000c04 	movi	r4,48
 4006124:	10c00044 	addi	r3,r2,1
 4006128:	d8c02115 	stw	r3,132(sp)
 400612c:	11000005 	stb	r4,0(r2)
 4006130:	d8802117 	ldw	r2,132(sp)
 4006134:	173ffb36 	bltu	r2,fp,4006124 <__alt_data_end+0xfc006124>
 4006138:	1405c83a 	sub	r2,r2,r16
 400613c:	d8803315 	stw	r2,204(sp)
 4006140:	008011c4 	movi	r2,71
 4006144:	b0817626 	beq	r22,r2,4006720 <___vfprintf_internal_r+0x1d6c>
 4006148:	00801944 	movi	r2,101
 400614c:	1442810e 	bge	r2,r17,4006b54 <___vfprintf_internal_r+0x21a0>
 4006150:	d8c02617 	ldw	r3,152(sp)
 4006154:	00801984 	movi	r2,102
 4006158:	d8c03215 	stw	r3,200(sp)
 400615c:	8881fe26 	beq	r17,r2,4006958 <___vfprintf_internal_r+0x1fa4>
 4006160:	d8c03217 	ldw	r3,200(sp)
 4006164:	d9003317 	ldw	r4,204(sp)
 4006168:	1901dd16 	blt	r3,r4,40068e0 <___vfprintf_internal_r+0x1f2c>
 400616c:	9480004c 	andi	r18,r18,1
 4006170:	90022b1e 	bne	r18,zero,4006a20 <___vfprintf_internal_r+0x206c>
 4006174:	1805883a 	mov	r2,r3
 4006178:	18028016 	blt	r3,zero,4006b7c <___vfprintf_internal_r+0x21c8>
 400617c:	d8c03217 	ldw	r3,200(sp)
 4006180:	044019c4 	movi	r17,103
 4006184:	d8c02e15 	stw	r3,184(sp)
 4006188:	df002a07 	ldb	fp,168(sp)
 400618c:	e001531e 	bne	fp,zero,40066dc <___vfprintf_internal_r+0x1d28>
 4006190:	df002783 	ldbu	fp,158(sp)
 4006194:	d8802a15 	stw	r2,168(sp)
 4006198:	dc802b17 	ldw	r18,172(sp)
 400619c:	d8002915 	stw	zero,164(sp)
 40061a0:	003bd106 	br	40050e8 <__alt_data_end+0xfc0050e8>
 40061a4:	d8802d17 	ldw	r2,180(sp)
 40061a8:	d8c02d17 	ldw	r3,180(sp)
 40061ac:	d9002d17 	ldw	r4,180(sp)
 40061b0:	10800017 	ldw	r2,0(r2)
 40061b4:	18c00117 	ldw	r3,4(r3)
 40061b8:	21000204 	addi	r4,r4,8
 40061bc:	d8803615 	stw	r2,216(sp)
 40061c0:	d8c03815 	stw	r3,224(sp)
 40061c4:	d9002d15 	stw	r4,180(sp)
 40061c8:	003b7506 	br	4004fa0 <__alt_data_end+0xfc004fa0>
 40061cc:	ac400007 	ldb	r17,0(r21)
 40061d0:	003a5906 	br	4004b38 <__alt_data_end+0xfc004b38>
 40061d4:	9080100c 	andi	r2,r18,64
 40061d8:	1000a826 	beq	r2,zero,400647c <___vfprintf_internal_r+0x1ac8>
 40061dc:	d9002d17 	ldw	r4,180(sp)
 40061e0:	002d883a 	mov	r22,zero
 40061e4:	24c0000b 	ldhu	r19,0(r4)
 40061e8:	21000104 	addi	r4,r4,4
 40061ec:	d9002d15 	stw	r4,180(sp)
 40061f0:	003ccb06 	br	4005520 <__alt_data_end+0xfc005520>
 40061f4:	d8c02d17 	ldw	r3,180(sp)
 40061f8:	d9002917 	ldw	r4,164(sp)
 40061fc:	002d883a 	mov	r22,zero
 4006200:	18800104 	addi	r2,r3,4
 4006204:	1cc00017 	ldw	r19,0(r3)
 4006208:	203ebb0e 	bge	r4,zero,4005cf8 <__alt_data_end+0xfc005cf8>
 400620c:	003ef106 	br	4005dd4 <__alt_data_end+0xfc005dd4>
 4006210:	9080040c 	andi	r2,r18,16
 4006214:	1000921e 	bne	r2,zero,4006460 <___vfprintf_internal_r+0x1aac>
 4006218:	9480100c 	andi	r18,r18,64
 400621c:	90013926 	beq	r18,zero,4006704 <___vfprintf_internal_r+0x1d50>
 4006220:	d9002d17 	ldw	r4,180(sp)
 4006224:	d9402f17 	ldw	r5,188(sp)
 4006228:	20800017 	ldw	r2,0(r4)
 400622c:	21000104 	addi	r4,r4,4
 4006230:	d9002d15 	stw	r4,180(sp)
 4006234:	1140000d 	sth	r5,0(r2)
 4006238:	003a1606 	br	4004a94 <__alt_data_end+0xfc004a94>
 400623c:	9080100c 	andi	r2,r18,64
 4006240:	10008026 	beq	r2,zero,4006444 <___vfprintf_internal_r+0x1a90>
 4006244:	d8c02d17 	ldw	r3,180(sp)
 4006248:	1cc0000f 	ldh	r19,0(r3)
 400624c:	18c00104 	addi	r3,r3,4
 4006250:	d8c02d15 	stw	r3,180(sp)
 4006254:	982dd7fa 	srai	r22,r19,31
 4006258:	b005883a 	mov	r2,r22
 400625c:	003b1f06 	br	4004edc <__alt_data_end+0xfc004edc>
 4006260:	9080100c 	andi	r2,r18,64
 4006264:	d8002785 	stb	zero,158(sp)
 4006268:	10008a1e 	bne	r2,zero,4006494 <___vfprintf_internal_r+0x1ae0>
 400626c:	d9402d17 	ldw	r5,180(sp)
 4006270:	d8c02917 	ldw	r3,164(sp)
 4006274:	002d883a 	mov	r22,zero
 4006278:	28800104 	addi	r2,r5,4
 400627c:	2cc00017 	ldw	r19,0(r5)
 4006280:	183e4b0e 	bge	r3,zero,4005bb0 <__alt_data_end+0xfc005bb0>
 4006284:	9d86b03a 	or	r3,r19,r22
 4006288:	d8802d15 	stw	r2,180(sp)
 400628c:	183e4c1e 	bne	r3,zero,4005bc0 <__alt_data_end+0xfc005bc0>
 4006290:	0039883a 	mov	fp,zero
 4006294:	0005883a 	mov	r2,zero
 4006298:	003d4006 	br	400579c <__alt_data_end+0xfc00579c>
 400629c:	01410074 	movhi	r5,1025
 40062a0:	2955d684 	addi	r5,r5,22362
 40062a4:	d9402b15 	stw	r5,172(sp)
 40062a8:	d9402b17 	ldw	r5,172(sp)
 40062ac:	1c47883a 	add	r3,r3,r17
 40062b0:	10800044 	addi	r2,r2,1
 40062b4:	41400015 	stw	r5,0(r8)
 40062b8:	44400115 	stw	r17,4(r8)
 40062bc:	d8c02015 	stw	r3,128(sp)
 40062c0:	d8801f15 	stw	r2,124(sp)
 40062c4:	010001c4 	movi	r4,7
 40062c8:	20bec816 	blt	r4,r2,4005dec <__alt_data_end+0xfc005dec>
 40062cc:	42000204 	addi	r8,r8,8
 40062d0:	003ecd06 	br	4005e08 <__alt_data_end+0xfc005e08>
 40062d4:	d9002917 	ldw	r4,164(sp)
 40062d8:	d8002785 	stb	zero,158(sp)
 40062dc:	203d2d16 	blt	r4,zero,4005794 <__alt_data_end+0xfc005794>
 40062e0:	00bfdfc4 	movi	r2,-129
 40062e4:	90a4703a 	and	r18,r18,r2
 40062e8:	003a9106 	br	4004d30 <__alt_data_end+0xfc004d30>
 40062ec:	01010074 	movhi	r4,1025
 40062f0:	2115d684 	addi	r4,r4,22362
 40062f4:	d9002b15 	stw	r4,172(sp)
 40062f8:	003c0c06 	br	400532c <__alt_data_end+0xfc00532c>
 40062fc:	d9002c17 	ldw	r4,176(sp)
 4006300:	d9801e04 	addi	r6,sp,120
 4006304:	b80b883a 	mov	r5,r23
 4006308:	400b6080 	call	400b608 <__sprint_r>
 400630c:	103aab1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4006310:	d8c02017 	ldw	r3,128(sp)
 4006314:	da000404 	addi	r8,sp,16
 4006318:	003d4106 	br	4005820 <__alt_data_end+0xfc005820>
 400631c:	d8801f17 	ldw	r2,124(sp)
 4006320:	01410074 	movhi	r5,1025
 4006324:	01000044 	movi	r4,1
 4006328:	18c00044 	addi	r3,r3,1
 400632c:	10800044 	addi	r2,r2,1
 4006330:	2955d604 	addi	r5,r5,22360
 4006334:	41000115 	stw	r4,4(r8)
 4006338:	41400015 	stw	r5,0(r8)
 400633c:	d8c02015 	stw	r3,128(sp)
 4006340:	d8801f15 	stw	r2,124(sp)
 4006344:	010001c4 	movi	r4,7
 4006348:	20805c16 	blt	r4,r2,40064bc <___vfprintf_internal_r+0x1b08>
 400634c:	42000204 	addi	r8,r8,8
 4006350:	8800041e 	bne	r17,zero,4006364 <___vfprintf_internal_r+0x19b0>
 4006354:	d8803317 	ldw	r2,204(sp)
 4006358:	1000021e 	bne	r2,zero,4006364 <___vfprintf_internal_r+0x19b0>
 400635c:	9080004c 	andi	r2,r18,1
 4006360:	103c0926 	beq	r2,zero,4005388 <__alt_data_end+0xfc005388>
 4006364:	d9003717 	ldw	r4,220(sp)
 4006368:	d8801f17 	ldw	r2,124(sp)
 400636c:	d9403417 	ldw	r5,208(sp)
 4006370:	20c7883a 	add	r3,r4,r3
 4006374:	10800044 	addi	r2,r2,1
 4006378:	41000115 	stw	r4,4(r8)
 400637c:	41400015 	stw	r5,0(r8)
 4006380:	d8c02015 	stw	r3,128(sp)
 4006384:	d8801f15 	stw	r2,124(sp)
 4006388:	010001c4 	movi	r4,7
 400638c:	20812116 	blt	r4,r2,4006814 <___vfprintf_internal_r+0x1e60>
 4006390:	42000204 	addi	r8,r8,8
 4006394:	0463c83a 	sub	r17,zero,r17
 4006398:	0440730e 	bge	zero,r17,4006568 <___vfprintf_internal_r+0x1bb4>
 400639c:	05800404 	movi	r22,16
 40063a0:	b440860e 	bge	r22,r17,40065bc <___vfprintf_internal_r+0x1c08>
 40063a4:	01410074 	movhi	r5,1025
 40063a8:	2955d684 	addi	r5,r5,22362
 40063ac:	d9402b15 	stw	r5,172(sp)
 40063b0:	070001c4 	movi	fp,7
 40063b4:	dcc02c17 	ldw	r19,176(sp)
 40063b8:	00000306 	br	40063c8 <___vfprintf_internal_r+0x1a14>
 40063bc:	42000204 	addi	r8,r8,8
 40063c0:	8c7ffc04 	addi	r17,r17,-16
 40063c4:	b440800e 	bge	r22,r17,40065c8 <___vfprintf_internal_r+0x1c14>
 40063c8:	18c00404 	addi	r3,r3,16
 40063cc:	10800044 	addi	r2,r2,1
 40063d0:	45000015 	stw	r20,0(r8)
 40063d4:	45800115 	stw	r22,4(r8)
 40063d8:	d8c02015 	stw	r3,128(sp)
 40063dc:	d8801f15 	stw	r2,124(sp)
 40063e0:	e0bff60e 	bge	fp,r2,40063bc <__alt_data_end+0xfc0063bc>
 40063e4:	d9801e04 	addi	r6,sp,120
 40063e8:	b80b883a 	mov	r5,r23
 40063ec:	9809883a 	mov	r4,r19
 40063f0:	400b6080 	call	400b608 <__sprint_r>
 40063f4:	103a711e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 40063f8:	d8c02017 	ldw	r3,128(sp)
 40063fc:	d8801f17 	ldw	r2,124(sp)
 4006400:	da000404 	addi	r8,sp,16
 4006404:	003fee06 	br	40063c0 <__alt_data_end+0xfc0063c0>
 4006408:	00bfffc4 	movi	r2,-1
 400640c:	003a6f06 	br	4004dcc <__alt_data_end+0xfc004dcc>
 4006410:	008011c4 	movi	r2,71
 4006414:	1440b816 	blt	r2,r17,40066f8 <___vfprintf_internal_r+0x1d44>
 4006418:	04010074 	movhi	r16,1025
 400641c:	8415c804 	addi	r16,r16,22304
 4006420:	00c000c4 	movi	r3,3
 4006424:	00bfdfc4 	movi	r2,-129
 4006428:	d8c02a15 	stw	r3,168(sp)
 400642c:	90a4703a 	and	r18,r18,r2
 4006430:	df002783 	ldbu	fp,158(sp)
 4006434:	d8c02e15 	stw	r3,184(sp)
 4006438:	d8002915 	stw	zero,164(sp)
 400643c:	d8003215 	stw	zero,200(sp)
 4006440:	003b2906 	br	40050e8 <__alt_data_end+0xfc0050e8>
 4006444:	d9002d17 	ldw	r4,180(sp)
 4006448:	24c00017 	ldw	r19,0(r4)
 400644c:	21000104 	addi	r4,r4,4
 4006450:	d9002d15 	stw	r4,180(sp)
 4006454:	982dd7fa 	srai	r22,r19,31
 4006458:	b005883a 	mov	r2,r22
 400645c:	003a9f06 	br	4004edc <__alt_data_end+0xfc004edc>
 4006460:	d9402d17 	ldw	r5,180(sp)
 4006464:	d8c02f17 	ldw	r3,188(sp)
 4006468:	28800017 	ldw	r2,0(r5)
 400646c:	29400104 	addi	r5,r5,4
 4006470:	d9402d15 	stw	r5,180(sp)
 4006474:	10c00015 	stw	r3,0(r2)
 4006478:	00398606 	br	4004a94 <__alt_data_end+0xfc004a94>
 400647c:	d9402d17 	ldw	r5,180(sp)
 4006480:	002d883a 	mov	r22,zero
 4006484:	2cc00017 	ldw	r19,0(r5)
 4006488:	29400104 	addi	r5,r5,4
 400648c:	d9402d15 	stw	r5,180(sp)
 4006490:	003c2306 	br	4005520 <__alt_data_end+0xfc005520>
 4006494:	d8c02d17 	ldw	r3,180(sp)
 4006498:	d9002917 	ldw	r4,164(sp)
 400649c:	002d883a 	mov	r22,zero
 40064a0:	18800104 	addi	r2,r3,4
 40064a4:	1cc0000b 	ldhu	r19,0(r3)
 40064a8:	203dc10e 	bge	r4,zero,4005bb0 <__alt_data_end+0xfc005bb0>
 40064ac:	003f7506 	br	4006284 <__alt_data_end+0xfc006284>
 40064b0:	04010074 	movhi	r16,1025
 40064b4:	8415c604 	addi	r16,r16,22296
 40064b8:	003acc06 	br	4004fec <__alt_data_end+0xfc004fec>
 40064bc:	d9002c17 	ldw	r4,176(sp)
 40064c0:	d9801e04 	addi	r6,sp,120
 40064c4:	b80b883a 	mov	r5,r23
 40064c8:	400b6080 	call	400b608 <__sprint_r>
 40064cc:	103a3b1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 40064d0:	dc402617 	ldw	r17,152(sp)
 40064d4:	d8c02017 	ldw	r3,128(sp)
 40064d8:	da000404 	addi	r8,sp,16
 40064dc:	003f9c06 	br	4006350 <__alt_data_end+0xfc006350>
 40064e0:	ac400043 	ldbu	r17,1(r21)
 40064e4:	94800814 	ori	r18,r18,32
 40064e8:	ad400044 	addi	r21,r21,1
 40064ec:	8c403fcc 	andi	r17,r17,255
 40064f0:	8c40201c 	xori	r17,r17,128
 40064f4:	8c7fe004 	addi	r17,r17,-128
 40064f8:	00398f06 	br	4004b38 <__alt_data_end+0xfc004b38>
 40064fc:	d8c02d15 	stw	r3,180(sp)
 4006500:	0039883a 	mov	fp,zero
 4006504:	003e3506 	br	4005ddc <__alt_data_end+0xfc005ddc>
 4006508:	d9002c17 	ldw	r4,176(sp)
 400650c:	d9801e04 	addi	r6,sp,120
 4006510:	b80b883a 	mov	r5,r23
 4006514:	400b6080 	call	400b608 <__sprint_r>
 4006518:	103a281e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 400651c:	d8c02017 	ldw	r3,128(sp)
 4006520:	da000404 	addi	r8,sp,16
 4006524:	003cd006 	br	4005868 <__alt_data_end+0xfc005868>
 4006528:	8009883a 	mov	r4,r16
 400652c:	da003d15 	stw	r8,244(sp)
 4006530:	400491c0 	call	400491c <strlen>
 4006534:	d8802e15 	stw	r2,184(sp)
 4006538:	da003d17 	ldw	r8,244(sp)
 400653c:	103c340e 	bge	r2,zero,4005610 <__alt_data_end+0xfc005610>
 4006540:	0005883a 	mov	r2,zero
 4006544:	003c3206 	br	4005610 <__alt_data_end+0xfc005610>
 4006548:	d9002c17 	ldw	r4,176(sp)
 400654c:	d9801e04 	addi	r6,sp,120
 4006550:	b80b883a 	mov	r5,r23
 4006554:	400b6080 	call	400b608 <__sprint_r>
 4006558:	103a181e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 400655c:	d8c02017 	ldw	r3,128(sp)
 4006560:	d8801f17 	ldw	r2,124(sp)
 4006564:	da000404 	addi	r8,sp,16
 4006568:	d9403317 	ldw	r5,204(sp)
 400656c:	10800044 	addi	r2,r2,1
 4006570:	44000015 	stw	r16,0(r8)
 4006574:	28c7883a 	add	r3,r5,r3
 4006578:	003b7d06 	br	4005370 <__alt_data_end+0xfc005370>
 400657c:	01010074 	movhi	r4,1025
 4006580:	2115da84 	addi	r4,r4,22378
 4006584:	d9003515 	stw	r4,212(sp)
 4006588:	003b1406 	br	40051dc <__alt_data_end+0xfc0051dc>
 400658c:	013fffc4 	movi	r4,-1
 4006590:	003a3506 	br	4004e68 <__alt_data_end+0xfc004e68>
 4006594:	0023883a 	mov	r17,zero
 4006598:	003d9d06 	br	4005c10 <__alt_data_end+0xfc005c10>
 400659c:	d9002c17 	ldw	r4,176(sp)
 40065a0:	d9801e04 	addi	r6,sp,120
 40065a4:	b80b883a 	mov	r5,r23
 40065a8:	400b6080 	call	400b608 <__sprint_r>
 40065ac:	103a031e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 40065b0:	d8c02017 	ldw	r3,128(sp)
 40065b4:	da000404 	addi	r8,sp,16
 40065b8:	003d9406 	br	4005c0c <__alt_data_end+0xfc005c0c>
 40065bc:	01010074 	movhi	r4,1025
 40065c0:	2115d684 	addi	r4,r4,22362
 40065c4:	d9002b15 	stw	r4,172(sp)
 40065c8:	d9002b17 	ldw	r4,172(sp)
 40065cc:	1c47883a 	add	r3,r3,r17
 40065d0:	10800044 	addi	r2,r2,1
 40065d4:	41000015 	stw	r4,0(r8)
 40065d8:	44400115 	stw	r17,4(r8)
 40065dc:	d8c02015 	stw	r3,128(sp)
 40065e0:	d8801f15 	stw	r2,124(sp)
 40065e4:	010001c4 	movi	r4,7
 40065e8:	20bfd716 	blt	r4,r2,4006548 <__alt_data_end+0xfc006548>
 40065ec:	42000204 	addi	r8,r8,8
 40065f0:	003fdd06 	br	4006568 <__alt_data_end+0xfc006568>
 40065f4:	d9002c17 	ldw	r4,176(sp)
 40065f8:	d9801e04 	addi	r6,sp,120
 40065fc:	b80b883a 	mov	r5,r23
 4006600:	400b6080 	call	400b608 <__sprint_r>
 4006604:	1039ed1e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4006608:	d8802617 	ldw	r2,152(sp)
 400660c:	d8c02017 	ldw	r3,128(sp)
 4006610:	da000404 	addi	r8,sp,16
 4006614:	003e1006 	br	4005e58 <__alt_data_end+0xfc005e58>
 4006618:	00800044 	movi	r2,1
 400661c:	10803fcc 	andi	r2,r2,255
 4006620:	00c00044 	movi	r3,1
 4006624:	10fa3526 	beq	r2,r3,4004efc <__alt_data_end+0xfc004efc>
 4006628:	00c00084 	movi	r3,2
 400662c:	10fbcb26 	beq	r2,r3,400555c <__alt_data_end+0xfc00555c>
 4006630:	003a8f06 	br	4005070 <__alt_data_end+0xfc005070>
 4006634:	01010074 	movhi	r4,1025
 4006638:	2115da84 	addi	r4,r4,22378
 400663c:	d9003515 	stw	r4,212(sp)
 4006640:	003b7606 	br	400541c <__alt_data_end+0xfc00541c>
 4006644:	d8802917 	ldw	r2,164(sp)
 4006648:	00c00184 	movi	r3,6
 400664c:	1880012e 	bgeu	r3,r2,4006654 <___vfprintf_internal_r+0x1ca0>
 4006650:	1805883a 	mov	r2,r3
 4006654:	d8802e15 	stw	r2,184(sp)
 4006658:	1000ef16 	blt	r2,zero,4006a18 <___vfprintf_internal_r+0x2064>
 400665c:	04010074 	movhi	r16,1025
 4006660:	d8802a15 	stw	r2,168(sp)
 4006664:	dcc02d15 	stw	r19,180(sp)
 4006668:	d8002915 	stw	zero,164(sp)
 400666c:	d8003215 	stw	zero,200(sp)
 4006670:	8415d404 	addi	r16,r16,22352
 4006674:	0039883a 	mov	fp,zero
 4006678:	003aa206 	br	4005104 <__alt_data_end+0xfc005104>
 400667c:	0021883a 	mov	r16,zero
 4006680:	003e0706 	br	4005ea0 <__alt_data_end+0xfc005ea0>
 4006684:	d9002c17 	ldw	r4,176(sp)
 4006688:	d9801e04 	addi	r6,sp,120
 400668c:	b80b883a 	mov	r5,r23
 4006690:	400b6080 	call	400b608 <__sprint_r>
 4006694:	1039c91e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4006698:	d8802617 	ldw	r2,152(sp)
 400669c:	d9403317 	ldw	r5,204(sp)
 40066a0:	d8c02017 	ldw	r3,128(sp)
 40066a4:	da000404 	addi	r8,sp,16
 40066a8:	2885c83a 	sub	r2,r5,r2
 40066ac:	003dfb06 	br	4005e9c <__alt_data_end+0xfc005e9c>
 40066b0:	9080004c 	andi	r2,r18,1
 40066b4:	103e8f1e 	bne	r2,zero,40060f4 <__alt_data_end+0xfc0060f4>
 40066b8:	d8802117 	ldw	r2,132(sp)
 40066bc:	003e9e06 	br	4006138 <__alt_data_end+0xfc006138>
 40066c0:	1025883a 	mov	r18,r2
 40066c4:	0039883a 	mov	fp,zero
 40066c8:	00800084 	movi	r2,2
 40066cc:	003fd306 	br	400661c <__alt_data_end+0xfc00661c>
 40066d0:	07000b44 	movi	fp,45
 40066d4:	df002785 	stb	fp,158(sp)
 40066d8:	003a4006 	br	4004fdc <__alt_data_end+0xfc004fdc>
 40066dc:	00c00b44 	movi	r3,45
 40066e0:	d8c02785 	stb	r3,158(sp)
 40066e4:	d8802a15 	stw	r2,168(sp)
 40066e8:	dc802b17 	ldw	r18,172(sp)
 40066ec:	d8002915 	stw	zero,164(sp)
 40066f0:	07000b44 	movi	fp,45
 40066f4:	003a8006 	br	40050f8 <__alt_data_end+0xfc0050f8>
 40066f8:	04010074 	movhi	r16,1025
 40066fc:	8415c904 	addi	r16,r16,22308
 4006700:	003f4706 	br	4006420 <__alt_data_end+0xfc006420>
 4006704:	d8c02d17 	ldw	r3,180(sp)
 4006708:	d9002f17 	ldw	r4,188(sp)
 400670c:	18800017 	ldw	r2,0(r3)
 4006710:	18c00104 	addi	r3,r3,4
 4006714:	d8c02d15 	stw	r3,180(sp)
 4006718:	11000015 	stw	r4,0(r2)
 400671c:	0038dd06 	br	4004a94 <__alt_data_end+0xfc004a94>
 4006720:	dd802617 	ldw	r22,152(sp)
 4006724:	00bfff44 	movi	r2,-3
 4006728:	b0801c16 	blt	r22,r2,400679c <___vfprintf_internal_r+0x1de8>
 400672c:	d9402917 	ldw	r5,164(sp)
 4006730:	2d801a16 	blt	r5,r22,400679c <___vfprintf_internal_r+0x1de8>
 4006734:	dd803215 	stw	r22,200(sp)
 4006738:	003e8906 	br	4006160 <__alt_data_end+0xfc006160>
 400673c:	01010074 	movhi	r4,1025
 4006740:	2115d684 	addi	r4,r4,22362
 4006744:	d9002b15 	stw	r4,172(sp)
 4006748:	003c9106 	br	4005990 <__alt_data_end+0xfc005990>
 400674c:	e005883a 	mov	r2,fp
 4006750:	003e7906 	br	4006138 <__alt_data_end+0xfc006138>
 4006754:	d9402917 	ldw	r5,164(sp)
 4006758:	df002783 	ldbu	fp,158(sp)
 400675c:	dcc02d15 	stw	r19,180(sp)
 4006760:	d9402a15 	stw	r5,168(sp)
 4006764:	d9402e15 	stw	r5,184(sp)
 4006768:	d8002915 	stw	zero,164(sp)
 400676c:	d8003215 	stw	zero,200(sp)
 4006770:	003a5d06 	br	40050e8 <__alt_data_end+0xfc0050e8>
 4006774:	9080004c 	andi	r2,r18,1
 4006778:	0039883a 	mov	fp,zero
 400677c:	10000426 	beq	r2,zero,4006790 <___vfprintf_internal_r+0x1ddc>
 4006780:	00800c04 	movi	r2,48
 4006784:	dc001dc4 	addi	r16,sp,119
 4006788:	d8801dc5 	stb	r2,119(sp)
 400678c:	003b8006 	br	4005590 <__alt_data_end+0xfc005590>
 4006790:	d8002e15 	stw	zero,184(sp)
 4006794:	dc001e04 	addi	r16,sp,120
 4006798:	003a4d06 	br	40050d0 <__alt_data_end+0xfc0050d0>
 400679c:	8c7fff84 	addi	r17,r17,-2
 40067a0:	b5bfffc4 	addi	r22,r22,-1
 40067a4:	dd802615 	stw	r22,152(sp)
 40067a8:	dc4022c5 	stb	r17,139(sp)
 40067ac:	b000bf16 	blt	r22,zero,4006aac <___vfprintf_internal_r+0x20f8>
 40067b0:	00800ac4 	movi	r2,43
 40067b4:	d8802305 	stb	r2,140(sp)
 40067b8:	00800244 	movi	r2,9
 40067bc:	15807016 	blt	r2,r22,4006980 <___vfprintf_internal_r+0x1fcc>
 40067c0:	00800c04 	movi	r2,48
 40067c4:	b5800c04 	addi	r22,r22,48
 40067c8:	d8802345 	stb	r2,141(sp)
 40067cc:	dd802385 	stb	r22,142(sp)
 40067d0:	d88023c4 	addi	r2,sp,143
 40067d4:	df0022c4 	addi	fp,sp,139
 40067d8:	d8c03317 	ldw	r3,204(sp)
 40067dc:	1739c83a 	sub	fp,r2,fp
 40067e0:	d9003317 	ldw	r4,204(sp)
 40067e4:	e0c7883a 	add	r3,fp,r3
 40067e8:	df003a15 	stw	fp,232(sp)
 40067ec:	d8c02e15 	stw	r3,184(sp)
 40067f0:	00800044 	movi	r2,1
 40067f4:	1100b30e 	bge	r2,r4,4006ac4 <___vfprintf_internal_r+0x2110>
 40067f8:	d8c02e17 	ldw	r3,184(sp)
 40067fc:	18c00044 	addi	r3,r3,1
 4006800:	d8c02e15 	stw	r3,184(sp)
 4006804:	1805883a 	mov	r2,r3
 4006808:	1800ac16 	blt	r3,zero,4006abc <___vfprintf_internal_r+0x2108>
 400680c:	d8003215 	stw	zero,200(sp)
 4006810:	003e5d06 	br	4006188 <__alt_data_end+0xfc006188>
 4006814:	d9002c17 	ldw	r4,176(sp)
 4006818:	d9801e04 	addi	r6,sp,120
 400681c:	b80b883a 	mov	r5,r23
 4006820:	400b6080 	call	400b608 <__sprint_r>
 4006824:	1039651e 	bne	r2,zero,4004dbc <__alt_data_end+0xfc004dbc>
 4006828:	dc402617 	ldw	r17,152(sp)
 400682c:	d8c02017 	ldw	r3,128(sp)
 4006830:	d8801f17 	ldw	r2,124(sp)
 4006834:	da000404 	addi	r8,sp,16
 4006838:	003ed606 	br	4006394 <__alt_data_end+0xfc006394>
 400683c:	582b883a 	mov	r21,r11
 4006840:	d8002915 	stw	zero,164(sp)
 4006844:	0038bd06 	br	4004b3c <__alt_data_end+0xfc004b3c>
 4006848:	d8802917 	ldw	r2,164(sp)
 400684c:	103e071e 	bne	r2,zero,400606c <__alt_data_end+0xfc00606c>
 4006850:	dc002915 	stw	r16,164(sp)
 4006854:	003e0506 	br	400606c <__alt_data_end+0xfc00606c>
 4006858:	d9002917 	ldw	r4,164(sp)
 400685c:	20c00044 	addi	r3,r4,1
 4006860:	003e0f06 	br	40060a0 <__alt_data_end+0xfc0060a0>
 4006864:	01400184 	movi	r5,6
 4006868:	d9402915 	stw	r5,164(sp)
 400686c:	003dff06 	br	400606c <__alt_data_end+0xfc00606c>
 4006870:	d8802104 	addi	r2,sp,132
 4006874:	d8800315 	stw	r2,12(sp)
 4006878:	d8802504 	addi	r2,sp,148
 400687c:	d8800215 	stw	r2,8(sp)
 4006880:	d8802604 	addi	r2,sp,152
 4006884:	d8800115 	stw	r2,4(sp)
 4006888:	d8802917 	ldw	r2,164(sp)
 400688c:	d9403617 	ldw	r5,216(sp)
 4006890:	d9002c17 	ldw	r4,176(sp)
 4006894:	d8800015 	stw	r2,0(sp)
 4006898:	01c000c4 	movi	r7,3
 400689c:	980d883a 	mov	r6,r19
 40068a0:	da003d15 	stw	r8,244(sp)
 40068a4:	4006fd80 	call	4006fd8 <_dtoa_r>
 40068a8:	d8c02917 	ldw	r3,164(sp)
 40068ac:	da003d17 	ldw	r8,244(sp)
 40068b0:	1021883a 	mov	r16,r2
 40068b4:	10f9883a 	add	fp,r2,r3
 40068b8:	81000007 	ldb	r4,0(r16)
 40068bc:	00800c04 	movi	r2,48
 40068c0:	20805e26 	beq	r4,r2,4006a3c <___vfprintf_internal_r+0x2088>
 40068c4:	d8c02617 	ldw	r3,152(sp)
 40068c8:	e0f9883a 	add	fp,fp,r3
 40068cc:	003e0a06 	br	40060f8 <__alt_data_end+0xfc0060f8>
 40068d0:	00c00b44 	movi	r3,45
 40068d4:	24e0003c 	xorhi	r19,r4,32768
 40068d8:	d8c02a05 	stb	r3,168(sp)
 40068dc:	003de906 	br	4006084 <__alt_data_end+0xfc006084>
 40068e0:	d8c03217 	ldw	r3,200(sp)
 40068e4:	00c07a0e 	bge	zero,r3,4006ad0 <___vfprintf_internal_r+0x211c>
 40068e8:	00800044 	movi	r2,1
 40068ec:	d9003317 	ldw	r4,204(sp)
 40068f0:	1105883a 	add	r2,r2,r4
 40068f4:	d8802e15 	stw	r2,184(sp)
 40068f8:	10004e16 	blt	r2,zero,4006a34 <___vfprintf_internal_r+0x2080>
 40068fc:	044019c4 	movi	r17,103
 4006900:	003e2106 	br	4006188 <__alt_data_end+0xfc006188>
 4006904:	d9002917 	ldw	r4,164(sp)
 4006908:	d8802104 	addi	r2,sp,132
 400690c:	d8800315 	stw	r2,12(sp)
 4006910:	d9000015 	stw	r4,0(sp)
 4006914:	d8802504 	addi	r2,sp,148
 4006918:	d9403617 	ldw	r5,216(sp)
 400691c:	d9002c17 	ldw	r4,176(sp)
 4006920:	d8800215 	stw	r2,8(sp)
 4006924:	d8802604 	addi	r2,sp,152
 4006928:	d8800115 	stw	r2,4(sp)
 400692c:	01c000c4 	movi	r7,3
 4006930:	980d883a 	mov	r6,r19
 4006934:	da003d15 	stw	r8,244(sp)
 4006938:	4006fd80 	call	4006fd8 <_dtoa_r>
 400693c:	d8c02917 	ldw	r3,164(sp)
 4006940:	da003d17 	ldw	r8,244(sp)
 4006944:	1021883a 	mov	r16,r2
 4006948:	00801184 	movi	r2,70
 400694c:	80f9883a 	add	fp,r16,r3
 4006950:	88bfd926 	beq	r17,r2,40068b8 <__alt_data_end+0xfc0068b8>
 4006954:	003de806 	br	40060f8 <__alt_data_end+0xfc0060f8>
 4006958:	d9002917 	ldw	r4,164(sp)
 400695c:	00c04d0e 	bge	zero,r3,4006a94 <___vfprintf_internal_r+0x20e0>
 4006960:	2000441e 	bne	r4,zero,4006a74 <___vfprintf_internal_r+0x20c0>
 4006964:	9480004c 	andi	r18,r18,1
 4006968:	9000421e 	bne	r18,zero,4006a74 <___vfprintf_internal_r+0x20c0>
 400696c:	1805883a 	mov	r2,r3
 4006970:	18007016 	blt	r3,zero,4006b34 <___vfprintf_internal_r+0x2180>
 4006974:	d8c03217 	ldw	r3,200(sp)
 4006978:	d8c02e15 	stw	r3,184(sp)
 400697c:	003e0206 	br	4006188 <__alt_data_end+0xfc006188>
 4006980:	df0022c4 	addi	fp,sp,139
 4006984:	dc002915 	stw	r16,164(sp)
 4006988:	4027883a 	mov	r19,r8
 400698c:	e021883a 	mov	r16,fp
 4006990:	b009883a 	mov	r4,r22
 4006994:	01400284 	movi	r5,10
 4006998:	400317c0 	call	400317c <__modsi3>
 400699c:	10800c04 	addi	r2,r2,48
 40069a0:	843fffc4 	addi	r16,r16,-1
 40069a4:	b009883a 	mov	r4,r22
 40069a8:	01400284 	movi	r5,10
 40069ac:	80800005 	stb	r2,0(r16)
 40069b0:	40030f80 	call	40030f8 <__divsi3>
 40069b4:	102d883a 	mov	r22,r2
 40069b8:	00800244 	movi	r2,9
 40069bc:	15bff416 	blt	r2,r22,4006990 <__alt_data_end+0xfc006990>
 40069c0:	9811883a 	mov	r8,r19
 40069c4:	b0800c04 	addi	r2,r22,48
 40069c8:	8027883a 	mov	r19,r16
 40069cc:	997fffc4 	addi	r5,r19,-1
 40069d0:	98bfffc5 	stb	r2,-1(r19)
 40069d4:	dc002917 	ldw	r16,164(sp)
 40069d8:	2f006a2e 	bgeu	r5,fp,4006b84 <___vfprintf_internal_r+0x21d0>
 40069dc:	d9c02384 	addi	r7,sp,142
 40069e0:	3ccfc83a 	sub	r7,r7,r19
 40069e4:	d9002344 	addi	r4,sp,141
 40069e8:	e1cf883a 	add	r7,fp,r7
 40069ec:	00000106 	br	40069f4 <___vfprintf_internal_r+0x2040>
 40069f0:	28800003 	ldbu	r2,0(r5)
 40069f4:	20800005 	stb	r2,0(r4)
 40069f8:	21000044 	addi	r4,r4,1
 40069fc:	29400044 	addi	r5,r5,1
 4006a00:	393ffb1e 	bne	r7,r4,40069f0 <__alt_data_end+0xfc0069f0>
 4006a04:	d8802304 	addi	r2,sp,140
 4006a08:	14c5c83a 	sub	r2,r2,r19
 4006a0c:	d8c02344 	addi	r3,sp,141
 4006a10:	1885883a 	add	r2,r3,r2
 4006a14:	003f7006 	br	40067d8 <__alt_data_end+0xfc0067d8>
 4006a18:	0005883a 	mov	r2,zero
 4006a1c:	003f0f06 	br	400665c <__alt_data_end+0xfc00665c>
 4006a20:	d8c03217 	ldw	r3,200(sp)
 4006a24:	18c00044 	addi	r3,r3,1
 4006a28:	d8c02e15 	stw	r3,184(sp)
 4006a2c:	1805883a 	mov	r2,r3
 4006a30:	183fb20e 	bge	r3,zero,40068fc <__alt_data_end+0xfc0068fc>
 4006a34:	0005883a 	mov	r2,zero
 4006a38:	003fb006 	br	40068fc <__alt_data_end+0xfc0068fc>
 4006a3c:	d9003617 	ldw	r4,216(sp)
 4006a40:	000d883a 	mov	r6,zero
 4006a44:	000f883a 	mov	r7,zero
 4006a48:	980b883a 	mov	r5,r19
 4006a4c:	d8c03c15 	stw	r3,240(sp)
 4006a50:	da003d15 	stw	r8,244(sp)
 4006a54:	400f0cc0 	call	400f0cc <__eqdf2>
 4006a58:	d8c03c17 	ldw	r3,240(sp)
 4006a5c:	da003d17 	ldw	r8,244(sp)
 4006a60:	103f9826 	beq	r2,zero,40068c4 <__alt_data_end+0xfc0068c4>
 4006a64:	00800044 	movi	r2,1
 4006a68:	10c7c83a 	sub	r3,r2,r3
 4006a6c:	d8c02615 	stw	r3,152(sp)
 4006a70:	003f9506 	br	40068c8 <__alt_data_end+0xfc0068c8>
 4006a74:	d9002917 	ldw	r4,164(sp)
 4006a78:	d8c03217 	ldw	r3,200(sp)
 4006a7c:	20800044 	addi	r2,r4,1
 4006a80:	1885883a 	add	r2,r3,r2
 4006a84:	d8802e15 	stw	r2,184(sp)
 4006a88:	103dbf0e 	bge	r2,zero,4006188 <__alt_data_end+0xfc006188>
 4006a8c:	0005883a 	mov	r2,zero
 4006a90:	003dbd06 	br	4006188 <__alt_data_end+0xfc006188>
 4006a94:	2000211e 	bne	r4,zero,4006b1c <___vfprintf_internal_r+0x2168>
 4006a98:	9480004c 	andi	r18,r18,1
 4006a9c:	90001f1e 	bne	r18,zero,4006b1c <___vfprintf_internal_r+0x2168>
 4006aa0:	00800044 	movi	r2,1
 4006aa4:	d8802e15 	stw	r2,184(sp)
 4006aa8:	003db706 	br	4006188 <__alt_data_end+0xfc006188>
 4006aac:	00800b44 	movi	r2,45
 4006ab0:	05adc83a 	sub	r22,zero,r22
 4006ab4:	d8802305 	stb	r2,140(sp)
 4006ab8:	003f3f06 	br	40067b8 <__alt_data_end+0xfc0067b8>
 4006abc:	0005883a 	mov	r2,zero
 4006ac0:	003f5206 	br	400680c <__alt_data_end+0xfc00680c>
 4006ac4:	90a4703a 	and	r18,r18,r2
 4006ac8:	903f4e26 	beq	r18,zero,4006804 <__alt_data_end+0xfc006804>
 4006acc:	003f4a06 	br	40067f8 <__alt_data_end+0xfc0067f8>
 4006ad0:	00800084 	movi	r2,2
 4006ad4:	10c5c83a 	sub	r2,r2,r3
 4006ad8:	003f8406 	br	40068ec <__alt_data_end+0xfc0068ec>
 4006adc:	d8802d17 	ldw	r2,180(sp)
 4006ae0:	d9002d17 	ldw	r4,180(sp)
 4006ae4:	ac400043 	ldbu	r17,1(r21)
 4006ae8:	10800017 	ldw	r2,0(r2)
 4006aec:	582b883a 	mov	r21,r11
 4006af0:	d8802915 	stw	r2,164(sp)
 4006af4:	20800104 	addi	r2,r4,4
 4006af8:	d9002917 	ldw	r4,164(sp)
 4006afc:	d8802d15 	stw	r2,180(sp)
 4006b00:	203e7a0e 	bge	r4,zero,40064ec <__alt_data_end+0xfc0064ec>
 4006b04:	8c403fcc 	andi	r17,r17,255
 4006b08:	00bfffc4 	movi	r2,-1
 4006b0c:	8c40201c 	xori	r17,r17,128
 4006b10:	d8802915 	stw	r2,164(sp)
 4006b14:	8c7fe004 	addi	r17,r17,-128
 4006b18:	00380706 	br	4004b38 <__alt_data_end+0xfc004b38>
 4006b1c:	d8c02917 	ldw	r3,164(sp)
 4006b20:	18c00084 	addi	r3,r3,2
 4006b24:	d8c02e15 	stw	r3,184(sp)
 4006b28:	1805883a 	mov	r2,r3
 4006b2c:	183d960e 	bge	r3,zero,4006188 <__alt_data_end+0xfc006188>
 4006b30:	003fd606 	br	4006a8c <__alt_data_end+0xfc006a8c>
 4006b34:	0005883a 	mov	r2,zero
 4006b38:	003f8e06 	br	4006974 <__alt_data_end+0xfc006974>
 4006b3c:	9080004c 	andi	r2,r18,1
 4006b40:	103f811e 	bne	r2,zero,4006948 <__alt_data_end+0xfc006948>
 4006b44:	d8802117 	ldw	r2,132(sp)
 4006b48:	1405c83a 	sub	r2,r2,r16
 4006b4c:	d8803315 	stw	r2,204(sp)
 4006b50:	b47ef326 	beq	r22,r17,4006720 <__alt_data_end+0xfc006720>
 4006b54:	dd802617 	ldw	r22,152(sp)
 4006b58:	003f1106 	br	40067a0 <__alt_data_end+0xfc0067a0>
 4006b5c:	d9c02785 	stb	r7,158(sp)
 4006b60:	00390406 	br	4004f74 <__alt_data_end+0xfc004f74>
 4006b64:	d9c02785 	stb	r7,158(sp)
 4006b68:	0038d306 	br	4004eb8 <__alt_data_end+0xfc004eb8>
 4006b6c:	d9c02785 	stb	r7,158(sp)
 4006b70:	003a6106 	br	40054f8 <__alt_data_end+0xfc0054f8>
 4006b74:	d9c02785 	stb	r7,158(sp)
 4006b78:	003af806 	br	400575c <__alt_data_end+0xfc00575c>
 4006b7c:	0005883a 	mov	r2,zero
 4006b80:	003d7e06 	br	400617c <__alt_data_end+0xfc00617c>
 4006b84:	d8802344 	addi	r2,sp,141
 4006b88:	003f1306 	br	40067d8 <__alt_data_end+0xfc0067d8>
 4006b8c:	d9c02785 	stb	r7,158(sp)
 4006b90:	00392306 	br	4005020 <__alt_data_end+0xfc005020>
 4006b94:	d9c02785 	stb	r7,158(sp)
 4006b98:	003aa906 	br	4005640 <__alt_data_end+0xfc005640>
 4006b9c:	d9c02785 	stb	r7,158(sp)
 4006ba0:	003a3d06 	br	4005498 <__alt_data_end+0xfc005498>
 4006ba4:	d9c02785 	stb	r7,158(sp)
 4006ba8:	003aca06 	br	40056d4 <__alt_data_end+0xfc0056d4>

04006bac <__vfprintf_internal>:
 4006bac:	00810074 	movhi	r2,1025
 4006bb0:	109d1f04 	addi	r2,r2,29820
 4006bb4:	300f883a 	mov	r7,r6
 4006bb8:	280d883a 	mov	r6,r5
 4006bbc:	200b883a 	mov	r5,r4
 4006bc0:	11000017 	ldw	r4,0(r2)
 4006bc4:	40049b41 	jmpi	40049b4 <___vfprintf_internal_r>

04006bc8 <__sbprintf>:
 4006bc8:	2880030b 	ldhu	r2,12(r5)
 4006bcc:	2ac01917 	ldw	r11,100(r5)
 4006bd0:	2a80038b 	ldhu	r10,14(r5)
 4006bd4:	2a400717 	ldw	r9,28(r5)
 4006bd8:	2a000917 	ldw	r8,36(r5)
 4006bdc:	defee204 	addi	sp,sp,-1144
 4006be0:	00c10004 	movi	r3,1024
 4006be4:	dc011a15 	stw	r16,1128(sp)
 4006be8:	10bfff4c 	andi	r2,r2,65533
 4006bec:	2821883a 	mov	r16,r5
 4006bf0:	d8cb883a 	add	r5,sp,r3
 4006bf4:	dc811c15 	stw	r18,1136(sp)
 4006bf8:	dc411b15 	stw	r17,1132(sp)
 4006bfc:	dfc11d15 	stw	ra,1140(sp)
 4006c00:	2025883a 	mov	r18,r4
 4006c04:	d881030d 	sth	r2,1036(sp)
 4006c08:	dac11915 	stw	r11,1124(sp)
 4006c0c:	da81038d 	sth	r10,1038(sp)
 4006c10:	da410715 	stw	r9,1052(sp)
 4006c14:	da010915 	stw	r8,1060(sp)
 4006c18:	dec10015 	stw	sp,1024(sp)
 4006c1c:	dec10415 	stw	sp,1040(sp)
 4006c20:	d8c10215 	stw	r3,1032(sp)
 4006c24:	d8c10515 	stw	r3,1044(sp)
 4006c28:	d8010615 	stw	zero,1048(sp)
 4006c2c:	40049b40 	call	40049b4 <___vfprintf_internal_r>
 4006c30:	1023883a 	mov	r17,r2
 4006c34:	10000416 	blt	r2,zero,4006c48 <__sbprintf+0x80>
 4006c38:	d9410004 	addi	r5,sp,1024
 4006c3c:	9009883a 	mov	r4,r18
 4006c40:	400887c0 	call	400887c <_fflush_r>
 4006c44:	10000d1e 	bne	r2,zero,4006c7c <__sbprintf+0xb4>
 4006c48:	d881030b 	ldhu	r2,1036(sp)
 4006c4c:	1080100c 	andi	r2,r2,64
 4006c50:	10000326 	beq	r2,zero,4006c60 <__sbprintf+0x98>
 4006c54:	8080030b 	ldhu	r2,12(r16)
 4006c58:	10801014 	ori	r2,r2,64
 4006c5c:	8080030d 	sth	r2,12(r16)
 4006c60:	8805883a 	mov	r2,r17
 4006c64:	dfc11d17 	ldw	ra,1140(sp)
 4006c68:	dc811c17 	ldw	r18,1136(sp)
 4006c6c:	dc411b17 	ldw	r17,1132(sp)
 4006c70:	dc011a17 	ldw	r16,1128(sp)
 4006c74:	dec11e04 	addi	sp,sp,1144
 4006c78:	f800283a 	ret
 4006c7c:	047fffc4 	movi	r17,-1
 4006c80:	003ff106 	br	4006c48 <__alt_data_end+0xfc006c48>

04006c84 <__swsetup_r>:
 4006c84:	00810074 	movhi	r2,1025
 4006c88:	defffd04 	addi	sp,sp,-12
 4006c8c:	109d1f04 	addi	r2,r2,29820
 4006c90:	dc400115 	stw	r17,4(sp)
 4006c94:	2023883a 	mov	r17,r4
 4006c98:	11000017 	ldw	r4,0(r2)
 4006c9c:	dc000015 	stw	r16,0(sp)
 4006ca0:	dfc00215 	stw	ra,8(sp)
 4006ca4:	2821883a 	mov	r16,r5
 4006ca8:	20000226 	beq	r4,zero,4006cb4 <__swsetup_r+0x30>
 4006cac:	20800e17 	ldw	r2,56(r4)
 4006cb0:	10003126 	beq	r2,zero,4006d78 <__swsetup_r+0xf4>
 4006cb4:	8080030b 	ldhu	r2,12(r16)
 4006cb8:	10c0020c 	andi	r3,r2,8
 4006cbc:	1009883a 	mov	r4,r2
 4006cc0:	18000f26 	beq	r3,zero,4006d00 <__swsetup_r+0x7c>
 4006cc4:	80c00417 	ldw	r3,16(r16)
 4006cc8:	18001526 	beq	r3,zero,4006d20 <__swsetup_r+0x9c>
 4006ccc:	1100004c 	andi	r4,r2,1
 4006cd0:	20001c1e 	bne	r4,zero,4006d44 <__swsetup_r+0xc0>
 4006cd4:	1080008c 	andi	r2,r2,2
 4006cd8:	1000291e 	bne	r2,zero,4006d80 <__swsetup_r+0xfc>
 4006cdc:	80800517 	ldw	r2,20(r16)
 4006ce0:	80800215 	stw	r2,8(r16)
 4006ce4:	18001c26 	beq	r3,zero,4006d58 <__swsetup_r+0xd4>
 4006ce8:	0005883a 	mov	r2,zero
 4006cec:	dfc00217 	ldw	ra,8(sp)
 4006cf0:	dc400117 	ldw	r17,4(sp)
 4006cf4:	dc000017 	ldw	r16,0(sp)
 4006cf8:	dec00304 	addi	sp,sp,12
 4006cfc:	f800283a 	ret
 4006d00:	2080040c 	andi	r2,r4,16
 4006d04:	10002e26 	beq	r2,zero,4006dc0 <__swsetup_r+0x13c>
 4006d08:	2080010c 	andi	r2,r4,4
 4006d0c:	10001e1e 	bne	r2,zero,4006d88 <__swsetup_r+0x104>
 4006d10:	80c00417 	ldw	r3,16(r16)
 4006d14:	20800214 	ori	r2,r4,8
 4006d18:	8080030d 	sth	r2,12(r16)
 4006d1c:	183feb1e 	bne	r3,zero,4006ccc <__alt_data_end+0xfc006ccc>
 4006d20:	1100a00c 	andi	r4,r2,640
 4006d24:	01408004 	movi	r5,512
 4006d28:	217fe826 	beq	r4,r5,4006ccc <__alt_data_end+0xfc006ccc>
 4006d2c:	800b883a 	mov	r5,r16
 4006d30:	8809883a 	mov	r4,r17
 4006d34:	40097fc0 	call	40097fc <__smakebuf_r>
 4006d38:	8080030b 	ldhu	r2,12(r16)
 4006d3c:	80c00417 	ldw	r3,16(r16)
 4006d40:	003fe206 	br	4006ccc <__alt_data_end+0xfc006ccc>
 4006d44:	80800517 	ldw	r2,20(r16)
 4006d48:	80000215 	stw	zero,8(r16)
 4006d4c:	0085c83a 	sub	r2,zero,r2
 4006d50:	80800615 	stw	r2,24(r16)
 4006d54:	183fe41e 	bne	r3,zero,4006ce8 <__alt_data_end+0xfc006ce8>
 4006d58:	80c0030b 	ldhu	r3,12(r16)
 4006d5c:	0005883a 	mov	r2,zero
 4006d60:	1900200c 	andi	r4,r3,128
 4006d64:	203fe126 	beq	r4,zero,4006cec <__alt_data_end+0xfc006cec>
 4006d68:	18c01014 	ori	r3,r3,64
 4006d6c:	80c0030d 	sth	r3,12(r16)
 4006d70:	00bfffc4 	movi	r2,-1
 4006d74:	003fdd06 	br	4006cec <__alt_data_end+0xfc006cec>
 4006d78:	4008c580 	call	4008c58 <__sinit>
 4006d7c:	003fcd06 	br	4006cb4 <__alt_data_end+0xfc006cb4>
 4006d80:	0005883a 	mov	r2,zero
 4006d84:	003fd606 	br	4006ce0 <__alt_data_end+0xfc006ce0>
 4006d88:	81400c17 	ldw	r5,48(r16)
 4006d8c:	28000626 	beq	r5,zero,4006da8 <__swsetup_r+0x124>
 4006d90:	80801004 	addi	r2,r16,64
 4006d94:	28800326 	beq	r5,r2,4006da4 <__swsetup_r+0x120>
 4006d98:	8809883a 	mov	r4,r17
 4006d9c:	4008dcc0 	call	4008dcc <_free_r>
 4006da0:	8100030b 	ldhu	r4,12(r16)
 4006da4:	80000c15 	stw	zero,48(r16)
 4006da8:	80c00417 	ldw	r3,16(r16)
 4006dac:	00bff6c4 	movi	r2,-37
 4006db0:	1108703a 	and	r4,r2,r4
 4006db4:	80000115 	stw	zero,4(r16)
 4006db8:	80c00015 	stw	r3,0(r16)
 4006dbc:	003fd506 	br	4006d14 <__alt_data_end+0xfc006d14>
 4006dc0:	00800244 	movi	r2,9
 4006dc4:	88800015 	stw	r2,0(r17)
 4006dc8:	20801014 	ori	r2,r4,64
 4006dcc:	8080030d 	sth	r2,12(r16)
 4006dd0:	00bfffc4 	movi	r2,-1
 4006dd4:	003fc506 	br	4006cec <__alt_data_end+0xfc006cec>

04006dd8 <quorem>:
 4006dd8:	defff704 	addi	sp,sp,-36
 4006ddc:	dc800215 	stw	r18,8(sp)
 4006de0:	20800417 	ldw	r2,16(r4)
 4006de4:	2c800417 	ldw	r18,16(r5)
 4006de8:	dfc00815 	stw	ra,32(sp)
 4006dec:	ddc00715 	stw	r23,28(sp)
 4006df0:	dd800615 	stw	r22,24(sp)
 4006df4:	dd400515 	stw	r21,20(sp)
 4006df8:	dd000415 	stw	r20,16(sp)
 4006dfc:	dcc00315 	stw	r19,12(sp)
 4006e00:	dc400115 	stw	r17,4(sp)
 4006e04:	dc000015 	stw	r16,0(sp)
 4006e08:	14807116 	blt	r2,r18,4006fd0 <quorem+0x1f8>
 4006e0c:	94bfffc4 	addi	r18,r18,-1
 4006e10:	94ad883a 	add	r22,r18,r18
 4006e14:	b5ad883a 	add	r22,r22,r22
 4006e18:	2c400504 	addi	r17,r5,20
 4006e1c:	8da9883a 	add	r20,r17,r22
 4006e20:	25400504 	addi	r21,r4,20
 4006e24:	282f883a 	mov	r23,r5
 4006e28:	adad883a 	add	r22,r21,r22
 4006e2c:	a1400017 	ldw	r5,0(r20)
 4006e30:	2021883a 	mov	r16,r4
 4006e34:	b1000017 	ldw	r4,0(r22)
 4006e38:	29400044 	addi	r5,r5,1
 4006e3c:	40031f00 	call	40031f0 <__udivsi3>
 4006e40:	1027883a 	mov	r19,r2
 4006e44:	10002c26 	beq	r2,zero,4006ef8 <quorem+0x120>
 4006e48:	a813883a 	mov	r9,r21
 4006e4c:	880b883a 	mov	r5,r17
 4006e50:	0009883a 	mov	r4,zero
 4006e54:	000d883a 	mov	r6,zero
 4006e58:	2a000017 	ldw	r8,0(r5)
 4006e5c:	49c00017 	ldw	r7,0(r9)
 4006e60:	29400104 	addi	r5,r5,4
 4006e64:	40bfffcc 	andi	r2,r8,65535
 4006e68:	14c5383a 	mul	r2,r2,r19
 4006e6c:	4010d43a 	srli	r8,r8,16
 4006e70:	38ffffcc 	andi	r3,r7,65535
 4006e74:	1105883a 	add	r2,r2,r4
 4006e78:	1008d43a 	srli	r4,r2,16
 4006e7c:	44d1383a 	mul	r8,r8,r19
 4006e80:	198d883a 	add	r6,r3,r6
 4006e84:	10ffffcc 	andi	r3,r2,65535
 4006e88:	30c7c83a 	sub	r3,r6,r3
 4006e8c:	380ed43a 	srli	r7,r7,16
 4006e90:	4105883a 	add	r2,r8,r4
 4006e94:	180dd43a 	srai	r6,r3,16
 4006e98:	113fffcc 	andi	r4,r2,65535
 4006e9c:	390fc83a 	sub	r7,r7,r4
 4006ea0:	398d883a 	add	r6,r7,r6
 4006ea4:	300e943a 	slli	r7,r6,16
 4006ea8:	18ffffcc 	andi	r3,r3,65535
 4006eac:	1008d43a 	srli	r4,r2,16
 4006eb0:	38ceb03a 	or	r7,r7,r3
 4006eb4:	49c00015 	stw	r7,0(r9)
 4006eb8:	300dd43a 	srai	r6,r6,16
 4006ebc:	4a400104 	addi	r9,r9,4
 4006ec0:	a17fe52e 	bgeu	r20,r5,4006e58 <__alt_data_end+0xfc006e58>
 4006ec4:	b0800017 	ldw	r2,0(r22)
 4006ec8:	10000b1e 	bne	r2,zero,4006ef8 <quorem+0x120>
 4006ecc:	b0bfff04 	addi	r2,r22,-4
 4006ed0:	a880082e 	bgeu	r21,r2,4006ef4 <quorem+0x11c>
 4006ed4:	b0ffff17 	ldw	r3,-4(r22)
 4006ed8:	18000326 	beq	r3,zero,4006ee8 <quorem+0x110>
 4006edc:	00000506 	br	4006ef4 <quorem+0x11c>
 4006ee0:	10c00017 	ldw	r3,0(r2)
 4006ee4:	1800031e 	bne	r3,zero,4006ef4 <quorem+0x11c>
 4006ee8:	10bfff04 	addi	r2,r2,-4
 4006eec:	94bfffc4 	addi	r18,r18,-1
 4006ef0:	a8bffb36 	bltu	r21,r2,4006ee0 <__alt_data_end+0xfc006ee0>
 4006ef4:	84800415 	stw	r18,16(r16)
 4006ef8:	b80b883a 	mov	r5,r23
 4006efc:	8009883a 	mov	r4,r16
 4006f00:	400a5e80 	call	400a5e8 <__mcmp>
 4006f04:	10002616 	blt	r2,zero,4006fa0 <quorem+0x1c8>
 4006f08:	9cc00044 	addi	r19,r19,1
 4006f0c:	a805883a 	mov	r2,r21
 4006f10:	000b883a 	mov	r5,zero
 4006f14:	11000017 	ldw	r4,0(r2)
 4006f18:	89800017 	ldw	r6,0(r17)
 4006f1c:	10800104 	addi	r2,r2,4
 4006f20:	20ffffcc 	andi	r3,r4,65535
 4006f24:	194b883a 	add	r5,r3,r5
 4006f28:	30ffffcc 	andi	r3,r6,65535
 4006f2c:	28c7c83a 	sub	r3,r5,r3
 4006f30:	300cd43a 	srli	r6,r6,16
 4006f34:	2008d43a 	srli	r4,r4,16
 4006f38:	180bd43a 	srai	r5,r3,16
 4006f3c:	18ffffcc 	andi	r3,r3,65535
 4006f40:	2189c83a 	sub	r4,r4,r6
 4006f44:	2149883a 	add	r4,r4,r5
 4006f48:	200c943a 	slli	r6,r4,16
 4006f4c:	8c400104 	addi	r17,r17,4
 4006f50:	200bd43a 	srai	r5,r4,16
 4006f54:	30c6b03a 	or	r3,r6,r3
 4006f58:	10ffff15 	stw	r3,-4(r2)
 4006f5c:	a47fed2e 	bgeu	r20,r17,4006f14 <__alt_data_end+0xfc006f14>
 4006f60:	9485883a 	add	r2,r18,r18
 4006f64:	1085883a 	add	r2,r2,r2
 4006f68:	a887883a 	add	r3,r21,r2
 4006f6c:	18800017 	ldw	r2,0(r3)
 4006f70:	10000b1e 	bne	r2,zero,4006fa0 <quorem+0x1c8>
 4006f74:	18bfff04 	addi	r2,r3,-4
 4006f78:	a880082e 	bgeu	r21,r2,4006f9c <quorem+0x1c4>
 4006f7c:	18ffff17 	ldw	r3,-4(r3)
 4006f80:	18000326 	beq	r3,zero,4006f90 <quorem+0x1b8>
 4006f84:	00000506 	br	4006f9c <quorem+0x1c4>
 4006f88:	10c00017 	ldw	r3,0(r2)
 4006f8c:	1800031e 	bne	r3,zero,4006f9c <quorem+0x1c4>
 4006f90:	10bfff04 	addi	r2,r2,-4
 4006f94:	94bfffc4 	addi	r18,r18,-1
 4006f98:	a8bffb36 	bltu	r21,r2,4006f88 <__alt_data_end+0xfc006f88>
 4006f9c:	84800415 	stw	r18,16(r16)
 4006fa0:	9805883a 	mov	r2,r19
 4006fa4:	dfc00817 	ldw	ra,32(sp)
 4006fa8:	ddc00717 	ldw	r23,28(sp)
 4006fac:	dd800617 	ldw	r22,24(sp)
 4006fb0:	dd400517 	ldw	r21,20(sp)
 4006fb4:	dd000417 	ldw	r20,16(sp)
 4006fb8:	dcc00317 	ldw	r19,12(sp)
 4006fbc:	dc800217 	ldw	r18,8(sp)
 4006fc0:	dc400117 	ldw	r17,4(sp)
 4006fc4:	dc000017 	ldw	r16,0(sp)
 4006fc8:	dec00904 	addi	sp,sp,36
 4006fcc:	f800283a 	ret
 4006fd0:	0005883a 	mov	r2,zero
 4006fd4:	003ff306 	br	4006fa4 <__alt_data_end+0xfc006fa4>

04006fd8 <_dtoa_r>:
 4006fd8:	20801017 	ldw	r2,64(r4)
 4006fdc:	deffde04 	addi	sp,sp,-136
 4006fe0:	df002015 	stw	fp,128(sp)
 4006fe4:	dcc01b15 	stw	r19,108(sp)
 4006fe8:	dc801a15 	stw	r18,104(sp)
 4006fec:	dc401915 	stw	r17,100(sp)
 4006ff0:	dc001815 	stw	r16,96(sp)
 4006ff4:	dfc02115 	stw	ra,132(sp)
 4006ff8:	ddc01f15 	stw	r23,124(sp)
 4006ffc:	dd801e15 	stw	r22,120(sp)
 4007000:	dd401d15 	stw	r21,116(sp)
 4007004:	dd001c15 	stw	r20,112(sp)
 4007008:	d9c00315 	stw	r7,12(sp)
 400700c:	2039883a 	mov	fp,r4
 4007010:	3023883a 	mov	r17,r6
 4007014:	2825883a 	mov	r18,r5
 4007018:	dc002417 	ldw	r16,144(sp)
 400701c:	3027883a 	mov	r19,r6
 4007020:	10000826 	beq	r2,zero,4007044 <_dtoa_r+0x6c>
 4007024:	21801117 	ldw	r6,68(r4)
 4007028:	00c00044 	movi	r3,1
 400702c:	100b883a 	mov	r5,r2
 4007030:	1986983a 	sll	r3,r3,r6
 4007034:	11800115 	stw	r6,4(r2)
 4007038:	10c00215 	stw	r3,8(r2)
 400703c:	4009dc80 	call	4009dc8 <_Bfree>
 4007040:	e0001015 	stw	zero,64(fp)
 4007044:	88002e16 	blt	r17,zero,4007100 <_dtoa_r+0x128>
 4007048:	80000015 	stw	zero,0(r16)
 400704c:	889ffc2c 	andhi	r2,r17,32752
 4007050:	00dffc34 	movhi	r3,32752
 4007054:	10c01c26 	beq	r2,r3,40070c8 <_dtoa_r+0xf0>
 4007058:	000d883a 	mov	r6,zero
 400705c:	000f883a 	mov	r7,zero
 4007060:	9009883a 	mov	r4,r18
 4007064:	980b883a 	mov	r5,r19
 4007068:	400f0cc0 	call	400f0cc <__eqdf2>
 400706c:	10002b1e 	bne	r2,zero,400711c <_dtoa_r+0x144>
 4007070:	d9c02317 	ldw	r7,140(sp)
 4007074:	00800044 	movi	r2,1
 4007078:	38800015 	stw	r2,0(r7)
 400707c:	d8802517 	ldw	r2,148(sp)
 4007080:	10019e26 	beq	r2,zero,40076fc <_dtoa_r+0x724>
 4007084:	d8c02517 	ldw	r3,148(sp)
 4007088:	00810074 	movhi	r2,1025
 400708c:	1095d644 	addi	r2,r2,22361
 4007090:	18800015 	stw	r2,0(r3)
 4007094:	10bfffc4 	addi	r2,r2,-1
 4007098:	dfc02117 	ldw	ra,132(sp)
 400709c:	df002017 	ldw	fp,128(sp)
 40070a0:	ddc01f17 	ldw	r23,124(sp)
 40070a4:	dd801e17 	ldw	r22,120(sp)
 40070a8:	dd401d17 	ldw	r21,116(sp)
 40070ac:	dd001c17 	ldw	r20,112(sp)
 40070b0:	dcc01b17 	ldw	r19,108(sp)
 40070b4:	dc801a17 	ldw	r18,104(sp)
 40070b8:	dc401917 	ldw	r17,100(sp)
 40070bc:	dc001817 	ldw	r16,96(sp)
 40070c0:	dec02204 	addi	sp,sp,136
 40070c4:	f800283a 	ret
 40070c8:	d8c02317 	ldw	r3,140(sp)
 40070cc:	0089c3c4 	movi	r2,9999
 40070d0:	18800015 	stw	r2,0(r3)
 40070d4:	90017726 	beq	r18,zero,40076b4 <_dtoa_r+0x6dc>
 40070d8:	00810074 	movhi	r2,1025
 40070dc:	1095e204 	addi	r2,r2,22408
 40070e0:	d9002517 	ldw	r4,148(sp)
 40070e4:	203fec26 	beq	r4,zero,4007098 <__alt_data_end+0xfc007098>
 40070e8:	10c000c7 	ldb	r3,3(r2)
 40070ec:	1801781e 	bne	r3,zero,40076d0 <_dtoa_r+0x6f8>
 40070f0:	10c000c4 	addi	r3,r2,3
 40070f4:	d9802517 	ldw	r6,148(sp)
 40070f8:	30c00015 	stw	r3,0(r6)
 40070fc:	003fe606 	br	4007098 <__alt_data_end+0xfc007098>
 4007100:	04e00034 	movhi	r19,32768
 4007104:	9cffffc4 	addi	r19,r19,-1
 4007108:	00800044 	movi	r2,1
 400710c:	8ce6703a 	and	r19,r17,r19
 4007110:	80800015 	stw	r2,0(r16)
 4007114:	9823883a 	mov	r17,r19
 4007118:	003fcc06 	br	400704c <__alt_data_end+0xfc00704c>
 400711c:	d8800204 	addi	r2,sp,8
 4007120:	d8800015 	stw	r2,0(sp)
 4007124:	d9c00104 	addi	r7,sp,4
 4007128:	900b883a 	mov	r5,r18
 400712c:	980d883a 	mov	r6,r19
 4007130:	e009883a 	mov	r4,fp
 4007134:	8820d53a 	srli	r16,r17,20
 4007138:	400a9b40 	call	400a9b4 <__d2b>
 400713c:	d8800915 	stw	r2,36(sp)
 4007140:	8001651e 	bne	r16,zero,40076d8 <_dtoa_r+0x700>
 4007144:	dd800217 	ldw	r22,8(sp)
 4007148:	dc000117 	ldw	r16,4(sp)
 400714c:	00800804 	movi	r2,32
 4007150:	b421883a 	add	r16,r22,r16
 4007154:	80c10c84 	addi	r3,r16,1074
 4007158:	10c2d10e 	bge	r2,r3,4007ca0 <_dtoa_r+0xcc8>
 400715c:	00801004 	movi	r2,64
 4007160:	81010484 	addi	r4,r16,1042
 4007164:	10c7c83a 	sub	r3,r2,r3
 4007168:	9108d83a 	srl	r4,r18,r4
 400716c:	88e2983a 	sll	r17,r17,r3
 4007170:	2448b03a 	or	r4,r4,r17
 4007174:	40104940 	call	4010494 <__floatunsidf>
 4007178:	017f8434 	movhi	r5,65040
 400717c:	01800044 	movi	r6,1
 4007180:	1009883a 	mov	r4,r2
 4007184:	194b883a 	add	r5,r3,r5
 4007188:	843fffc4 	addi	r16,r16,-1
 400718c:	d9801115 	stw	r6,68(sp)
 4007190:	000d883a 	mov	r6,zero
 4007194:	01cffe34 	movhi	r7,16376
 4007198:	400fa3c0 	call	400fa3c <__subdf3>
 400719c:	0198dbf4 	movhi	r6,25455
 40071a0:	01cff4f4 	movhi	r7,16339
 40071a4:	3190d844 	addi	r6,r6,17249
 40071a8:	39e1e9c4 	addi	r7,r7,-30809
 40071ac:	1009883a 	mov	r4,r2
 40071b0:	180b883a 	mov	r5,r3
 40071b4:	400f3240 	call	400f324 <__muldf3>
 40071b8:	01a2d874 	movhi	r6,35681
 40071bc:	01cff1f4 	movhi	r7,16327
 40071c0:	31b22cc4 	addi	r6,r6,-14157
 40071c4:	39e28a04 	addi	r7,r7,-30168
 40071c8:	180b883a 	mov	r5,r3
 40071cc:	1009883a 	mov	r4,r2
 40071d0:	400df380 	call	400df38 <__adddf3>
 40071d4:	8009883a 	mov	r4,r16
 40071d8:	1029883a 	mov	r20,r2
 40071dc:	1823883a 	mov	r17,r3
 40071e0:	40103b80 	call	40103b8 <__floatsidf>
 40071e4:	019427f4 	movhi	r6,20639
 40071e8:	01cff4f4 	movhi	r7,16339
 40071ec:	319e7ec4 	addi	r6,r6,31227
 40071f0:	39d104c4 	addi	r7,r7,17427
 40071f4:	1009883a 	mov	r4,r2
 40071f8:	180b883a 	mov	r5,r3
 40071fc:	400f3240 	call	400f324 <__muldf3>
 4007200:	100d883a 	mov	r6,r2
 4007204:	180f883a 	mov	r7,r3
 4007208:	a009883a 	mov	r4,r20
 400720c:	880b883a 	mov	r5,r17
 4007210:	400df380 	call	400df38 <__adddf3>
 4007214:	1009883a 	mov	r4,r2
 4007218:	180b883a 	mov	r5,r3
 400721c:	1029883a 	mov	r20,r2
 4007220:	1823883a 	mov	r17,r3
 4007224:	40103380 	call	4010338 <__fixdfsi>
 4007228:	000d883a 	mov	r6,zero
 400722c:	000f883a 	mov	r7,zero
 4007230:	a009883a 	mov	r4,r20
 4007234:	880b883a 	mov	r5,r17
 4007238:	d8800515 	stw	r2,20(sp)
 400723c:	400f2300 	call	400f230 <__ledf2>
 4007240:	10028716 	blt	r2,zero,4007c60 <_dtoa_r+0xc88>
 4007244:	d8c00517 	ldw	r3,20(sp)
 4007248:	00800584 	movi	r2,22
 400724c:	10c27536 	bltu	r2,r3,4007c24 <_dtoa_r+0xc4c>
 4007250:	180490fa 	slli	r2,r3,3
 4007254:	00c10074 	movhi	r3,1025
 4007258:	18d5fe04 	addi	r3,r3,22520
 400725c:	1885883a 	add	r2,r3,r2
 4007260:	11000017 	ldw	r4,0(r2)
 4007264:	11400117 	ldw	r5,4(r2)
 4007268:	900d883a 	mov	r6,r18
 400726c:	980f883a 	mov	r7,r19
 4007270:	400f1540 	call	400f154 <__gedf2>
 4007274:	00828d0e 	bge	zero,r2,4007cac <_dtoa_r+0xcd4>
 4007278:	d9000517 	ldw	r4,20(sp)
 400727c:	d8000e15 	stw	zero,56(sp)
 4007280:	213fffc4 	addi	r4,r4,-1
 4007284:	d9000515 	stw	r4,20(sp)
 4007288:	b42dc83a 	sub	r22,r22,r16
 400728c:	b5bfffc4 	addi	r22,r22,-1
 4007290:	b0026f16 	blt	r22,zero,4007c50 <_dtoa_r+0xc78>
 4007294:	d8000815 	stw	zero,32(sp)
 4007298:	d9c00517 	ldw	r7,20(sp)
 400729c:	38026416 	blt	r7,zero,4007c30 <_dtoa_r+0xc58>
 40072a0:	b1ed883a 	add	r22,r22,r7
 40072a4:	d9c00d15 	stw	r7,52(sp)
 40072a8:	d8000a15 	stw	zero,40(sp)
 40072ac:	d9800317 	ldw	r6,12(sp)
 40072b0:	00800244 	movi	r2,9
 40072b4:	11811436 	bltu	r2,r6,4007708 <_dtoa_r+0x730>
 40072b8:	00800144 	movi	r2,5
 40072bc:	1184e10e 	bge	r2,r6,4008644 <_dtoa_r+0x166c>
 40072c0:	31bfff04 	addi	r6,r6,-4
 40072c4:	d9800315 	stw	r6,12(sp)
 40072c8:	0023883a 	mov	r17,zero
 40072cc:	d9800317 	ldw	r6,12(sp)
 40072d0:	008000c4 	movi	r2,3
 40072d4:	30836726 	beq	r6,r2,4008074 <_dtoa_r+0x109c>
 40072d8:	1183410e 	bge	r2,r6,4007fe0 <_dtoa_r+0x1008>
 40072dc:	d9c00317 	ldw	r7,12(sp)
 40072e0:	00800104 	movi	r2,4
 40072e4:	38827c26 	beq	r7,r2,4007cd8 <_dtoa_r+0xd00>
 40072e8:	00800144 	movi	r2,5
 40072ec:	3884c41e 	bne	r7,r2,4008600 <_dtoa_r+0x1628>
 40072f0:	00800044 	movi	r2,1
 40072f4:	d8800b15 	stw	r2,44(sp)
 40072f8:	d8c00517 	ldw	r3,20(sp)
 40072fc:	d9002217 	ldw	r4,136(sp)
 4007300:	1907883a 	add	r3,r3,r4
 4007304:	19800044 	addi	r6,r3,1
 4007308:	d8c00c15 	stw	r3,48(sp)
 400730c:	d9800615 	stw	r6,24(sp)
 4007310:	0183a40e 	bge	zero,r6,40081a4 <_dtoa_r+0x11cc>
 4007314:	d9800617 	ldw	r6,24(sp)
 4007318:	3021883a 	mov	r16,r6
 400731c:	e0001115 	stw	zero,68(fp)
 4007320:	008005c4 	movi	r2,23
 4007324:	1184c92e 	bgeu	r2,r6,400864c <_dtoa_r+0x1674>
 4007328:	00c00044 	movi	r3,1
 400732c:	00800104 	movi	r2,4
 4007330:	1085883a 	add	r2,r2,r2
 4007334:	11000504 	addi	r4,r2,20
 4007338:	180b883a 	mov	r5,r3
 400733c:	18c00044 	addi	r3,r3,1
 4007340:	313ffb2e 	bgeu	r6,r4,4007330 <__alt_data_end+0xfc007330>
 4007344:	e1401115 	stw	r5,68(fp)
 4007348:	e009883a 	mov	r4,fp
 400734c:	4009d200 	call	4009d20 <_Balloc>
 4007350:	d8800715 	stw	r2,28(sp)
 4007354:	e0801015 	stw	r2,64(fp)
 4007358:	00800384 	movi	r2,14
 400735c:	1400f736 	bltu	r2,r16,400773c <_dtoa_r+0x764>
 4007360:	8800f626 	beq	r17,zero,400773c <_dtoa_r+0x764>
 4007364:	d9c00517 	ldw	r7,20(sp)
 4007368:	01c39a0e 	bge	zero,r7,40081d4 <_dtoa_r+0x11fc>
 400736c:	388003cc 	andi	r2,r7,15
 4007370:	100490fa 	slli	r2,r2,3
 4007374:	382bd13a 	srai	r21,r7,4
 4007378:	00c10074 	movhi	r3,1025
 400737c:	18d5fe04 	addi	r3,r3,22520
 4007380:	1885883a 	add	r2,r3,r2
 4007384:	a8c0040c 	andi	r3,r21,16
 4007388:	12400017 	ldw	r9,0(r2)
 400738c:	12000117 	ldw	r8,4(r2)
 4007390:	18037926 	beq	r3,zero,4008178 <_dtoa_r+0x11a0>
 4007394:	00810074 	movhi	r2,1025
 4007398:	1095f404 	addi	r2,r2,22480
 400739c:	11800817 	ldw	r6,32(r2)
 40073a0:	11c00917 	ldw	r7,36(r2)
 40073a4:	9009883a 	mov	r4,r18
 40073a8:	980b883a 	mov	r5,r19
 40073ac:	da001715 	stw	r8,92(sp)
 40073b0:	da401615 	stw	r9,88(sp)
 40073b4:	400e7e40 	call	400e7e4 <__divdf3>
 40073b8:	da001717 	ldw	r8,92(sp)
 40073bc:	da401617 	ldw	r9,88(sp)
 40073c0:	ad4003cc 	andi	r21,r21,15
 40073c4:	040000c4 	movi	r16,3
 40073c8:	1023883a 	mov	r17,r2
 40073cc:	1829883a 	mov	r20,r3
 40073d0:	a8001126 	beq	r21,zero,4007418 <_dtoa_r+0x440>
 40073d4:	05c10074 	movhi	r23,1025
 40073d8:	bdd5f404 	addi	r23,r23,22480
 40073dc:	4805883a 	mov	r2,r9
 40073e0:	4007883a 	mov	r3,r8
 40073e4:	a980004c 	andi	r6,r21,1
 40073e8:	1009883a 	mov	r4,r2
 40073ec:	a82bd07a 	srai	r21,r21,1
 40073f0:	180b883a 	mov	r5,r3
 40073f4:	30000426 	beq	r6,zero,4007408 <_dtoa_r+0x430>
 40073f8:	b9800017 	ldw	r6,0(r23)
 40073fc:	b9c00117 	ldw	r7,4(r23)
 4007400:	84000044 	addi	r16,r16,1
 4007404:	400f3240 	call	400f324 <__muldf3>
 4007408:	bdc00204 	addi	r23,r23,8
 400740c:	a83ff51e 	bne	r21,zero,40073e4 <__alt_data_end+0xfc0073e4>
 4007410:	1013883a 	mov	r9,r2
 4007414:	1811883a 	mov	r8,r3
 4007418:	480d883a 	mov	r6,r9
 400741c:	400f883a 	mov	r7,r8
 4007420:	8809883a 	mov	r4,r17
 4007424:	a00b883a 	mov	r5,r20
 4007428:	400e7e40 	call	400e7e4 <__divdf3>
 400742c:	d8800f15 	stw	r2,60(sp)
 4007430:	d8c01015 	stw	r3,64(sp)
 4007434:	d8c00e17 	ldw	r3,56(sp)
 4007438:	18000626 	beq	r3,zero,4007454 <_dtoa_r+0x47c>
 400743c:	d9000f17 	ldw	r4,60(sp)
 4007440:	d9401017 	ldw	r5,64(sp)
 4007444:	000d883a 	mov	r6,zero
 4007448:	01cffc34 	movhi	r7,16368
 400744c:	400f2300 	call	400f230 <__ledf2>
 4007450:	10040b16 	blt	r2,zero,4008480 <_dtoa_r+0x14a8>
 4007454:	8009883a 	mov	r4,r16
 4007458:	40103b80 	call	40103b8 <__floatsidf>
 400745c:	d9800f17 	ldw	r6,60(sp)
 4007460:	d9c01017 	ldw	r7,64(sp)
 4007464:	1009883a 	mov	r4,r2
 4007468:	180b883a 	mov	r5,r3
 400746c:	400f3240 	call	400f324 <__muldf3>
 4007470:	000d883a 	mov	r6,zero
 4007474:	01d00734 	movhi	r7,16412
 4007478:	1009883a 	mov	r4,r2
 400747c:	180b883a 	mov	r5,r3
 4007480:	400df380 	call	400df38 <__adddf3>
 4007484:	1021883a 	mov	r16,r2
 4007488:	d8800617 	ldw	r2,24(sp)
 400748c:	047f3034 	movhi	r17,64704
 4007490:	1c63883a 	add	r17,r3,r17
 4007494:	10031826 	beq	r2,zero,40080f8 <_dtoa_r+0x1120>
 4007498:	d8c00517 	ldw	r3,20(sp)
 400749c:	db000617 	ldw	r12,24(sp)
 40074a0:	d8c01315 	stw	r3,76(sp)
 40074a4:	d9000b17 	ldw	r4,44(sp)
 40074a8:	20038f26 	beq	r4,zero,40082e8 <_dtoa_r+0x1310>
 40074ac:	60bfffc4 	addi	r2,r12,-1
 40074b0:	100490fa 	slli	r2,r2,3
 40074b4:	00c10074 	movhi	r3,1025
 40074b8:	18d5fe04 	addi	r3,r3,22520
 40074bc:	1885883a 	add	r2,r3,r2
 40074c0:	11800017 	ldw	r6,0(r2)
 40074c4:	11c00117 	ldw	r7,4(r2)
 40074c8:	d8800717 	ldw	r2,28(sp)
 40074cc:	0009883a 	mov	r4,zero
 40074d0:	014ff834 	movhi	r5,16352
 40074d4:	db001615 	stw	r12,88(sp)
 40074d8:	15c00044 	addi	r23,r2,1
 40074dc:	400e7e40 	call	400e7e4 <__divdf3>
 40074e0:	800d883a 	mov	r6,r16
 40074e4:	880f883a 	mov	r7,r17
 40074e8:	1009883a 	mov	r4,r2
 40074ec:	180b883a 	mov	r5,r3
 40074f0:	400fa3c0 	call	400fa3c <__subdf3>
 40074f4:	d9401017 	ldw	r5,64(sp)
 40074f8:	d9000f17 	ldw	r4,60(sp)
 40074fc:	102b883a 	mov	r21,r2
 4007500:	d8c01215 	stw	r3,72(sp)
 4007504:	40103380 	call	4010338 <__fixdfsi>
 4007508:	1009883a 	mov	r4,r2
 400750c:	1029883a 	mov	r20,r2
 4007510:	40103b80 	call	40103b8 <__floatsidf>
 4007514:	d9000f17 	ldw	r4,60(sp)
 4007518:	d9401017 	ldw	r5,64(sp)
 400751c:	100d883a 	mov	r6,r2
 4007520:	180f883a 	mov	r7,r3
 4007524:	400fa3c0 	call	400fa3c <__subdf3>
 4007528:	1823883a 	mov	r17,r3
 400752c:	d8c00717 	ldw	r3,28(sp)
 4007530:	d9401217 	ldw	r5,72(sp)
 4007534:	a2000c04 	addi	r8,r20,48
 4007538:	1021883a 	mov	r16,r2
 400753c:	1a000005 	stb	r8,0(r3)
 4007540:	800d883a 	mov	r6,r16
 4007544:	880f883a 	mov	r7,r17
 4007548:	a809883a 	mov	r4,r21
 400754c:	4029883a 	mov	r20,r8
 4007550:	400f1540 	call	400f154 <__gedf2>
 4007554:	00841d16 	blt	zero,r2,40085cc <_dtoa_r+0x15f4>
 4007558:	800d883a 	mov	r6,r16
 400755c:	880f883a 	mov	r7,r17
 4007560:	0009883a 	mov	r4,zero
 4007564:	014ffc34 	movhi	r5,16368
 4007568:	400fa3c0 	call	400fa3c <__subdf3>
 400756c:	d9401217 	ldw	r5,72(sp)
 4007570:	100d883a 	mov	r6,r2
 4007574:	180f883a 	mov	r7,r3
 4007578:	a809883a 	mov	r4,r21
 400757c:	400f1540 	call	400f154 <__gedf2>
 4007580:	db001617 	ldw	r12,88(sp)
 4007584:	00840e16 	blt	zero,r2,40085c0 <_dtoa_r+0x15e8>
 4007588:	00800044 	movi	r2,1
 400758c:	13006b0e 	bge	r2,r12,400773c <_dtoa_r+0x764>
 4007590:	d9000717 	ldw	r4,28(sp)
 4007594:	dd800f15 	stw	r22,60(sp)
 4007598:	dcc01015 	stw	r19,64(sp)
 400759c:	2319883a 	add	r12,r4,r12
 40075a0:	dcc01217 	ldw	r19,72(sp)
 40075a4:	602d883a 	mov	r22,r12
 40075a8:	dc801215 	stw	r18,72(sp)
 40075ac:	b825883a 	mov	r18,r23
 40075b0:	00000906 	br	40075d8 <_dtoa_r+0x600>
 40075b4:	400fa3c0 	call	400fa3c <__subdf3>
 40075b8:	a80d883a 	mov	r6,r21
 40075bc:	980f883a 	mov	r7,r19
 40075c0:	1009883a 	mov	r4,r2
 40075c4:	180b883a 	mov	r5,r3
 40075c8:	400f2300 	call	400f230 <__ledf2>
 40075cc:	1003e816 	blt	r2,zero,4008570 <_dtoa_r+0x1598>
 40075d0:	b825883a 	mov	r18,r23
 40075d4:	bd83e926 	beq	r23,r22,400857c <_dtoa_r+0x15a4>
 40075d8:	a809883a 	mov	r4,r21
 40075dc:	980b883a 	mov	r5,r19
 40075e0:	000d883a 	mov	r6,zero
 40075e4:	01d00934 	movhi	r7,16420
 40075e8:	400f3240 	call	400f324 <__muldf3>
 40075ec:	000d883a 	mov	r6,zero
 40075f0:	01d00934 	movhi	r7,16420
 40075f4:	8009883a 	mov	r4,r16
 40075f8:	880b883a 	mov	r5,r17
 40075fc:	102b883a 	mov	r21,r2
 4007600:	1827883a 	mov	r19,r3
 4007604:	400f3240 	call	400f324 <__muldf3>
 4007608:	180b883a 	mov	r5,r3
 400760c:	1009883a 	mov	r4,r2
 4007610:	1821883a 	mov	r16,r3
 4007614:	1023883a 	mov	r17,r2
 4007618:	40103380 	call	4010338 <__fixdfsi>
 400761c:	1009883a 	mov	r4,r2
 4007620:	1029883a 	mov	r20,r2
 4007624:	40103b80 	call	40103b8 <__floatsidf>
 4007628:	8809883a 	mov	r4,r17
 400762c:	800b883a 	mov	r5,r16
 4007630:	100d883a 	mov	r6,r2
 4007634:	180f883a 	mov	r7,r3
 4007638:	400fa3c0 	call	400fa3c <__subdf3>
 400763c:	a5000c04 	addi	r20,r20,48
 4007640:	a80d883a 	mov	r6,r21
 4007644:	980f883a 	mov	r7,r19
 4007648:	1009883a 	mov	r4,r2
 400764c:	180b883a 	mov	r5,r3
 4007650:	95000005 	stb	r20,0(r18)
 4007654:	1021883a 	mov	r16,r2
 4007658:	1823883a 	mov	r17,r3
 400765c:	400f2300 	call	400f230 <__ledf2>
 4007660:	bdc00044 	addi	r23,r23,1
 4007664:	800d883a 	mov	r6,r16
 4007668:	880f883a 	mov	r7,r17
 400766c:	0009883a 	mov	r4,zero
 4007670:	014ffc34 	movhi	r5,16368
 4007674:	103fcf0e 	bge	r2,zero,40075b4 <__alt_data_end+0xfc0075b4>
 4007678:	d8c01317 	ldw	r3,76(sp)
 400767c:	d8c00515 	stw	r3,20(sp)
 4007680:	d9400917 	ldw	r5,36(sp)
 4007684:	e009883a 	mov	r4,fp
 4007688:	4009dc80 	call	4009dc8 <_Bfree>
 400768c:	d9000517 	ldw	r4,20(sp)
 4007690:	d9802317 	ldw	r6,140(sp)
 4007694:	d9c02517 	ldw	r7,148(sp)
 4007698:	b8000005 	stb	zero,0(r23)
 400769c:	20800044 	addi	r2,r4,1
 40076a0:	30800015 	stw	r2,0(r6)
 40076a4:	3802aa26 	beq	r7,zero,4008150 <_dtoa_r+0x1178>
 40076a8:	3dc00015 	stw	r23,0(r7)
 40076ac:	d8800717 	ldw	r2,28(sp)
 40076b0:	003e7906 	br	4007098 <__alt_data_end+0xfc007098>
 40076b4:	00800434 	movhi	r2,16
 40076b8:	10bfffc4 	addi	r2,r2,-1
 40076bc:	88a2703a 	and	r17,r17,r2
 40076c0:	883e851e 	bne	r17,zero,40070d8 <__alt_data_end+0xfc0070d8>
 40076c4:	00810074 	movhi	r2,1025
 40076c8:	1095df04 	addi	r2,r2,22396
 40076cc:	003e8406 	br	40070e0 <__alt_data_end+0xfc0070e0>
 40076d0:	10c00204 	addi	r3,r2,8
 40076d4:	003e8706 	br	40070f4 <__alt_data_end+0xfc0070f4>
 40076d8:	01400434 	movhi	r5,16
 40076dc:	297fffc4 	addi	r5,r5,-1
 40076e0:	994a703a 	and	r5,r19,r5
 40076e4:	9009883a 	mov	r4,r18
 40076e8:	843f0044 	addi	r16,r16,-1023
 40076ec:	294ffc34 	orhi	r5,r5,16368
 40076f0:	dd800217 	ldw	r22,8(sp)
 40076f4:	d8001115 	stw	zero,68(sp)
 40076f8:	003ea506 	br	4007190 <__alt_data_end+0xfc007190>
 40076fc:	00810074 	movhi	r2,1025
 4007700:	1095d604 	addi	r2,r2,22360
 4007704:	003e6406 	br	4007098 <__alt_data_end+0xfc007098>
 4007708:	e0001115 	stw	zero,68(fp)
 400770c:	000b883a 	mov	r5,zero
 4007710:	e009883a 	mov	r4,fp
 4007714:	4009d200 	call	4009d20 <_Balloc>
 4007718:	01bfffc4 	movi	r6,-1
 400771c:	01c00044 	movi	r7,1
 4007720:	d8800715 	stw	r2,28(sp)
 4007724:	d9800c15 	stw	r6,48(sp)
 4007728:	e0801015 	stw	r2,64(fp)
 400772c:	d8000315 	stw	zero,12(sp)
 4007730:	d9c00b15 	stw	r7,44(sp)
 4007734:	d9800615 	stw	r6,24(sp)
 4007738:	d8002215 	stw	zero,136(sp)
 400773c:	d8800117 	ldw	r2,4(sp)
 4007740:	10008916 	blt	r2,zero,4007968 <_dtoa_r+0x990>
 4007744:	d9000517 	ldw	r4,20(sp)
 4007748:	00c00384 	movi	r3,14
 400774c:	19008616 	blt	r3,r4,4007968 <_dtoa_r+0x990>
 4007750:	200490fa 	slli	r2,r4,3
 4007754:	00c10074 	movhi	r3,1025
 4007758:	d9802217 	ldw	r6,136(sp)
 400775c:	18d5fe04 	addi	r3,r3,22520
 4007760:	1885883a 	add	r2,r3,r2
 4007764:	14000017 	ldw	r16,0(r2)
 4007768:	14400117 	ldw	r17,4(r2)
 400776c:	30016316 	blt	r6,zero,4007cfc <_dtoa_r+0xd24>
 4007770:	800d883a 	mov	r6,r16
 4007774:	880f883a 	mov	r7,r17
 4007778:	9009883a 	mov	r4,r18
 400777c:	980b883a 	mov	r5,r19
 4007780:	400e7e40 	call	400e7e4 <__divdf3>
 4007784:	180b883a 	mov	r5,r3
 4007788:	1009883a 	mov	r4,r2
 400778c:	40103380 	call	4010338 <__fixdfsi>
 4007790:	1009883a 	mov	r4,r2
 4007794:	102b883a 	mov	r21,r2
 4007798:	40103b80 	call	40103b8 <__floatsidf>
 400779c:	800d883a 	mov	r6,r16
 40077a0:	880f883a 	mov	r7,r17
 40077a4:	1009883a 	mov	r4,r2
 40077a8:	180b883a 	mov	r5,r3
 40077ac:	400f3240 	call	400f324 <__muldf3>
 40077b0:	100d883a 	mov	r6,r2
 40077b4:	180f883a 	mov	r7,r3
 40077b8:	9009883a 	mov	r4,r18
 40077bc:	980b883a 	mov	r5,r19
 40077c0:	400fa3c0 	call	400fa3c <__subdf3>
 40077c4:	d9c00717 	ldw	r7,28(sp)
 40077c8:	1009883a 	mov	r4,r2
 40077cc:	a8800c04 	addi	r2,r21,48
 40077d0:	38800005 	stb	r2,0(r7)
 40077d4:	3dc00044 	addi	r23,r7,1
 40077d8:	d9c00617 	ldw	r7,24(sp)
 40077dc:	01800044 	movi	r6,1
 40077e0:	180b883a 	mov	r5,r3
 40077e4:	2005883a 	mov	r2,r4
 40077e8:	39803826 	beq	r7,r6,40078cc <_dtoa_r+0x8f4>
 40077ec:	000d883a 	mov	r6,zero
 40077f0:	01d00934 	movhi	r7,16420
 40077f4:	400f3240 	call	400f324 <__muldf3>
 40077f8:	000d883a 	mov	r6,zero
 40077fc:	000f883a 	mov	r7,zero
 4007800:	1009883a 	mov	r4,r2
 4007804:	180b883a 	mov	r5,r3
 4007808:	1025883a 	mov	r18,r2
 400780c:	1827883a 	mov	r19,r3
 4007810:	400f0cc0 	call	400f0cc <__eqdf2>
 4007814:	103f9a26 	beq	r2,zero,4007680 <__alt_data_end+0xfc007680>
 4007818:	d9c00617 	ldw	r7,24(sp)
 400781c:	d8c00717 	ldw	r3,28(sp)
 4007820:	b829883a 	mov	r20,r23
 4007824:	38bfffc4 	addi	r2,r7,-1
 4007828:	18ad883a 	add	r22,r3,r2
 400782c:	00000a06 	br	4007858 <_dtoa_r+0x880>
 4007830:	400f3240 	call	400f324 <__muldf3>
 4007834:	000d883a 	mov	r6,zero
 4007838:	000f883a 	mov	r7,zero
 400783c:	1009883a 	mov	r4,r2
 4007840:	180b883a 	mov	r5,r3
 4007844:	1025883a 	mov	r18,r2
 4007848:	1827883a 	mov	r19,r3
 400784c:	b829883a 	mov	r20,r23
 4007850:	400f0cc0 	call	400f0cc <__eqdf2>
 4007854:	103f8a26 	beq	r2,zero,4007680 <__alt_data_end+0xfc007680>
 4007858:	800d883a 	mov	r6,r16
 400785c:	880f883a 	mov	r7,r17
 4007860:	9009883a 	mov	r4,r18
 4007864:	980b883a 	mov	r5,r19
 4007868:	400e7e40 	call	400e7e4 <__divdf3>
 400786c:	180b883a 	mov	r5,r3
 4007870:	1009883a 	mov	r4,r2
 4007874:	40103380 	call	4010338 <__fixdfsi>
 4007878:	1009883a 	mov	r4,r2
 400787c:	102b883a 	mov	r21,r2
 4007880:	40103b80 	call	40103b8 <__floatsidf>
 4007884:	800d883a 	mov	r6,r16
 4007888:	880f883a 	mov	r7,r17
 400788c:	1009883a 	mov	r4,r2
 4007890:	180b883a 	mov	r5,r3
 4007894:	400f3240 	call	400f324 <__muldf3>
 4007898:	100d883a 	mov	r6,r2
 400789c:	180f883a 	mov	r7,r3
 40078a0:	9009883a 	mov	r4,r18
 40078a4:	980b883a 	mov	r5,r19
 40078a8:	400fa3c0 	call	400fa3c <__subdf3>
 40078ac:	aa000c04 	addi	r8,r21,48
 40078b0:	a2000005 	stb	r8,0(r20)
 40078b4:	000d883a 	mov	r6,zero
 40078b8:	01d00934 	movhi	r7,16420
 40078bc:	1009883a 	mov	r4,r2
 40078c0:	180b883a 	mov	r5,r3
 40078c4:	a5c00044 	addi	r23,r20,1
 40078c8:	b53fd91e 	bne	r22,r20,4007830 <__alt_data_end+0xfc007830>
 40078cc:	100d883a 	mov	r6,r2
 40078d0:	180f883a 	mov	r7,r3
 40078d4:	1009883a 	mov	r4,r2
 40078d8:	180b883a 	mov	r5,r3
 40078dc:	400df380 	call	400df38 <__adddf3>
 40078e0:	100d883a 	mov	r6,r2
 40078e4:	180f883a 	mov	r7,r3
 40078e8:	8009883a 	mov	r4,r16
 40078ec:	880b883a 	mov	r5,r17
 40078f0:	1027883a 	mov	r19,r2
 40078f4:	1825883a 	mov	r18,r3
 40078f8:	400f2300 	call	400f230 <__ledf2>
 40078fc:	10000816 	blt	r2,zero,4007920 <_dtoa_r+0x948>
 4007900:	980d883a 	mov	r6,r19
 4007904:	900f883a 	mov	r7,r18
 4007908:	8009883a 	mov	r4,r16
 400790c:	880b883a 	mov	r5,r17
 4007910:	400f0cc0 	call	400f0cc <__eqdf2>
 4007914:	103f5a1e 	bne	r2,zero,4007680 <__alt_data_end+0xfc007680>
 4007918:	ad40004c 	andi	r21,r21,1
 400791c:	a83f5826 	beq	r21,zero,4007680 <__alt_data_end+0xfc007680>
 4007920:	bd3fffc3 	ldbu	r20,-1(r23)
 4007924:	b8bfffc4 	addi	r2,r23,-1
 4007928:	1007883a 	mov	r3,r2
 400792c:	01400e44 	movi	r5,57
 4007930:	d9800717 	ldw	r6,28(sp)
 4007934:	00000506 	br	400794c <_dtoa_r+0x974>
 4007938:	18ffffc4 	addi	r3,r3,-1
 400793c:	11824726 	beq	r2,r6,400825c <_dtoa_r+0x1284>
 4007940:	1d000003 	ldbu	r20,0(r3)
 4007944:	102f883a 	mov	r23,r2
 4007948:	10bfffc4 	addi	r2,r2,-1
 400794c:	a1003fcc 	andi	r4,r20,255
 4007950:	2100201c 	xori	r4,r4,128
 4007954:	213fe004 	addi	r4,r4,-128
 4007958:	217ff726 	beq	r4,r5,4007938 <__alt_data_end+0xfc007938>
 400795c:	a2000044 	addi	r8,r20,1
 4007960:	12000005 	stb	r8,0(r2)
 4007964:	003f4606 	br	4007680 <__alt_data_end+0xfc007680>
 4007968:	d9000b17 	ldw	r4,44(sp)
 400796c:	2000c826 	beq	r4,zero,4007c90 <_dtoa_r+0xcb8>
 4007970:	d9800317 	ldw	r6,12(sp)
 4007974:	00c00044 	movi	r3,1
 4007978:	1980f90e 	bge	r3,r6,4007d60 <_dtoa_r+0xd88>
 400797c:	d8800617 	ldw	r2,24(sp)
 4007980:	d8c00a17 	ldw	r3,40(sp)
 4007984:	157fffc4 	addi	r21,r2,-1
 4007988:	1d41f316 	blt	r3,r21,4008158 <_dtoa_r+0x1180>
 400798c:	1d6bc83a 	sub	r21,r3,r21
 4007990:	d9c00617 	ldw	r7,24(sp)
 4007994:	3802aa16 	blt	r7,zero,4008440 <_dtoa_r+0x1468>
 4007998:	dd000817 	ldw	r20,32(sp)
 400799c:	d8800617 	ldw	r2,24(sp)
 40079a0:	d8c00817 	ldw	r3,32(sp)
 40079a4:	01400044 	movi	r5,1
 40079a8:	e009883a 	mov	r4,fp
 40079ac:	1887883a 	add	r3,r3,r2
 40079b0:	d8c00815 	stw	r3,32(sp)
 40079b4:	b0ad883a 	add	r22,r22,r2
 40079b8:	400a12c0 	call	400a12c <__i2b>
 40079bc:	1023883a 	mov	r17,r2
 40079c0:	a0000826 	beq	r20,zero,40079e4 <_dtoa_r+0xa0c>
 40079c4:	0580070e 	bge	zero,r22,40079e4 <_dtoa_r+0xa0c>
 40079c8:	a005883a 	mov	r2,r20
 40079cc:	b500b916 	blt	r22,r20,4007cb4 <_dtoa_r+0xcdc>
 40079d0:	d9000817 	ldw	r4,32(sp)
 40079d4:	a0a9c83a 	sub	r20,r20,r2
 40079d8:	b0adc83a 	sub	r22,r22,r2
 40079dc:	2089c83a 	sub	r4,r4,r2
 40079e0:	d9000815 	stw	r4,32(sp)
 40079e4:	d9800a17 	ldw	r6,40(sp)
 40079e8:	0181810e 	bge	zero,r6,4007ff0 <_dtoa_r+0x1018>
 40079ec:	d9c00b17 	ldw	r7,44(sp)
 40079f0:	3800b326 	beq	r7,zero,4007cc0 <_dtoa_r+0xce8>
 40079f4:	a800b226 	beq	r21,zero,4007cc0 <_dtoa_r+0xce8>
 40079f8:	880b883a 	mov	r5,r17
 40079fc:	a80d883a 	mov	r6,r21
 4007a00:	e009883a 	mov	r4,fp
 4007a04:	400a3600 	call	400a360 <__pow5mult>
 4007a08:	d9800917 	ldw	r6,36(sp)
 4007a0c:	100b883a 	mov	r5,r2
 4007a10:	e009883a 	mov	r4,fp
 4007a14:	1023883a 	mov	r17,r2
 4007a18:	400a1680 	call	400a168 <__multiply>
 4007a1c:	1021883a 	mov	r16,r2
 4007a20:	d8800a17 	ldw	r2,40(sp)
 4007a24:	d9400917 	ldw	r5,36(sp)
 4007a28:	e009883a 	mov	r4,fp
 4007a2c:	1545c83a 	sub	r2,r2,r21
 4007a30:	d8800a15 	stw	r2,40(sp)
 4007a34:	4009dc80 	call	4009dc8 <_Bfree>
 4007a38:	d8c00a17 	ldw	r3,40(sp)
 4007a3c:	18009f1e 	bne	r3,zero,4007cbc <_dtoa_r+0xce4>
 4007a40:	05c00044 	movi	r23,1
 4007a44:	e009883a 	mov	r4,fp
 4007a48:	b80b883a 	mov	r5,r23
 4007a4c:	400a12c0 	call	400a12c <__i2b>
 4007a50:	d9000d17 	ldw	r4,52(sp)
 4007a54:	102b883a 	mov	r21,r2
 4007a58:	2000ce26 	beq	r4,zero,4007d94 <_dtoa_r+0xdbc>
 4007a5c:	200d883a 	mov	r6,r4
 4007a60:	100b883a 	mov	r5,r2
 4007a64:	e009883a 	mov	r4,fp
 4007a68:	400a3600 	call	400a360 <__pow5mult>
 4007a6c:	d9800317 	ldw	r6,12(sp)
 4007a70:	102b883a 	mov	r21,r2
 4007a74:	b981810e 	bge	r23,r6,400807c <_dtoa_r+0x10a4>
 4007a78:	0027883a 	mov	r19,zero
 4007a7c:	a8800417 	ldw	r2,16(r21)
 4007a80:	05c00804 	movi	r23,32
 4007a84:	10800104 	addi	r2,r2,4
 4007a88:	1085883a 	add	r2,r2,r2
 4007a8c:	1085883a 	add	r2,r2,r2
 4007a90:	a885883a 	add	r2,r21,r2
 4007a94:	11000017 	ldw	r4,0(r2)
 4007a98:	400a0140 	call	400a014 <__hi0bits>
 4007a9c:	b885c83a 	sub	r2,r23,r2
 4007aa0:	1585883a 	add	r2,r2,r22
 4007aa4:	108007cc 	andi	r2,r2,31
 4007aa8:	1000b326 	beq	r2,zero,4007d78 <_dtoa_r+0xda0>
 4007aac:	00c00804 	movi	r3,32
 4007ab0:	1887c83a 	sub	r3,r3,r2
 4007ab4:	01000104 	movi	r4,4
 4007ab8:	20c2cd0e 	bge	r4,r3,40085f0 <_dtoa_r+0x1618>
 4007abc:	00c00704 	movi	r3,28
 4007ac0:	1885c83a 	sub	r2,r3,r2
 4007ac4:	d8c00817 	ldw	r3,32(sp)
 4007ac8:	a0a9883a 	add	r20,r20,r2
 4007acc:	b0ad883a 	add	r22,r22,r2
 4007ad0:	1887883a 	add	r3,r3,r2
 4007ad4:	d8c00815 	stw	r3,32(sp)
 4007ad8:	d9800817 	ldw	r6,32(sp)
 4007adc:	0180040e 	bge	zero,r6,4007af0 <_dtoa_r+0xb18>
 4007ae0:	800b883a 	mov	r5,r16
 4007ae4:	e009883a 	mov	r4,fp
 4007ae8:	400a4a00 	call	400a4a0 <__lshift>
 4007aec:	1021883a 	mov	r16,r2
 4007af0:	0580050e 	bge	zero,r22,4007b08 <_dtoa_r+0xb30>
 4007af4:	a80b883a 	mov	r5,r21
 4007af8:	b00d883a 	mov	r6,r22
 4007afc:	e009883a 	mov	r4,fp
 4007b00:	400a4a00 	call	400a4a0 <__lshift>
 4007b04:	102b883a 	mov	r21,r2
 4007b08:	d9c00e17 	ldw	r7,56(sp)
 4007b0c:	3801211e 	bne	r7,zero,4007f94 <_dtoa_r+0xfbc>
 4007b10:	d9800617 	ldw	r6,24(sp)
 4007b14:	0181380e 	bge	zero,r6,4007ff8 <_dtoa_r+0x1020>
 4007b18:	d8c00b17 	ldw	r3,44(sp)
 4007b1c:	1800ab1e 	bne	r3,zero,4007dcc <_dtoa_r+0xdf4>
 4007b20:	dc800717 	ldw	r18,28(sp)
 4007b24:	dcc00617 	ldw	r19,24(sp)
 4007b28:	9029883a 	mov	r20,r18
 4007b2c:	00000206 	br	4007b38 <_dtoa_r+0xb60>
 4007b30:	4009df00 	call	4009df0 <__multadd>
 4007b34:	1021883a 	mov	r16,r2
 4007b38:	a80b883a 	mov	r5,r21
 4007b3c:	8009883a 	mov	r4,r16
 4007b40:	4006dd80 	call	4006dd8 <quorem>
 4007b44:	10800c04 	addi	r2,r2,48
 4007b48:	90800005 	stb	r2,0(r18)
 4007b4c:	94800044 	addi	r18,r18,1
 4007b50:	9507c83a 	sub	r3,r18,r20
 4007b54:	000f883a 	mov	r7,zero
 4007b58:	01800284 	movi	r6,10
 4007b5c:	800b883a 	mov	r5,r16
 4007b60:	e009883a 	mov	r4,fp
 4007b64:	1cfff216 	blt	r3,r19,4007b30 <__alt_data_end+0xfc007b30>
 4007b68:	1011883a 	mov	r8,r2
 4007b6c:	d8800617 	ldw	r2,24(sp)
 4007b70:	0082370e 	bge	zero,r2,4008450 <_dtoa_r+0x1478>
 4007b74:	d9000717 	ldw	r4,28(sp)
 4007b78:	0025883a 	mov	r18,zero
 4007b7c:	20af883a 	add	r23,r4,r2
 4007b80:	01800044 	movi	r6,1
 4007b84:	800b883a 	mov	r5,r16
 4007b88:	e009883a 	mov	r4,fp
 4007b8c:	da001715 	stw	r8,92(sp)
 4007b90:	400a4a00 	call	400a4a0 <__lshift>
 4007b94:	a80b883a 	mov	r5,r21
 4007b98:	1009883a 	mov	r4,r2
 4007b9c:	d8800915 	stw	r2,36(sp)
 4007ba0:	400a5e80 	call	400a5e8 <__mcmp>
 4007ba4:	da001717 	ldw	r8,92(sp)
 4007ba8:	0081800e 	bge	zero,r2,40081ac <_dtoa_r+0x11d4>
 4007bac:	b93fffc3 	ldbu	r4,-1(r23)
 4007bb0:	b8bfffc4 	addi	r2,r23,-1
 4007bb4:	1007883a 	mov	r3,r2
 4007bb8:	01800e44 	movi	r6,57
 4007bbc:	d9c00717 	ldw	r7,28(sp)
 4007bc0:	00000506 	br	4007bd8 <_dtoa_r+0xc00>
 4007bc4:	18ffffc4 	addi	r3,r3,-1
 4007bc8:	11c12326 	beq	r2,r7,4008058 <_dtoa_r+0x1080>
 4007bcc:	19000003 	ldbu	r4,0(r3)
 4007bd0:	102f883a 	mov	r23,r2
 4007bd4:	10bfffc4 	addi	r2,r2,-1
 4007bd8:	21403fcc 	andi	r5,r4,255
 4007bdc:	2940201c 	xori	r5,r5,128
 4007be0:	297fe004 	addi	r5,r5,-128
 4007be4:	29bff726 	beq	r5,r6,4007bc4 <__alt_data_end+0xfc007bc4>
 4007be8:	21000044 	addi	r4,r4,1
 4007bec:	11000005 	stb	r4,0(r2)
 4007bf0:	a80b883a 	mov	r5,r21
 4007bf4:	e009883a 	mov	r4,fp
 4007bf8:	4009dc80 	call	4009dc8 <_Bfree>
 4007bfc:	883ea026 	beq	r17,zero,4007680 <__alt_data_end+0xfc007680>
 4007c00:	90000426 	beq	r18,zero,4007c14 <_dtoa_r+0xc3c>
 4007c04:	94400326 	beq	r18,r17,4007c14 <_dtoa_r+0xc3c>
 4007c08:	900b883a 	mov	r5,r18
 4007c0c:	e009883a 	mov	r4,fp
 4007c10:	4009dc80 	call	4009dc8 <_Bfree>
 4007c14:	880b883a 	mov	r5,r17
 4007c18:	e009883a 	mov	r4,fp
 4007c1c:	4009dc80 	call	4009dc8 <_Bfree>
 4007c20:	003e9706 	br	4007680 <__alt_data_end+0xfc007680>
 4007c24:	01800044 	movi	r6,1
 4007c28:	d9800e15 	stw	r6,56(sp)
 4007c2c:	003d9606 	br	4007288 <__alt_data_end+0xfc007288>
 4007c30:	d8800817 	ldw	r2,32(sp)
 4007c34:	d8c00517 	ldw	r3,20(sp)
 4007c38:	d8000d15 	stw	zero,52(sp)
 4007c3c:	10c5c83a 	sub	r2,r2,r3
 4007c40:	00c9c83a 	sub	r4,zero,r3
 4007c44:	d8800815 	stw	r2,32(sp)
 4007c48:	d9000a15 	stw	r4,40(sp)
 4007c4c:	003d9706 	br	40072ac <__alt_data_end+0xfc0072ac>
 4007c50:	05adc83a 	sub	r22,zero,r22
 4007c54:	dd800815 	stw	r22,32(sp)
 4007c58:	002d883a 	mov	r22,zero
 4007c5c:	003d8e06 	br	4007298 <__alt_data_end+0xfc007298>
 4007c60:	d9000517 	ldw	r4,20(sp)
 4007c64:	40103b80 	call	40103b8 <__floatsidf>
 4007c68:	100d883a 	mov	r6,r2
 4007c6c:	180f883a 	mov	r7,r3
 4007c70:	a009883a 	mov	r4,r20
 4007c74:	880b883a 	mov	r5,r17
 4007c78:	400f0cc0 	call	400f0cc <__eqdf2>
 4007c7c:	103d7126 	beq	r2,zero,4007244 <__alt_data_end+0xfc007244>
 4007c80:	d9c00517 	ldw	r7,20(sp)
 4007c84:	39ffffc4 	addi	r7,r7,-1
 4007c88:	d9c00515 	stw	r7,20(sp)
 4007c8c:	003d6d06 	br	4007244 <__alt_data_end+0xfc007244>
 4007c90:	dd400a17 	ldw	r21,40(sp)
 4007c94:	dd000817 	ldw	r20,32(sp)
 4007c98:	0023883a 	mov	r17,zero
 4007c9c:	003f4806 	br	40079c0 <__alt_data_end+0xfc0079c0>
 4007ca0:	10e3c83a 	sub	r17,r2,r3
 4007ca4:	9448983a 	sll	r4,r18,r17
 4007ca8:	003d3206 	br	4007174 <__alt_data_end+0xfc007174>
 4007cac:	d8000e15 	stw	zero,56(sp)
 4007cb0:	003d7506 	br	4007288 <__alt_data_end+0xfc007288>
 4007cb4:	b005883a 	mov	r2,r22
 4007cb8:	003f4506 	br	40079d0 <__alt_data_end+0xfc0079d0>
 4007cbc:	dc000915 	stw	r16,36(sp)
 4007cc0:	d9800a17 	ldw	r6,40(sp)
 4007cc4:	d9400917 	ldw	r5,36(sp)
 4007cc8:	e009883a 	mov	r4,fp
 4007ccc:	400a3600 	call	400a360 <__pow5mult>
 4007cd0:	1021883a 	mov	r16,r2
 4007cd4:	003f5a06 	br	4007a40 <__alt_data_end+0xfc007a40>
 4007cd8:	01c00044 	movi	r7,1
 4007cdc:	d9c00b15 	stw	r7,44(sp)
 4007ce0:	d8802217 	ldw	r2,136(sp)
 4007ce4:	0081280e 	bge	zero,r2,4008188 <_dtoa_r+0x11b0>
 4007ce8:	100d883a 	mov	r6,r2
 4007cec:	1021883a 	mov	r16,r2
 4007cf0:	d8800c15 	stw	r2,48(sp)
 4007cf4:	d8800615 	stw	r2,24(sp)
 4007cf8:	003d8806 	br	400731c <__alt_data_end+0xfc00731c>
 4007cfc:	d8800617 	ldw	r2,24(sp)
 4007d00:	00be9b16 	blt	zero,r2,4007770 <__alt_data_end+0xfc007770>
 4007d04:	10010f1e 	bne	r2,zero,4008144 <_dtoa_r+0x116c>
 4007d08:	880b883a 	mov	r5,r17
 4007d0c:	000d883a 	mov	r6,zero
 4007d10:	01d00534 	movhi	r7,16404
 4007d14:	8009883a 	mov	r4,r16
 4007d18:	400f3240 	call	400f324 <__muldf3>
 4007d1c:	900d883a 	mov	r6,r18
 4007d20:	980f883a 	mov	r7,r19
 4007d24:	1009883a 	mov	r4,r2
 4007d28:	180b883a 	mov	r5,r3
 4007d2c:	400f1540 	call	400f154 <__gedf2>
 4007d30:	002b883a 	mov	r21,zero
 4007d34:	0023883a 	mov	r17,zero
 4007d38:	1000bf16 	blt	r2,zero,4008038 <_dtoa_r+0x1060>
 4007d3c:	d9802217 	ldw	r6,136(sp)
 4007d40:	ddc00717 	ldw	r23,28(sp)
 4007d44:	018c303a 	nor	r6,zero,r6
 4007d48:	d9800515 	stw	r6,20(sp)
 4007d4c:	a80b883a 	mov	r5,r21
 4007d50:	e009883a 	mov	r4,fp
 4007d54:	4009dc80 	call	4009dc8 <_Bfree>
 4007d58:	883e4926 	beq	r17,zero,4007680 <__alt_data_end+0xfc007680>
 4007d5c:	003fad06 	br	4007c14 <__alt_data_end+0xfc007c14>
 4007d60:	d9c01117 	ldw	r7,68(sp)
 4007d64:	3801bc26 	beq	r7,zero,4008458 <_dtoa_r+0x1480>
 4007d68:	10810cc4 	addi	r2,r2,1075
 4007d6c:	dd400a17 	ldw	r21,40(sp)
 4007d70:	dd000817 	ldw	r20,32(sp)
 4007d74:	003f0a06 	br	40079a0 <__alt_data_end+0xfc0079a0>
 4007d78:	00800704 	movi	r2,28
 4007d7c:	d9000817 	ldw	r4,32(sp)
 4007d80:	a0a9883a 	add	r20,r20,r2
 4007d84:	b0ad883a 	add	r22,r22,r2
 4007d88:	2089883a 	add	r4,r4,r2
 4007d8c:	d9000815 	stw	r4,32(sp)
 4007d90:	003f5106 	br	4007ad8 <__alt_data_end+0xfc007ad8>
 4007d94:	d8c00317 	ldw	r3,12(sp)
 4007d98:	b8c1fc0e 	bge	r23,r3,400858c <_dtoa_r+0x15b4>
 4007d9c:	0027883a 	mov	r19,zero
 4007da0:	b805883a 	mov	r2,r23
 4007da4:	003f3e06 	br	4007aa0 <__alt_data_end+0xfc007aa0>
 4007da8:	880b883a 	mov	r5,r17
 4007dac:	e009883a 	mov	r4,fp
 4007db0:	000f883a 	mov	r7,zero
 4007db4:	01800284 	movi	r6,10
 4007db8:	4009df00 	call	4009df0 <__multadd>
 4007dbc:	d9000c17 	ldw	r4,48(sp)
 4007dc0:	1023883a 	mov	r17,r2
 4007dc4:	0102040e 	bge	zero,r4,40085d8 <_dtoa_r+0x1600>
 4007dc8:	d9000615 	stw	r4,24(sp)
 4007dcc:	0500050e 	bge	zero,r20,4007de4 <_dtoa_r+0xe0c>
 4007dd0:	880b883a 	mov	r5,r17
 4007dd4:	a00d883a 	mov	r6,r20
 4007dd8:	e009883a 	mov	r4,fp
 4007ddc:	400a4a00 	call	400a4a0 <__lshift>
 4007de0:	1023883a 	mov	r17,r2
 4007de4:	9801241e 	bne	r19,zero,4008278 <_dtoa_r+0x12a0>
 4007de8:	8829883a 	mov	r20,r17
 4007dec:	d9000617 	ldw	r4,24(sp)
 4007df0:	dcc00717 	ldw	r19,28(sp)
 4007df4:	9480004c 	andi	r18,r18,1
 4007df8:	20bfffc4 	addi	r2,r4,-1
 4007dfc:	9885883a 	add	r2,r19,r2
 4007e00:	d8800415 	stw	r2,16(sp)
 4007e04:	dc800615 	stw	r18,24(sp)
 4007e08:	a80b883a 	mov	r5,r21
 4007e0c:	8009883a 	mov	r4,r16
 4007e10:	4006dd80 	call	4006dd8 <quorem>
 4007e14:	880b883a 	mov	r5,r17
 4007e18:	8009883a 	mov	r4,r16
 4007e1c:	102f883a 	mov	r23,r2
 4007e20:	400a5e80 	call	400a5e8 <__mcmp>
 4007e24:	a80b883a 	mov	r5,r21
 4007e28:	a00d883a 	mov	r6,r20
 4007e2c:	e009883a 	mov	r4,fp
 4007e30:	102d883a 	mov	r22,r2
 4007e34:	400a6480 	call	400a648 <__mdiff>
 4007e38:	1007883a 	mov	r3,r2
 4007e3c:	10800317 	ldw	r2,12(r2)
 4007e40:	bc800c04 	addi	r18,r23,48
 4007e44:	180b883a 	mov	r5,r3
 4007e48:	10004e1e 	bne	r2,zero,4007f84 <_dtoa_r+0xfac>
 4007e4c:	8009883a 	mov	r4,r16
 4007e50:	d8c01615 	stw	r3,88(sp)
 4007e54:	400a5e80 	call	400a5e8 <__mcmp>
 4007e58:	d8c01617 	ldw	r3,88(sp)
 4007e5c:	e009883a 	mov	r4,fp
 4007e60:	d8801615 	stw	r2,88(sp)
 4007e64:	180b883a 	mov	r5,r3
 4007e68:	4009dc80 	call	4009dc8 <_Bfree>
 4007e6c:	d8801617 	ldw	r2,88(sp)
 4007e70:	1000041e 	bne	r2,zero,4007e84 <_dtoa_r+0xeac>
 4007e74:	d9800317 	ldw	r6,12(sp)
 4007e78:	3000021e 	bne	r6,zero,4007e84 <_dtoa_r+0xeac>
 4007e7c:	d8c00617 	ldw	r3,24(sp)
 4007e80:	18003726 	beq	r3,zero,4007f60 <_dtoa_r+0xf88>
 4007e84:	b0002016 	blt	r22,zero,4007f08 <_dtoa_r+0xf30>
 4007e88:	b000041e 	bne	r22,zero,4007e9c <_dtoa_r+0xec4>
 4007e8c:	d9000317 	ldw	r4,12(sp)
 4007e90:	2000021e 	bne	r4,zero,4007e9c <_dtoa_r+0xec4>
 4007e94:	d8c00617 	ldw	r3,24(sp)
 4007e98:	18001b26 	beq	r3,zero,4007f08 <_dtoa_r+0xf30>
 4007e9c:	00810716 	blt	zero,r2,40082bc <_dtoa_r+0x12e4>
 4007ea0:	d8c00417 	ldw	r3,16(sp)
 4007ea4:	9d800044 	addi	r22,r19,1
 4007ea8:	9c800005 	stb	r18,0(r19)
 4007eac:	b02f883a 	mov	r23,r22
 4007eb0:	98c10626 	beq	r19,r3,40082cc <_dtoa_r+0x12f4>
 4007eb4:	800b883a 	mov	r5,r16
 4007eb8:	000f883a 	mov	r7,zero
 4007ebc:	01800284 	movi	r6,10
 4007ec0:	e009883a 	mov	r4,fp
 4007ec4:	4009df00 	call	4009df0 <__multadd>
 4007ec8:	1021883a 	mov	r16,r2
 4007ecc:	000f883a 	mov	r7,zero
 4007ed0:	01800284 	movi	r6,10
 4007ed4:	880b883a 	mov	r5,r17
 4007ed8:	e009883a 	mov	r4,fp
 4007edc:	8d002526 	beq	r17,r20,4007f74 <_dtoa_r+0xf9c>
 4007ee0:	4009df00 	call	4009df0 <__multadd>
 4007ee4:	a00b883a 	mov	r5,r20
 4007ee8:	000f883a 	mov	r7,zero
 4007eec:	01800284 	movi	r6,10
 4007ef0:	e009883a 	mov	r4,fp
 4007ef4:	1023883a 	mov	r17,r2
 4007ef8:	4009df00 	call	4009df0 <__multadd>
 4007efc:	1029883a 	mov	r20,r2
 4007f00:	b027883a 	mov	r19,r22
 4007f04:	003fc006 	br	4007e08 <__alt_data_end+0xfc007e08>
 4007f08:	9011883a 	mov	r8,r18
 4007f0c:	00800e0e 	bge	zero,r2,4007f48 <_dtoa_r+0xf70>
 4007f10:	800b883a 	mov	r5,r16
 4007f14:	01800044 	movi	r6,1
 4007f18:	e009883a 	mov	r4,fp
 4007f1c:	da001715 	stw	r8,92(sp)
 4007f20:	400a4a00 	call	400a4a0 <__lshift>
 4007f24:	a80b883a 	mov	r5,r21
 4007f28:	1009883a 	mov	r4,r2
 4007f2c:	1021883a 	mov	r16,r2
 4007f30:	400a5e80 	call	400a5e8 <__mcmp>
 4007f34:	da001717 	ldw	r8,92(sp)
 4007f38:	0081960e 	bge	zero,r2,4008594 <_dtoa_r+0x15bc>
 4007f3c:	00800e44 	movi	r2,57
 4007f40:	40817026 	beq	r8,r2,4008504 <_dtoa_r+0x152c>
 4007f44:	ba000c44 	addi	r8,r23,49
 4007f48:	8825883a 	mov	r18,r17
 4007f4c:	9dc00044 	addi	r23,r19,1
 4007f50:	9a000005 	stb	r8,0(r19)
 4007f54:	a023883a 	mov	r17,r20
 4007f58:	dc000915 	stw	r16,36(sp)
 4007f5c:	003f2406 	br	4007bf0 <__alt_data_end+0xfc007bf0>
 4007f60:	00800e44 	movi	r2,57
 4007f64:	9011883a 	mov	r8,r18
 4007f68:	90816626 	beq	r18,r2,4008504 <_dtoa_r+0x152c>
 4007f6c:	05bff516 	blt	zero,r22,4007f44 <__alt_data_end+0xfc007f44>
 4007f70:	003ff506 	br	4007f48 <__alt_data_end+0xfc007f48>
 4007f74:	4009df00 	call	4009df0 <__multadd>
 4007f78:	1023883a 	mov	r17,r2
 4007f7c:	1029883a 	mov	r20,r2
 4007f80:	003fdf06 	br	4007f00 <__alt_data_end+0xfc007f00>
 4007f84:	e009883a 	mov	r4,fp
 4007f88:	4009dc80 	call	4009dc8 <_Bfree>
 4007f8c:	00800044 	movi	r2,1
 4007f90:	003fbc06 	br	4007e84 <__alt_data_end+0xfc007e84>
 4007f94:	a80b883a 	mov	r5,r21
 4007f98:	8009883a 	mov	r4,r16
 4007f9c:	400a5e80 	call	400a5e8 <__mcmp>
 4007fa0:	103edb0e 	bge	r2,zero,4007b10 <__alt_data_end+0xfc007b10>
 4007fa4:	800b883a 	mov	r5,r16
 4007fa8:	000f883a 	mov	r7,zero
 4007fac:	01800284 	movi	r6,10
 4007fb0:	e009883a 	mov	r4,fp
 4007fb4:	4009df00 	call	4009df0 <__multadd>
 4007fb8:	1021883a 	mov	r16,r2
 4007fbc:	d8800517 	ldw	r2,20(sp)
 4007fc0:	d8c00b17 	ldw	r3,44(sp)
 4007fc4:	10bfffc4 	addi	r2,r2,-1
 4007fc8:	d8800515 	stw	r2,20(sp)
 4007fcc:	183f761e 	bne	r3,zero,4007da8 <__alt_data_end+0xfc007da8>
 4007fd0:	d9000c17 	ldw	r4,48(sp)
 4007fd4:	0101730e 	bge	zero,r4,40085a4 <_dtoa_r+0x15cc>
 4007fd8:	d9000615 	stw	r4,24(sp)
 4007fdc:	003ed006 	br	4007b20 <__alt_data_end+0xfc007b20>
 4007fe0:	00800084 	movi	r2,2
 4007fe4:	3081861e 	bne	r6,r2,4008600 <_dtoa_r+0x1628>
 4007fe8:	d8000b15 	stw	zero,44(sp)
 4007fec:	003f3c06 	br	4007ce0 <__alt_data_end+0xfc007ce0>
 4007ff0:	dc000917 	ldw	r16,36(sp)
 4007ff4:	003e9206 	br	4007a40 <__alt_data_end+0xfc007a40>
 4007ff8:	d9c00317 	ldw	r7,12(sp)
 4007ffc:	00800084 	movi	r2,2
 4008000:	11fec50e 	bge	r2,r7,4007b18 <__alt_data_end+0xfc007b18>
 4008004:	d9000617 	ldw	r4,24(sp)
 4008008:	20013c1e 	bne	r4,zero,40084fc <_dtoa_r+0x1524>
 400800c:	a80b883a 	mov	r5,r21
 4008010:	000f883a 	mov	r7,zero
 4008014:	01800144 	movi	r6,5
 4008018:	e009883a 	mov	r4,fp
 400801c:	4009df00 	call	4009df0 <__multadd>
 4008020:	100b883a 	mov	r5,r2
 4008024:	8009883a 	mov	r4,r16
 4008028:	102b883a 	mov	r21,r2
 400802c:	400a5e80 	call	400a5e8 <__mcmp>
 4008030:	dc000915 	stw	r16,36(sp)
 4008034:	00bf410e 	bge	zero,r2,4007d3c <__alt_data_end+0xfc007d3c>
 4008038:	d9c00717 	ldw	r7,28(sp)
 400803c:	00800c44 	movi	r2,49
 4008040:	38800005 	stb	r2,0(r7)
 4008044:	d8800517 	ldw	r2,20(sp)
 4008048:	3dc00044 	addi	r23,r7,1
 400804c:	10800044 	addi	r2,r2,1
 4008050:	d8800515 	stw	r2,20(sp)
 4008054:	003f3d06 	br	4007d4c <__alt_data_end+0xfc007d4c>
 4008058:	d9800517 	ldw	r6,20(sp)
 400805c:	d9c00717 	ldw	r7,28(sp)
 4008060:	00800c44 	movi	r2,49
 4008064:	31800044 	addi	r6,r6,1
 4008068:	d9800515 	stw	r6,20(sp)
 400806c:	38800005 	stb	r2,0(r7)
 4008070:	003edf06 	br	4007bf0 <__alt_data_end+0xfc007bf0>
 4008074:	d8000b15 	stw	zero,44(sp)
 4008078:	003c9f06 	br	40072f8 <__alt_data_end+0xfc0072f8>
 400807c:	903e7e1e 	bne	r18,zero,4007a78 <__alt_data_end+0xfc007a78>
 4008080:	00800434 	movhi	r2,16
 4008084:	10bfffc4 	addi	r2,r2,-1
 4008088:	9884703a 	and	r2,r19,r2
 400808c:	1000ea1e 	bne	r2,zero,4008438 <_dtoa_r+0x1460>
 4008090:	9cdffc2c 	andhi	r19,r19,32752
 4008094:	9800e826 	beq	r19,zero,4008438 <_dtoa_r+0x1460>
 4008098:	d9c00817 	ldw	r7,32(sp)
 400809c:	b5800044 	addi	r22,r22,1
 40080a0:	04c00044 	movi	r19,1
 40080a4:	39c00044 	addi	r7,r7,1
 40080a8:	d9c00815 	stw	r7,32(sp)
 40080ac:	d8800d17 	ldw	r2,52(sp)
 40080b0:	103e721e 	bne	r2,zero,4007a7c <__alt_data_end+0xfc007a7c>
 40080b4:	00800044 	movi	r2,1
 40080b8:	003e7906 	br	4007aa0 <__alt_data_end+0xfc007aa0>
 40080bc:	8009883a 	mov	r4,r16
 40080c0:	40103b80 	call	40103b8 <__floatsidf>
 40080c4:	d9800f17 	ldw	r6,60(sp)
 40080c8:	d9c01017 	ldw	r7,64(sp)
 40080cc:	1009883a 	mov	r4,r2
 40080d0:	180b883a 	mov	r5,r3
 40080d4:	400f3240 	call	400f324 <__muldf3>
 40080d8:	000d883a 	mov	r6,zero
 40080dc:	01d00734 	movhi	r7,16412
 40080e0:	1009883a 	mov	r4,r2
 40080e4:	180b883a 	mov	r5,r3
 40080e8:	400df380 	call	400df38 <__adddf3>
 40080ec:	047f3034 	movhi	r17,64704
 40080f0:	1021883a 	mov	r16,r2
 40080f4:	1c63883a 	add	r17,r3,r17
 40080f8:	d9000f17 	ldw	r4,60(sp)
 40080fc:	d9401017 	ldw	r5,64(sp)
 4008100:	000d883a 	mov	r6,zero
 4008104:	01d00534 	movhi	r7,16404
 4008108:	400fa3c0 	call	400fa3c <__subdf3>
 400810c:	800d883a 	mov	r6,r16
 4008110:	880f883a 	mov	r7,r17
 4008114:	1009883a 	mov	r4,r2
 4008118:	180b883a 	mov	r5,r3
 400811c:	102b883a 	mov	r21,r2
 4008120:	1829883a 	mov	r20,r3
 4008124:	400f1540 	call	400f154 <__gedf2>
 4008128:	00806c16 	blt	zero,r2,40082dc <_dtoa_r+0x1304>
 400812c:	89e0003c 	xorhi	r7,r17,32768
 4008130:	800d883a 	mov	r6,r16
 4008134:	a809883a 	mov	r4,r21
 4008138:	a00b883a 	mov	r5,r20
 400813c:	400f2300 	call	400f230 <__ledf2>
 4008140:	103d7e0e 	bge	r2,zero,400773c <__alt_data_end+0xfc00773c>
 4008144:	002b883a 	mov	r21,zero
 4008148:	0023883a 	mov	r17,zero
 400814c:	003efb06 	br	4007d3c <__alt_data_end+0xfc007d3c>
 4008150:	d8800717 	ldw	r2,28(sp)
 4008154:	003bd006 	br	4007098 <__alt_data_end+0xfc007098>
 4008158:	d9000a17 	ldw	r4,40(sp)
 400815c:	d9800d17 	ldw	r6,52(sp)
 4008160:	dd400a15 	stw	r21,40(sp)
 4008164:	a905c83a 	sub	r2,r21,r4
 4008168:	308d883a 	add	r6,r6,r2
 400816c:	d9800d15 	stw	r6,52(sp)
 4008170:	002b883a 	mov	r21,zero
 4008174:	003e0606 	br	4007990 <__alt_data_end+0xfc007990>
 4008178:	9023883a 	mov	r17,r18
 400817c:	9829883a 	mov	r20,r19
 4008180:	04000084 	movi	r16,2
 4008184:	003c9206 	br	40073d0 <__alt_data_end+0xfc0073d0>
 4008188:	04000044 	movi	r16,1
 400818c:	dc000c15 	stw	r16,48(sp)
 4008190:	dc000615 	stw	r16,24(sp)
 4008194:	dc002215 	stw	r16,136(sp)
 4008198:	e0001115 	stw	zero,68(fp)
 400819c:	000b883a 	mov	r5,zero
 40081a0:	003c6906 	br	4007348 <__alt_data_end+0xfc007348>
 40081a4:	3021883a 	mov	r16,r6
 40081a8:	003ffb06 	br	4008198 <__alt_data_end+0xfc008198>
 40081ac:	1000021e 	bne	r2,zero,40081b8 <_dtoa_r+0x11e0>
 40081b0:	4200004c 	andi	r8,r8,1
 40081b4:	403e7d1e 	bne	r8,zero,4007bac <__alt_data_end+0xfc007bac>
 40081b8:	01000c04 	movi	r4,48
 40081bc:	00000106 	br	40081c4 <_dtoa_r+0x11ec>
 40081c0:	102f883a 	mov	r23,r2
 40081c4:	b8bfffc4 	addi	r2,r23,-1
 40081c8:	10c00007 	ldb	r3,0(r2)
 40081cc:	193ffc26 	beq	r3,r4,40081c0 <__alt_data_end+0xfc0081c0>
 40081d0:	003e8706 	br	4007bf0 <__alt_data_end+0xfc007bf0>
 40081d4:	d8800517 	ldw	r2,20(sp)
 40081d8:	00a3c83a 	sub	r17,zero,r2
 40081dc:	8800a426 	beq	r17,zero,4008470 <_dtoa_r+0x1498>
 40081e0:	888003cc 	andi	r2,r17,15
 40081e4:	100490fa 	slli	r2,r2,3
 40081e8:	00c10074 	movhi	r3,1025
 40081ec:	18d5fe04 	addi	r3,r3,22520
 40081f0:	1885883a 	add	r2,r3,r2
 40081f4:	11800017 	ldw	r6,0(r2)
 40081f8:	11c00117 	ldw	r7,4(r2)
 40081fc:	9009883a 	mov	r4,r18
 4008200:	980b883a 	mov	r5,r19
 4008204:	8823d13a 	srai	r17,r17,4
 4008208:	400f3240 	call	400f324 <__muldf3>
 400820c:	d8800f15 	stw	r2,60(sp)
 4008210:	d8c01015 	stw	r3,64(sp)
 4008214:	8800e826 	beq	r17,zero,40085b8 <_dtoa_r+0x15e0>
 4008218:	05010074 	movhi	r20,1025
 400821c:	a515f404 	addi	r20,r20,22480
 4008220:	04000084 	movi	r16,2
 4008224:	8980004c 	andi	r6,r17,1
 4008228:	1009883a 	mov	r4,r2
 400822c:	8823d07a 	srai	r17,r17,1
 4008230:	180b883a 	mov	r5,r3
 4008234:	30000426 	beq	r6,zero,4008248 <_dtoa_r+0x1270>
 4008238:	a1800017 	ldw	r6,0(r20)
 400823c:	a1c00117 	ldw	r7,4(r20)
 4008240:	84000044 	addi	r16,r16,1
 4008244:	400f3240 	call	400f324 <__muldf3>
 4008248:	a5000204 	addi	r20,r20,8
 400824c:	883ff51e 	bne	r17,zero,4008224 <__alt_data_end+0xfc008224>
 4008250:	d8800f15 	stw	r2,60(sp)
 4008254:	d8c01015 	stw	r3,64(sp)
 4008258:	003c7606 	br	4007434 <__alt_data_end+0xfc007434>
 400825c:	00c00c04 	movi	r3,48
 4008260:	10c00005 	stb	r3,0(r2)
 4008264:	d8c00517 	ldw	r3,20(sp)
 4008268:	bd3fffc3 	ldbu	r20,-1(r23)
 400826c:	18c00044 	addi	r3,r3,1
 4008270:	d8c00515 	stw	r3,20(sp)
 4008274:	003db906 	br	400795c <__alt_data_end+0xfc00795c>
 4008278:	89400117 	ldw	r5,4(r17)
 400827c:	e009883a 	mov	r4,fp
 4008280:	4009d200 	call	4009d20 <_Balloc>
 4008284:	89800417 	ldw	r6,16(r17)
 4008288:	89400304 	addi	r5,r17,12
 400828c:	11000304 	addi	r4,r2,12
 4008290:	31800084 	addi	r6,r6,2
 4008294:	318d883a 	add	r6,r6,r6
 4008298:	318d883a 	add	r6,r6,r6
 400829c:	1027883a 	mov	r19,r2
 40082a0:	40046400 	call	4004640 <memcpy>
 40082a4:	01800044 	movi	r6,1
 40082a8:	980b883a 	mov	r5,r19
 40082ac:	e009883a 	mov	r4,fp
 40082b0:	400a4a00 	call	400a4a0 <__lshift>
 40082b4:	1029883a 	mov	r20,r2
 40082b8:	003ecc06 	br	4007dec <__alt_data_end+0xfc007dec>
 40082bc:	00800e44 	movi	r2,57
 40082c0:	90809026 	beq	r18,r2,4008504 <_dtoa_r+0x152c>
 40082c4:	92000044 	addi	r8,r18,1
 40082c8:	003f1f06 	br	4007f48 <__alt_data_end+0xfc007f48>
 40082cc:	9011883a 	mov	r8,r18
 40082d0:	8825883a 	mov	r18,r17
 40082d4:	a023883a 	mov	r17,r20
 40082d8:	003e2906 	br	4007b80 <__alt_data_end+0xfc007b80>
 40082dc:	002b883a 	mov	r21,zero
 40082e0:	0023883a 	mov	r17,zero
 40082e4:	003f5406 	br	4008038 <__alt_data_end+0xfc008038>
 40082e8:	61bfffc4 	addi	r6,r12,-1
 40082ec:	300490fa 	slli	r2,r6,3
 40082f0:	00c10074 	movhi	r3,1025
 40082f4:	18d5fe04 	addi	r3,r3,22520
 40082f8:	1885883a 	add	r2,r3,r2
 40082fc:	11000017 	ldw	r4,0(r2)
 4008300:	11400117 	ldw	r5,4(r2)
 4008304:	d8800717 	ldw	r2,28(sp)
 4008308:	880f883a 	mov	r7,r17
 400830c:	d9801215 	stw	r6,72(sp)
 4008310:	800d883a 	mov	r6,r16
 4008314:	db001615 	stw	r12,88(sp)
 4008318:	15c00044 	addi	r23,r2,1
 400831c:	400f3240 	call	400f324 <__muldf3>
 4008320:	d9401017 	ldw	r5,64(sp)
 4008324:	d9000f17 	ldw	r4,60(sp)
 4008328:	d8c01515 	stw	r3,84(sp)
 400832c:	d8801415 	stw	r2,80(sp)
 4008330:	40103380 	call	4010338 <__fixdfsi>
 4008334:	1009883a 	mov	r4,r2
 4008338:	1021883a 	mov	r16,r2
 400833c:	40103b80 	call	40103b8 <__floatsidf>
 4008340:	d9000f17 	ldw	r4,60(sp)
 4008344:	d9401017 	ldw	r5,64(sp)
 4008348:	100d883a 	mov	r6,r2
 400834c:	180f883a 	mov	r7,r3
 4008350:	400fa3c0 	call	400fa3c <__subdf3>
 4008354:	1829883a 	mov	r20,r3
 4008358:	d8c00717 	ldw	r3,28(sp)
 400835c:	84000c04 	addi	r16,r16,48
 4008360:	1023883a 	mov	r17,r2
 4008364:	1c000005 	stb	r16,0(r3)
 4008368:	db001617 	ldw	r12,88(sp)
 400836c:	00800044 	movi	r2,1
 4008370:	60802226 	beq	r12,r2,40083fc <_dtoa_r+0x1424>
 4008374:	d9c00717 	ldw	r7,28(sp)
 4008378:	8805883a 	mov	r2,r17
 400837c:	b82b883a 	mov	r21,r23
 4008380:	3b19883a 	add	r12,r7,r12
 4008384:	6023883a 	mov	r17,r12
 4008388:	a007883a 	mov	r3,r20
 400838c:	dc800f15 	stw	r18,60(sp)
 4008390:	000d883a 	mov	r6,zero
 4008394:	01d00934 	movhi	r7,16420
 4008398:	1009883a 	mov	r4,r2
 400839c:	180b883a 	mov	r5,r3
 40083a0:	400f3240 	call	400f324 <__muldf3>
 40083a4:	180b883a 	mov	r5,r3
 40083a8:	1009883a 	mov	r4,r2
 40083ac:	1829883a 	mov	r20,r3
 40083b0:	1025883a 	mov	r18,r2
 40083b4:	40103380 	call	4010338 <__fixdfsi>
 40083b8:	1009883a 	mov	r4,r2
 40083bc:	1021883a 	mov	r16,r2
 40083c0:	40103b80 	call	40103b8 <__floatsidf>
 40083c4:	100d883a 	mov	r6,r2
 40083c8:	180f883a 	mov	r7,r3
 40083cc:	9009883a 	mov	r4,r18
 40083d0:	a00b883a 	mov	r5,r20
 40083d4:	84000c04 	addi	r16,r16,48
 40083d8:	400fa3c0 	call	400fa3c <__subdf3>
 40083dc:	ad400044 	addi	r21,r21,1
 40083e0:	ac3fffc5 	stb	r16,-1(r21)
 40083e4:	ac7fea1e 	bne	r21,r17,4008390 <__alt_data_end+0xfc008390>
 40083e8:	1023883a 	mov	r17,r2
 40083ec:	d8801217 	ldw	r2,72(sp)
 40083f0:	dc800f17 	ldw	r18,60(sp)
 40083f4:	1829883a 	mov	r20,r3
 40083f8:	b8af883a 	add	r23,r23,r2
 40083fc:	d9001417 	ldw	r4,80(sp)
 4008400:	d9401517 	ldw	r5,84(sp)
 4008404:	000d883a 	mov	r6,zero
 4008408:	01cff834 	movhi	r7,16352
 400840c:	400df380 	call	400df38 <__adddf3>
 4008410:	880d883a 	mov	r6,r17
 4008414:	a00f883a 	mov	r7,r20
 4008418:	1009883a 	mov	r4,r2
 400841c:	180b883a 	mov	r5,r3
 4008420:	400f2300 	call	400f230 <__ledf2>
 4008424:	10003e0e 	bge	r2,zero,4008520 <_dtoa_r+0x1548>
 4008428:	d9001317 	ldw	r4,76(sp)
 400842c:	bd3fffc3 	ldbu	r20,-1(r23)
 4008430:	d9000515 	stw	r4,20(sp)
 4008434:	003d3b06 	br	4007924 <__alt_data_end+0xfc007924>
 4008438:	0027883a 	mov	r19,zero
 400843c:	003f1b06 	br	40080ac <__alt_data_end+0xfc0080ac>
 4008440:	d8800817 	ldw	r2,32(sp)
 4008444:	11e9c83a 	sub	r20,r2,r7
 4008448:	0005883a 	mov	r2,zero
 400844c:	003d5406 	br	40079a0 <__alt_data_end+0xfc0079a0>
 4008450:	00800044 	movi	r2,1
 4008454:	003dc706 	br	4007b74 <__alt_data_end+0xfc007b74>
 4008458:	d8c00217 	ldw	r3,8(sp)
 400845c:	00800d84 	movi	r2,54
 4008460:	dd400a17 	ldw	r21,40(sp)
 4008464:	10c5c83a 	sub	r2,r2,r3
 4008468:	dd000817 	ldw	r20,32(sp)
 400846c:	003d4c06 	br	40079a0 <__alt_data_end+0xfc0079a0>
 4008470:	dc800f15 	stw	r18,60(sp)
 4008474:	dcc01015 	stw	r19,64(sp)
 4008478:	04000084 	movi	r16,2
 400847c:	003bed06 	br	4007434 <__alt_data_end+0xfc007434>
 4008480:	d9000617 	ldw	r4,24(sp)
 4008484:	203f0d26 	beq	r4,zero,40080bc <__alt_data_end+0xfc0080bc>
 4008488:	d9800c17 	ldw	r6,48(sp)
 400848c:	01bcab0e 	bge	zero,r6,400773c <__alt_data_end+0xfc00773c>
 4008490:	d9401017 	ldw	r5,64(sp)
 4008494:	d9000f17 	ldw	r4,60(sp)
 4008498:	000d883a 	mov	r6,zero
 400849c:	01d00934 	movhi	r7,16420
 40084a0:	400f3240 	call	400f324 <__muldf3>
 40084a4:	81000044 	addi	r4,r16,1
 40084a8:	d8800f15 	stw	r2,60(sp)
 40084ac:	d8c01015 	stw	r3,64(sp)
 40084b0:	40103b80 	call	40103b8 <__floatsidf>
 40084b4:	d9800f17 	ldw	r6,60(sp)
 40084b8:	d9c01017 	ldw	r7,64(sp)
 40084bc:	1009883a 	mov	r4,r2
 40084c0:	180b883a 	mov	r5,r3
 40084c4:	400f3240 	call	400f324 <__muldf3>
 40084c8:	01d00734 	movhi	r7,16412
 40084cc:	000d883a 	mov	r6,zero
 40084d0:	1009883a 	mov	r4,r2
 40084d4:	180b883a 	mov	r5,r3
 40084d8:	400df380 	call	400df38 <__adddf3>
 40084dc:	d9c00517 	ldw	r7,20(sp)
 40084e0:	047f3034 	movhi	r17,64704
 40084e4:	1021883a 	mov	r16,r2
 40084e8:	39ffffc4 	addi	r7,r7,-1
 40084ec:	d9c01315 	stw	r7,76(sp)
 40084f0:	1c63883a 	add	r17,r3,r17
 40084f4:	db000c17 	ldw	r12,48(sp)
 40084f8:	003bea06 	br	40074a4 <__alt_data_end+0xfc0074a4>
 40084fc:	dc000915 	stw	r16,36(sp)
 4008500:	003e0e06 	br	4007d3c <__alt_data_end+0xfc007d3c>
 4008504:	01000e44 	movi	r4,57
 4008508:	8825883a 	mov	r18,r17
 400850c:	9dc00044 	addi	r23,r19,1
 4008510:	99000005 	stb	r4,0(r19)
 4008514:	a023883a 	mov	r17,r20
 4008518:	dc000915 	stw	r16,36(sp)
 400851c:	003da406 	br	4007bb0 <__alt_data_end+0xfc007bb0>
 4008520:	d9801417 	ldw	r6,80(sp)
 4008524:	d9c01517 	ldw	r7,84(sp)
 4008528:	0009883a 	mov	r4,zero
 400852c:	014ff834 	movhi	r5,16352
 4008530:	400fa3c0 	call	400fa3c <__subdf3>
 4008534:	880d883a 	mov	r6,r17
 4008538:	a00f883a 	mov	r7,r20
 400853c:	1009883a 	mov	r4,r2
 4008540:	180b883a 	mov	r5,r3
 4008544:	400f1540 	call	400f154 <__gedf2>
 4008548:	00bc7c0e 	bge	zero,r2,400773c <__alt_data_end+0xfc00773c>
 400854c:	01000c04 	movi	r4,48
 4008550:	00000106 	br	4008558 <_dtoa_r+0x1580>
 4008554:	102f883a 	mov	r23,r2
 4008558:	b8bfffc4 	addi	r2,r23,-1
 400855c:	10c00007 	ldb	r3,0(r2)
 4008560:	193ffc26 	beq	r3,r4,4008554 <__alt_data_end+0xfc008554>
 4008564:	d9801317 	ldw	r6,76(sp)
 4008568:	d9800515 	stw	r6,20(sp)
 400856c:	003c4406 	br	4007680 <__alt_data_end+0xfc007680>
 4008570:	d9801317 	ldw	r6,76(sp)
 4008574:	d9800515 	stw	r6,20(sp)
 4008578:	003cea06 	br	4007924 <__alt_data_end+0xfc007924>
 400857c:	dd800f17 	ldw	r22,60(sp)
 4008580:	dcc01017 	ldw	r19,64(sp)
 4008584:	dc801217 	ldw	r18,72(sp)
 4008588:	003c6c06 	br	400773c <__alt_data_end+0xfc00773c>
 400858c:	903e031e 	bne	r18,zero,4007d9c <__alt_data_end+0xfc007d9c>
 4008590:	003ebb06 	br	4008080 <__alt_data_end+0xfc008080>
 4008594:	103e6c1e 	bne	r2,zero,4007f48 <__alt_data_end+0xfc007f48>
 4008598:	4080004c 	andi	r2,r8,1
 400859c:	103e6a26 	beq	r2,zero,4007f48 <__alt_data_end+0xfc007f48>
 40085a0:	003e6606 	br	4007f3c <__alt_data_end+0xfc007f3c>
 40085a4:	d8c00317 	ldw	r3,12(sp)
 40085a8:	00800084 	movi	r2,2
 40085ac:	10c02916 	blt	r2,r3,4008654 <_dtoa_r+0x167c>
 40085b0:	d9000c17 	ldw	r4,48(sp)
 40085b4:	003e8806 	br	4007fd8 <__alt_data_end+0xfc007fd8>
 40085b8:	04000084 	movi	r16,2
 40085bc:	003b9d06 	br	4007434 <__alt_data_end+0xfc007434>
 40085c0:	d9001317 	ldw	r4,76(sp)
 40085c4:	d9000515 	stw	r4,20(sp)
 40085c8:	003cd606 	br	4007924 <__alt_data_end+0xfc007924>
 40085cc:	d8801317 	ldw	r2,76(sp)
 40085d0:	d8800515 	stw	r2,20(sp)
 40085d4:	003c2a06 	br	4007680 <__alt_data_end+0xfc007680>
 40085d8:	d9800317 	ldw	r6,12(sp)
 40085dc:	00800084 	movi	r2,2
 40085e0:	11801516 	blt	r2,r6,4008638 <_dtoa_r+0x1660>
 40085e4:	d9c00c17 	ldw	r7,48(sp)
 40085e8:	d9c00615 	stw	r7,24(sp)
 40085ec:	003df706 	br	4007dcc <__alt_data_end+0xfc007dcc>
 40085f0:	193d3926 	beq	r3,r4,4007ad8 <__alt_data_end+0xfc007ad8>
 40085f4:	00c00f04 	movi	r3,60
 40085f8:	1885c83a 	sub	r2,r3,r2
 40085fc:	003ddf06 	br	4007d7c <__alt_data_end+0xfc007d7c>
 4008600:	e009883a 	mov	r4,fp
 4008604:	e0001115 	stw	zero,68(fp)
 4008608:	000b883a 	mov	r5,zero
 400860c:	4009d200 	call	4009d20 <_Balloc>
 4008610:	d8800715 	stw	r2,28(sp)
 4008614:	d8c00717 	ldw	r3,28(sp)
 4008618:	00bfffc4 	movi	r2,-1
 400861c:	01000044 	movi	r4,1
 4008620:	d8800c15 	stw	r2,48(sp)
 4008624:	e0c01015 	stw	r3,64(fp)
 4008628:	d9000b15 	stw	r4,44(sp)
 400862c:	d8800615 	stw	r2,24(sp)
 4008630:	d8002215 	stw	zero,136(sp)
 4008634:	003c4106 	br	400773c <__alt_data_end+0xfc00773c>
 4008638:	d8c00c17 	ldw	r3,48(sp)
 400863c:	d8c00615 	stw	r3,24(sp)
 4008640:	003e7006 	br	4008004 <__alt_data_end+0xfc008004>
 4008644:	04400044 	movi	r17,1
 4008648:	003b2006 	br	40072cc <__alt_data_end+0xfc0072cc>
 400864c:	000b883a 	mov	r5,zero
 4008650:	003b3d06 	br	4007348 <__alt_data_end+0xfc007348>
 4008654:	d8800c17 	ldw	r2,48(sp)
 4008658:	d8800615 	stw	r2,24(sp)
 400865c:	003e6906 	br	4008004 <__alt_data_end+0xfc008004>

04008660 <__sflush_r>:
 4008660:	2880030b 	ldhu	r2,12(r5)
 4008664:	defffb04 	addi	sp,sp,-20
 4008668:	dcc00315 	stw	r19,12(sp)
 400866c:	dc400115 	stw	r17,4(sp)
 4008670:	dfc00415 	stw	ra,16(sp)
 4008674:	dc800215 	stw	r18,8(sp)
 4008678:	dc000015 	stw	r16,0(sp)
 400867c:	10c0020c 	andi	r3,r2,8
 4008680:	2823883a 	mov	r17,r5
 4008684:	2027883a 	mov	r19,r4
 4008688:	1800311e 	bne	r3,zero,4008750 <__sflush_r+0xf0>
 400868c:	28c00117 	ldw	r3,4(r5)
 4008690:	10820014 	ori	r2,r2,2048
 4008694:	2880030d 	sth	r2,12(r5)
 4008698:	00c04b0e 	bge	zero,r3,40087c8 <__sflush_r+0x168>
 400869c:	8a000a17 	ldw	r8,40(r17)
 40086a0:	40002326 	beq	r8,zero,4008730 <__sflush_r+0xd0>
 40086a4:	9c000017 	ldw	r16,0(r19)
 40086a8:	10c4000c 	andi	r3,r2,4096
 40086ac:	98000015 	stw	zero,0(r19)
 40086b0:	18004826 	beq	r3,zero,40087d4 <__sflush_r+0x174>
 40086b4:	89801417 	ldw	r6,80(r17)
 40086b8:	10c0010c 	andi	r3,r2,4
 40086bc:	18000626 	beq	r3,zero,40086d8 <__sflush_r+0x78>
 40086c0:	88c00117 	ldw	r3,4(r17)
 40086c4:	88800c17 	ldw	r2,48(r17)
 40086c8:	30cdc83a 	sub	r6,r6,r3
 40086cc:	10000226 	beq	r2,zero,40086d8 <__sflush_r+0x78>
 40086d0:	88800f17 	ldw	r2,60(r17)
 40086d4:	308dc83a 	sub	r6,r6,r2
 40086d8:	89400717 	ldw	r5,28(r17)
 40086dc:	000f883a 	mov	r7,zero
 40086e0:	9809883a 	mov	r4,r19
 40086e4:	403ee83a 	callr	r8
 40086e8:	00ffffc4 	movi	r3,-1
 40086ec:	10c04426 	beq	r2,r3,4008800 <__sflush_r+0x1a0>
 40086f0:	88c0030b 	ldhu	r3,12(r17)
 40086f4:	89000417 	ldw	r4,16(r17)
 40086f8:	88000115 	stw	zero,4(r17)
 40086fc:	197dffcc 	andi	r5,r3,63487
 4008700:	8940030d 	sth	r5,12(r17)
 4008704:	89000015 	stw	r4,0(r17)
 4008708:	18c4000c 	andi	r3,r3,4096
 400870c:	18002c1e 	bne	r3,zero,40087c0 <__sflush_r+0x160>
 4008710:	89400c17 	ldw	r5,48(r17)
 4008714:	9c000015 	stw	r16,0(r19)
 4008718:	28000526 	beq	r5,zero,4008730 <__sflush_r+0xd0>
 400871c:	88801004 	addi	r2,r17,64
 4008720:	28800226 	beq	r5,r2,400872c <__sflush_r+0xcc>
 4008724:	9809883a 	mov	r4,r19
 4008728:	4008dcc0 	call	4008dcc <_free_r>
 400872c:	88000c15 	stw	zero,48(r17)
 4008730:	0005883a 	mov	r2,zero
 4008734:	dfc00417 	ldw	ra,16(sp)
 4008738:	dcc00317 	ldw	r19,12(sp)
 400873c:	dc800217 	ldw	r18,8(sp)
 4008740:	dc400117 	ldw	r17,4(sp)
 4008744:	dc000017 	ldw	r16,0(sp)
 4008748:	dec00504 	addi	sp,sp,20
 400874c:	f800283a 	ret
 4008750:	2c800417 	ldw	r18,16(r5)
 4008754:	903ff626 	beq	r18,zero,4008730 <__alt_data_end+0xfc008730>
 4008758:	2c000017 	ldw	r16,0(r5)
 400875c:	108000cc 	andi	r2,r2,3
 4008760:	2c800015 	stw	r18,0(r5)
 4008764:	84a1c83a 	sub	r16,r16,r18
 4008768:	1000131e 	bne	r2,zero,40087b8 <__sflush_r+0x158>
 400876c:	28800517 	ldw	r2,20(r5)
 4008770:	88800215 	stw	r2,8(r17)
 4008774:	04000316 	blt	zero,r16,4008784 <__sflush_r+0x124>
 4008778:	003fed06 	br	4008730 <__alt_data_end+0xfc008730>
 400877c:	90a5883a 	add	r18,r18,r2
 4008780:	043feb0e 	bge	zero,r16,4008730 <__alt_data_end+0xfc008730>
 4008784:	88800917 	ldw	r2,36(r17)
 4008788:	89400717 	ldw	r5,28(r17)
 400878c:	800f883a 	mov	r7,r16
 4008790:	900d883a 	mov	r6,r18
 4008794:	9809883a 	mov	r4,r19
 4008798:	103ee83a 	callr	r2
 400879c:	80a1c83a 	sub	r16,r16,r2
 40087a0:	00bff616 	blt	zero,r2,400877c <__alt_data_end+0xfc00877c>
 40087a4:	88c0030b 	ldhu	r3,12(r17)
 40087a8:	00bfffc4 	movi	r2,-1
 40087ac:	18c01014 	ori	r3,r3,64
 40087b0:	88c0030d 	sth	r3,12(r17)
 40087b4:	003fdf06 	br	4008734 <__alt_data_end+0xfc008734>
 40087b8:	0005883a 	mov	r2,zero
 40087bc:	003fec06 	br	4008770 <__alt_data_end+0xfc008770>
 40087c0:	88801415 	stw	r2,80(r17)
 40087c4:	003fd206 	br	4008710 <__alt_data_end+0xfc008710>
 40087c8:	28c00f17 	ldw	r3,60(r5)
 40087cc:	00ffb316 	blt	zero,r3,400869c <__alt_data_end+0xfc00869c>
 40087d0:	003fd706 	br	4008730 <__alt_data_end+0xfc008730>
 40087d4:	89400717 	ldw	r5,28(r17)
 40087d8:	000d883a 	mov	r6,zero
 40087dc:	01c00044 	movi	r7,1
 40087e0:	9809883a 	mov	r4,r19
 40087e4:	403ee83a 	callr	r8
 40087e8:	100d883a 	mov	r6,r2
 40087ec:	00bfffc4 	movi	r2,-1
 40087f0:	30801426 	beq	r6,r2,4008844 <__sflush_r+0x1e4>
 40087f4:	8880030b 	ldhu	r2,12(r17)
 40087f8:	8a000a17 	ldw	r8,40(r17)
 40087fc:	003fae06 	br	40086b8 <__alt_data_end+0xfc0086b8>
 4008800:	98c00017 	ldw	r3,0(r19)
 4008804:	183fba26 	beq	r3,zero,40086f0 <__alt_data_end+0xfc0086f0>
 4008808:	01000744 	movi	r4,29
 400880c:	19000626 	beq	r3,r4,4008828 <__sflush_r+0x1c8>
 4008810:	01000584 	movi	r4,22
 4008814:	19000426 	beq	r3,r4,4008828 <__sflush_r+0x1c8>
 4008818:	88c0030b 	ldhu	r3,12(r17)
 400881c:	18c01014 	ori	r3,r3,64
 4008820:	88c0030d 	sth	r3,12(r17)
 4008824:	003fc306 	br	4008734 <__alt_data_end+0xfc008734>
 4008828:	8880030b 	ldhu	r2,12(r17)
 400882c:	88c00417 	ldw	r3,16(r17)
 4008830:	88000115 	stw	zero,4(r17)
 4008834:	10bdffcc 	andi	r2,r2,63487
 4008838:	8880030d 	sth	r2,12(r17)
 400883c:	88c00015 	stw	r3,0(r17)
 4008840:	003fb306 	br	4008710 <__alt_data_end+0xfc008710>
 4008844:	98800017 	ldw	r2,0(r19)
 4008848:	103fea26 	beq	r2,zero,40087f4 <__alt_data_end+0xfc0087f4>
 400884c:	00c00744 	movi	r3,29
 4008850:	10c00226 	beq	r2,r3,400885c <__sflush_r+0x1fc>
 4008854:	00c00584 	movi	r3,22
 4008858:	10c0031e 	bne	r2,r3,4008868 <__sflush_r+0x208>
 400885c:	9c000015 	stw	r16,0(r19)
 4008860:	0005883a 	mov	r2,zero
 4008864:	003fb306 	br	4008734 <__alt_data_end+0xfc008734>
 4008868:	88c0030b 	ldhu	r3,12(r17)
 400886c:	3005883a 	mov	r2,r6
 4008870:	18c01014 	ori	r3,r3,64
 4008874:	88c0030d 	sth	r3,12(r17)
 4008878:	003fae06 	br	4008734 <__alt_data_end+0xfc008734>

0400887c <_fflush_r>:
 400887c:	defffd04 	addi	sp,sp,-12
 4008880:	dc000115 	stw	r16,4(sp)
 4008884:	dfc00215 	stw	ra,8(sp)
 4008888:	2021883a 	mov	r16,r4
 400888c:	20000226 	beq	r4,zero,4008898 <_fflush_r+0x1c>
 4008890:	20800e17 	ldw	r2,56(r4)
 4008894:	10000c26 	beq	r2,zero,40088c8 <_fflush_r+0x4c>
 4008898:	2880030f 	ldh	r2,12(r5)
 400889c:	1000051e 	bne	r2,zero,40088b4 <_fflush_r+0x38>
 40088a0:	0005883a 	mov	r2,zero
 40088a4:	dfc00217 	ldw	ra,8(sp)
 40088a8:	dc000117 	ldw	r16,4(sp)
 40088ac:	dec00304 	addi	sp,sp,12
 40088b0:	f800283a 	ret
 40088b4:	8009883a 	mov	r4,r16
 40088b8:	dfc00217 	ldw	ra,8(sp)
 40088bc:	dc000117 	ldw	r16,4(sp)
 40088c0:	dec00304 	addi	sp,sp,12
 40088c4:	40086601 	jmpi	4008660 <__sflush_r>
 40088c8:	d9400015 	stw	r5,0(sp)
 40088cc:	4008c580 	call	4008c58 <__sinit>
 40088d0:	d9400017 	ldw	r5,0(sp)
 40088d4:	003ff006 	br	4008898 <__alt_data_end+0xfc008898>

040088d8 <fflush>:
 40088d8:	20000526 	beq	r4,zero,40088f0 <fflush+0x18>
 40088dc:	00810074 	movhi	r2,1025
 40088e0:	109d1f04 	addi	r2,r2,29820
 40088e4:	200b883a 	mov	r5,r4
 40088e8:	11000017 	ldw	r4,0(r2)
 40088ec:	400887c1 	jmpi	400887c <_fflush_r>
 40088f0:	00810074 	movhi	r2,1025
 40088f4:	109d1e04 	addi	r2,r2,29816
 40088f8:	11000017 	ldw	r4,0(r2)
 40088fc:	01410074 	movhi	r5,1025
 4008900:	29621f04 	addi	r5,r5,-30596
 4008904:	400965c1 	jmpi	400965c <_fwalk_reent>

04008908 <__fp_unlock>:
 4008908:	0005883a 	mov	r2,zero
 400890c:	f800283a 	ret

04008910 <_cleanup_r>:
 4008910:	01410074 	movhi	r5,1025
 4008914:	29733304 	addi	r5,r5,-13108
 4008918:	400965c1 	jmpi	400965c <_fwalk_reent>

0400891c <__sinit.part.1>:
 400891c:	defff704 	addi	sp,sp,-36
 4008920:	00c10074 	movhi	r3,1025
 4008924:	dfc00815 	stw	ra,32(sp)
 4008928:	ddc00715 	stw	r23,28(sp)
 400892c:	dd800615 	stw	r22,24(sp)
 4008930:	dd400515 	stw	r21,20(sp)
 4008934:	dd000415 	stw	r20,16(sp)
 4008938:	dcc00315 	stw	r19,12(sp)
 400893c:	dc800215 	stw	r18,8(sp)
 4008940:	dc400115 	stw	r17,4(sp)
 4008944:	dc000015 	stw	r16,0(sp)
 4008948:	18e24404 	addi	r3,r3,-30448
 400894c:	24000117 	ldw	r16,4(r4)
 4008950:	20c00f15 	stw	r3,60(r4)
 4008954:	2080bb04 	addi	r2,r4,748
 4008958:	00c000c4 	movi	r3,3
 400895c:	20c0b915 	stw	r3,740(r4)
 4008960:	2080ba15 	stw	r2,744(r4)
 4008964:	2000b815 	stw	zero,736(r4)
 4008968:	05c00204 	movi	r23,8
 400896c:	00800104 	movi	r2,4
 4008970:	2025883a 	mov	r18,r4
 4008974:	b80d883a 	mov	r6,r23
 4008978:	81001704 	addi	r4,r16,92
 400897c:	000b883a 	mov	r5,zero
 4008980:	80000015 	stw	zero,0(r16)
 4008984:	80000115 	stw	zero,4(r16)
 4008988:	80000215 	stw	zero,8(r16)
 400898c:	8080030d 	sth	r2,12(r16)
 4008990:	80001915 	stw	zero,100(r16)
 4008994:	8000038d 	sth	zero,14(r16)
 4008998:	80000415 	stw	zero,16(r16)
 400899c:	80000515 	stw	zero,20(r16)
 40089a0:	80000615 	stw	zero,24(r16)
 40089a4:	4009bf80 	call	4009bf8 <memset>
 40089a8:	05810074 	movhi	r22,1025
 40089ac:	94400217 	ldw	r17,8(r18)
 40089b0:	05410074 	movhi	r21,1025
 40089b4:	05010074 	movhi	r20,1025
 40089b8:	04c10074 	movhi	r19,1025
 40089bc:	b5acbd04 	addi	r22,r22,-19724
 40089c0:	ad6cd404 	addi	r21,r21,-19632
 40089c4:	a52cf304 	addi	r20,r20,-19508
 40089c8:	9ced0a04 	addi	r19,r19,-19416
 40089cc:	85800815 	stw	r22,32(r16)
 40089d0:	85400915 	stw	r21,36(r16)
 40089d4:	85000a15 	stw	r20,40(r16)
 40089d8:	84c00b15 	stw	r19,44(r16)
 40089dc:	84000715 	stw	r16,28(r16)
 40089e0:	00800284 	movi	r2,10
 40089e4:	8880030d 	sth	r2,12(r17)
 40089e8:	00800044 	movi	r2,1
 40089ec:	b80d883a 	mov	r6,r23
 40089f0:	89001704 	addi	r4,r17,92
 40089f4:	000b883a 	mov	r5,zero
 40089f8:	88000015 	stw	zero,0(r17)
 40089fc:	88000115 	stw	zero,4(r17)
 4008a00:	88000215 	stw	zero,8(r17)
 4008a04:	88001915 	stw	zero,100(r17)
 4008a08:	8880038d 	sth	r2,14(r17)
 4008a0c:	88000415 	stw	zero,16(r17)
 4008a10:	88000515 	stw	zero,20(r17)
 4008a14:	88000615 	stw	zero,24(r17)
 4008a18:	4009bf80 	call	4009bf8 <memset>
 4008a1c:	94000317 	ldw	r16,12(r18)
 4008a20:	00800484 	movi	r2,18
 4008a24:	8c400715 	stw	r17,28(r17)
 4008a28:	8d800815 	stw	r22,32(r17)
 4008a2c:	8d400915 	stw	r21,36(r17)
 4008a30:	8d000a15 	stw	r20,40(r17)
 4008a34:	8cc00b15 	stw	r19,44(r17)
 4008a38:	8080030d 	sth	r2,12(r16)
 4008a3c:	00800084 	movi	r2,2
 4008a40:	80000015 	stw	zero,0(r16)
 4008a44:	80000115 	stw	zero,4(r16)
 4008a48:	80000215 	stw	zero,8(r16)
 4008a4c:	80001915 	stw	zero,100(r16)
 4008a50:	8080038d 	sth	r2,14(r16)
 4008a54:	80000415 	stw	zero,16(r16)
 4008a58:	80000515 	stw	zero,20(r16)
 4008a5c:	80000615 	stw	zero,24(r16)
 4008a60:	b80d883a 	mov	r6,r23
 4008a64:	000b883a 	mov	r5,zero
 4008a68:	81001704 	addi	r4,r16,92
 4008a6c:	4009bf80 	call	4009bf8 <memset>
 4008a70:	00800044 	movi	r2,1
 4008a74:	84000715 	stw	r16,28(r16)
 4008a78:	85800815 	stw	r22,32(r16)
 4008a7c:	85400915 	stw	r21,36(r16)
 4008a80:	85000a15 	stw	r20,40(r16)
 4008a84:	84c00b15 	stw	r19,44(r16)
 4008a88:	90800e15 	stw	r2,56(r18)
 4008a8c:	dfc00817 	ldw	ra,32(sp)
 4008a90:	ddc00717 	ldw	r23,28(sp)
 4008a94:	dd800617 	ldw	r22,24(sp)
 4008a98:	dd400517 	ldw	r21,20(sp)
 4008a9c:	dd000417 	ldw	r20,16(sp)
 4008aa0:	dcc00317 	ldw	r19,12(sp)
 4008aa4:	dc800217 	ldw	r18,8(sp)
 4008aa8:	dc400117 	ldw	r17,4(sp)
 4008aac:	dc000017 	ldw	r16,0(sp)
 4008ab0:	dec00904 	addi	sp,sp,36
 4008ab4:	f800283a 	ret

04008ab8 <__fp_lock>:
 4008ab8:	0005883a 	mov	r2,zero
 4008abc:	f800283a 	ret

04008ac0 <__sfmoreglue>:
 4008ac0:	defffc04 	addi	sp,sp,-16
 4008ac4:	dc400115 	stw	r17,4(sp)
 4008ac8:	2c7fffc4 	addi	r17,r5,-1
 4008acc:	8c401a24 	muli	r17,r17,104
 4008ad0:	dc800215 	stw	r18,8(sp)
 4008ad4:	2825883a 	mov	r18,r5
 4008ad8:	89401d04 	addi	r5,r17,116
 4008adc:	dc000015 	stw	r16,0(sp)
 4008ae0:	dfc00315 	stw	ra,12(sp)
 4008ae4:	4003e340 	call	4003e34 <_malloc_r>
 4008ae8:	1021883a 	mov	r16,r2
 4008aec:	10000726 	beq	r2,zero,4008b0c <__sfmoreglue+0x4c>
 4008af0:	11000304 	addi	r4,r2,12
 4008af4:	10000015 	stw	zero,0(r2)
 4008af8:	14800115 	stw	r18,4(r2)
 4008afc:	11000215 	stw	r4,8(r2)
 4008b00:	89801a04 	addi	r6,r17,104
 4008b04:	000b883a 	mov	r5,zero
 4008b08:	4009bf80 	call	4009bf8 <memset>
 4008b0c:	8005883a 	mov	r2,r16
 4008b10:	dfc00317 	ldw	ra,12(sp)
 4008b14:	dc800217 	ldw	r18,8(sp)
 4008b18:	dc400117 	ldw	r17,4(sp)
 4008b1c:	dc000017 	ldw	r16,0(sp)
 4008b20:	dec00404 	addi	sp,sp,16
 4008b24:	f800283a 	ret

04008b28 <__sfp>:
 4008b28:	defffb04 	addi	sp,sp,-20
 4008b2c:	dc000015 	stw	r16,0(sp)
 4008b30:	04010074 	movhi	r16,1025
 4008b34:	841d1e04 	addi	r16,r16,29816
 4008b38:	dcc00315 	stw	r19,12(sp)
 4008b3c:	2027883a 	mov	r19,r4
 4008b40:	81000017 	ldw	r4,0(r16)
 4008b44:	dfc00415 	stw	ra,16(sp)
 4008b48:	dc800215 	stw	r18,8(sp)
 4008b4c:	20800e17 	ldw	r2,56(r4)
 4008b50:	dc400115 	stw	r17,4(sp)
 4008b54:	1000021e 	bne	r2,zero,4008b60 <__sfp+0x38>
 4008b58:	400891c0 	call	400891c <__sinit.part.1>
 4008b5c:	81000017 	ldw	r4,0(r16)
 4008b60:	2480b804 	addi	r18,r4,736
 4008b64:	047fffc4 	movi	r17,-1
 4008b68:	91000117 	ldw	r4,4(r18)
 4008b6c:	94000217 	ldw	r16,8(r18)
 4008b70:	213fffc4 	addi	r4,r4,-1
 4008b74:	20000a16 	blt	r4,zero,4008ba0 <__sfp+0x78>
 4008b78:	8080030f 	ldh	r2,12(r16)
 4008b7c:	10000c26 	beq	r2,zero,4008bb0 <__sfp+0x88>
 4008b80:	80c01d04 	addi	r3,r16,116
 4008b84:	00000206 	br	4008b90 <__sfp+0x68>
 4008b88:	18bfe60f 	ldh	r2,-104(r3)
 4008b8c:	10000826 	beq	r2,zero,4008bb0 <__sfp+0x88>
 4008b90:	213fffc4 	addi	r4,r4,-1
 4008b94:	1c3ffd04 	addi	r16,r3,-12
 4008b98:	18c01a04 	addi	r3,r3,104
 4008b9c:	247ffa1e 	bne	r4,r17,4008b88 <__alt_data_end+0xfc008b88>
 4008ba0:	90800017 	ldw	r2,0(r18)
 4008ba4:	10001d26 	beq	r2,zero,4008c1c <__sfp+0xf4>
 4008ba8:	1025883a 	mov	r18,r2
 4008bac:	003fee06 	br	4008b68 <__alt_data_end+0xfc008b68>
 4008bb0:	00bfffc4 	movi	r2,-1
 4008bb4:	8080038d 	sth	r2,14(r16)
 4008bb8:	00800044 	movi	r2,1
 4008bbc:	8080030d 	sth	r2,12(r16)
 4008bc0:	80001915 	stw	zero,100(r16)
 4008bc4:	80000015 	stw	zero,0(r16)
 4008bc8:	80000215 	stw	zero,8(r16)
 4008bcc:	80000115 	stw	zero,4(r16)
 4008bd0:	80000415 	stw	zero,16(r16)
 4008bd4:	80000515 	stw	zero,20(r16)
 4008bd8:	80000615 	stw	zero,24(r16)
 4008bdc:	01800204 	movi	r6,8
 4008be0:	000b883a 	mov	r5,zero
 4008be4:	81001704 	addi	r4,r16,92
 4008be8:	4009bf80 	call	4009bf8 <memset>
 4008bec:	8005883a 	mov	r2,r16
 4008bf0:	80000c15 	stw	zero,48(r16)
 4008bf4:	80000d15 	stw	zero,52(r16)
 4008bf8:	80001115 	stw	zero,68(r16)
 4008bfc:	80001215 	stw	zero,72(r16)
 4008c00:	dfc00417 	ldw	ra,16(sp)
 4008c04:	dcc00317 	ldw	r19,12(sp)
 4008c08:	dc800217 	ldw	r18,8(sp)
 4008c0c:	dc400117 	ldw	r17,4(sp)
 4008c10:	dc000017 	ldw	r16,0(sp)
 4008c14:	dec00504 	addi	sp,sp,20
 4008c18:	f800283a 	ret
 4008c1c:	01400104 	movi	r5,4
 4008c20:	9809883a 	mov	r4,r19
 4008c24:	4008ac00 	call	4008ac0 <__sfmoreglue>
 4008c28:	90800015 	stw	r2,0(r18)
 4008c2c:	103fde1e 	bne	r2,zero,4008ba8 <__alt_data_end+0xfc008ba8>
 4008c30:	00800304 	movi	r2,12
 4008c34:	98800015 	stw	r2,0(r19)
 4008c38:	0005883a 	mov	r2,zero
 4008c3c:	003ff006 	br	4008c00 <__alt_data_end+0xfc008c00>

04008c40 <_cleanup>:
 4008c40:	00810074 	movhi	r2,1025
 4008c44:	109d1e04 	addi	r2,r2,29816
 4008c48:	11000017 	ldw	r4,0(r2)
 4008c4c:	01410074 	movhi	r5,1025
 4008c50:	29733304 	addi	r5,r5,-13108
 4008c54:	400965c1 	jmpi	400965c <_fwalk_reent>

04008c58 <__sinit>:
 4008c58:	20800e17 	ldw	r2,56(r4)
 4008c5c:	10000126 	beq	r2,zero,4008c64 <__sinit+0xc>
 4008c60:	f800283a 	ret
 4008c64:	400891c1 	jmpi	400891c <__sinit.part.1>

04008c68 <__sfp_lock_acquire>:
 4008c68:	f800283a 	ret

04008c6c <__sfp_lock_release>:
 4008c6c:	f800283a 	ret

04008c70 <__sinit_lock_acquire>:
 4008c70:	f800283a 	ret

04008c74 <__sinit_lock_release>:
 4008c74:	f800283a 	ret

04008c78 <__fp_lock_all>:
 4008c78:	00810074 	movhi	r2,1025
 4008c7c:	109d1f04 	addi	r2,r2,29820
 4008c80:	11000017 	ldw	r4,0(r2)
 4008c84:	01410074 	movhi	r5,1025
 4008c88:	2962ae04 	addi	r5,r5,-30024
 4008c8c:	40095981 	jmpi	4009598 <_fwalk>

04008c90 <__fp_unlock_all>:
 4008c90:	00810074 	movhi	r2,1025
 4008c94:	109d1f04 	addi	r2,r2,29820
 4008c98:	11000017 	ldw	r4,0(r2)
 4008c9c:	01410074 	movhi	r5,1025
 4008ca0:	29624204 	addi	r5,r5,-30456
 4008ca4:	40095981 	jmpi	4009598 <_fwalk>

04008ca8 <_malloc_trim_r>:
 4008ca8:	defffb04 	addi	sp,sp,-20
 4008cac:	dcc00315 	stw	r19,12(sp)
 4008cb0:	04c10074 	movhi	r19,1025
 4008cb4:	dc800215 	stw	r18,8(sp)
 4008cb8:	dc400115 	stw	r17,4(sp)
 4008cbc:	dc000015 	stw	r16,0(sp)
 4008cc0:	dfc00415 	stw	ra,16(sp)
 4008cc4:	2821883a 	mov	r16,r5
 4008cc8:	9cd65c04 	addi	r19,r19,22896
 4008ccc:	2025883a 	mov	r18,r4
 4008cd0:	4010ab80 	call	4010ab8 <__malloc_lock>
 4008cd4:	98800217 	ldw	r2,8(r19)
 4008cd8:	14400117 	ldw	r17,4(r2)
 4008cdc:	00bfff04 	movi	r2,-4
 4008ce0:	88a2703a 	and	r17,r17,r2
 4008ce4:	8c21c83a 	sub	r16,r17,r16
 4008ce8:	8403fbc4 	addi	r16,r16,4079
 4008cec:	8020d33a 	srli	r16,r16,12
 4008cf0:	0083ffc4 	movi	r2,4095
 4008cf4:	843fffc4 	addi	r16,r16,-1
 4008cf8:	8020933a 	slli	r16,r16,12
 4008cfc:	1400060e 	bge	r2,r16,4008d18 <_malloc_trim_r+0x70>
 4008d00:	000b883a 	mov	r5,zero
 4008d04:	9009883a 	mov	r4,r18
 4008d08:	40048c80 	call	40048c8 <_sbrk_r>
 4008d0c:	98c00217 	ldw	r3,8(r19)
 4008d10:	1c47883a 	add	r3,r3,r17
 4008d14:	10c00a26 	beq	r2,r3,4008d40 <_malloc_trim_r+0x98>
 4008d18:	9009883a 	mov	r4,r18
 4008d1c:	4010adc0 	call	4010adc <__malloc_unlock>
 4008d20:	0005883a 	mov	r2,zero
 4008d24:	dfc00417 	ldw	ra,16(sp)
 4008d28:	dcc00317 	ldw	r19,12(sp)
 4008d2c:	dc800217 	ldw	r18,8(sp)
 4008d30:	dc400117 	ldw	r17,4(sp)
 4008d34:	dc000017 	ldw	r16,0(sp)
 4008d38:	dec00504 	addi	sp,sp,20
 4008d3c:	f800283a 	ret
 4008d40:	040bc83a 	sub	r5,zero,r16
 4008d44:	9009883a 	mov	r4,r18
 4008d48:	40048c80 	call	40048c8 <_sbrk_r>
 4008d4c:	00ffffc4 	movi	r3,-1
 4008d50:	10c00d26 	beq	r2,r3,4008d88 <_malloc_trim_r+0xe0>
 4008d54:	00c100b4 	movhi	r3,1026
 4008d58:	18e42a04 	addi	r3,r3,-28504
 4008d5c:	18800017 	ldw	r2,0(r3)
 4008d60:	99000217 	ldw	r4,8(r19)
 4008d64:	8c23c83a 	sub	r17,r17,r16
 4008d68:	8c400054 	ori	r17,r17,1
 4008d6c:	1421c83a 	sub	r16,r2,r16
 4008d70:	24400115 	stw	r17,4(r4)
 4008d74:	9009883a 	mov	r4,r18
 4008d78:	1c000015 	stw	r16,0(r3)
 4008d7c:	4010adc0 	call	4010adc <__malloc_unlock>
 4008d80:	00800044 	movi	r2,1
 4008d84:	003fe706 	br	4008d24 <__alt_data_end+0xfc008d24>
 4008d88:	000b883a 	mov	r5,zero
 4008d8c:	9009883a 	mov	r4,r18
 4008d90:	40048c80 	call	40048c8 <_sbrk_r>
 4008d94:	99000217 	ldw	r4,8(r19)
 4008d98:	014003c4 	movi	r5,15
 4008d9c:	1107c83a 	sub	r3,r2,r4
 4008da0:	28ffdd0e 	bge	r5,r3,4008d18 <__alt_data_end+0xfc008d18>
 4008da4:	01410074 	movhi	r5,1025
 4008da8:	295d1c04 	addi	r5,r5,29808
 4008dac:	29400017 	ldw	r5,0(r5)
 4008db0:	18c00054 	ori	r3,r3,1
 4008db4:	20c00115 	stw	r3,4(r4)
 4008db8:	00c100b4 	movhi	r3,1026
 4008dbc:	1145c83a 	sub	r2,r2,r5
 4008dc0:	18e42a04 	addi	r3,r3,-28504
 4008dc4:	18800015 	stw	r2,0(r3)
 4008dc8:	003fd306 	br	4008d18 <__alt_data_end+0xfc008d18>

04008dcc <_free_r>:
 4008dcc:	28004126 	beq	r5,zero,4008ed4 <_free_r+0x108>
 4008dd0:	defffd04 	addi	sp,sp,-12
 4008dd4:	dc400115 	stw	r17,4(sp)
 4008dd8:	dc000015 	stw	r16,0(sp)
 4008ddc:	2023883a 	mov	r17,r4
 4008de0:	2821883a 	mov	r16,r5
 4008de4:	dfc00215 	stw	ra,8(sp)
 4008de8:	4010ab80 	call	4010ab8 <__malloc_lock>
 4008dec:	81ffff17 	ldw	r7,-4(r16)
 4008df0:	00bfff84 	movi	r2,-2
 4008df4:	01010074 	movhi	r4,1025
 4008df8:	81bffe04 	addi	r6,r16,-8
 4008dfc:	3884703a 	and	r2,r7,r2
 4008e00:	21165c04 	addi	r4,r4,22896
 4008e04:	308b883a 	add	r5,r6,r2
 4008e08:	2a400117 	ldw	r9,4(r5)
 4008e0c:	22000217 	ldw	r8,8(r4)
 4008e10:	00ffff04 	movi	r3,-4
 4008e14:	48c6703a 	and	r3,r9,r3
 4008e18:	2a005726 	beq	r5,r8,4008f78 <_free_r+0x1ac>
 4008e1c:	28c00115 	stw	r3,4(r5)
 4008e20:	39c0004c 	andi	r7,r7,1
 4008e24:	3800091e 	bne	r7,zero,4008e4c <_free_r+0x80>
 4008e28:	823ffe17 	ldw	r8,-8(r16)
 4008e2c:	22400204 	addi	r9,r4,8
 4008e30:	320dc83a 	sub	r6,r6,r8
 4008e34:	31c00217 	ldw	r7,8(r6)
 4008e38:	1205883a 	add	r2,r2,r8
 4008e3c:	3a406526 	beq	r7,r9,4008fd4 <_free_r+0x208>
 4008e40:	32000317 	ldw	r8,12(r6)
 4008e44:	3a000315 	stw	r8,12(r7)
 4008e48:	41c00215 	stw	r7,8(r8)
 4008e4c:	28cf883a 	add	r7,r5,r3
 4008e50:	39c00117 	ldw	r7,4(r7)
 4008e54:	39c0004c 	andi	r7,r7,1
 4008e58:	38003a26 	beq	r7,zero,4008f44 <_free_r+0x178>
 4008e5c:	10c00054 	ori	r3,r2,1
 4008e60:	30c00115 	stw	r3,4(r6)
 4008e64:	3087883a 	add	r3,r6,r2
 4008e68:	18800015 	stw	r2,0(r3)
 4008e6c:	00c07fc4 	movi	r3,511
 4008e70:	18801936 	bltu	r3,r2,4008ed8 <_free_r+0x10c>
 4008e74:	1004d0fa 	srli	r2,r2,3
 4008e78:	01c00044 	movi	r7,1
 4008e7c:	21400117 	ldw	r5,4(r4)
 4008e80:	10c00044 	addi	r3,r2,1
 4008e84:	18c7883a 	add	r3,r3,r3
 4008e88:	1005d0ba 	srai	r2,r2,2
 4008e8c:	18c7883a 	add	r3,r3,r3
 4008e90:	18c7883a 	add	r3,r3,r3
 4008e94:	1907883a 	add	r3,r3,r4
 4008e98:	3884983a 	sll	r2,r7,r2
 4008e9c:	19c00017 	ldw	r7,0(r3)
 4008ea0:	1a3ffe04 	addi	r8,r3,-8
 4008ea4:	1144b03a 	or	r2,r2,r5
 4008ea8:	32000315 	stw	r8,12(r6)
 4008eac:	31c00215 	stw	r7,8(r6)
 4008eb0:	20800115 	stw	r2,4(r4)
 4008eb4:	19800015 	stw	r6,0(r3)
 4008eb8:	39800315 	stw	r6,12(r7)
 4008ebc:	8809883a 	mov	r4,r17
 4008ec0:	dfc00217 	ldw	ra,8(sp)
 4008ec4:	dc400117 	ldw	r17,4(sp)
 4008ec8:	dc000017 	ldw	r16,0(sp)
 4008ecc:	dec00304 	addi	sp,sp,12
 4008ed0:	4010adc1 	jmpi	4010adc <__malloc_unlock>
 4008ed4:	f800283a 	ret
 4008ed8:	100ad27a 	srli	r5,r2,9
 4008edc:	00c00104 	movi	r3,4
 4008ee0:	19404a36 	bltu	r3,r5,400900c <_free_r+0x240>
 4008ee4:	100ad1ba 	srli	r5,r2,6
 4008ee8:	28c00e44 	addi	r3,r5,57
 4008eec:	18c7883a 	add	r3,r3,r3
 4008ef0:	29400e04 	addi	r5,r5,56
 4008ef4:	18c7883a 	add	r3,r3,r3
 4008ef8:	18c7883a 	add	r3,r3,r3
 4008efc:	1909883a 	add	r4,r3,r4
 4008f00:	20c00017 	ldw	r3,0(r4)
 4008f04:	01c10074 	movhi	r7,1025
 4008f08:	213ffe04 	addi	r4,r4,-8
 4008f0c:	39d65c04 	addi	r7,r7,22896
 4008f10:	20c04426 	beq	r4,r3,4009024 <_free_r+0x258>
 4008f14:	01ffff04 	movi	r7,-4
 4008f18:	19400117 	ldw	r5,4(r3)
 4008f1c:	29ca703a 	and	r5,r5,r7
 4008f20:	1140022e 	bgeu	r2,r5,4008f2c <_free_r+0x160>
 4008f24:	18c00217 	ldw	r3,8(r3)
 4008f28:	20fffb1e 	bne	r4,r3,4008f18 <__alt_data_end+0xfc008f18>
 4008f2c:	19000317 	ldw	r4,12(r3)
 4008f30:	31000315 	stw	r4,12(r6)
 4008f34:	30c00215 	stw	r3,8(r6)
 4008f38:	21800215 	stw	r6,8(r4)
 4008f3c:	19800315 	stw	r6,12(r3)
 4008f40:	003fde06 	br	4008ebc <__alt_data_end+0xfc008ebc>
 4008f44:	29c00217 	ldw	r7,8(r5)
 4008f48:	10c5883a 	add	r2,r2,r3
 4008f4c:	00c10074 	movhi	r3,1025
 4008f50:	18d65e04 	addi	r3,r3,22904
 4008f54:	38c03b26 	beq	r7,r3,4009044 <_free_r+0x278>
 4008f58:	2a000317 	ldw	r8,12(r5)
 4008f5c:	11400054 	ori	r5,r2,1
 4008f60:	3087883a 	add	r3,r6,r2
 4008f64:	3a000315 	stw	r8,12(r7)
 4008f68:	41c00215 	stw	r7,8(r8)
 4008f6c:	31400115 	stw	r5,4(r6)
 4008f70:	18800015 	stw	r2,0(r3)
 4008f74:	003fbd06 	br	4008e6c <__alt_data_end+0xfc008e6c>
 4008f78:	39c0004c 	andi	r7,r7,1
 4008f7c:	10c5883a 	add	r2,r2,r3
 4008f80:	3800071e 	bne	r7,zero,4008fa0 <_free_r+0x1d4>
 4008f84:	81fffe17 	ldw	r7,-8(r16)
 4008f88:	31cdc83a 	sub	r6,r6,r7
 4008f8c:	30c00317 	ldw	r3,12(r6)
 4008f90:	31400217 	ldw	r5,8(r6)
 4008f94:	11c5883a 	add	r2,r2,r7
 4008f98:	28c00315 	stw	r3,12(r5)
 4008f9c:	19400215 	stw	r5,8(r3)
 4008fa0:	10c00054 	ori	r3,r2,1
 4008fa4:	30c00115 	stw	r3,4(r6)
 4008fa8:	00c10074 	movhi	r3,1025
 4008fac:	18dd1d04 	addi	r3,r3,29812
 4008fb0:	18c00017 	ldw	r3,0(r3)
 4008fb4:	21800215 	stw	r6,8(r4)
 4008fb8:	10ffc036 	bltu	r2,r3,4008ebc <__alt_data_end+0xfc008ebc>
 4008fbc:	008100b4 	movhi	r2,1026
 4008fc0:	10a41404 	addi	r2,r2,-28592
 4008fc4:	11400017 	ldw	r5,0(r2)
 4008fc8:	8809883a 	mov	r4,r17
 4008fcc:	4008ca80 	call	4008ca8 <_malloc_trim_r>
 4008fd0:	003fba06 	br	4008ebc <__alt_data_end+0xfc008ebc>
 4008fd4:	28c9883a 	add	r4,r5,r3
 4008fd8:	21000117 	ldw	r4,4(r4)
 4008fdc:	2100004c 	andi	r4,r4,1
 4008fe0:	2000391e 	bne	r4,zero,40090c8 <_free_r+0x2fc>
 4008fe4:	29c00217 	ldw	r7,8(r5)
 4008fe8:	29000317 	ldw	r4,12(r5)
 4008fec:	1885883a 	add	r2,r3,r2
 4008ff0:	10c00054 	ori	r3,r2,1
 4008ff4:	39000315 	stw	r4,12(r7)
 4008ff8:	21c00215 	stw	r7,8(r4)
 4008ffc:	30c00115 	stw	r3,4(r6)
 4009000:	308d883a 	add	r6,r6,r2
 4009004:	30800015 	stw	r2,0(r6)
 4009008:	003fac06 	br	4008ebc <__alt_data_end+0xfc008ebc>
 400900c:	00c00504 	movi	r3,20
 4009010:	19401536 	bltu	r3,r5,4009068 <_free_r+0x29c>
 4009014:	28c01704 	addi	r3,r5,92
 4009018:	18c7883a 	add	r3,r3,r3
 400901c:	294016c4 	addi	r5,r5,91
 4009020:	003fb406 	br	4008ef4 <__alt_data_end+0xfc008ef4>
 4009024:	280bd0ba 	srai	r5,r5,2
 4009028:	00c00044 	movi	r3,1
 400902c:	38800117 	ldw	r2,4(r7)
 4009030:	194a983a 	sll	r5,r3,r5
 4009034:	2007883a 	mov	r3,r4
 4009038:	2884b03a 	or	r2,r5,r2
 400903c:	38800115 	stw	r2,4(r7)
 4009040:	003fbb06 	br	4008f30 <__alt_data_end+0xfc008f30>
 4009044:	21800515 	stw	r6,20(r4)
 4009048:	21800415 	stw	r6,16(r4)
 400904c:	10c00054 	ori	r3,r2,1
 4009050:	31c00315 	stw	r7,12(r6)
 4009054:	31c00215 	stw	r7,8(r6)
 4009058:	30c00115 	stw	r3,4(r6)
 400905c:	308d883a 	add	r6,r6,r2
 4009060:	30800015 	stw	r2,0(r6)
 4009064:	003f9506 	br	4008ebc <__alt_data_end+0xfc008ebc>
 4009068:	00c01504 	movi	r3,84
 400906c:	19400536 	bltu	r3,r5,4009084 <_free_r+0x2b8>
 4009070:	100ad33a 	srli	r5,r2,12
 4009074:	28c01bc4 	addi	r3,r5,111
 4009078:	18c7883a 	add	r3,r3,r3
 400907c:	29401b84 	addi	r5,r5,110
 4009080:	003f9c06 	br	4008ef4 <__alt_data_end+0xfc008ef4>
 4009084:	00c05504 	movi	r3,340
 4009088:	19400536 	bltu	r3,r5,40090a0 <_free_r+0x2d4>
 400908c:	100ad3fa 	srli	r5,r2,15
 4009090:	28c01e04 	addi	r3,r5,120
 4009094:	18c7883a 	add	r3,r3,r3
 4009098:	29401dc4 	addi	r5,r5,119
 400909c:	003f9506 	br	4008ef4 <__alt_data_end+0xfc008ef4>
 40090a0:	00c15504 	movi	r3,1364
 40090a4:	19400536 	bltu	r3,r5,40090bc <_free_r+0x2f0>
 40090a8:	100ad4ba 	srli	r5,r2,18
 40090ac:	28c01f44 	addi	r3,r5,125
 40090b0:	18c7883a 	add	r3,r3,r3
 40090b4:	29401f04 	addi	r5,r5,124
 40090b8:	003f8e06 	br	4008ef4 <__alt_data_end+0xfc008ef4>
 40090bc:	00c03f84 	movi	r3,254
 40090c0:	01401f84 	movi	r5,126
 40090c4:	003f8b06 	br	4008ef4 <__alt_data_end+0xfc008ef4>
 40090c8:	10c00054 	ori	r3,r2,1
 40090cc:	30c00115 	stw	r3,4(r6)
 40090d0:	308d883a 	add	r6,r6,r2
 40090d4:	30800015 	stw	r2,0(r6)
 40090d8:	003f7806 	br	4008ebc <__alt_data_end+0xfc008ebc>

040090dc <__sfvwrite_r>:
 40090dc:	30800217 	ldw	r2,8(r6)
 40090e0:	10006726 	beq	r2,zero,4009280 <__sfvwrite_r+0x1a4>
 40090e4:	28c0030b 	ldhu	r3,12(r5)
 40090e8:	defff404 	addi	sp,sp,-48
 40090ec:	dd400715 	stw	r21,28(sp)
 40090f0:	dd000615 	stw	r20,24(sp)
 40090f4:	dc000215 	stw	r16,8(sp)
 40090f8:	dfc00b15 	stw	ra,44(sp)
 40090fc:	df000a15 	stw	fp,40(sp)
 4009100:	ddc00915 	stw	r23,36(sp)
 4009104:	dd800815 	stw	r22,32(sp)
 4009108:	dcc00515 	stw	r19,20(sp)
 400910c:	dc800415 	stw	r18,16(sp)
 4009110:	dc400315 	stw	r17,12(sp)
 4009114:	1880020c 	andi	r2,r3,8
 4009118:	2821883a 	mov	r16,r5
 400911c:	202b883a 	mov	r21,r4
 4009120:	3029883a 	mov	r20,r6
 4009124:	10002726 	beq	r2,zero,40091c4 <__sfvwrite_r+0xe8>
 4009128:	28800417 	ldw	r2,16(r5)
 400912c:	10002526 	beq	r2,zero,40091c4 <__sfvwrite_r+0xe8>
 4009130:	1880008c 	andi	r2,r3,2
 4009134:	a4400017 	ldw	r17,0(r20)
 4009138:	10002a26 	beq	r2,zero,40091e4 <__sfvwrite_r+0x108>
 400913c:	05a00034 	movhi	r22,32768
 4009140:	0027883a 	mov	r19,zero
 4009144:	0025883a 	mov	r18,zero
 4009148:	b5bf0004 	addi	r22,r22,-1024
 400914c:	980d883a 	mov	r6,r19
 4009150:	a809883a 	mov	r4,r21
 4009154:	90004626 	beq	r18,zero,4009270 <__sfvwrite_r+0x194>
 4009158:	900f883a 	mov	r7,r18
 400915c:	b480022e 	bgeu	r22,r18,4009168 <__sfvwrite_r+0x8c>
 4009160:	01e00034 	movhi	r7,32768
 4009164:	39ff0004 	addi	r7,r7,-1024
 4009168:	80800917 	ldw	r2,36(r16)
 400916c:	81400717 	ldw	r5,28(r16)
 4009170:	103ee83a 	callr	r2
 4009174:	0080570e 	bge	zero,r2,40092d4 <__sfvwrite_r+0x1f8>
 4009178:	a0c00217 	ldw	r3,8(r20)
 400917c:	98a7883a 	add	r19,r19,r2
 4009180:	90a5c83a 	sub	r18,r18,r2
 4009184:	1885c83a 	sub	r2,r3,r2
 4009188:	a0800215 	stw	r2,8(r20)
 400918c:	103fef1e 	bne	r2,zero,400914c <__alt_data_end+0xfc00914c>
 4009190:	0005883a 	mov	r2,zero
 4009194:	dfc00b17 	ldw	ra,44(sp)
 4009198:	df000a17 	ldw	fp,40(sp)
 400919c:	ddc00917 	ldw	r23,36(sp)
 40091a0:	dd800817 	ldw	r22,32(sp)
 40091a4:	dd400717 	ldw	r21,28(sp)
 40091a8:	dd000617 	ldw	r20,24(sp)
 40091ac:	dcc00517 	ldw	r19,20(sp)
 40091b0:	dc800417 	ldw	r18,16(sp)
 40091b4:	dc400317 	ldw	r17,12(sp)
 40091b8:	dc000217 	ldw	r16,8(sp)
 40091bc:	dec00c04 	addi	sp,sp,48
 40091c0:	f800283a 	ret
 40091c4:	800b883a 	mov	r5,r16
 40091c8:	a809883a 	mov	r4,r21
 40091cc:	4006c840 	call	4006c84 <__swsetup_r>
 40091d0:	1000eb1e 	bne	r2,zero,4009580 <__sfvwrite_r+0x4a4>
 40091d4:	80c0030b 	ldhu	r3,12(r16)
 40091d8:	a4400017 	ldw	r17,0(r20)
 40091dc:	1880008c 	andi	r2,r3,2
 40091e0:	103fd61e 	bne	r2,zero,400913c <__alt_data_end+0xfc00913c>
 40091e4:	1880004c 	andi	r2,r3,1
 40091e8:	10003f1e 	bne	r2,zero,40092e8 <__sfvwrite_r+0x20c>
 40091ec:	0039883a 	mov	fp,zero
 40091f0:	0025883a 	mov	r18,zero
 40091f4:	90001a26 	beq	r18,zero,4009260 <__sfvwrite_r+0x184>
 40091f8:	1880800c 	andi	r2,r3,512
 40091fc:	84c00217 	ldw	r19,8(r16)
 4009200:	10002126 	beq	r2,zero,4009288 <__sfvwrite_r+0x1ac>
 4009204:	982f883a 	mov	r23,r19
 4009208:	94c09336 	bltu	r18,r19,4009458 <__sfvwrite_r+0x37c>
 400920c:	1881200c 	andi	r2,r3,1152
 4009210:	10009e1e 	bne	r2,zero,400948c <__sfvwrite_r+0x3b0>
 4009214:	81000017 	ldw	r4,0(r16)
 4009218:	b80d883a 	mov	r6,r23
 400921c:	e00b883a 	mov	r5,fp
 4009220:	4009a9c0 	call	4009a9c <memmove>
 4009224:	80c00217 	ldw	r3,8(r16)
 4009228:	81000017 	ldw	r4,0(r16)
 400922c:	9005883a 	mov	r2,r18
 4009230:	1ce7c83a 	sub	r19,r3,r19
 4009234:	25cf883a 	add	r7,r4,r23
 4009238:	84c00215 	stw	r19,8(r16)
 400923c:	81c00015 	stw	r7,0(r16)
 4009240:	a0c00217 	ldw	r3,8(r20)
 4009244:	e0b9883a 	add	fp,fp,r2
 4009248:	90a5c83a 	sub	r18,r18,r2
 400924c:	18a7c83a 	sub	r19,r3,r2
 4009250:	a4c00215 	stw	r19,8(r20)
 4009254:	983fce26 	beq	r19,zero,4009190 <__alt_data_end+0xfc009190>
 4009258:	80c0030b 	ldhu	r3,12(r16)
 400925c:	903fe61e 	bne	r18,zero,40091f8 <__alt_data_end+0xfc0091f8>
 4009260:	8f000017 	ldw	fp,0(r17)
 4009264:	8c800117 	ldw	r18,4(r17)
 4009268:	8c400204 	addi	r17,r17,8
 400926c:	003fe106 	br	40091f4 <__alt_data_end+0xfc0091f4>
 4009270:	8cc00017 	ldw	r19,0(r17)
 4009274:	8c800117 	ldw	r18,4(r17)
 4009278:	8c400204 	addi	r17,r17,8
 400927c:	003fb306 	br	400914c <__alt_data_end+0xfc00914c>
 4009280:	0005883a 	mov	r2,zero
 4009284:	f800283a 	ret
 4009288:	81000017 	ldw	r4,0(r16)
 400928c:	80800417 	ldw	r2,16(r16)
 4009290:	11005736 	bltu	r2,r4,40093f0 <__sfvwrite_r+0x314>
 4009294:	85c00517 	ldw	r23,20(r16)
 4009298:	95c05536 	bltu	r18,r23,40093f0 <__sfvwrite_r+0x314>
 400929c:	00a00034 	movhi	r2,32768
 40092a0:	10bfffc4 	addi	r2,r2,-1
 40092a4:	9009883a 	mov	r4,r18
 40092a8:	1480012e 	bgeu	r2,r18,40092b0 <__sfvwrite_r+0x1d4>
 40092ac:	1009883a 	mov	r4,r2
 40092b0:	b80b883a 	mov	r5,r23
 40092b4:	40030f80 	call	40030f8 <__divsi3>
 40092b8:	15cf383a 	mul	r7,r2,r23
 40092bc:	81400717 	ldw	r5,28(r16)
 40092c0:	80800917 	ldw	r2,36(r16)
 40092c4:	e00d883a 	mov	r6,fp
 40092c8:	a809883a 	mov	r4,r21
 40092cc:	103ee83a 	callr	r2
 40092d0:	00bfdb16 	blt	zero,r2,4009240 <__alt_data_end+0xfc009240>
 40092d4:	8080030b 	ldhu	r2,12(r16)
 40092d8:	10801014 	ori	r2,r2,64
 40092dc:	8080030d 	sth	r2,12(r16)
 40092e0:	00bfffc4 	movi	r2,-1
 40092e4:	003fab06 	br	4009194 <__alt_data_end+0xfc009194>
 40092e8:	0027883a 	mov	r19,zero
 40092ec:	0011883a 	mov	r8,zero
 40092f0:	0039883a 	mov	fp,zero
 40092f4:	0025883a 	mov	r18,zero
 40092f8:	90001f26 	beq	r18,zero,4009378 <__sfvwrite_r+0x29c>
 40092fc:	40005a26 	beq	r8,zero,4009468 <__sfvwrite_r+0x38c>
 4009300:	982d883a 	mov	r22,r19
 4009304:	94c0012e 	bgeu	r18,r19,400930c <__sfvwrite_r+0x230>
 4009308:	902d883a 	mov	r22,r18
 400930c:	81000017 	ldw	r4,0(r16)
 4009310:	80800417 	ldw	r2,16(r16)
 4009314:	b02f883a 	mov	r23,r22
 4009318:	81c00517 	ldw	r7,20(r16)
 400931c:	1100032e 	bgeu	r2,r4,400932c <__sfvwrite_r+0x250>
 4009320:	80c00217 	ldw	r3,8(r16)
 4009324:	38c7883a 	add	r3,r7,r3
 4009328:	1d801816 	blt	r3,r22,400938c <__sfvwrite_r+0x2b0>
 400932c:	b1c03e16 	blt	r22,r7,4009428 <__sfvwrite_r+0x34c>
 4009330:	80800917 	ldw	r2,36(r16)
 4009334:	81400717 	ldw	r5,28(r16)
 4009338:	e00d883a 	mov	r6,fp
 400933c:	da000115 	stw	r8,4(sp)
 4009340:	a809883a 	mov	r4,r21
 4009344:	103ee83a 	callr	r2
 4009348:	102f883a 	mov	r23,r2
 400934c:	da000117 	ldw	r8,4(sp)
 4009350:	00bfe00e 	bge	zero,r2,40092d4 <__alt_data_end+0xfc0092d4>
 4009354:	9de7c83a 	sub	r19,r19,r23
 4009358:	98001f26 	beq	r19,zero,40093d8 <__sfvwrite_r+0x2fc>
 400935c:	a0800217 	ldw	r2,8(r20)
 4009360:	e5f9883a 	add	fp,fp,r23
 4009364:	95e5c83a 	sub	r18,r18,r23
 4009368:	15efc83a 	sub	r23,r2,r23
 400936c:	a5c00215 	stw	r23,8(r20)
 4009370:	b83f8726 	beq	r23,zero,4009190 <__alt_data_end+0xfc009190>
 4009374:	903fe11e 	bne	r18,zero,40092fc <__alt_data_end+0xfc0092fc>
 4009378:	8f000017 	ldw	fp,0(r17)
 400937c:	8c800117 	ldw	r18,4(r17)
 4009380:	0011883a 	mov	r8,zero
 4009384:	8c400204 	addi	r17,r17,8
 4009388:	003fdb06 	br	40092f8 <__alt_data_end+0xfc0092f8>
 400938c:	180d883a 	mov	r6,r3
 4009390:	e00b883a 	mov	r5,fp
 4009394:	da000115 	stw	r8,4(sp)
 4009398:	d8c00015 	stw	r3,0(sp)
 400939c:	4009a9c0 	call	4009a9c <memmove>
 40093a0:	d8c00017 	ldw	r3,0(sp)
 40093a4:	80800017 	ldw	r2,0(r16)
 40093a8:	800b883a 	mov	r5,r16
 40093ac:	a809883a 	mov	r4,r21
 40093b0:	10c5883a 	add	r2,r2,r3
 40093b4:	80800015 	stw	r2,0(r16)
 40093b8:	d8c00015 	stw	r3,0(sp)
 40093bc:	400887c0 	call	400887c <_fflush_r>
 40093c0:	d8c00017 	ldw	r3,0(sp)
 40093c4:	da000117 	ldw	r8,4(sp)
 40093c8:	103fc21e 	bne	r2,zero,40092d4 <__alt_data_end+0xfc0092d4>
 40093cc:	182f883a 	mov	r23,r3
 40093d0:	9de7c83a 	sub	r19,r19,r23
 40093d4:	983fe11e 	bne	r19,zero,400935c <__alt_data_end+0xfc00935c>
 40093d8:	800b883a 	mov	r5,r16
 40093dc:	a809883a 	mov	r4,r21
 40093e0:	400887c0 	call	400887c <_fflush_r>
 40093e4:	103fbb1e 	bne	r2,zero,40092d4 <__alt_data_end+0xfc0092d4>
 40093e8:	0011883a 	mov	r8,zero
 40093ec:	003fdb06 	br	400935c <__alt_data_end+0xfc00935c>
 40093f0:	94c0012e 	bgeu	r18,r19,40093f8 <__sfvwrite_r+0x31c>
 40093f4:	9027883a 	mov	r19,r18
 40093f8:	980d883a 	mov	r6,r19
 40093fc:	e00b883a 	mov	r5,fp
 4009400:	4009a9c0 	call	4009a9c <memmove>
 4009404:	80800217 	ldw	r2,8(r16)
 4009408:	80c00017 	ldw	r3,0(r16)
 400940c:	14c5c83a 	sub	r2,r2,r19
 4009410:	1cc7883a 	add	r3,r3,r19
 4009414:	80800215 	stw	r2,8(r16)
 4009418:	80c00015 	stw	r3,0(r16)
 400941c:	10004326 	beq	r2,zero,400952c <__sfvwrite_r+0x450>
 4009420:	9805883a 	mov	r2,r19
 4009424:	003f8606 	br	4009240 <__alt_data_end+0xfc009240>
 4009428:	b00d883a 	mov	r6,r22
 400942c:	e00b883a 	mov	r5,fp
 4009430:	da000115 	stw	r8,4(sp)
 4009434:	4009a9c0 	call	4009a9c <memmove>
 4009438:	80800217 	ldw	r2,8(r16)
 400943c:	80c00017 	ldw	r3,0(r16)
 4009440:	da000117 	ldw	r8,4(sp)
 4009444:	1585c83a 	sub	r2,r2,r22
 4009448:	1dad883a 	add	r22,r3,r22
 400944c:	80800215 	stw	r2,8(r16)
 4009450:	85800015 	stw	r22,0(r16)
 4009454:	003fbf06 	br	4009354 <__alt_data_end+0xfc009354>
 4009458:	81000017 	ldw	r4,0(r16)
 400945c:	9027883a 	mov	r19,r18
 4009460:	902f883a 	mov	r23,r18
 4009464:	003f6c06 	br	4009218 <__alt_data_end+0xfc009218>
 4009468:	900d883a 	mov	r6,r18
 400946c:	01400284 	movi	r5,10
 4009470:	e009883a 	mov	r4,fp
 4009474:	40099b80 	call	40099b8 <memchr>
 4009478:	10003e26 	beq	r2,zero,4009574 <__sfvwrite_r+0x498>
 400947c:	10800044 	addi	r2,r2,1
 4009480:	1727c83a 	sub	r19,r2,fp
 4009484:	02000044 	movi	r8,1
 4009488:	003f9d06 	br	4009300 <__alt_data_end+0xfc009300>
 400948c:	80800517 	ldw	r2,20(r16)
 4009490:	81400417 	ldw	r5,16(r16)
 4009494:	81c00017 	ldw	r7,0(r16)
 4009498:	10a7883a 	add	r19,r2,r2
 400949c:	9885883a 	add	r2,r19,r2
 40094a0:	1026d7fa 	srli	r19,r2,31
 40094a4:	396dc83a 	sub	r22,r7,r5
 40094a8:	b1000044 	addi	r4,r22,1
 40094ac:	9885883a 	add	r2,r19,r2
 40094b0:	1027d07a 	srai	r19,r2,1
 40094b4:	2485883a 	add	r2,r4,r18
 40094b8:	980d883a 	mov	r6,r19
 40094bc:	9880022e 	bgeu	r19,r2,40094c8 <__sfvwrite_r+0x3ec>
 40094c0:	1027883a 	mov	r19,r2
 40094c4:	100d883a 	mov	r6,r2
 40094c8:	18c1000c 	andi	r3,r3,1024
 40094cc:	18001c26 	beq	r3,zero,4009540 <__sfvwrite_r+0x464>
 40094d0:	300b883a 	mov	r5,r6
 40094d4:	a809883a 	mov	r4,r21
 40094d8:	4003e340 	call	4003e34 <_malloc_r>
 40094dc:	102f883a 	mov	r23,r2
 40094e0:	10002926 	beq	r2,zero,4009588 <__sfvwrite_r+0x4ac>
 40094e4:	81400417 	ldw	r5,16(r16)
 40094e8:	b00d883a 	mov	r6,r22
 40094ec:	1009883a 	mov	r4,r2
 40094f0:	40046400 	call	4004640 <memcpy>
 40094f4:	8080030b 	ldhu	r2,12(r16)
 40094f8:	00fedfc4 	movi	r3,-1153
 40094fc:	10c4703a 	and	r2,r2,r3
 4009500:	10802014 	ori	r2,r2,128
 4009504:	8080030d 	sth	r2,12(r16)
 4009508:	bd89883a 	add	r4,r23,r22
 400950c:	9d8fc83a 	sub	r7,r19,r22
 4009510:	85c00415 	stw	r23,16(r16)
 4009514:	84c00515 	stw	r19,20(r16)
 4009518:	81000015 	stw	r4,0(r16)
 400951c:	9027883a 	mov	r19,r18
 4009520:	81c00215 	stw	r7,8(r16)
 4009524:	902f883a 	mov	r23,r18
 4009528:	003f3b06 	br	4009218 <__alt_data_end+0xfc009218>
 400952c:	800b883a 	mov	r5,r16
 4009530:	a809883a 	mov	r4,r21
 4009534:	400887c0 	call	400887c <_fflush_r>
 4009538:	103fb926 	beq	r2,zero,4009420 <__alt_data_end+0xfc009420>
 400953c:	003f6506 	br	40092d4 <__alt_data_end+0xfc0092d4>
 4009540:	a809883a 	mov	r4,r21
 4009544:	400ad1c0 	call	400ad1c <_realloc_r>
 4009548:	102f883a 	mov	r23,r2
 400954c:	103fee1e 	bne	r2,zero,4009508 <__alt_data_end+0xfc009508>
 4009550:	81400417 	ldw	r5,16(r16)
 4009554:	a809883a 	mov	r4,r21
 4009558:	4008dcc0 	call	4008dcc <_free_r>
 400955c:	8080030b 	ldhu	r2,12(r16)
 4009560:	00ffdfc4 	movi	r3,-129
 4009564:	1884703a 	and	r2,r3,r2
 4009568:	00c00304 	movi	r3,12
 400956c:	a8c00015 	stw	r3,0(r21)
 4009570:	003f5906 	br	40092d8 <__alt_data_end+0xfc0092d8>
 4009574:	94c00044 	addi	r19,r18,1
 4009578:	02000044 	movi	r8,1
 400957c:	003f6006 	br	4009300 <__alt_data_end+0xfc009300>
 4009580:	00bfffc4 	movi	r2,-1
 4009584:	003f0306 	br	4009194 <__alt_data_end+0xfc009194>
 4009588:	00800304 	movi	r2,12
 400958c:	a8800015 	stw	r2,0(r21)
 4009590:	8080030b 	ldhu	r2,12(r16)
 4009594:	003f5006 	br	40092d8 <__alt_data_end+0xfc0092d8>

04009598 <_fwalk>:
 4009598:	defff704 	addi	sp,sp,-36
 400959c:	dd000415 	stw	r20,16(sp)
 40095a0:	dfc00815 	stw	ra,32(sp)
 40095a4:	ddc00715 	stw	r23,28(sp)
 40095a8:	dd800615 	stw	r22,24(sp)
 40095ac:	dd400515 	stw	r21,20(sp)
 40095b0:	dcc00315 	stw	r19,12(sp)
 40095b4:	dc800215 	stw	r18,8(sp)
 40095b8:	dc400115 	stw	r17,4(sp)
 40095bc:	dc000015 	stw	r16,0(sp)
 40095c0:	2500b804 	addi	r20,r4,736
 40095c4:	a0002326 	beq	r20,zero,4009654 <_fwalk+0xbc>
 40095c8:	282b883a 	mov	r21,r5
 40095cc:	002f883a 	mov	r23,zero
 40095d0:	05800044 	movi	r22,1
 40095d4:	04ffffc4 	movi	r19,-1
 40095d8:	a4400117 	ldw	r17,4(r20)
 40095dc:	a4800217 	ldw	r18,8(r20)
 40095e0:	8c7fffc4 	addi	r17,r17,-1
 40095e4:	88000d16 	blt	r17,zero,400961c <_fwalk+0x84>
 40095e8:	94000304 	addi	r16,r18,12
 40095ec:	94800384 	addi	r18,r18,14
 40095f0:	8080000b 	ldhu	r2,0(r16)
 40095f4:	8c7fffc4 	addi	r17,r17,-1
 40095f8:	813ffd04 	addi	r4,r16,-12
 40095fc:	b080042e 	bgeu	r22,r2,4009610 <_fwalk+0x78>
 4009600:	9080000f 	ldh	r2,0(r18)
 4009604:	14c00226 	beq	r2,r19,4009610 <_fwalk+0x78>
 4009608:	a83ee83a 	callr	r21
 400960c:	b8aeb03a 	or	r23,r23,r2
 4009610:	84001a04 	addi	r16,r16,104
 4009614:	94801a04 	addi	r18,r18,104
 4009618:	8cfff51e 	bne	r17,r19,40095f0 <__alt_data_end+0xfc0095f0>
 400961c:	a5000017 	ldw	r20,0(r20)
 4009620:	a03fed1e 	bne	r20,zero,40095d8 <__alt_data_end+0xfc0095d8>
 4009624:	b805883a 	mov	r2,r23
 4009628:	dfc00817 	ldw	ra,32(sp)
 400962c:	ddc00717 	ldw	r23,28(sp)
 4009630:	dd800617 	ldw	r22,24(sp)
 4009634:	dd400517 	ldw	r21,20(sp)
 4009638:	dd000417 	ldw	r20,16(sp)
 400963c:	dcc00317 	ldw	r19,12(sp)
 4009640:	dc800217 	ldw	r18,8(sp)
 4009644:	dc400117 	ldw	r17,4(sp)
 4009648:	dc000017 	ldw	r16,0(sp)
 400964c:	dec00904 	addi	sp,sp,36
 4009650:	f800283a 	ret
 4009654:	002f883a 	mov	r23,zero
 4009658:	003ff206 	br	4009624 <__alt_data_end+0xfc009624>

0400965c <_fwalk_reent>:
 400965c:	defff704 	addi	sp,sp,-36
 4009660:	dd000415 	stw	r20,16(sp)
 4009664:	dfc00815 	stw	ra,32(sp)
 4009668:	ddc00715 	stw	r23,28(sp)
 400966c:	dd800615 	stw	r22,24(sp)
 4009670:	dd400515 	stw	r21,20(sp)
 4009674:	dcc00315 	stw	r19,12(sp)
 4009678:	dc800215 	stw	r18,8(sp)
 400967c:	dc400115 	stw	r17,4(sp)
 4009680:	dc000015 	stw	r16,0(sp)
 4009684:	2500b804 	addi	r20,r4,736
 4009688:	a0002326 	beq	r20,zero,4009718 <_fwalk_reent+0xbc>
 400968c:	282b883a 	mov	r21,r5
 4009690:	2027883a 	mov	r19,r4
 4009694:	002f883a 	mov	r23,zero
 4009698:	05800044 	movi	r22,1
 400969c:	04bfffc4 	movi	r18,-1
 40096a0:	a4400117 	ldw	r17,4(r20)
 40096a4:	a4000217 	ldw	r16,8(r20)
 40096a8:	8c7fffc4 	addi	r17,r17,-1
 40096ac:	88000c16 	blt	r17,zero,40096e0 <_fwalk_reent+0x84>
 40096b0:	84000304 	addi	r16,r16,12
 40096b4:	8080000b 	ldhu	r2,0(r16)
 40096b8:	8c7fffc4 	addi	r17,r17,-1
 40096bc:	817ffd04 	addi	r5,r16,-12
 40096c0:	b080052e 	bgeu	r22,r2,40096d8 <_fwalk_reent+0x7c>
 40096c4:	8080008f 	ldh	r2,2(r16)
 40096c8:	9809883a 	mov	r4,r19
 40096cc:	14800226 	beq	r2,r18,40096d8 <_fwalk_reent+0x7c>
 40096d0:	a83ee83a 	callr	r21
 40096d4:	b8aeb03a 	or	r23,r23,r2
 40096d8:	84001a04 	addi	r16,r16,104
 40096dc:	8cbff51e 	bne	r17,r18,40096b4 <__alt_data_end+0xfc0096b4>
 40096e0:	a5000017 	ldw	r20,0(r20)
 40096e4:	a03fee1e 	bne	r20,zero,40096a0 <__alt_data_end+0xfc0096a0>
 40096e8:	b805883a 	mov	r2,r23
 40096ec:	dfc00817 	ldw	ra,32(sp)
 40096f0:	ddc00717 	ldw	r23,28(sp)
 40096f4:	dd800617 	ldw	r22,24(sp)
 40096f8:	dd400517 	ldw	r21,20(sp)
 40096fc:	dd000417 	ldw	r20,16(sp)
 4009700:	dcc00317 	ldw	r19,12(sp)
 4009704:	dc800217 	ldw	r18,8(sp)
 4009708:	dc400117 	ldw	r17,4(sp)
 400970c:	dc000017 	ldw	r16,0(sp)
 4009710:	dec00904 	addi	sp,sp,36
 4009714:	f800283a 	ret
 4009718:	002f883a 	mov	r23,zero
 400971c:	003ff206 	br	40096e8 <__alt_data_end+0xfc0096e8>

04009720 <_setlocale_r>:
 4009720:	30001b26 	beq	r6,zero,4009790 <_setlocale_r+0x70>
 4009724:	01410074 	movhi	r5,1025
 4009728:	defffe04 	addi	sp,sp,-8
 400972c:	2955e404 	addi	r5,r5,22416
 4009730:	3009883a 	mov	r4,r6
 4009734:	dc000015 	stw	r16,0(sp)
 4009738:	dfc00115 	stw	ra,4(sp)
 400973c:	3021883a 	mov	r16,r6
 4009740:	400b4300 	call	400b430 <strcmp>
 4009744:	1000061e 	bne	r2,zero,4009760 <_setlocale_r+0x40>
 4009748:	00810074 	movhi	r2,1025
 400974c:	1095e304 	addi	r2,r2,22412
 4009750:	dfc00117 	ldw	ra,4(sp)
 4009754:	dc000017 	ldw	r16,0(sp)
 4009758:	dec00204 	addi	sp,sp,8
 400975c:	f800283a 	ret
 4009760:	01410074 	movhi	r5,1025
 4009764:	2955e304 	addi	r5,r5,22412
 4009768:	8009883a 	mov	r4,r16
 400976c:	400b4300 	call	400b430 <strcmp>
 4009770:	103ff526 	beq	r2,zero,4009748 <__alt_data_end+0xfc009748>
 4009774:	01410074 	movhi	r5,1025
 4009778:	2955ce04 	addi	r5,r5,22328
 400977c:	8009883a 	mov	r4,r16
 4009780:	400b4300 	call	400b430 <strcmp>
 4009784:	103ff026 	beq	r2,zero,4009748 <__alt_data_end+0xfc009748>
 4009788:	0005883a 	mov	r2,zero
 400978c:	003ff006 	br	4009750 <__alt_data_end+0xfc009750>
 4009790:	00810074 	movhi	r2,1025
 4009794:	1095e304 	addi	r2,r2,22412
 4009798:	f800283a 	ret

0400979c <__locale_charset>:
 400979c:	00810074 	movhi	r2,1025
 40097a0:	10986f04 	addi	r2,r2,25020
 40097a4:	f800283a 	ret

040097a8 <__locale_mb_cur_max>:
 40097a8:	00810074 	movhi	r2,1025
 40097ac:	109d2004 	addi	r2,r2,29824
 40097b0:	10800017 	ldw	r2,0(r2)
 40097b4:	f800283a 	ret

040097b8 <__locale_msgcharset>:
 40097b8:	00810074 	movhi	r2,1025
 40097bc:	10986704 	addi	r2,r2,24988
 40097c0:	f800283a 	ret

040097c4 <__locale_cjk_lang>:
 40097c4:	0005883a 	mov	r2,zero
 40097c8:	f800283a 	ret

040097cc <_localeconv_r>:
 40097cc:	00810074 	movhi	r2,1025
 40097d0:	10987704 	addi	r2,r2,25052
 40097d4:	f800283a 	ret

040097d8 <setlocale>:
 40097d8:	00810074 	movhi	r2,1025
 40097dc:	109d1f04 	addi	r2,r2,29820
 40097e0:	280d883a 	mov	r6,r5
 40097e4:	200b883a 	mov	r5,r4
 40097e8:	11000017 	ldw	r4,0(r2)
 40097ec:	40097201 	jmpi	4009720 <_setlocale_r>

040097f0 <localeconv>:
 40097f0:	00810074 	movhi	r2,1025
 40097f4:	10987704 	addi	r2,r2,25052
 40097f8:	f800283a 	ret

040097fc <__smakebuf_r>:
 40097fc:	2880030b 	ldhu	r2,12(r5)
 4009800:	10c0008c 	andi	r3,r2,2
 4009804:	1800411e 	bne	r3,zero,400990c <__smakebuf_r+0x110>
 4009808:	deffec04 	addi	sp,sp,-80
 400980c:	dc000f15 	stw	r16,60(sp)
 4009810:	2821883a 	mov	r16,r5
 4009814:	2940038f 	ldh	r5,14(r5)
 4009818:	dc401015 	stw	r17,64(sp)
 400981c:	dfc01315 	stw	ra,76(sp)
 4009820:	dcc01215 	stw	r19,72(sp)
 4009824:	dc801115 	stw	r18,68(sp)
 4009828:	2023883a 	mov	r17,r4
 400982c:	28001c16 	blt	r5,zero,40098a0 <__smakebuf_r+0xa4>
 4009830:	d80d883a 	mov	r6,sp
 4009834:	400cfd80 	call	400cfd8 <_fstat_r>
 4009838:	10001816 	blt	r2,zero,400989c <__smakebuf_r+0xa0>
 400983c:	d8800117 	ldw	r2,4(sp)
 4009840:	00e00014 	movui	r3,32768
 4009844:	10bc000c 	andi	r2,r2,61440
 4009848:	14c80020 	cmpeqi	r19,r2,8192
 400984c:	10c03726 	beq	r2,r3,400992c <__smakebuf_r+0x130>
 4009850:	80c0030b 	ldhu	r3,12(r16)
 4009854:	18c20014 	ori	r3,r3,2048
 4009858:	80c0030d 	sth	r3,12(r16)
 400985c:	00c80004 	movi	r3,8192
 4009860:	10c0521e 	bne	r2,r3,40099ac <__smakebuf_r+0x1b0>
 4009864:	8140038f 	ldh	r5,14(r16)
 4009868:	8809883a 	mov	r4,r17
 400986c:	400d0340 	call	400d034 <_isatty_r>
 4009870:	10004c26 	beq	r2,zero,40099a4 <__smakebuf_r+0x1a8>
 4009874:	8080030b 	ldhu	r2,12(r16)
 4009878:	80c010c4 	addi	r3,r16,67
 400987c:	80c00015 	stw	r3,0(r16)
 4009880:	10800054 	ori	r2,r2,1
 4009884:	8080030d 	sth	r2,12(r16)
 4009888:	00800044 	movi	r2,1
 400988c:	80c00415 	stw	r3,16(r16)
 4009890:	80800515 	stw	r2,20(r16)
 4009894:	04810004 	movi	r18,1024
 4009898:	00000706 	br	40098b8 <__smakebuf_r+0xbc>
 400989c:	8080030b 	ldhu	r2,12(r16)
 40098a0:	10c0200c 	andi	r3,r2,128
 40098a4:	18001f1e 	bne	r3,zero,4009924 <__smakebuf_r+0x128>
 40098a8:	04810004 	movi	r18,1024
 40098ac:	10820014 	ori	r2,r2,2048
 40098b0:	8080030d 	sth	r2,12(r16)
 40098b4:	0027883a 	mov	r19,zero
 40098b8:	900b883a 	mov	r5,r18
 40098bc:	8809883a 	mov	r4,r17
 40098c0:	4003e340 	call	4003e34 <_malloc_r>
 40098c4:	10002c26 	beq	r2,zero,4009978 <__smakebuf_r+0x17c>
 40098c8:	80c0030b 	ldhu	r3,12(r16)
 40098cc:	01010074 	movhi	r4,1025
 40098d0:	21224404 	addi	r4,r4,-30448
 40098d4:	89000f15 	stw	r4,60(r17)
 40098d8:	18c02014 	ori	r3,r3,128
 40098dc:	80c0030d 	sth	r3,12(r16)
 40098e0:	80800015 	stw	r2,0(r16)
 40098e4:	80800415 	stw	r2,16(r16)
 40098e8:	84800515 	stw	r18,20(r16)
 40098ec:	98001a1e 	bne	r19,zero,4009958 <__smakebuf_r+0x15c>
 40098f0:	dfc01317 	ldw	ra,76(sp)
 40098f4:	dcc01217 	ldw	r19,72(sp)
 40098f8:	dc801117 	ldw	r18,68(sp)
 40098fc:	dc401017 	ldw	r17,64(sp)
 4009900:	dc000f17 	ldw	r16,60(sp)
 4009904:	dec01404 	addi	sp,sp,80
 4009908:	f800283a 	ret
 400990c:	288010c4 	addi	r2,r5,67
 4009910:	28800015 	stw	r2,0(r5)
 4009914:	28800415 	stw	r2,16(r5)
 4009918:	00800044 	movi	r2,1
 400991c:	28800515 	stw	r2,20(r5)
 4009920:	f800283a 	ret
 4009924:	04801004 	movi	r18,64
 4009928:	003fe006 	br	40098ac <__alt_data_end+0xfc0098ac>
 400992c:	81000a17 	ldw	r4,40(r16)
 4009930:	00c10074 	movhi	r3,1025
 4009934:	18ecf304 	addi	r3,r3,-19508
 4009938:	20ffc51e 	bne	r4,r3,4009850 <__alt_data_end+0xfc009850>
 400993c:	8080030b 	ldhu	r2,12(r16)
 4009940:	04810004 	movi	r18,1024
 4009944:	84801315 	stw	r18,76(r16)
 4009948:	1484b03a 	or	r2,r2,r18
 400994c:	8080030d 	sth	r2,12(r16)
 4009950:	0027883a 	mov	r19,zero
 4009954:	003fd806 	br	40098b8 <__alt_data_end+0xfc0098b8>
 4009958:	8140038f 	ldh	r5,14(r16)
 400995c:	8809883a 	mov	r4,r17
 4009960:	400d0340 	call	400d034 <_isatty_r>
 4009964:	103fe226 	beq	r2,zero,40098f0 <__alt_data_end+0xfc0098f0>
 4009968:	8080030b 	ldhu	r2,12(r16)
 400996c:	10800054 	ori	r2,r2,1
 4009970:	8080030d 	sth	r2,12(r16)
 4009974:	003fde06 	br	40098f0 <__alt_data_end+0xfc0098f0>
 4009978:	8080030b 	ldhu	r2,12(r16)
 400997c:	10c0800c 	andi	r3,r2,512
 4009980:	183fdb1e 	bne	r3,zero,40098f0 <__alt_data_end+0xfc0098f0>
 4009984:	10800094 	ori	r2,r2,2
 4009988:	80c010c4 	addi	r3,r16,67
 400998c:	8080030d 	sth	r2,12(r16)
 4009990:	00800044 	movi	r2,1
 4009994:	80c00015 	stw	r3,0(r16)
 4009998:	80c00415 	stw	r3,16(r16)
 400999c:	80800515 	stw	r2,20(r16)
 40099a0:	003fd306 	br	40098f0 <__alt_data_end+0xfc0098f0>
 40099a4:	04810004 	movi	r18,1024
 40099a8:	003fc306 	br	40098b8 <__alt_data_end+0xfc0098b8>
 40099ac:	0027883a 	mov	r19,zero
 40099b0:	04810004 	movi	r18,1024
 40099b4:	003fc006 	br	40098b8 <__alt_data_end+0xfc0098b8>

040099b8 <memchr>:
 40099b8:	208000cc 	andi	r2,r4,3
 40099bc:	280f883a 	mov	r7,r5
 40099c0:	10003426 	beq	r2,zero,4009a94 <memchr+0xdc>
 40099c4:	30bfffc4 	addi	r2,r6,-1
 40099c8:	30001a26 	beq	r6,zero,4009a34 <memchr+0x7c>
 40099cc:	20c00003 	ldbu	r3,0(r4)
 40099d0:	29803fcc 	andi	r6,r5,255
 40099d4:	30c0051e 	bne	r6,r3,40099ec <memchr+0x34>
 40099d8:	00001806 	br	4009a3c <memchr+0x84>
 40099dc:	10001526 	beq	r2,zero,4009a34 <memchr+0x7c>
 40099e0:	20c00003 	ldbu	r3,0(r4)
 40099e4:	10bfffc4 	addi	r2,r2,-1
 40099e8:	30c01426 	beq	r6,r3,4009a3c <memchr+0x84>
 40099ec:	21000044 	addi	r4,r4,1
 40099f0:	20c000cc 	andi	r3,r4,3
 40099f4:	183ff91e 	bne	r3,zero,40099dc <__alt_data_end+0xfc0099dc>
 40099f8:	020000c4 	movi	r8,3
 40099fc:	40801136 	bltu	r8,r2,4009a44 <memchr+0x8c>
 4009a00:	10000c26 	beq	r2,zero,4009a34 <memchr+0x7c>
 4009a04:	20c00003 	ldbu	r3,0(r4)
 4009a08:	29403fcc 	andi	r5,r5,255
 4009a0c:	28c00b26 	beq	r5,r3,4009a3c <memchr+0x84>
 4009a10:	20c00044 	addi	r3,r4,1
 4009a14:	39803fcc 	andi	r6,r7,255
 4009a18:	2089883a 	add	r4,r4,r2
 4009a1c:	00000306 	br	4009a2c <memchr+0x74>
 4009a20:	18c00044 	addi	r3,r3,1
 4009a24:	197fffc3 	ldbu	r5,-1(r3)
 4009a28:	31400526 	beq	r6,r5,4009a40 <memchr+0x88>
 4009a2c:	1805883a 	mov	r2,r3
 4009a30:	20fffb1e 	bne	r4,r3,4009a20 <__alt_data_end+0xfc009a20>
 4009a34:	0005883a 	mov	r2,zero
 4009a38:	f800283a 	ret
 4009a3c:	2005883a 	mov	r2,r4
 4009a40:	f800283a 	ret
 4009a44:	28c03fcc 	andi	r3,r5,255
 4009a48:	1812923a 	slli	r9,r3,8
 4009a4c:	02ffbff4 	movhi	r11,65279
 4009a50:	02a02074 	movhi	r10,32897
 4009a54:	48d2b03a 	or	r9,r9,r3
 4009a58:	4806943a 	slli	r3,r9,16
 4009a5c:	5affbfc4 	addi	r11,r11,-257
 4009a60:	52a02004 	addi	r10,r10,-32640
 4009a64:	48d2b03a 	or	r9,r9,r3
 4009a68:	20c00017 	ldw	r3,0(r4)
 4009a6c:	48c6f03a 	xor	r3,r9,r3
 4009a70:	1acd883a 	add	r6,r3,r11
 4009a74:	00c6303a 	nor	r3,zero,r3
 4009a78:	30c6703a 	and	r3,r6,r3
 4009a7c:	1a86703a 	and	r3,r3,r10
 4009a80:	183fe01e 	bne	r3,zero,4009a04 <__alt_data_end+0xfc009a04>
 4009a84:	10bfff04 	addi	r2,r2,-4
 4009a88:	21000104 	addi	r4,r4,4
 4009a8c:	40bff636 	bltu	r8,r2,4009a68 <__alt_data_end+0xfc009a68>
 4009a90:	003fdb06 	br	4009a00 <__alt_data_end+0xfc009a00>
 4009a94:	3005883a 	mov	r2,r6
 4009a98:	003fd706 	br	40099f8 <__alt_data_end+0xfc0099f8>

04009a9c <memmove>:
 4009a9c:	2005883a 	mov	r2,r4
 4009aa0:	29000b2e 	bgeu	r5,r4,4009ad0 <memmove+0x34>
 4009aa4:	298f883a 	add	r7,r5,r6
 4009aa8:	21c0092e 	bgeu	r4,r7,4009ad0 <memmove+0x34>
 4009aac:	2187883a 	add	r3,r4,r6
 4009ab0:	198bc83a 	sub	r5,r3,r6
 4009ab4:	30004826 	beq	r6,zero,4009bd8 <memmove+0x13c>
 4009ab8:	39ffffc4 	addi	r7,r7,-1
 4009abc:	39000003 	ldbu	r4,0(r7)
 4009ac0:	18ffffc4 	addi	r3,r3,-1
 4009ac4:	19000005 	stb	r4,0(r3)
 4009ac8:	28fffb1e 	bne	r5,r3,4009ab8 <__alt_data_end+0xfc009ab8>
 4009acc:	f800283a 	ret
 4009ad0:	00c003c4 	movi	r3,15
 4009ad4:	1980412e 	bgeu	r3,r6,4009bdc <memmove+0x140>
 4009ad8:	2886b03a 	or	r3,r5,r2
 4009adc:	18c000cc 	andi	r3,r3,3
 4009ae0:	1800401e 	bne	r3,zero,4009be4 <memmove+0x148>
 4009ae4:	33fffc04 	addi	r15,r6,-16
 4009ae8:	781ed13a 	srli	r15,r15,4
 4009aec:	28c00104 	addi	r3,r5,4
 4009af0:	13400104 	addi	r13,r2,4
 4009af4:	781c913a 	slli	r14,r15,4
 4009af8:	2b000204 	addi	r12,r5,8
 4009afc:	12c00204 	addi	r11,r2,8
 4009b00:	73800504 	addi	r14,r14,20
 4009b04:	2a800304 	addi	r10,r5,12
 4009b08:	12400304 	addi	r9,r2,12
 4009b0c:	2b9d883a 	add	r14,r5,r14
 4009b10:	2811883a 	mov	r8,r5
 4009b14:	100f883a 	mov	r7,r2
 4009b18:	41000017 	ldw	r4,0(r8)
 4009b1c:	39c00404 	addi	r7,r7,16
 4009b20:	18c00404 	addi	r3,r3,16
 4009b24:	393ffc15 	stw	r4,-16(r7)
 4009b28:	193ffc17 	ldw	r4,-16(r3)
 4009b2c:	6b400404 	addi	r13,r13,16
 4009b30:	5ac00404 	addi	r11,r11,16
 4009b34:	693ffc15 	stw	r4,-16(r13)
 4009b38:	61000017 	ldw	r4,0(r12)
 4009b3c:	4a400404 	addi	r9,r9,16
 4009b40:	42000404 	addi	r8,r8,16
 4009b44:	593ffc15 	stw	r4,-16(r11)
 4009b48:	51000017 	ldw	r4,0(r10)
 4009b4c:	63000404 	addi	r12,r12,16
 4009b50:	52800404 	addi	r10,r10,16
 4009b54:	493ffc15 	stw	r4,-16(r9)
 4009b58:	1bbfef1e 	bne	r3,r14,4009b18 <__alt_data_end+0xfc009b18>
 4009b5c:	79000044 	addi	r4,r15,1
 4009b60:	2008913a 	slli	r4,r4,4
 4009b64:	328003cc 	andi	r10,r6,15
 4009b68:	02c000c4 	movi	r11,3
 4009b6c:	1107883a 	add	r3,r2,r4
 4009b70:	290b883a 	add	r5,r5,r4
 4009b74:	5a801e2e 	bgeu	r11,r10,4009bf0 <memmove+0x154>
 4009b78:	1813883a 	mov	r9,r3
 4009b7c:	2811883a 	mov	r8,r5
 4009b80:	500f883a 	mov	r7,r10
 4009b84:	41000017 	ldw	r4,0(r8)
 4009b88:	4a400104 	addi	r9,r9,4
 4009b8c:	39ffff04 	addi	r7,r7,-4
 4009b90:	493fff15 	stw	r4,-4(r9)
 4009b94:	42000104 	addi	r8,r8,4
 4009b98:	59fffa36 	bltu	r11,r7,4009b84 <__alt_data_end+0xfc009b84>
 4009b9c:	513fff04 	addi	r4,r10,-4
 4009ba0:	2008d0ba 	srli	r4,r4,2
 4009ba4:	318000cc 	andi	r6,r6,3
 4009ba8:	21000044 	addi	r4,r4,1
 4009bac:	2109883a 	add	r4,r4,r4
 4009bb0:	2109883a 	add	r4,r4,r4
 4009bb4:	1907883a 	add	r3,r3,r4
 4009bb8:	290b883a 	add	r5,r5,r4
 4009bbc:	30000b26 	beq	r6,zero,4009bec <memmove+0x150>
 4009bc0:	198d883a 	add	r6,r3,r6
 4009bc4:	29c00003 	ldbu	r7,0(r5)
 4009bc8:	18c00044 	addi	r3,r3,1
 4009bcc:	29400044 	addi	r5,r5,1
 4009bd0:	19ffffc5 	stb	r7,-1(r3)
 4009bd4:	19bffb1e 	bne	r3,r6,4009bc4 <__alt_data_end+0xfc009bc4>
 4009bd8:	f800283a 	ret
 4009bdc:	1007883a 	mov	r3,r2
 4009be0:	003ff606 	br	4009bbc <__alt_data_end+0xfc009bbc>
 4009be4:	1007883a 	mov	r3,r2
 4009be8:	003ff506 	br	4009bc0 <__alt_data_end+0xfc009bc0>
 4009bec:	f800283a 	ret
 4009bf0:	500d883a 	mov	r6,r10
 4009bf4:	003ff106 	br	4009bbc <__alt_data_end+0xfc009bbc>

04009bf8 <memset>:
 4009bf8:	20c000cc 	andi	r3,r4,3
 4009bfc:	2005883a 	mov	r2,r4
 4009c00:	18004426 	beq	r3,zero,4009d14 <memset+0x11c>
 4009c04:	31ffffc4 	addi	r7,r6,-1
 4009c08:	30004026 	beq	r6,zero,4009d0c <memset+0x114>
 4009c0c:	2813883a 	mov	r9,r5
 4009c10:	200d883a 	mov	r6,r4
 4009c14:	2007883a 	mov	r3,r4
 4009c18:	00000406 	br	4009c2c <memset+0x34>
 4009c1c:	3a3fffc4 	addi	r8,r7,-1
 4009c20:	31800044 	addi	r6,r6,1
 4009c24:	38003926 	beq	r7,zero,4009d0c <memset+0x114>
 4009c28:	400f883a 	mov	r7,r8
 4009c2c:	18c00044 	addi	r3,r3,1
 4009c30:	32400005 	stb	r9,0(r6)
 4009c34:	1a0000cc 	andi	r8,r3,3
 4009c38:	403ff81e 	bne	r8,zero,4009c1c <__alt_data_end+0xfc009c1c>
 4009c3c:	010000c4 	movi	r4,3
 4009c40:	21c02d2e 	bgeu	r4,r7,4009cf8 <memset+0x100>
 4009c44:	29003fcc 	andi	r4,r5,255
 4009c48:	200c923a 	slli	r6,r4,8
 4009c4c:	3108b03a 	or	r4,r6,r4
 4009c50:	200c943a 	slli	r6,r4,16
 4009c54:	218cb03a 	or	r6,r4,r6
 4009c58:	010003c4 	movi	r4,15
 4009c5c:	21c0182e 	bgeu	r4,r7,4009cc0 <memset+0xc8>
 4009c60:	3b3ffc04 	addi	r12,r7,-16
 4009c64:	6018d13a 	srli	r12,r12,4
 4009c68:	1a000104 	addi	r8,r3,4
 4009c6c:	1ac00204 	addi	r11,r3,8
 4009c70:	6008913a 	slli	r4,r12,4
 4009c74:	1a800304 	addi	r10,r3,12
 4009c78:	1813883a 	mov	r9,r3
 4009c7c:	21000504 	addi	r4,r4,20
 4009c80:	1909883a 	add	r4,r3,r4
 4009c84:	49800015 	stw	r6,0(r9)
 4009c88:	41800015 	stw	r6,0(r8)
 4009c8c:	59800015 	stw	r6,0(r11)
 4009c90:	51800015 	stw	r6,0(r10)
 4009c94:	42000404 	addi	r8,r8,16
 4009c98:	4a400404 	addi	r9,r9,16
 4009c9c:	5ac00404 	addi	r11,r11,16
 4009ca0:	52800404 	addi	r10,r10,16
 4009ca4:	413ff71e 	bne	r8,r4,4009c84 <__alt_data_end+0xfc009c84>
 4009ca8:	63000044 	addi	r12,r12,1
 4009cac:	6018913a 	slli	r12,r12,4
 4009cb0:	39c003cc 	andi	r7,r7,15
 4009cb4:	010000c4 	movi	r4,3
 4009cb8:	1b07883a 	add	r3,r3,r12
 4009cbc:	21c00e2e 	bgeu	r4,r7,4009cf8 <memset+0x100>
 4009cc0:	1813883a 	mov	r9,r3
 4009cc4:	3811883a 	mov	r8,r7
 4009cc8:	010000c4 	movi	r4,3
 4009ccc:	49800015 	stw	r6,0(r9)
 4009cd0:	423fff04 	addi	r8,r8,-4
 4009cd4:	4a400104 	addi	r9,r9,4
 4009cd8:	223ffc36 	bltu	r4,r8,4009ccc <__alt_data_end+0xfc009ccc>
 4009cdc:	393fff04 	addi	r4,r7,-4
 4009ce0:	2008d0ba 	srli	r4,r4,2
 4009ce4:	39c000cc 	andi	r7,r7,3
 4009ce8:	21000044 	addi	r4,r4,1
 4009cec:	2109883a 	add	r4,r4,r4
 4009cf0:	2109883a 	add	r4,r4,r4
 4009cf4:	1907883a 	add	r3,r3,r4
 4009cf8:	38000526 	beq	r7,zero,4009d10 <memset+0x118>
 4009cfc:	19cf883a 	add	r7,r3,r7
 4009d00:	19400005 	stb	r5,0(r3)
 4009d04:	18c00044 	addi	r3,r3,1
 4009d08:	38fffd1e 	bne	r7,r3,4009d00 <__alt_data_end+0xfc009d00>
 4009d0c:	f800283a 	ret
 4009d10:	f800283a 	ret
 4009d14:	2007883a 	mov	r3,r4
 4009d18:	300f883a 	mov	r7,r6
 4009d1c:	003fc706 	br	4009c3c <__alt_data_end+0xfc009c3c>

04009d20 <_Balloc>:
 4009d20:	20801317 	ldw	r2,76(r4)
 4009d24:	defffc04 	addi	sp,sp,-16
 4009d28:	dc400115 	stw	r17,4(sp)
 4009d2c:	dc000015 	stw	r16,0(sp)
 4009d30:	dfc00315 	stw	ra,12(sp)
 4009d34:	dc800215 	stw	r18,8(sp)
 4009d38:	2023883a 	mov	r17,r4
 4009d3c:	2821883a 	mov	r16,r5
 4009d40:	10000f26 	beq	r2,zero,4009d80 <_Balloc+0x60>
 4009d44:	8407883a 	add	r3,r16,r16
 4009d48:	18c7883a 	add	r3,r3,r3
 4009d4c:	10c7883a 	add	r3,r2,r3
 4009d50:	18800017 	ldw	r2,0(r3)
 4009d54:	10001126 	beq	r2,zero,4009d9c <_Balloc+0x7c>
 4009d58:	11000017 	ldw	r4,0(r2)
 4009d5c:	19000015 	stw	r4,0(r3)
 4009d60:	10000415 	stw	zero,16(r2)
 4009d64:	10000315 	stw	zero,12(r2)
 4009d68:	dfc00317 	ldw	ra,12(sp)
 4009d6c:	dc800217 	ldw	r18,8(sp)
 4009d70:	dc400117 	ldw	r17,4(sp)
 4009d74:	dc000017 	ldw	r16,0(sp)
 4009d78:	dec00404 	addi	sp,sp,16
 4009d7c:	f800283a 	ret
 4009d80:	01800844 	movi	r6,33
 4009d84:	01400104 	movi	r5,4
 4009d88:	400cc080 	call	400cc08 <_calloc_r>
 4009d8c:	88801315 	stw	r2,76(r17)
 4009d90:	103fec1e 	bne	r2,zero,4009d44 <__alt_data_end+0xfc009d44>
 4009d94:	0005883a 	mov	r2,zero
 4009d98:	003ff306 	br	4009d68 <__alt_data_end+0xfc009d68>
 4009d9c:	01400044 	movi	r5,1
 4009da0:	2c24983a 	sll	r18,r5,r16
 4009da4:	8809883a 	mov	r4,r17
 4009da8:	91800144 	addi	r6,r18,5
 4009dac:	318d883a 	add	r6,r6,r6
 4009db0:	318d883a 	add	r6,r6,r6
 4009db4:	400cc080 	call	400cc08 <_calloc_r>
 4009db8:	103ff626 	beq	r2,zero,4009d94 <__alt_data_end+0xfc009d94>
 4009dbc:	14000115 	stw	r16,4(r2)
 4009dc0:	14800215 	stw	r18,8(r2)
 4009dc4:	003fe606 	br	4009d60 <__alt_data_end+0xfc009d60>

04009dc8 <_Bfree>:
 4009dc8:	28000826 	beq	r5,zero,4009dec <_Bfree+0x24>
 4009dcc:	28c00117 	ldw	r3,4(r5)
 4009dd0:	20801317 	ldw	r2,76(r4)
 4009dd4:	18c7883a 	add	r3,r3,r3
 4009dd8:	18c7883a 	add	r3,r3,r3
 4009ddc:	10c5883a 	add	r2,r2,r3
 4009de0:	10c00017 	ldw	r3,0(r2)
 4009de4:	28c00015 	stw	r3,0(r5)
 4009de8:	11400015 	stw	r5,0(r2)
 4009dec:	f800283a 	ret

04009df0 <__multadd>:
 4009df0:	defffa04 	addi	sp,sp,-24
 4009df4:	dc800315 	stw	r18,12(sp)
 4009df8:	dc400215 	stw	r17,8(sp)
 4009dfc:	dc000115 	stw	r16,4(sp)
 4009e00:	2823883a 	mov	r17,r5
 4009e04:	2c000417 	ldw	r16,16(r5)
 4009e08:	dfc00515 	stw	ra,20(sp)
 4009e0c:	dcc00415 	stw	r19,16(sp)
 4009e10:	2025883a 	mov	r18,r4
 4009e14:	29400504 	addi	r5,r5,20
 4009e18:	0011883a 	mov	r8,zero
 4009e1c:	28c00017 	ldw	r3,0(r5)
 4009e20:	29400104 	addi	r5,r5,4
 4009e24:	42000044 	addi	r8,r8,1
 4009e28:	18bfffcc 	andi	r2,r3,65535
 4009e2c:	1185383a 	mul	r2,r2,r6
 4009e30:	1806d43a 	srli	r3,r3,16
 4009e34:	11cf883a 	add	r7,r2,r7
 4009e38:	3808d43a 	srli	r4,r7,16
 4009e3c:	1987383a 	mul	r3,r3,r6
 4009e40:	38bfffcc 	andi	r2,r7,65535
 4009e44:	1907883a 	add	r3,r3,r4
 4009e48:	1808943a 	slli	r4,r3,16
 4009e4c:	180ed43a 	srli	r7,r3,16
 4009e50:	2085883a 	add	r2,r4,r2
 4009e54:	28bfff15 	stw	r2,-4(r5)
 4009e58:	443ff016 	blt	r8,r16,4009e1c <__alt_data_end+0xfc009e1c>
 4009e5c:	38000926 	beq	r7,zero,4009e84 <__multadd+0x94>
 4009e60:	88800217 	ldw	r2,8(r17)
 4009e64:	80800f0e 	bge	r16,r2,4009ea4 <__multadd+0xb4>
 4009e68:	80800144 	addi	r2,r16,5
 4009e6c:	1085883a 	add	r2,r2,r2
 4009e70:	1085883a 	add	r2,r2,r2
 4009e74:	8885883a 	add	r2,r17,r2
 4009e78:	11c00015 	stw	r7,0(r2)
 4009e7c:	84000044 	addi	r16,r16,1
 4009e80:	8c000415 	stw	r16,16(r17)
 4009e84:	8805883a 	mov	r2,r17
 4009e88:	dfc00517 	ldw	ra,20(sp)
 4009e8c:	dcc00417 	ldw	r19,16(sp)
 4009e90:	dc800317 	ldw	r18,12(sp)
 4009e94:	dc400217 	ldw	r17,8(sp)
 4009e98:	dc000117 	ldw	r16,4(sp)
 4009e9c:	dec00604 	addi	sp,sp,24
 4009ea0:	f800283a 	ret
 4009ea4:	89400117 	ldw	r5,4(r17)
 4009ea8:	9009883a 	mov	r4,r18
 4009eac:	d9c00015 	stw	r7,0(sp)
 4009eb0:	29400044 	addi	r5,r5,1
 4009eb4:	4009d200 	call	4009d20 <_Balloc>
 4009eb8:	89800417 	ldw	r6,16(r17)
 4009ebc:	89400304 	addi	r5,r17,12
 4009ec0:	11000304 	addi	r4,r2,12
 4009ec4:	31800084 	addi	r6,r6,2
 4009ec8:	318d883a 	add	r6,r6,r6
 4009ecc:	318d883a 	add	r6,r6,r6
 4009ed0:	1027883a 	mov	r19,r2
 4009ed4:	40046400 	call	4004640 <memcpy>
 4009ed8:	d9c00017 	ldw	r7,0(sp)
 4009edc:	88000a26 	beq	r17,zero,4009f08 <__multadd+0x118>
 4009ee0:	88c00117 	ldw	r3,4(r17)
 4009ee4:	90801317 	ldw	r2,76(r18)
 4009ee8:	18c7883a 	add	r3,r3,r3
 4009eec:	18c7883a 	add	r3,r3,r3
 4009ef0:	10c5883a 	add	r2,r2,r3
 4009ef4:	10c00017 	ldw	r3,0(r2)
 4009ef8:	88c00015 	stw	r3,0(r17)
 4009efc:	14400015 	stw	r17,0(r2)
 4009f00:	9823883a 	mov	r17,r19
 4009f04:	003fd806 	br	4009e68 <__alt_data_end+0xfc009e68>
 4009f08:	9823883a 	mov	r17,r19
 4009f0c:	003fd606 	br	4009e68 <__alt_data_end+0xfc009e68>

04009f10 <__s2b>:
 4009f10:	defff904 	addi	sp,sp,-28
 4009f14:	dc400115 	stw	r17,4(sp)
 4009f18:	dc000015 	stw	r16,0(sp)
 4009f1c:	2023883a 	mov	r17,r4
 4009f20:	2821883a 	mov	r16,r5
 4009f24:	39000204 	addi	r4,r7,8
 4009f28:	01400244 	movi	r5,9
 4009f2c:	dcc00315 	stw	r19,12(sp)
 4009f30:	dc800215 	stw	r18,8(sp)
 4009f34:	dfc00615 	stw	ra,24(sp)
 4009f38:	dd400515 	stw	r21,20(sp)
 4009f3c:	dd000415 	stw	r20,16(sp)
 4009f40:	3825883a 	mov	r18,r7
 4009f44:	3027883a 	mov	r19,r6
 4009f48:	40030f80 	call	40030f8 <__divsi3>
 4009f4c:	00c00044 	movi	r3,1
 4009f50:	000b883a 	mov	r5,zero
 4009f54:	1880030e 	bge	r3,r2,4009f64 <__s2b+0x54>
 4009f58:	18c7883a 	add	r3,r3,r3
 4009f5c:	29400044 	addi	r5,r5,1
 4009f60:	18bffd16 	blt	r3,r2,4009f58 <__alt_data_end+0xfc009f58>
 4009f64:	8809883a 	mov	r4,r17
 4009f68:	4009d200 	call	4009d20 <_Balloc>
 4009f6c:	d8c00717 	ldw	r3,28(sp)
 4009f70:	10c00515 	stw	r3,20(r2)
 4009f74:	00c00044 	movi	r3,1
 4009f78:	10c00415 	stw	r3,16(r2)
 4009f7c:	00c00244 	movi	r3,9
 4009f80:	1cc0210e 	bge	r3,r19,400a008 <__s2b+0xf8>
 4009f84:	80eb883a 	add	r21,r16,r3
 4009f88:	a829883a 	mov	r20,r21
 4009f8c:	84e1883a 	add	r16,r16,r19
 4009f90:	a1c00007 	ldb	r7,0(r20)
 4009f94:	01800284 	movi	r6,10
 4009f98:	a5000044 	addi	r20,r20,1
 4009f9c:	100b883a 	mov	r5,r2
 4009fa0:	39fff404 	addi	r7,r7,-48
 4009fa4:	8809883a 	mov	r4,r17
 4009fa8:	4009df00 	call	4009df0 <__multadd>
 4009fac:	a43ff81e 	bne	r20,r16,4009f90 <__alt_data_end+0xfc009f90>
 4009fb0:	ace1883a 	add	r16,r21,r19
 4009fb4:	843ffe04 	addi	r16,r16,-8
 4009fb8:	9c800a0e 	bge	r19,r18,4009fe4 <__s2b+0xd4>
 4009fbc:	94e5c83a 	sub	r18,r18,r19
 4009fc0:	84a5883a 	add	r18,r16,r18
 4009fc4:	81c00007 	ldb	r7,0(r16)
 4009fc8:	01800284 	movi	r6,10
 4009fcc:	84000044 	addi	r16,r16,1
 4009fd0:	100b883a 	mov	r5,r2
 4009fd4:	39fff404 	addi	r7,r7,-48
 4009fd8:	8809883a 	mov	r4,r17
 4009fdc:	4009df00 	call	4009df0 <__multadd>
 4009fe0:	84bff81e 	bne	r16,r18,4009fc4 <__alt_data_end+0xfc009fc4>
 4009fe4:	dfc00617 	ldw	ra,24(sp)
 4009fe8:	dd400517 	ldw	r21,20(sp)
 4009fec:	dd000417 	ldw	r20,16(sp)
 4009ff0:	dcc00317 	ldw	r19,12(sp)
 4009ff4:	dc800217 	ldw	r18,8(sp)
 4009ff8:	dc400117 	ldw	r17,4(sp)
 4009ffc:	dc000017 	ldw	r16,0(sp)
 400a000:	dec00704 	addi	sp,sp,28
 400a004:	f800283a 	ret
 400a008:	84000284 	addi	r16,r16,10
 400a00c:	1827883a 	mov	r19,r3
 400a010:	003fe906 	br	4009fb8 <__alt_data_end+0xfc009fb8>

0400a014 <__hi0bits>:
 400a014:	20bfffec 	andhi	r2,r4,65535
 400a018:	1000141e 	bne	r2,zero,400a06c <__hi0bits+0x58>
 400a01c:	2008943a 	slli	r4,r4,16
 400a020:	00800404 	movi	r2,16
 400a024:	20ffc02c 	andhi	r3,r4,65280
 400a028:	1800021e 	bne	r3,zero,400a034 <__hi0bits+0x20>
 400a02c:	2008923a 	slli	r4,r4,8
 400a030:	10800204 	addi	r2,r2,8
 400a034:	20fc002c 	andhi	r3,r4,61440
 400a038:	1800021e 	bne	r3,zero,400a044 <__hi0bits+0x30>
 400a03c:	2008913a 	slli	r4,r4,4
 400a040:	10800104 	addi	r2,r2,4
 400a044:	20f0002c 	andhi	r3,r4,49152
 400a048:	1800031e 	bne	r3,zero,400a058 <__hi0bits+0x44>
 400a04c:	2109883a 	add	r4,r4,r4
 400a050:	10800084 	addi	r2,r2,2
 400a054:	2109883a 	add	r4,r4,r4
 400a058:	20000316 	blt	r4,zero,400a068 <__hi0bits+0x54>
 400a05c:	2110002c 	andhi	r4,r4,16384
 400a060:	2000041e 	bne	r4,zero,400a074 <__hi0bits+0x60>
 400a064:	00800804 	movi	r2,32
 400a068:	f800283a 	ret
 400a06c:	0005883a 	mov	r2,zero
 400a070:	003fec06 	br	400a024 <__alt_data_end+0xfc00a024>
 400a074:	10800044 	addi	r2,r2,1
 400a078:	f800283a 	ret

0400a07c <__lo0bits>:
 400a07c:	20c00017 	ldw	r3,0(r4)
 400a080:	188001cc 	andi	r2,r3,7
 400a084:	10000826 	beq	r2,zero,400a0a8 <__lo0bits+0x2c>
 400a088:	1880004c 	andi	r2,r3,1
 400a08c:	1000211e 	bne	r2,zero,400a114 <__lo0bits+0x98>
 400a090:	1880008c 	andi	r2,r3,2
 400a094:	1000211e 	bne	r2,zero,400a11c <__lo0bits+0xa0>
 400a098:	1806d0ba 	srli	r3,r3,2
 400a09c:	00800084 	movi	r2,2
 400a0a0:	20c00015 	stw	r3,0(r4)
 400a0a4:	f800283a 	ret
 400a0a8:	18bfffcc 	andi	r2,r3,65535
 400a0ac:	10001326 	beq	r2,zero,400a0fc <__lo0bits+0x80>
 400a0b0:	0005883a 	mov	r2,zero
 400a0b4:	19403fcc 	andi	r5,r3,255
 400a0b8:	2800021e 	bne	r5,zero,400a0c4 <__lo0bits+0x48>
 400a0bc:	1806d23a 	srli	r3,r3,8
 400a0c0:	10800204 	addi	r2,r2,8
 400a0c4:	194003cc 	andi	r5,r3,15
 400a0c8:	2800021e 	bne	r5,zero,400a0d4 <__lo0bits+0x58>
 400a0cc:	1806d13a 	srli	r3,r3,4
 400a0d0:	10800104 	addi	r2,r2,4
 400a0d4:	194000cc 	andi	r5,r3,3
 400a0d8:	2800021e 	bne	r5,zero,400a0e4 <__lo0bits+0x68>
 400a0dc:	1806d0ba 	srli	r3,r3,2
 400a0e0:	10800084 	addi	r2,r2,2
 400a0e4:	1940004c 	andi	r5,r3,1
 400a0e8:	2800081e 	bne	r5,zero,400a10c <__lo0bits+0x90>
 400a0ec:	1806d07a 	srli	r3,r3,1
 400a0f0:	1800051e 	bne	r3,zero,400a108 <__lo0bits+0x8c>
 400a0f4:	00800804 	movi	r2,32
 400a0f8:	f800283a 	ret
 400a0fc:	1806d43a 	srli	r3,r3,16
 400a100:	00800404 	movi	r2,16
 400a104:	003feb06 	br	400a0b4 <__alt_data_end+0xfc00a0b4>
 400a108:	10800044 	addi	r2,r2,1
 400a10c:	20c00015 	stw	r3,0(r4)
 400a110:	f800283a 	ret
 400a114:	0005883a 	mov	r2,zero
 400a118:	f800283a 	ret
 400a11c:	1806d07a 	srli	r3,r3,1
 400a120:	00800044 	movi	r2,1
 400a124:	20c00015 	stw	r3,0(r4)
 400a128:	f800283a 	ret

0400a12c <__i2b>:
 400a12c:	defffd04 	addi	sp,sp,-12
 400a130:	dc000015 	stw	r16,0(sp)
 400a134:	04000044 	movi	r16,1
 400a138:	dc400115 	stw	r17,4(sp)
 400a13c:	2823883a 	mov	r17,r5
 400a140:	800b883a 	mov	r5,r16
 400a144:	dfc00215 	stw	ra,8(sp)
 400a148:	4009d200 	call	4009d20 <_Balloc>
 400a14c:	14400515 	stw	r17,20(r2)
 400a150:	14000415 	stw	r16,16(r2)
 400a154:	dfc00217 	ldw	ra,8(sp)
 400a158:	dc400117 	ldw	r17,4(sp)
 400a15c:	dc000017 	ldw	r16,0(sp)
 400a160:	dec00304 	addi	sp,sp,12
 400a164:	f800283a 	ret

0400a168 <__multiply>:
 400a168:	defffa04 	addi	sp,sp,-24
 400a16c:	dcc00315 	stw	r19,12(sp)
 400a170:	dc800215 	stw	r18,8(sp)
 400a174:	34c00417 	ldw	r19,16(r6)
 400a178:	2c800417 	ldw	r18,16(r5)
 400a17c:	dd000415 	stw	r20,16(sp)
 400a180:	dc400115 	stw	r17,4(sp)
 400a184:	dfc00515 	stw	ra,20(sp)
 400a188:	dc000015 	stw	r16,0(sp)
 400a18c:	2829883a 	mov	r20,r5
 400a190:	3023883a 	mov	r17,r6
 400a194:	94c0050e 	bge	r18,r19,400a1ac <__multiply+0x44>
 400a198:	9007883a 	mov	r3,r18
 400a19c:	3029883a 	mov	r20,r6
 400a1a0:	9825883a 	mov	r18,r19
 400a1a4:	2823883a 	mov	r17,r5
 400a1a8:	1827883a 	mov	r19,r3
 400a1ac:	a0800217 	ldw	r2,8(r20)
 400a1b0:	94e1883a 	add	r16,r18,r19
 400a1b4:	a1400117 	ldw	r5,4(r20)
 400a1b8:	1400010e 	bge	r2,r16,400a1c0 <__multiply+0x58>
 400a1bc:	29400044 	addi	r5,r5,1
 400a1c0:	4009d200 	call	4009d20 <_Balloc>
 400a1c4:	8415883a 	add	r10,r16,r16
 400a1c8:	12c00504 	addi	r11,r2,20
 400a1cc:	5295883a 	add	r10,r10,r10
 400a1d0:	5a95883a 	add	r10,r11,r10
 400a1d4:	5807883a 	mov	r3,r11
 400a1d8:	5a80032e 	bgeu	r11,r10,400a1e8 <__multiply+0x80>
 400a1dc:	18000015 	stw	zero,0(r3)
 400a1e0:	18c00104 	addi	r3,r3,4
 400a1e4:	1abffd36 	bltu	r3,r10,400a1dc <__alt_data_end+0xfc00a1dc>
 400a1e8:	9ce7883a 	add	r19,r19,r19
 400a1ec:	94a5883a 	add	r18,r18,r18
 400a1f0:	89800504 	addi	r6,r17,20
 400a1f4:	9ce7883a 	add	r19,r19,r19
 400a1f8:	a3400504 	addi	r13,r20,20
 400a1fc:	94a5883a 	add	r18,r18,r18
 400a200:	34d9883a 	add	r12,r6,r19
 400a204:	6c93883a 	add	r9,r13,r18
 400a208:	3300422e 	bgeu	r6,r12,400a314 <__multiply+0x1ac>
 400a20c:	37c00017 	ldw	ra,0(r6)
 400a210:	fbffffcc 	andi	r15,ra,65535
 400a214:	78001b26 	beq	r15,zero,400a284 <__multiply+0x11c>
 400a218:	5811883a 	mov	r8,r11
 400a21c:	681d883a 	mov	r14,r13
 400a220:	000f883a 	mov	r7,zero
 400a224:	71000017 	ldw	r4,0(r14)
 400a228:	40c00017 	ldw	r3,0(r8)
 400a22c:	73800104 	addi	r14,r14,4
 400a230:	217fffcc 	andi	r5,r4,65535
 400a234:	2bcb383a 	mul	r5,r5,r15
 400a238:	2008d43a 	srli	r4,r4,16
 400a23c:	1c7fffcc 	andi	r17,r3,65535
 400a240:	2c4b883a 	add	r5,r5,r17
 400a244:	29cb883a 	add	r5,r5,r7
 400a248:	23c9383a 	mul	r4,r4,r15
 400a24c:	1806d43a 	srli	r3,r3,16
 400a250:	280ed43a 	srli	r7,r5,16
 400a254:	297fffcc 	andi	r5,r5,65535
 400a258:	20c7883a 	add	r3,r4,r3
 400a25c:	19c7883a 	add	r3,r3,r7
 400a260:	1808943a 	slli	r4,r3,16
 400a264:	4023883a 	mov	r17,r8
 400a268:	180ed43a 	srli	r7,r3,16
 400a26c:	214ab03a 	or	r5,r4,r5
 400a270:	41400015 	stw	r5,0(r8)
 400a274:	42000104 	addi	r8,r8,4
 400a278:	727fea36 	bltu	r14,r9,400a224 <__alt_data_end+0xfc00a224>
 400a27c:	89c00115 	stw	r7,4(r17)
 400a280:	37c00017 	ldw	ra,0(r6)
 400a284:	f83ed43a 	srli	ra,ra,16
 400a288:	f8001f26 	beq	ra,zero,400a308 <__multiply+0x1a0>
 400a28c:	58c00017 	ldw	r3,0(r11)
 400a290:	681d883a 	mov	r14,r13
 400a294:	581f883a 	mov	r15,r11
 400a298:	1811883a 	mov	r8,r3
 400a29c:	5825883a 	mov	r18,r11
 400a2a0:	000f883a 	mov	r7,zero
 400a2a4:	00000106 	br	400a2ac <__multiply+0x144>
 400a2a8:	8825883a 	mov	r18,r17
 400a2ac:	7140000b 	ldhu	r5,0(r14)
 400a2b0:	4010d43a 	srli	r8,r8,16
 400a2b4:	193fffcc 	andi	r4,r3,65535
 400a2b8:	2fcb383a 	mul	r5,r5,ra
 400a2bc:	7bc00104 	addi	r15,r15,4
 400a2c0:	73800104 	addi	r14,r14,4
 400a2c4:	2a0b883a 	add	r5,r5,r8
 400a2c8:	29cb883a 	add	r5,r5,r7
 400a2cc:	2806943a 	slli	r3,r5,16
 400a2d0:	94400104 	addi	r17,r18,4
 400a2d4:	280ad43a 	srli	r5,r5,16
 400a2d8:	1908b03a 	or	r4,r3,r4
 400a2dc:	793fff15 	stw	r4,-4(r15)
 400a2e0:	70ffff17 	ldw	r3,-4(r14)
 400a2e4:	8a000017 	ldw	r8,0(r17)
 400a2e8:	1806d43a 	srli	r3,r3,16
 400a2ec:	413fffcc 	andi	r4,r8,65535
 400a2f0:	1fc7383a 	mul	r3,r3,ra
 400a2f4:	1907883a 	add	r3,r3,r4
 400a2f8:	1947883a 	add	r3,r3,r5
 400a2fc:	180ed43a 	srli	r7,r3,16
 400a300:	727fe936 	bltu	r14,r9,400a2a8 <__alt_data_end+0xfc00a2a8>
 400a304:	90c00115 	stw	r3,4(r18)
 400a308:	31800104 	addi	r6,r6,4
 400a30c:	5ac00104 	addi	r11,r11,4
 400a310:	333fbe36 	bltu	r6,r12,400a20c <__alt_data_end+0xfc00a20c>
 400a314:	0400090e 	bge	zero,r16,400a33c <__multiply+0x1d4>
 400a318:	50ffff17 	ldw	r3,-4(r10)
 400a31c:	52bfff04 	addi	r10,r10,-4
 400a320:	18000326 	beq	r3,zero,400a330 <__multiply+0x1c8>
 400a324:	00000506 	br	400a33c <__multiply+0x1d4>
 400a328:	50c00017 	ldw	r3,0(r10)
 400a32c:	1800031e 	bne	r3,zero,400a33c <__multiply+0x1d4>
 400a330:	843fffc4 	addi	r16,r16,-1
 400a334:	52bfff04 	addi	r10,r10,-4
 400a338:	803ffb1e 	bne	r16,zero,400a328 <__alt_data_end+0xfc00a328>
 400a33c:	14000415 	stw	r16,16(r2)
 400a340:	dfc00517 	ldw	ra,20(sp)
 400a344:	dd000417 	ldw	r20,16(sp)
 400a348:	dcc00317 	ldw	r19,12(sp)
 400a34c:	dc800217 	ldw	r18,8(sp)
 400a350:	dc400117 	ldw	r17,4(sp)
 400a354:	dc000017 	ldw	r16,0(sp)
 400a358:	dec00604 	addi	sp,sp,24
 400a35c:	f800283a 	ret

0400a360 <__pow5mult>:
 400a360:	defffa04 	addi	sp,sp,-24
 400a364:	dcc00315 	stw	r19,12(sp)
 400a368:	dc000015 	stw	r16,0(sp)
 400a36c:	dfc00515 	stw	ra,20(sp)
 400a370:	dd000415 	stw	r20,16(sp)
 400a374:	dc800215 	stw	r18,8(sp)
 400a378:	dc400115 	stw	r17,4(sp)
 400a37c:	308000cc 	andi	r2,r6,3
 400a380:	3021883a 	mov	r16,r6
 400a384:	2027883a 	mov	r19,r4
 400a388:	10002f1e 	bne	r2,zero,400a448 <__pow5mult+0xe8>
 400a38c:	2825883a 	mov	r18,r5
 400a390:	8021d0ba 	srai	r16,r16,2
 400a394:	80001a26 	beq	r16,zero,400a400 <__pow5mult+0xa0>
 400a398:	9c401217 	ldw	r17,72(r19)
 400a39c:	8800061e 	bne	r17,zero,400a3b8 <__pow5mult+0x58>
 400a3a0:	00003406 	br	400a474 <__pow5mult+0x114>
 400a3a4:	8021d07a 	srai	r16,r16,1
 400a3a8:	80001526 	beq	r16,zero,400a400 <__pow5mult+0xa0>
 400a3ac:	88800017 	ldw	r2,0(r17)
 400a3b0:	10001c26 	beq	r2,zero,400a424 <__pow5mult+0xc4>
 400a3b4:	1023883a 	mov	r17,r2
 400a3b8:	8080004c 	andi	r2,r16,1
 400a3bc:	103ff926 	beq	r2,zero,400a3a4 <__alt_data_end+0xfc00a3a4>
 400a3c0:	880d883a 	mov	r6,r17
 400a3c4:	900b883a 	mov	r5,r18
 400a3c8:	9809883a 	mov	r4,r19
 400a3cc:	400a1680 	call	400a168 <__multiply>
 400a3d0:	90001b26 	beq	r18,zero,400a440 <__pow5mult+0xe0>
 400a3d4:	91000117 	ldw	r4,4(r18)
 400a3d8:	98c01317 	ldw	r3,76(r19)
 400a3dc:	8021d07a 	srai	r16,r16,1
 400a3e0:	2109883a 	add	r4,r4,r4
 400a3e4:	2109883a 	add	r4,r4,r4
 400a3e8:	1907883a 	add	r3,r3,r4
 400a3ec:	19000017 	ldw	r4,0(r3)
 400a3f0:	91000015 	stw	r4,0(r18)
 400a3f4:	1c800015 	stw	r18,0(r3)
 400a3f8:	1025883a 	mov	r18,r2
 400a3fc:	803feb1e 	bne	r16,zero,400a3ac <__alt_data_end+0xfc00a3ac>
 400a400:	9005883a 	mov	r2,r18
 400a404:	dfc00517 	ldw	ra,20(sp)
 400a408:	dd000417 	ldw	r20,16(sp)
 400a40c:	dcc00317 	ldw	r19,12(sp)
 400a410:	dc800217 	ldw	r18,8(sp)
 400a414:	dc400117 	ldw	r17,4(sp)
 400a418:	dc000017 	ldw	r16,0(sp)
 400a41c:	dec00604 	addi	sp,sp,24
 400a420:	f800283a 	ret
 400a424:	880d883a 	mov	r6,r17
 400a428:	880b883a 	mov	r5,r17
 400a42c:	9809883a 	mov	r4,r19
 400a430:	400a1680 	call	400a168 <__multiply>
 400a434:	88800015 	stw	r2,0(r17)
 400a438:	10000015 	stw	zero,0(r2)
 400a43c:	003fdd06 	br	400a3b4 <__alt_data_end+0xfc00a3b4>
 400a440:	1025883a 	mov	r18,r2
 400a444:	003fd706 	br	400a3a4 <__alt_data_end+0xfc00a3a4>
 400a448:	10bfffc4 	addi	r2,r2,-1
 400a44c:	1085883a 	add	r2,r2,r2
 400a450:	00c10074 	movhi	r3,1025
 400a454:	18d5e704 	addi	r3,r3,22428
 400a458:	1085883a 	add	r2,r2,r2
 400a45c:	1885883a 	add	r2,r3,r2
 400a460:	11800017 	ldw	r6,0(r2)
 400a464:	000f883a 	mov	r7,zero
 400a468:	4009df00 	call	4009df0 <__multadd>
 400a46c:	1025883a 	mov	r18,r2
 400a470:	003fc706 	br	400a390 <__alt_data_end+0xfc00a390>
 400a474:	05000044 	movi	r20,1
 400a478:	a00b883a 	mov	r5,r20
 400a47c:	9809883a 	mov	r4,r19
 400a480:	4009d200 	call	4009d20 <_Balloc>
 400a484:	1023883a 	mov	r17,r2
 400a488:	00809c44 	movi	r2,625
 400a48c:	88800515 	stw	r2,20(r17)
 400a490:	8d000415 	stw	r20,16(r17)
 400a494:	9c401215 	stw	r17,72(r19)
 400a498:	88000015 	stw	zero,0(r17)
 400a49c:	003fc606 	br	400a3b8 <__alt_data_end+0xfc00a3b8>

0400a4a0 <__lshift>:
 400a4a0:	defff904 	addi	sp,sp,-28
 400a4a4:	dd400515 	stw	r21,20(sp)
 400a4a8:	dcc00315 	stw	r19,12(sp)
 400a4ac:	302bd17a 	srai	r21,r6,5
 400a4b0:	2cc00417 	ldw	r19,16(r5)
 400a4b4:	28800217 	ldw	r2,8(r5)
 400a4b8:	dd000415 	stw	r20,16(sp)
 400a4bc:	ace7883a 	add	r19,r21,r19
 400a4c0:	dc800215 	stw	r18,8(sp)
 400a4c4:	dc400115 	stw	r17,4(sp)
 400a4c8:	dc000015 	stw	r16,0(sp)
 400a4cc:	dfc00615 	stw	ra,24(sp)
 400a4d0:	9c000044 	addi	r16,r19,1
 400a4d4:	2823883a 	mov	r17,r5
 400a4d8:	3029883a 	mov	r20,r6
 400a4dc:	2025883a 	mov	r18,r4
 400a4e0:	29400117 	ldw	r5,4(r5)
 400a4e4:	1400030e 	bge	r2,r16,400a4f4 <__lshift+0x54>
 400a4e8:	1085883a 	add	r2,r2,r2
 400a4ec:	29400044 	addi	r5,r5,1
 400a4f0:	143ffd16 	blt	r2,r16,400a4e8 <__alt_data_end+0xfc00a4e8>
 400a4f4:	9009883a 	mov	r4,r18
 400a4f8:	4009d200 	call	4009d20 <_Balloc>
 400a4fc:	10c00504 	addi	r3,r2,20
 400a500:	0540070e 	bge	zero,r21,400a520 <__lshift+0x80>
 400a504:	ad6b883a 	add	r21,r21,r21
 400a508:	ad6b883a 	add	r21,r21,r21
 400a50c:	1809883a 	mov	r4,r3
 400a510:	1d47883a 	add	r3,r3,r21
 400a514:	20000015 	stw	zero,0(r4)
 400a518:	21000104 	addi	r4,r4,4
 400a51c:	193ffd1e 	bne	r3,r4,400a514 <__alt_data_end+0xfc00a514>
 400a520:	8a000417 	ldw	r8,16(r17)
 400a524:	89000504 	addi	r4,r17,20
 400a528:	a18007cc 	andi	r6,r20,31
 400a52c:	4211883a 	add	r8,r8,r8
 400a530:	4211883a 	add	r8,r8,r8
 400a534:	2211883a 	add	r8,r4,r8
 400a538:	30002326 	beq	r6,zero,400a5c8 <__lshift+0x128>
 400a53c:	02400804 	movi	r9,32
 400a540:	4993c83a 	sub	r9,r9,r6
 400a544:	000b883a 	mov	r5,zero
 400a548:	21c00017 	ldw	r7,0(r4)
 400a54c:	1815883a 	mov	r10,r3
 400a550:	18c00104 	addi	r3,r3,4
 400a554:	398e983a 	sll	r7,r7,r6
 400a558:	21000104 	addi	r4,r4,4
 400a55c:	394ab03a 	or	r5,r7,r5
 400a560:	197fff15 	stw	r5,-4(r3)
 400a564:	217fff17 	ldw	r5,-4(r4)
 400a568:	2a4ad83a 	srl	r5,r5,r9
 400a56c:	223ff636 	bltu	r4,r8,400a548 <__alt_data_end+0xfc00a548>
 400a570:	51400115 	stw	r5,4(r10)
 400a574:	28001a1e 	bne	r5,zero,400a5e0 <__lshift+0x140>
 400a578:	843fffc4 	addi	r16,r16,-1
 400a57c:	14000415 	stw	r16,16(r2)
 400a580:	88000826 	beq	r17,zero,400a5a4 <__lshift+0x104>
 400a584:	89000117 	ldw	r4,4(r17)
 400a588:	90c01317 	ldw	r3,76(r18)
 400a58c:	2109883a 	add	r4,r4,r4
 400a590:	2109883a 	add	r4,r4,r4
 400a594:	1907883a 	add	r3,r3,r4
 400a598:	19000017 	ldw	r4,0(r3)
 400a59c:	89000015 	stw	r4,0(r17)
 400a5a0:	1c400015 	stw	r17,0(r3)
 400a5a4:	dfc00617 	ldw	ra,24(sp)
 400a5a8:	dd400517 	ldw	r21,20(sp)
 400a5ac:	dd000417 	ldw	r20,16(sp)
 400a5b0:	dcc00317 	ldw	r19,12(sp)
 400a5b4:	dc800217 	ldw	r18,8(sp)
 400a5b8:	dc400117 	ldw	r17,4(sp)
 400a5bc:	dc000017 	ldw	r16,0(sp)
 400a5c0:	dec00704 	addi	sp,sp,28
 400a5c4:	f800283a 	ret
 400a5c8:	21400017 	ldw	r5,0(r4)
 400a5cc:	18c00104 	addi	r3,r3,4
 400a5d0:	21000104 	addi	r4,r4,4
 400a5d4:	197fff15 	stw	r5,-4(r3)
 400a5d8:	223ffb36 	bltu	r4,r8,400a5c8 <__alt_data_end+0xfc00a5c8>
 400a5dc:	003fe606 	br	400a578 <__alt_data_end+0xfc00a578>
 400a5e0:	9c000084 	addi	r16,r19,2
 400a5e4:	003fe406 	br	400a578 <__alt_data_end+0xfc00a578>

0400a5e8 <__mcmp>:
 400a5e8:	20800417 	ldw	r2,16(r4)
 400a5ec:	28c00417 	ldw	r3,16(r5)
 400a5f0:	10c5c83a 	sub	r2,r2,r3
 400a5f4:	1000111e 	bne	r2,zero,400a63c <__mcmp+0x54>
 400a5f8:	18c7883a 	add	r3,r3,r3
 400a5fc:	18c7883a 	add	r3,r3,r3
 400a600:	21000504 	addi	r4,r4,20
 400a604:	29400504 	addi	r5,r5,20
 400a608:	20c5883a 	add	r2,r4,r3
 400a60c:	28cb883a 	add	r5,r5,r3
 400a610:	00000106 	br	400a618 <__mcmp+0x30>
 400a614:	20800a2e 	bgeu	r4,r2,400a640 <__mcmp+0x58>
 400a618:	10bfff04 	addi	r2,r2,-4
 400a61c:	297fff04 	addi	r5,r5,-4
 400a620:	11800017 	ldw	r6,0(r2)
 400a624:	28c00017 	ldw	r3,0(r5)
 400a628:	30fffa26 	beq	r6,r3,400a614 <__alt_data_end+0xfc00a614>
 400a62c:	30c00236 	bltu	r6,r3,400a638 <__mcmp+0x50>
 400a630:	00800044 	movi	r2,1
 400a634:	f800283a 	ret
 400a638:	00bfffc4 	movi	r2,-1
 400a63c:	f800283a 	ret
 400a640:	0005883a 	mov	r2,zero
 400a644:	f800283a 	ret

0400a648 <__mdiff>:
 400a648:	28c00417 	ldw	r3,16(r5)
 400a64c:	30800417 	ldw	r2,16(r6)
 400a650:	defffa04 	addi	sp,sp,-24
 400a654:	dcc00315 	stw	r19,12(sp)
 400a658:	dc800215 	stw	r18,8(sp)
 400a65c:	dfc00515 	stw	ra,20(sp)
 400a660:	dd000415 	stw	r20,16(sp)
 400a664:	dc400115 	stw	r17,4(sp)
 400a668:	dc000015 	stw	r16,0(sp)
 400a66c:	1887c83a 	sub	r3,r3,r2
 400a670:	2825883a 	mov	r18,r5
 400a674:	3027883a 	mov	r19,r6
 400a678:	1800141e 	bne	r3,zero,400a6cc <__mdiff+0x84>
 400a67c:	1085883a 	add	r2,r2,r2
 400a680:	1085883a 	add	r2,r2,r2
 400a684:	2a000504 	addi	r8,r5,20
 400a688:	34000504 	addi	r16,r6,20
 400a68c:	4087883a 	add	r3,r8,r2
 400a690:	8085883a 	add	r2,r16,r2
 400a694:	00000106 	br	400a69c <__mdiff+0x54>
 400a698:	40c0592e 	bgeu	r8,r3,400a800 <__mdiff+0x1b8>
 400a69c:	18ffff04 	addi	r3,r3,-4
 400a6a0:	10bfff04 	addi	r2,r2,-4
 400a6a4:	19c00017 	ldw	r7,0(r3)
 400a6a8:	11400017 	ldw	r5,0(r2)
 400a6ac:	397ffa26 	beq	r7,r5,400a698 <__alt_data_end+0xfc00a698>
 400a6b0:	3940592e 	bgeu	r7,r5,400a818 <__mdiff+0x1d0>
 400a6b4:	9005883a 	mov	r2,r18
 400a6b8:	4023883a 	mov	r17,r8
 400a6bc:	9825883a 	mov	r18,r19
 400a6c0:	05000044 	movi	r20,1
 400a6c4:	1027883a 	mov	r19,r2
 400a6c8:	00000406 	br	400a6dc <__mdiff+0x94>
 400a6cc:	18005616 	blt	r3,zero,400a828 <__mdiff+0x1e0>
 400a6d0:	34400504 	addi	r17,r6,20
 400a6d4:	2c000504 	addi	r16,r5,20
 400a6d8:	0029883a 	mov	r20,zero
 400a6dc:	91400117 	ldw	r5,4(r18)
 400a6e0:	4009d200 	call	4009d20 <_Balloc>
 400a6e4:	92400417 	ldw	r9,16(r18)
 400a6e8:	9b000417 	ldw	r12,16(r19)
 400a6ec:	12c00504 	addi	r11,r2,20
 400a6f0:	4a51883a 	add	r8,r9,r9
 400a6f4:	6319883a 	add	r12,r12,r12
 400a6f8:	4211883a 	add	r8,r8,r8
 400a6fc:	6319883a 	add	r12,r12,r12
 400a700:	15000315 	stw	r20,12(r2)
 400a704:	8211883a 	add	r8,r16,r8
 400a708:	8b19883a 	add	r12,r17,r12
 400a70c:	0007883a 	mov	r3,zero
 400a710:	81400017 	ldw	r5,0(r16)
 400a714:	89c00017 	ldw	r7,0(r17)
 400a718:	59800104 	addi	r6,r11,4
 400a71c:	293fffcc 	andi	r4,r5,65535
 400a720:	20c7883a 	add	r3,r4,r3
 400a724:	393fffcc 	andi	r4,r7,65535
 400a728:	1909c83a 	sub	r4,r3,r4
 400a72c:	280ad43a 	srli	r5,r5,16
 400a730:	380ed43a 	srli	r7,r7,16
 400a734:	2007d43a 	srai	r3,r4,16
 400a738:	213fffcc 	andi	r4,r4,65535
 400a73c:	29cbc83a 	sub	r5,r5,r7
 400a740:	28c7883a 	add	r3,r5,r3
 400a744:	180a943a 	slli	r5,r3,16
 400a748:	8c400104 	addi	r17,r17,4
 400a74c:	84000104 	addi	r16,r16,4
 400a750:	2908b03a 	or	r4,r5,r4
 400a754:	59000015 	stw	r4,0(r11)
 400a758:	1807d43a 	srai	r3,r3,16
 400a75c:	3015883a 	mov	r10,r6
 400a760:	3017883a 	mov	r11,r6
 400a764:	8b3fea36 	bltu	r17,r12,400a710 <__alt_data_end+0xfc00a710>
 400a768:	8200162e 	bgeu	r16,r8,400a7c4 <__mdiff+0x17c>
 400a76c:	8017883a 	mov	r11,r16
 400a770:	59400017 	ldw	r5,0(r11)
 400a774:	31800104 	addi	r6,r6,4
 400a778:	5ac00104 	addi	r11,r11,4
 400a77c:	293fffcc 	andi	r4,r5,65535
 400a780:	20c7883a 	add	r3,r4,r3
 400a784:	280ed43a 	srli	r7,r5,16
 400a788:	180bd43a 	srai	r5,r3,16
 400a78c:	193fffcc 	andi	r4,r3,65535
 400a790:	3947883a 	add	r3,r7,r5
 400a794:	180a943a 	slli	r5,r3,16
 400a798:	1807d43a 	srai	r3,r3,16
 400a79c:	2908b03a 	or	r4,r5,r4
 400a7a0:	313fff15 	stw	r4,-4(r6)
 400a7a4:	5a3ff236 	bltu	r11,r8,400a770 <__alt_data_end+0xfc00a770>
 400a7a8:	0406303a 	nor	r3,zero,r16
 400a7ac:	1a07883a 	add	r3,r3,r8
 400a7b0:	1806d0ba 	srli	r3,r3,2
 400a7b4:	18c00044 	addi	r3,r3,1
 400a7b8:	18c7883a 	add	r3,r3,r3
 400a7bc:	18c7883a 	add	r3,r3,r3
 400a7c0:	50d5883a 	add	r10,r10,r3
 400a7c4:	50ffff04 	addi	r3,r10,-4
 400a7c8:	2000041e 	bne	r4,zero,400a7dc <__mdiff+0x194>
 400a7cc:	18ffff04 	addi	r3,r3,-4
 400a7d0:	19000017 	ldw	r4,0(r3)
 400a7d4:	4a7fffc4 	addi	r9,r9,-1
 400a7d8:	203ffc26 	beq	r4,zero,400a7cc <__alt_data_end+0xfc00a7cc>
 400a7dc:	12400415 	stw	r9,16(r2)
 400a7e0:	dfc00517 	ldw	ra,20(sp)
 400a7e4:	dd000417 	ldw	r20,16(sp)
 400a7e8:	dcc00317 	ldw	r19,12(sp)
 400a7ec:	dc800217 	ldw	r18,8(sp)
 400a7f0:	dc400117 	ldw	r17,4(sp)
 400a7f4:	dc000017 	ldw	r16,0(sp)
 400a7f8:	dec00604 	addi	sp,sp,24
 400a7fc:	f800283a 	ret
 400a800:	000b883a 	mov	r5,zero
 400a804:	4009d200 	call	4009d20 <_Balloc>
 400a808:	00c00044 	movi	r3,1
 400a80c:	10c00415 	stw	r3,16(r2)
 400a810:	10000515 	stw	zero,20(r2)
 400a814:	003ff206 	br	400a7e0 <__alt_data_end+0xfc00a7e0>
 400a818:	8023883a 	mov	r17,r16
 400a81c:	0029883a 	mov	r20,zero
 400a820:	4021883a 	mov	r16,r8
 400a824:	003fad06 	br	400a6dc <__alt_data_end+0xfc00a6dc>
 400a828:	9005883a 	mov	r2,r18
 400a82c:	94400504 	addi	r17,r18,20
 400a830:	9c000504 	addi	r16,r19,20
 400a834:	9825883a 	mov	r18,r19
 400a838:	05000044 	movi	r20,1
 400a83c:	1027883a 	mov	r19,r2
 400a840:	003fa606 	br	400a6dc <__alt_data_end+0xfc00a6dc>

0400a844 <__ulp>:
 400a844:	295ffc2c 	andhi	r5,r5,32752
 400a848:	00bf3034 	movhi	r2,64704
 400a84c:	2887883a 	add	r3,r5,r2
 400a850:	00c0020e 	bge	zero,r3,400a85c <__ulp+0x18>
 400a854:	0005883a 	mov	r2,zero
 400a858:	f800283a 	ret
 400a85c:	00c7c83a 	sub	r3,zero,r3
 400a860:	1807d53a 	srai	r3,r3,20
 400a864:	008004c4 	movi	r2,19
 400a868:	10c00b0e 	bge	r2,r3,400a898 <__ulp+0x54>
 400a86c:	18bffb04 	addi	r2,r3,-20
 400a870:	01000784 	movi	r4,30
 400a874:	0007883a 	mov	r3,zero
 400a878:	20800516 	blt	r4,r2,400a890 <__ulp+0x4c>
 400a87c:	010007c4 	movi	r4,31
 400a880:	2089c83a 	sub	r4,r4,r2
 400a884:	00800044 	movi	r2,1
 400a888:	1104983a 	sll	r2,r2,r4
 400a88c:	f800283a 	ret
 400a890:	00800044 	movi	r2,1
 400a894:	f800283a 	ret
 400a898:	01400234 	movhi	r5,8
 400a89c:	28c7d83a 	sra	r3,r5,r3
 400a8a0:	0005883a 	mov	r2,zero
 400a8a4:	f800283a 	ret

0400a8a8 <__b2d>:
 400a8a8:	defffa04 	addi	sp,sp,-24
 400a8ac:	dc000015 	stw	r16,0(sp)
 400a8b0:	24000417 	ldw	r16,16(r4)
 400a8b4:	dc400115 	stw	r17,4(sp)
 400a8b8:	24400504 	addi	r17,r4,20
 400a8bc:	8421883a 	add	r16,r16,r16
 400a8c0:	8421883a 	add	r16,r16,r16
 400a8c4:	8c21883a 	add	r16,r17,r16
 400a8c8:	dc800215 	stw	r18,8(sp)
 400a8cc:	84bfff17 	ldw	r18,-4(r16)
 400a8d0:	dd000415 	stw	r20,16(sp)
 400a8d4:	dcc00315 	stw	r19,12(sp)
 400a8d8:	9009883a 	mov	r4,r18
 400a8dc:	2829883a 	mov	r20,r5
 400a8e0:	dfc00515 	stw	ra,20(sp)
 400a8e4:	400a0140 	call	400a014 <__hi0bits>
 400a8e8:	00c00804 	movi	r3,32
 400a8ec:	1889c83a 	sub	r4,r3,r2
 400a8f0:	a1000015 	stw	r4,0(r20)
 400a8f4:	01000284 	movi	r4,10
 400a8f8:	84ffff04 	addi	r19,r16,-4
 400a8fc:	20801216 	blt	r4,r2,400a948 <__b2d+0xa0>
 400a900:	018002c4 	movi	r6,11
 400a904:	308dc83a 	sub	r6,r6,r2
 400a908:	9186d83a 	srl	r3,r18,r6
 400a90c:	18cffc34 	orhi	r3,r3,16368
 400a910:	8cc0212e 	bgeu	r17,r19,400a998 <__b2d+0xf0>
 400a914:	813ffe17 	ldw	r4,-8(r16)
 400a918:	218cd83a 	srl	r6,r4,r6
 400a91c:	10800544 	addi	r2,r2,21
 400a920:	9084983a 	sll	r2,r18,r2
 400a924:	1184b03a 	or	r2,r2,r6
 400a928:	dfc00517 	ldw	ra,20(sp)
 400a92c:	dd000417 	ldw	r20,16(sp)
 400a930:	dcc00317 	ldw	r19,12(sp)
 400a934:	dc800217 	ldw	r18,8(sp)
 400a938:	dc400117 	ldw	r17,4(sp)
 400a93c:	dc000017 	ldw	r16,0(sp)
 400a940:	dec00604 	addi	sp,sp,24
 400a944:	f800283a 	ret
 400a948:	8cc00f2e 	bgeu	r17,r19,400a988 <__b2d+0xe0>
 400a94c:	117ffd44 	addi	r5,r2,-11
 400a950:	80bffe17 	ldw	r2,-8(r16)
 400a954:	28000e26 	beq	r5,zero,400a990 <__b2d+0xe8>
 400a958:	1949c83a 	sub	r4,r3,r5
 400a95c:	9164983a 	sll	r18,r18,r5
 400a960:	1106d83a 	srl	r3,r2,r4
 400a964:	81bffe04 	addi	r6,r16,-8
 400a968:	948ffc34 	orhi	r18,r18,16368
 400a96c:	90c6b03a 	or	r3,r18,r3
 400a970:	89800e2e 	bgeu	r17,r6,400a9ac <__b2d+0x104>
 400a974:	81bffd17 	ldw	r6,-12(r16)
 400a978:	1144983a 	sll	r2,r2,r5
 400a97c:	310ad83a 	srl	r5,r6,r4
 400a980:	2884b03a 	or	r2,r5,r2
 400a984:	003fe806 	br	400a928 <__alt_data_end+0xfc00a928>
 400a988:	10bffd44 	addi	r2,r2,-11
 400a98c:	1000041e 	bne	r2,zero,400a9a0 <__b2d+0xf8>
 400a990:	90cffc34 	orhi	r3,r18,16368
 400a994:	003fe406 	br	400a928 <__alt_data_end+0xfc00a928>
 400a998:	000d883a 	mov	r6,zero
 400a99c:	003fdf06 	br	400a91c <__alt_data_end+0xfc00a91c>
 400a9a0:	90a4983a 	sll	r18,r18,r2
 400a9a4:	0005883a 	mov	r2,zero
 400a9a8:	003ff906 	br	400a990 <__alt_data_end+0xfc00a990>
 400a9ac:	1144983a 	sll	r2,r2,r5
 400a9b0:	003fdd06 	br	400a928 <__alt_data_end+0xfc00a928>

0400a9b4 <__d2b>:
 400a9b4:	defff804 	addi	sp,sp,-32
 400a9b8:	dc000215 	stw	r16,8(sp)
 400a9bc:	3021883a 	mov	r16,r6
 400a9c0:	dc400315 	stw	r17,12(sp)
 400a9c4:	8022907a 	slli	r17,r16,1
 400a9c8:	dd000615 	stw	r20,24(sp)
 400a9cc:	2829883a 	mov	r20,r5
 400a9d0:	01400044 	movi	r5,1
 400a9d4:	dcc00515 	stw	r19,20(sp)
 400a9d8:	dc800415 	stw	r18,16(sp)
 400a9dc:	dfc00715 	stw	ra,28(sp)
 400a9e0:	3825883a 	mov	r18,r7
 400a9e4:	8822d57a 	srli	r17,r17,21
 400a9e8:	4009d200 	call	4009d20 <_Balloc>
 400a9ec:	1027883a 	mov	r19,r2
 400a9f0:	00800434 	movhi	r2,16
 400a9f4:	10bfffc4 	addi	r2,r2,-1
 400a9f8:	808c703a 	and	r6,r16,r2
 400a9fc:	88000126 	beq	r17,zero,400aa04 <__d2b+0x50>
 400aa00:	31800434 	orhi	r6,r6,16
 400aa04:	d9800015 	stw	r6,0(sp)
 400aa08:	a0002426 	beq	r20,zero,400aa9c <__d2b+0xe8>
 400aa0c:	d9000104 	addi	r4,sp,4
 400aa10:	dd000115 	stw	r20,4(sp)
 400aa14:	400a07c0 	call	400a07c <__lo0bits>
 400aa18:	d8c00017 	ldw	r3,0(sp)
 400aa1c:	10002f1e 	bne	r2,zero,400aadc <__d2b+0x128>
 400aa20:	d9000117 	ldw	r4,4(sp)
 400aa24:	99000515 	stw	r4,20(r19)
 400aa28:	1821003a 	cmpeq	r16,r3,zero
 400aa2c:	01000084 	movi	r4,2
 400aa30:	2421c83a 	sub	r16,r4,r16
 400aa34:	98c00615 	stw	r3,24(r19)
 400aa38:	9c000415 	stw	r16,16(r19)
 400aa3c:	88001f1e 	bne	r17,zero,400aabc <__d2b+0x108>
 400aa40:	10bef384 	addi	r2,r2,-1074
 400aa44:	90800015 	stw	r2,0(r18)
 400aa48:	00900034 	movhi	r2,16384
 400aa4c:	10bfffc4 	addi	r2,r2,-1
 400aa50:	8085883a 	add	r2,r16,r2
 400aa54:	1085883a 	add	r2,r2,r2
 400aa58:	1085883a 	add	r2,r2,r2
 400aa5c:	9885883a 	add	r2,r19,r2
 400aa60:	11000517 	ldw	r4,20(r2)
 400aa64:	8020917a 	slli	r16,r16,5
 400aa68:	400a0140 	call	400a014 <__hi0bits>
 400aa6c:	d8c00817 	ldw	r3,32(sp)
 400aa70:	8085c83a 	sub	r2,r16,r2
 400aa74:	18800015 	stw	r2,0(r3)
 400aa78:	9805883a 	mov	r2,r19
 400aa7c:	dfc00717 	ldw	ra,28(sp)
 400aa80:	dd000617 	ldw	r20,24(sp)
 400aa84:	dcc00517 	ldw	r19,20(sp)
 400aa88:	dc800417 	ldw	r18,16(sp)
 400aa8c:	dc400317 	ldw	r17,12(sp)
 400aa90:	dc000217 	ldw	r16,8(sp)
 400aa94:	dec00804 	addi	sp,sp,32
 400aa98:	f800283a 	ret
 400aa9c:	d809883a 	mov	r4,sp
 400aaa0:	400a07c0 	call	400a07c <__lo0bits>
 400aaa4:	d8c00017 	ldw	r3,0(sp)
 400aaa8:	04000044 	movi	r16,1
 400aaac:	9c000415 	stw	r16,16(r19)
 400aab0:	98c00515 	stw	r3,20(r19)
 400aab4:	10800804 	addi	r2,r2,32
 400aab8:	883fe126 	beq	r17,zero,400aa40 <__alt_data_end+0xfc00aa40>
 400aabc:	00c00d44 	movi	r3,53
 400aac0:	8c7ef344 	addi	r17,r17,-1075
 400aac4:	88a3883a 	add	r17,r17,r2
 400aac8:	1885c83a 	sub	r2,r3,r2
 400aacc:	d8c00817 	ldw	r3,32(sp)
 400aad0:	94400015 	stw	r17,0(r18)
 400aad4:	18800015 	stw	r2,0(r3)
 400aad8:	003fe706 	br	400aa78 <__alt_data_end+0xfc00aa78>
 400aadc:	01000804 	movi	r4,32
 400aae0:	2089c83a 	sub	r4,r4,r2
 400aae4:	1908983a 	sll	r4,r3,r4
 400aae8:	d9400117 	ldw	r5,4(sp)
 400aaec:	1886d83a 	srl	r3,r3,r2
 400aaf0:	2148b03a 	or	r4,r4,r5
 400aaf4:	99000515 	stw	r4,20(r19)
 400aaf8:	d8c00015 	stw	r3,0(sp)
 400aafc:	003fca06 	br	400aa28 <__alt_data_end+0xfc00aa28>

0400ab00 <__ratio>:
 400ab00:	defff904 	addi	sp,sp,-28
 400ab04:	dc400315 	stw	r17,12(sp)
 400ab08:	2823883a 	mov	r17,r5
 400ab0c:	d9400104 	addi	r5,sp,4
 400ab10:	dfc00615 	stw	ra,24(sp)
 400ab14:	dcc00515 	stw	r19,20(sp)
 400ab18:	dc800415 	stw	r18,16(sp)
 400ab1c:	2027883a 	mov	r19,r4
 400ab20:	dc000215 	stw	r16,8(sp)
 400ab24:	400a8a80 	call	400a8a8 <__b2d>
 400ab28:	d80b883a 	mov	r5,sp
 400ab2c:	8809883a 	mov	r4,r17
 400ab30:	1025883a 	mov	r18,r2
 400ab34:	1821883a 	mov	r16,r3
 400ab38:	400a8a80 	call	400a8a8 <__b2d>
 400ab3c:	8a000417 	ldw	r8,16(r17)
 400ab40:	99000417 	ldw	r4,16(r19)
 400ab44:	d9400117 	ldw	r5,4(sp)
 400ab48:	2209c83a 	sub	r4,r4,r8
 400ab4c:	2010917a 	slli	r8,r4,5
 400ab50:	d9000017 	ldw	r4,0(sp)
 400ab54:	2909c83a 	sub	r4,r5,r4
 400ab58:	4109883a 	add	r4,r8,r4
 400ab5c:	01000e0e 	bge	zero,r4,400ab98 <__ratio+0x98>
 400ab60:	2008953a 	slli	r4,r4,20
 400ab64:	2421883a 	add	r16,r4,r16
 400ab68:	100d883a 	mov	r6,r2
 400ab6c:	180f883a 	mov	r7,r3
 400ab70:	9009883a 	mov	r4,r18
 400ab74:	800b883a 	mov	r5,r16
 400ab78:	400e7e40 	call	400e7e4 <__divdf3>
 400ab7c:	dfc00617 	ldw	ra,24(sp)
 400ab80:	dcc00517 	ldw	r19,20(sp)
 400ab84:	dc800417 	ldw	r18,16(sp)
 400ab88:	dc400317 	ldw	r17,12(sp)
 400ab8c:	dc000217 	ldw	r16,8(sp)
 400ab90:	dec00704 	addi	sp,sp,28
 400ab94:	f800283a 	ret
 400ab98:	2008953a 	slli	r4,r4,20
 400ab9c:	1907c83a 	sub	r3,r3,r4
 400aba0:	003ff106 	br	400ab68 <__alt_data_end+0xfc00ab68>

0400aba4 <_mprec_log10>:
 400aba4:	defffe04 	addi	sp,sp,-8
 400aba8:	dc000015 	stw	r16,0(sp)
 400abac:	dfc00115 	stw	ra,4(sp)
 400abb0:	008005c4 	movi	r2,23
 400abb4:	2021883a 	mov	r16,r4
 400abb8:	11000d0e 	bge	r2,r4,400abf0 <_mprec_log10+0x4c>
 400abbc:	0005883a 	mov	r2,zero
 400abc0:	00cffc34 	movhi	r3,16368
 400abc4:	843fffc4 	addi	r16,r16,-1
 400abc8:	000d883a 	mov	r6,zero
 400abcc:	01d00934 	movhi	r7,16420
 400abd0:	1009883a 	mov	r4,r2
 400abd4:	180b883a 	mov	r5,r3
 400abd8:	400f3240 	call	400f324 <__muldf3>
 400abdc:	803ff91e 	bne	r16,zero,400abc4 <__alt_data_end+0xfc00abc4>
 400abe0:	dfc00117 	ldw	ra,4(sp)
 400abe4:	dc000017 	ldw	r16,0(sp)
 400abe8:	dec00204 	addi	sp,sp,8
 400abec:	f800283a 	ret
 400abf0:	202090fa 	slli	r16,r4,3
 400abf4:	00810074 	movhi	r2,1025
 400abf8:	1095fe04 	addi	r2,r2,22520
 400abfc:	1421883a 	add	r16,r2,r16
 400ac00:	80800017 	ldw	r2,0(r16)
 400ac04:	80c00117 	ldw	r3,4(r16)
 400ac08:	dfc00117 	ldw	ra,4(sp)
 400ac0c:	dc000017 	ldw	r16,0(sp)
 400ac10:	dec00204 	addi	sp,sp,8
 400ac14:	f800283a 	ret

0400ac18 <__copybits>:
 400ac18:	297fffc4 	addi	r5,r5,-1
 400ac1c:	280fd17a 	srai	r7,r5,5
 400ac20:	30c00417 	ldw	r3,16(r6)
 400ac24:	30800504 	addi	r2,r6,20
 400ac28:	39c00044 	addi	r7,r7,1
 400ac2c:	18c7883a 	add	r3,r3,r3
 400ac30:	39cf883a 	add	r7,r7,r7
 400ac34:	18c7883a 	add	r3,r3,r3
 400ac38:	39cf883a 	add	r7,r7,r7
 400ac3c:	10c7883a 	add	r3,r2,r3
 400ac40:	21cf883a 	add	r7,r4,r7
 400ac44:	10c00d2e 	bgeu	r2,r3,400ac7c <__copybits+0x64>
 400ac48:	200b883a 	mov	r5,r4
 400ac4c:	12000017 	ldw	r8,0(r2)
 400ac50:	29400104 	addi	r5,r5,4
 400ac54:	10800104 	addi	r2,r2,4
 400ac58:	2a3fff15 	stw	r8,-4(r5)
 400ac5c:	10fffb36 	bltu	r2,r3,400ac4c <__alt_data_end+0xfc00ac4c>
 400ac60:	1985c83a 	sub	r2,r3,r6
 400ac64:	10bffac4 	addi	r2,r2,-21
 400ac68:	1004d0ba 	srli	r2,r2,2
 400ac6c:	10800044 	addi	r2,r2,1
 400ac70:	1085883a 	add	r2,r2,r2
 400ac74:	1085883a 	add	r2,r2,r2
 400ac78:	2089883a 	add	r4,r4,r2
 400ac7c:	21c0032e 	bgeu	r4,r7,400ac8c <__copybits+0x74>
 400ac80:	20000015 	stw	zero,0(r4)
 400ac84:	21000104 	addi	r4,r4,4
 400ac88:	21fffd36 	bltu	r4,r7,400ac80 <__alt_data_end+0xfc00ac80>
 400ac8c:	f800283a 	ret

0400ac90 <__any_on>:
 400ac90:	20c00417 	ldw	r3,16(r4)
 400ac94:	2805d17a 	srai	r2,r5,5
 400ac98:	21000504 	addi	r4,r4,20
 400ac9c:	18800d0e 	bge	r3,r2,400acd4 <__any_on+0x44>
 400aca0:	18c7883a 	add	r3,r3,r3
 400aca4:	18c7883a 	add	r3,r3,r3
 400aca8:	20c7883a 	add	r3,r4,r3
 400acac:	20c0192e 	bgeu	r4,r3,400ad14 <__any_on+0x84>
 400acb0:	18bfff17 	ldw	r2,-4(r3)
 400acb4:	18ffff04 	addi	r3,r3,-4
 400acb8:	1000041e 	bne	r2,zero,400accc <__any_on+0x3c>
 400acbc:	20c0142e 	bgeu	r4,r3,400ad10 <__any_on+0x80>
 400acc0:	18ffff04 	addi	r3,r3,-4
 400acc4:	19400017 	ldw	r5,0(r3)
 400acc8:	283ffc26 	beq	r5,zero,400acbc <__alt_data_end+0xfc00acbc>
 400accc:	00800044 	movi	r2,1
 400acd0:	f800283a 	ret
 400acd4:	10c00a0e 	bge	r2,r3,400ad00 <__any_on+0x70>
 400acd8:	1085883a 	add	r2,r2,r2
 400acdc:	1085883a 	add	r2,r2,r2
 400ace0:	294007cc 	andi	r5,r5,31
 400ace4:	2087883a 	add	r3,r4,r2
 400ace8:	283ff026 	beq	r5,zero,400acac <__alt_data_end+0xfc00acac>
 400acec:	19800017 	ldw	r6,0(r3)
 400acf0:	3144d83a 	srl	r2,r6,r5
 400acf4:	114a983a 	sll	r5,r2,r5
 400acf8:	317ff41e 	bne	r6,r5,400accc <__alt_data_end+0xfc00accc>
 400acfc:	003feb06 	br	400acac <__alt_data_end+0xfc00acac>
 400ad00:	1085883a 	add	r2,r2,r2
 400ad04:	1085883a 	add	r2,r2,r2
 400ad08:	2087883a 	add	r3,r4,r2
 400ad0c:	003fe706 	br	400acac <__alt_data_end+0xfc00acac>
 400ad10:	f800283a 	ret
 400ad14:	0005883a 	mov	r2,zero
 400ad18:	f800283a 	ret

0400ad1c <_realloc_r>:
 400ad1c:	defff604 	addi	sp,sp,-40
 400ad20:	dc800215 	stw	r18,8(sp)
 400ad24:	dfc00915 	stw	ra,36(sp)
 400ad28:	df000815 	stw	fp,32(sp)
 400ad2c:	ddc00715 	stw	r23,28(sp)
 400ad30:	dd800615 	stw	r22,24(sp)
 400ad34:	dd400515 	stw	r21,20(sp)
 400ad38:	dd000415 	stw	r20,16(sp)
 400ad3c:	dcc00315 	stw	r19,12(sp)
 400ad40:	dc400115 	stw	r17,4(sp)
 400ad44:	dc000015 	stw	r16,0(sp)
 400ad48:	3025883a 	mov	r18,r6
 400ad4c:	2800b726 	beq	r5,zero,400b02c <_realloc_r+0x310>
 400ad50:	282b883a 	mov	r21,r5
 400ad54:	2029883a 	mov	r20,r4
 400ad58:	4010ab80 	call	4010ab8 <__malloc_lock>
 400ad5c:	a8bfff17 	ldw	r2,-4(r21)
 400ad60:	043fff04 	movi	r16,-4
 400ad64:	90c002c4 	addi	r3,r18,11
 400ad68:	01000584 	movi	r4,22
 400ad6c:	acfffe04 	addi	r19,r21,-8
 400ad70:	1420703a 	and	r16,r2,r16
 400ad74:	20c0332e 	bgeu	r4,r3,400ae44 <_realloc_r+0x128>
 400ad78:	047ffe04 	movi	r17,-8
 400ad7c:	1c62703a 	and	r17,r3,r17
 400ad80:	8807883a 	mov	r3,r17
 400ad84:	88005816 	blt	r17,zero,400aee8 <_realloc_r+0x1cc>
 400ad88:	8c805736 	bltu	r17,r18,400aee8 <_realloc_r+0x1cc>
 400ad8c:	80c0300e 	bge	r16,r3,400ae50 <_realloc_r+0x134>
 400ad90:	07010074 	movhi	fp,1025
 400ad94:	e7165c04 	addi	fp,fp,22896
 400ad98:	e1c00217 	ldw	r7,8(fp)
 400ad9c:	9c09883a 	add	r4,r19,r16
 400ada0:	22000117 	ldw	r8,4(r4)
 400ada4:	21c06326 	beq	r4,r7,400af34 <_realloc_r+0x218>
 400ada8:	017fff84 	movi	r5,-2
 400adac:	414a703a 	and	r5,r8,r5
 400adb0:	214b883a 	add	r5,r4,r5
 400adb4:	29800117 	ldw	r6,4(r5)
 400adb8:	3180004c 	andi	r6,r6,1
 400adbc:	30003f26 	beq	r6,zero,400aebc <_realloc_r+0x1a0>
 400adc0:	1080004c 	andi	r2,r2,1
 400adc4:	10008326 	beq	r2,zero,400afd4 <_realloc_r+0x2b8>
 400adc8:	900b883a 	mov	r5,r18
 400adcc:	a009883a 	mov	r4,r20
 400add0:	4003e340 	call	4003e34 <_malloc_r>
 400add4:	1025883a 	mov	r18,r2
 400add8:	10011e26 	beq	r2,zero,400b254 <_realloc_r+0x538>
 400addc:	a93fff17 	ldw	r4,-4(r21)
 400ade0:	10fffe04 	addi	r3,r2,-8
 400ade4:	00bfff84 	movi	r2,-2
 400ade8:	2084703a 	and	r2,r4,r2
 400adec:	9885883a 	add	r2,r19,r2
 400adf0:	1880ee26 	beq	r3,r2,400b1ac <_realloc_r+0x490>
 400adf4:	81bfff04 	addi	r6,r16,-4
 400adf8:	00800904 	movi	r2,36
 400adfc:	1180b836 	bltu	r2,r6,400b0e0 <_realloc_r+0x3c4>
 400ae00:	00c004c4 	movi	r3,19
 400ae04:	19809636 	bltu	r3,r6,400b060 <_realloc_r+0x344>
 400ae08:	9005883a 	mov	r2,r18
 400ae0c:	a807883a 	mov	r3,r21
 400ae10:	19000017 	ldw	r4,0(r3)
 400ae14:	11000015 	stw	r4,0(r2)
 400ae18:	19000117 	ldw	r4,4(r3)
 400ae1c:	11000115 	stw	r4,4(r2)
 400ae20:	18c00217 	ldw	r3,8(r3)
 400ae24:	10c00215 	stw	r3,8(r2)
 400ae28:	a80b883a 	mov	r5,r21
 400ae2c:	a009883a 	mov	r4,r20
 400ae30:	4008dcc0 	call	4008dcc <_free_r>
 400ae34:	a009883a 	mov	r4,r20
 400ae38:	4010adc0 	call	4010adc <__malloc_unlock>
 400ae3c:	9005883a 	mov	r2,r18
 400ae40:	00001206 	br	400ae8c <_realloc_r+0x170>
 400ae44:	00c00404 	movi	r3,16
 400ae48:	1823883a 	mov	r17,r3
 400ae4c:	003fce06 	br	400ad88 <__alt_data_end+0xfc00ad88>
 400ae50:	a825883a 	mov	r18,r21
 400ae54:	8445c83a 	sub	r2,r16,r17
 400ae58:	00c003c4 	movi	r3,15
 400ae5c:	18802636 	bltu	r3,r2,400aef8 <_realloc_r+0x1dc>
 400ae60:	99800117 	ldw	r6,4(r19)
 400ae64:	9c07883a 	add	r3,r19,r16
 400ae68:	3180004c 	andi	r6,r6,1
 400ae6c:	3420b03a 	or	r16,r6,r16
 400ae70:	9c000115 	stw	r16,4(r19)
 400ae74:	18800117 	ldw	r2,4(r3)
 400ae78:	10800054 	ori	r2,r2,1
 400ae7c:	18800115 	stw	r2,4(r3)
 400ae80:	a009883a 	mov	r4,r20
 400ae84:	4010adc0 	call	4010adc <__malloc_unlock>
 400ae88:	9005883a 	mov	r2,r18
 400ae8c:	dfc00917 	ldw	ra,36(sp)
 400ae90:	df000817 	ldw	fp,32(sp)
 400ae94:	ddc00717 	ldw	r23,28(sp)
 400ae98:	dd800617 	ldw	r22,24(sp)
 400ae9c:	dd400517 	ldw	r21,20(sp)
 400aea0:	dd000417 	ldw	r20,16(sp)
 400aea4:	dcc00317 	ldw	r19,12(sp)
 400aea8:	dc800217 	ldw	r18,8(sp)
 400aeac:	dc400117 	ldw	r17,4(sp)
 400aeb0:	dc000017 	ldw	r16,0(sp)
 400aeb4:	dec00a04 	addi	sp,sp,40
 400aeb8:	f800283a 	ret
 400aebc:	017fff04 	movi	r5,-4
 400aec0:	414a703a 	and	r5,r8,r5
 400aec4:	814d883a 	add	r6,r16,r5
 400aec8:	30c01f16 	blt	r6,r3,400af48 <_realloc_r+0x22c>
 400aecc:	20800317 	ldw	r2,12(r4)
 400aed0:	20c00217 	ldw	r3,8(r4)
 400aed4:	a825883a 	mov	r18,r21
 400aed8:	3021883a 	mov	r16,r6
 400aedc:	18800315 	stw	r2,12(r3)
 400aee0:	10c00215 	stw	r3,8(r2)
 400aee4:	003fdb06 	br	400ae54 <__alt_data_end+0xfc00ae54>
 400aee8:	00800304 	movi	r2,12
 400aeec:	a0800015 	stw	r2,0(r20)
 400aef0:	0005883a 	mov	r2,zero
 400aef4:	003fe506 	br	400ae8c <__alt_data_end+0xfc00ae8c>
 400aef8:	98c00117 	ldw	r3,4(r19)
 400aefc:	9c4b883a 	add	r5,r19,r17
 400af00:	11000054 	ori	r4,r2,1
 400af04:	18c0004c 	andi	r3,r3,1
 400af08:	1c62b03a 	or	r17,r3,r17
 400af0c:	9c400115 	stw	r17,4(r19)
 400af10:	29000115 	stw	r4,4(r5)
 400af14:	2885883a 	add	r2,r5,r2
 400af18:	10c00117 	ldw	r3,4(r2)
 400af1c:	29400204 	addi	r5,r5,8
 400af20:	a009883a 	mov	r4,r20
 400af24:	18c00054 	ori	r3,r3,1
 400af28:	10c00115 	stw	r3,4(r2)
 400af2c:	4008dcc0 	call	4008dcc <_free_r>
 400af30:	003fd306 	br	400ae80 <__alt_data_end+0xfc00ae80>
 400af34:	017fff04 	movi	r5,-4
 400af38:	414a703a 	and	r5,r8,r5
 400af3c:	89800404 	addi	r6,r17,16
 400af40:	8151883a 	add	r8,r16,r5
 400af44:	4180590e 	bge	r8,r6,400b0ac <_realloc_r+0x390>
 400af48:	1080004c 	andi	r2,r2,1
 400af4c:	103f9e1e 	bne	r2,zero,400adc8 <__alt_data_end+0xfc00adc8>
 400af50:	adbffe17 	ldw	r22,-8(r21)
 400af54:	00bfff04 	movi	r2,-4
 400af58:	9dadc83a 	sub	r22,r19,r22
 400af5c:	b1800117 	ldw	r6,4(r22)
 400af60:	3084703a 	and	r2,r6,r2
 400af64:	20002026 	beq	r4,zero,400afe8 <_realloc_r+0x2cc>
 400af68:	80af883a 	add	r23,r16,r2
 400af6c:	b96f883a 	add	r23,r23,r5
 400af70:	21c05f26 	beq	r4,r7,400b0f0 <_realloc_r+0x3d4>
 400af74:	b8c01c16 	blt	r23,r3,400afe8 <_realloc_r+0x2cc>
 400af78:	20800317 	ldw	r2,12(r4)
 400af7c:	20c00217 	ldw	r3,8(r4)
 400af80:	81bfff04 	addi	r6,r16,-4
 400af84:	01000904 	movi	r4,36
 400af88:	18800315 	stw	r2,12(r3)
 400af8c:	10c00215 	stw	r3,8(r2)
 400af90:	b0c00217 	ldw	r3,8(r22)
 400af94:	b0800317 	ldw	r2,12(r22)
 400af98:	b4800204 	addi	r18,r22,8
 400af9c:	18800315 	stw	r2,12(r3)
 400afa0:	10c00215 	stw	r3,8(r2)
 400afa4:	21801b36 	bltu	r4,r6,400b014 <_realloc_r+0x2f8>
 400afa8:	008004c4 	movi	r2,19
 400afac:	1180352e 	bgeu	r2,r6,400b084 <_realloc_r+0x368>
 400afb0:	a8800017 	ldw	r2,0(r21)
 400afb4:	b0800215 	stw	r2,8(r22)
 400afb8:	a8800117 	ldw	r2,4(r21)
 400afbc:	b0800315 	stw	r2,12(r22)
 400afc0:	008006c4 	movi	r2,27
 400afc4:	11807f36 	bltu	r2,r6,400b1c4 <_realloc_r+0x4a8>
 400afc8:	b0800404 	addi	r2,r22,16
 400afcc:	ad400204 	addi	r21,r21,8
 400afd0:	00002d06 	br	400b088 <_realloc_r+0x36c>
 400afd4:	adbffe17 	ldw	r22,-8(r21)
 400afd8:	00bfff04 	movi	r2,-4
 400afdc:	9dadc83a 	sub	r22,r19,r22
 400afe0:	b1000117 	ldw	r4,4(r22)
 400afe4:	2084703a 	and	r2,r4,r2
 400afe8:	b03f7726 	beq	r22,zero,400adc8 <__alt_data_end+0xfc00adc8>
 400afec:	80af883a 	add	r23,r16,r2
 400aff0:	b8ff7516 	blt	r23,r3,400adc8 <__alt_data_end+0xfc00adc8>
 400aff4:	b0800317 	ldw	r2,12(r22)
 400aff8:	b0c00217 	ldw	r3,8(r22)
 400affc:	81bfff04 	addi	r6,r16,-4
 400b000:	01000904 	movi	r4,36
 400b004:	18800315 	stw	r2,12(r3)
 400b008:	10c00215 	stw	r3,8(r2)
 400b00c:	b4800204 	addi	r18,r22,8
 400b010:	21bfe52e 	bgeu	r4,r6,400afa8 <__alt_data_end+0xfc00afa8>
 400b014:	a80b883a 	mov	r5,r21
 400b018:	9009883a 	mov	r4,r18
 400b01c:	4009a9c0 	call	4009a9c <memmove>
 400b020:	b821883a 	mov	r16,r23
 400b024:	b027883a 	mov	r19,r22
 400b028:	003f8a06 	br	400ae54 <__alt_data_end+0xfc00ae54>
 400b02c:	300b883a 	mov	r5,r6
 400b030:	dfc00917 	ldw	ra,36(sp)
 400b034:	df000817 	ldw	fp,32(sp)
 400b038:	ddc00717 	ldw	r23,28(sp)
 400b03c:	dd800617 	ldw	r22,24(sp)
 400b040:	dd400517 	ldw	r21,20(sp)
 400b044:	dd000417 	ldw	r20,16(sp)
 400b048:	dcc00317 	ldw	r19,12(sp)
 400b04c:	dc800217 	ldw	r18,8(sp)
 400b050:	dc400117 	ldw	r17,4(sp)
 400b054:	dc000017 	ldw	r16,0(sp)
 400b058:	dec00a04 	addi	sp,sp,40
 400b05c:	4003e341 	jmpi	4003e34 <_malloc_r>
 400b060:	a8c00017 	ldw	r3,0(r21)
 400b064:	90c00015 	stw	r3,0(r18)
 400b068:	a8c00117 	ldw	r3,4(r21)
 400b06c:	90c00115 	stw	r3,4(r18)
 400b070:	00c006c4 	movi	r3,27
 400b074:	19804536 	bltu	r3,r6,400b18c <_realloc_r+0x470>
 400b078:	90800204 	addi	r2,r18,8
 400b07c:	a8c00204 	addi	r3,r21,8
 400b080:	003f6306 	br	400ae10 <__alt_data_end+0xfc00ae10>
 400b084:	9005883a 	mov	r2,r18
 400b088:	a8c00017 	ldw	r3,0(r21)
 400b08c:	b821883a 	mov	r16,r23
 400b090:	b027883a 	mov	r19,r22
 400b094:	10c00015 	stw	r3,0(r2)
 400b098:	a8c00117 	ldw	r3,4(r21)
 400b09c:	10c00115 	stw	r3,4(r2)
 400b0a0:	a8c00217 	ldw	r3,8(r21)
 400b0a4:	10c00215 	stw	r3,8(r2)
 400b0a8:	003f6a06 	br	400ae54 <__alt_data_end+0xfc00ae54>
 400b0ac:	9c67883a 	add	r19,r19,r17
 400b0b0:	4445c83a 	sub	r2,r8,r17
 400b0b4:	e4c00215 	stw	r19,8(fp)
 400b0b8:	10800054 	ori	r2,r2,1
 400b0bc:	98800115 	stw	r2,4(r19)
 400b0c0:	a8bfff17 	ldw	r2,-4(r21)
 400b0c4:	a009883a 	mov	r4,r20
 400b0c8:	1080004c 	andi	r2,r2,1
 400b0cc:	1462b03a 	or	r17,r2,r17
 400b0d0:	ac7fff15 	stw	r17,-4(r21)
 400b0d4:	4010adc0 	call	4010adc <__malloc_unlock>
 400b0d8:	a805883a 	mov	r2,r21
 400b0dc:	003f6b06 	br	400ae8c <__alt_data_end+0xfc00ae8c>
 400b0e0:	a80b883a 	mov	r5,r21
 400b0e4:	9009883a 	mov	r4,r18
 400b0e8:	4009a9c0 	call	4009a9c <memmove>
 400b0ec:	003f4e06 	br	400ae28 <__alt_data_end+0xfc00ae28>
 400b0f0:	89000404 	addi	r4,r17,16
 400b0f4:	b93fbc16 	blt	r23,r4,400afe8 <__alt_data_end+0xfc00afe8>
 400b0f8:	b0800317 	ldw	r2,12(r22)
 400b0fc:	b0c00217 	ldw	r3,8(r22)
 400b100:	81bfff04 	addi	r6,r16,-4
 400b104:	01000904 	movi	r4,36
 400b108:	18800315 	stw	r2,12(r3)
 400b10c:	10c00215 	stw	r3,8(r2)
 400b110:	b4800204 	addi	r18,r22,8
 400b114:	21804336 	bltu	r4,r6,400b224 <_realloc_r+0x508>
 400b118:	008004c4 	movi	r2,19
 400b11c:	11803f2e 	bgeu	r2,r6,400b21c <_realloc_r+0x500>
 400b120:	a8800017 	ldw	r2,0(r21)
 400b124:	b0800215 	stw	r2,8(r22)
 400b128:	a8800117 	ldw	r2,4(r21)
 400b12c:	b0800315 	stw	r2,12(r22)
 400b130:	008006c4 	movi	r2,27
 400b134:	11803f36 	bltu	r2,r6,400b234 <_realloc_r+0x518>
 400b138:	b0800404 	addi	r2,r22,16
 400b13c:	ad400204 	addi	r21,r21,8
 400b140:	a8c00017 	ldw	r3,0(r21)
 400b144:	10c00015 	stw	r3,0(r2)
 400b148:	a8c00117 	ldw	r3,4(r21)
 400b14c:	10c00115 	stw	r3,4(r2)
 400b150:	a8c00217 	ldw	r3,8(r21)
 400b154:	10c00215 	stw	r3,8(r2)
 400b158:	b447883a 	add	r3,r22,r17
 400b15c:	bc45c83a 	sub	r2,r23,r17
 400b160:	e0c00215 	stw	r3,8(fp)
 400b164:	10800054 	ori	r2,r2,1
 400b168:	18800115 	stw	r2,4(r3)
 400b16c:	b0800117 	ldw	r2,4(r22)
 400b170:	a009883a 	mov	r4,r20
 400b174:	1080004c 	andi	r2,r2,1
 400b178:	1462b03a 	or	r17,r2,r17
 400b17c:	b4400115 	stw	r17,4(r22)
 400b180:	4010adc0 	call	4010adc <__malloc_unlock>
 400b184:	9005883a 	mov	r2,r18
 400b188:	003f4006 	br	400ae8c <__alt_data_end+0xfc00ae8c>
 400b18c:	a8c00217 	ldw	r3,8(r21)
 400b190:	90c00215 	stw	r3,8(r18)
 400b194:	a8c00317 	ldw	r3,12(r21)
 400b198:	90c00315 	stw	r3,12(r18)
 400b19c:	30801126 	beq	r6,r2,400b1e4 <_realloc_r+0x4c8>
 400b1a0:	90800404 	addi	r2,r18,16
 400b1a4:	a8c00404 	addi	r3,r21,16
 400b1a8:	003f1906 	br	400ae10 <__alt_data_end+0xfc00ae10>
 400b1ac:	90ffff17 	ldw	r3,-4(r18)
 400b1b0:	00bfff04 	movi	r2,-4
 400b1b4:	a825883a 	mov	r18,r21
 400b1b8:	1884703a 	and	r2,r3,r2
 400b1bc:	80a1883a 	add	r16,r16,r2
 400b1c0:	003f2406 	br	400ae54 <__alt_data_end+0xfc00ae54>
 400b1c4:	a8800217 	ldw	r2,8(r21)
 400b1c8:	b0800415 	stw	r2,16(r22)
 400b1cc:	a8800317 	ldw	r2,12(r21)
 400b1d0:	b0800515 	stw	r2,20(r22)
 400b1d4:	31000a26 	beq	r6,r4,400b200 <_realloc_r+0x4e4>
 400b1d8:	b0800604 	addi	r2,r22,24
 400b1dc:	ad400404 	addi	r21,r21,16
 400b1e0:	003fa906 	br	400b088 <__alt_data_end+0xfc00b088>
 400b1e4:	a9000417 	ldw	r4,16(r21)
 400b1e8:	90800604 	addi	r2,r18,24
 400b1ec:	a8c00604 	addi	r3,r21,24
 400b1f0:	91000415 	stw	r4,16(r18)
 400b1f4:	a9000517 	ldw	r4,20(r21)
 400b1f8:	91000515 	stw	r4,20(r18)
 400b1fc:	003f0406 	br	400ae10 <__alt_data_end+0xfc00ae10>
 400b200:	a8c00417 	ldw	r3,16(r21)
 400b204:	ad400604 	addi	r21,r21,24
 400b208:	b0800804 	addi	r2,r22,32
 400b20c:	b0c00615 	stw	r3,24(r22)
 400b210:	a8ffff17 	ldw	r3,-4(r21)
 400b214:	b0c00715 	stw	r3,28(r22)
 400b218:	003f9b06 	br	400b088 <__alt_data_end+0xfc00b088>
 400b21c:	9005883a 	mov	r2,r18
 400b220:	003fc706 	br	400b140 <__alt_data_end+0xfc00b140>
 400b224:	a80b883a 	mov	r5,r21
 400b228:	9009883a 	mov	r4,r18
 400b22c:	4009a9c0 	call	4009a9c <memmove>
 400b230:	003fc906 	br	400b158 <__alt_data_end+0xfc00b158>
 400b234:	a8800217 	ldw	r2,8(r21)
 400b238:	b0800415 	stw	r2,16(r22)
 400b23c:	a8800317 	ldw	r2,12(r21)
 400b240:	b0800515 	stw	r2,20(r22)
 400b244:	31000726 	beq	r6,r4,400b264 <_realloc_r+0x548>
 400b248:	b0800604 	addi	r2,r22,24
 400b24c:	ad400404 	addi	r21,r21,16
 400b250:	003fbb06 	br	400b140 <__alt_data_end+0xfc00b140>
 400b254:	a009883a 	mov	r4,r20
 400b258:	4010adc0 	call	4010adc <__malloc_unlock>
 400b25c:	0005883a 	mov	r2,zero
 400b260:	003f0a06 	br	400ae8c <__alt_data_end+0xfc00ae8c>
 400b264:	a8c00417 	ldw	r3,16(r21)
 400b268:	ad400604 	addi	r21,r21,24
 400b26c:	b0800804 	addi	r2,r22,32
 400b270:	b0c00615 	stw	r3,24(r22)
 400b274:	a8ffff17 	ldw	r3,-4(r21)
 400b278:	b0c00715 	stw	r3,28(r22)
 400b27c:	003fb006 	br	400b140 <__alt_data_end+0xfc00b140>

0400b280 <__fpclassifyd>:
 400b280:	00a00034 	movhi	r2,32768
 400b284:	10bfffc4 	addi	r2,r2,-1
 400b288:	2884703a 	and	r2,r5,r2
 400b28c:	10000726 	beq	r2,zero,400b2ac <__fpclassifyd+0x2c>
 400b290:	00fffc34 	movhi	r3,65520
 400b294:	019ff834 	movhi	r6,32736
 400b298:	28c7883a 	add	r3,r5,r3
 400b29c:	31bfffc4 	addi	r6,r6,-1
 400b2a0:	30c00536 	bltu	r6,r3,400b2b8 <__fpclassifyd+0x38>
 400b2a4:	00800104 	movi	r2,4
 400b2a8:	f800283a 	ret
 400b2ac:	2000021e 	bne	r4,zero,400b2b8 <__fpclassifyd+0x38>
 400b2b0:	00800084 	movi	r2,2
 400b2b4:	f800283a 	ret
 400b2b8:	00dffc34 	movhi	r3,32752
 400b2bc:	019ff834 	movhi	r6,32736
 400b2c0:	28cb883a 	add	r5,r5,r3
 400b2c4:	31bfffc4 	addi	r6,r6,-1
 400b2c8:	317ff62e 	bgeu	r6,r5,400b2a4 <__alt_data_end+0xfc00b2a4>
 400b2cc:	01400434 	movhi	r5,16
 400b2d0:	297fffc4 	addi	r5,r5,-1
 400b2d4:	28800236 	bltu	r5,r2,400b2e0 <__fpclassifyd+0x60>
 400b2d8:	008000c4 	movi	r2,3
 400b2dc:	f800283a 	ret
 400b2e0:	10c00226 	beq	r2,r3,400b2ec <__fpclassifyd+0x6c>
 400b2e4:	0005883a 	mov	r2,zero
 400b2e8:	f800283a 	ret
 400b2ec:	2005003a 	cmpeq	r2,r4,zero
 400b2f0:	f800283a 	ret

0400b2f4 <__sread>:
 400b2f4:	defffe04 	addi	sp,sp,-8
 400b2f8:	dc000015 	stw	r16,0(sp)
 400b2fc:	2821883a 	mov	r16,r5
 400b300:	2940038f 	ldh	r5,14(r5)
 400b304:	dfc00115 	stw	ra,4(sp)
 400b308:	400d0e80 	call	400d0e8 <_read_r>
 400b30c:	10000716 	blt	r2,zero,400b32c <__sread+0x38>
 400b310:	80c01417 	ldw	r3,80(r16)
 400b314:	1887883a 	add	r3,r3,r2
 400b318:	80c01415 	stw	r3,80(r16)
 400b31c:	dfc00117 	ldw	ra,4(sp)
 400b320:	dc000017 	ldw	r16,0(sp)
 400b324:	dec00204 	addi	sp,sp,8
 400b328:	f800283a 	ret
 400b32c:	80c0030b 	ldhu	r3,12(r16)
 400b330:	18fbffcc 	andi	r3,r3,61439
 400b334:	80c0030d 	sth	r3,12(r16)
 400b338:	dfc00117 	ldw	ra,4(sp)
 400b33c:	dc000017 	ldw	r16,0(sp)
 400b340:	dec00204 	addi	sp,sp,8
 400b344:	f800283a 	ret

0400b348 <__seofread>:
 400b348:	0005883a 	mov	r2,zero
 400b34c:	f800283a 	ret

0400b350 <__swrite>:
 400b350:	2880030b 	ldhu	r2,12(r5)
 400b354:	defffb04 	addi	sp,sp,-20
 400b358:	dcc00315 	stw	r19,12(sp)
 400b35c:	dc800215 	stw	r18,8(sp)
 400b360:	dc400115 	stw	r17,4(sp)
 400b364:	dc000015 	stw	r16,0(sp)
 400b368:	dfc00415 	stw	ra,16(sp)
 400b36c:	10c0400c 	andi	r3,r2,256
 400b370:	2821883a 	mov	r16,r5
 400b374:	2023883a 	mov	r17,r4
 400b378:	3025883a 	mov	r18,r6
 400b37c:	3827883a 	mov	r19,r7
 400b380:	18000526 	beq	r3,zero,400b398 <__swrite+0x48>
 400b384:	2940038f 	ldh	r5,14(r5)
 400b388:	01c00084 	movi	r7,2
 400b38c:	000d883a 	mov	r6,zero
 400b390:	400d0880 	call	400d088 <_lseek_r>
 400b394:	8080030b 	ldhu	r2,12(r16)
 400b398:	8140038f 	ldh	r5,14(r16)
 400b39c:	10bbffcc 	andi	r2,r2,61439
 400b3a0:	980f883a 	mov	r7,r19
 400b3a4:	900d883a 	mov	r6,r18
 400b3a8:	8809883a 	mov	r4,r17
 400b3ac:	8080030d 	sth	r2,12(r16)
 400b3b0:	dfc00417 	ldw	ra,16(sp)
 400b3b4:	dcc00317 	ldw	r19,12(sp)
 400b3b8:	dc800217 	ldw	r18,8(sp)
 400b3bc:	dc400117 	ldw	r17,4(sp)
 400b3c0:	dc000017 	ldw	r16,0(sp)
 400b3c4:	dec00504 	addi	sp,sp,20
 400b3c8:	400cb541 	jmpi	400cb54 <_write_r>

0400b3cc <__sseek>:
 400b3cc:	defffe04 	addi	sp,sp,-8
 400b3d0:	dc000015 	stw	r16,0(sp)
 400b3d4:	2821883a 	mov	r16,r5
 400b3d8:	2940038f 	ldh	r5,14(r5)
 400b3dc:	dfc00115 	stw	ra,4(sp)
 400b3e0:	400d0880 	call	400d088 <_lseek_r>
 400b3e4:	00ffffc4 	movi	r3,-1
 400b3e8:	10c00826 	beq	r2,r3,400b40c <__sseek+0x40>
 400b3ec:	80c0030b 	ldhu	r3,12(r16)
 400b3f0:	80801415 	stw	r2,80(r16)
 400b3f4:	18c40014 	ori	r3,r3,4096
 400b3f8:	80c0030d 	sth	r3,12(r16)
 400b3fc:	dfc00117 	ldw	ra,4(sp)
 400b400:	dc000017 	ldw	r16,0(sp)
 400b404:	dec00204 	addi	sp,sp,8
 400b408:	f800283a 	ret
 400b40c:	80c0030b 	ldhu	r3,12(r16)
 400b410:	18fbffcc 	andi	r3,r3,61439
 400b414:	80c0030d 	sth	r3,12(r16)
 400b418:	dfc00117 	ldw	ra,4(sp)
 400b41c:	dc000017 	ldw	r16,0(sp)
 400b420:	dec00204 	addi	sp,sp,8
 400b424:	f800283a 	ret

0400b428 <__sclose>:
 400b428:	2940038f 	ldh	r5,14(r5)
 400b42c:	400cbb41 	jmpi	400cbb4 <_close_r>

0400b430 <strcmp>:
 400b430:	2144b03a 	or	r2,r4,r5
 400b434:	108000cc 	andi	r2,r2,3
 400b438:	1000171e 	bne	r2,zero,400b498 <strcmp+0x68>
 400b43c:	20800017 	ldw	r2,0(r4)
 400b440:	28c00017 	ldw	r3,0(r5)
 400b444:	10c0141e 	bne	r2,r3,400b498 <strcmp+0x68>
 400b448:	027fbff4 	movhi	r9,65279
 400b44c:	4a7fbfc4 	addi	r9,r9,-257
 400b450:	0086303a 	nor	r3,zero,r2
 400b454:	02202074 	movhi	r8,32897
 400b458:	1245883a 	add	r2,r2,r9
 400b45c:	42202004 	addi	r8,r8,-32640
 400b460:	10c4703a 	and	r2,r2,r3
 400b464:	1204703a 	and	r2,r2,r8
 400b468:	10000226 	beq	r2,zero,400b474 <strcmp+0x44>
 400b46c:	00002306 	br	400b4fc <strcmp+0xcc>
 400b470:	1000221e 	bne	r2,zero,400b4fc <strcmp+0xcc>
 400b474:	21000104 	addi	r4,r4,4
 400b478:	20c00017 	ldw	r3,0(r4)
 400b47c:	29400104 	addi	r5,r5,4
 400b480:	29800017 	ldw	r6,0(r5)
 400b484:	1a4f883a 	add	r7,r3,r9
 400b488:	00c4303a 	nor	r2,zero,r3
 400b48c:	3884703a 	and	r2,r7,r2
 400b490:	1204703a 	and	r2,r2,r8
 400b494:	19bff626 	beq	r3,r6,400b470 <__alt_data_end+0xfc00b470>
 400b498:	20800003 	ldbu	r2,0(r4)
 400b49c:	10c03fcc 	andi	r3,r2,255
 400b4a0:	18c0201c 	xori	r3,r3,128
 400b4a4:	18ffe004 	addi	r3,r3,-128
 400b4a8:	18000c26 	beq	r3,zero,400b4dc <strcmp+0xac>
 400b4ac:	29800007 	ldb	r6,0(r5)
 400b4b0:	19800326 	beq	r3,r6,400b4c0 <strcmp+0x90>
 400b4b4:	00001306 	br	400b504 <strcmp+0xd4>
 400b4b8:	29800007 	ldb	r6,0(r5)
 400b4bc:	11800b1e 	bne	r2,r6,400b4ec <strcmp+0xbc>
 400b4c0:	21000044 	addi	r4,r4,1
 400b4c4:	20c00003 	ldbu	r3,0(r4)
 400b4c8:	29400044 	addi	r5,r5,1
 400b4cc:	18803fcc 	andi	r2,r3,255
 400b4d0:	1080201c 	xori	r2,r2,128
 400b4d4:	10bfe004 	addi	r2,r2,-128
 400b4d8:	103ff71e 	bne	r2,zero,400b4b8 <__alt_data_end+0xfc00b4b8>
 400b4dc:	0007883a 	mov	r3,zero
 400b4e0:	28800003 	ldbu	r2,0(r5)
 400b4e4:	1885c83a 	sub	r2,r3,r2
 400b4e8:	f800283a 	ret
 400b4ec:	28800003 	ldbu	r2,0(r5)
 400b4f0:	18c03fcc 	andi	r3,r3,255
 400b4f4:	1885c83a 	sub	r2,r3,r2
 400b4f8:	f800283a 	ret
 400b4fc:	0005883a 	mov	r2,zero
 400b500:	f800283a 	ret
 400b504:	10c03fcc 	andi	r3,r2,255
 400b508:	003ff506 	br	400b4e0 <__alt_data_end+0xfc00b4e0>

0400b50c <__sprint_r.part.0>:
 400b50c:	28801917 	ldw	r2,100(r5)
 400b510:	defff604 	addi	sp,sp,-40
 400b514:	dd400515 	stw	r21,20(sp)
 400b518:	dfc00915 	stw	ra,36(sp)
 400b51c:	df000815 	stw	fp,32(sp)
 400b520:	ddc00715 	stw	r23,28(sp)
 400b524:	dd800615 	stw	r22,24(sp)
 400b528:	dd000415 	stw	r20,16(sp)
 400b52c:	dcc00315 	stw	r19,12(sp)
 400b530:	dc800215 	stw	r18,8(sp)
 400b534:	dc400115 	stw	r17,4(sp)
 400b538:	dc000015 	stw	r16,0(sp)
 400b53c:	1088000c 	andi	r2,r2,8192
 400b540:	302b883a 	mov	r21,r6
 400b544:	10002e26 	beq	r2,zero,400b600 <__sprint_r.part.0+0xf4>
 400b548:	30800217 	ldw	r2,8(r6)
 400b54c:	35800017 	ldw	r22,0(r6)
 400b550:	10002926 	beq	r2,zero,400b5f8 <__sprint_r.part.0+0xec>
 400b554:	2827883a 	mov	r19,r5
 400b558:	2029883a 	mov	r20,r4
 400b55c:	b5c00104 	addi	r23,r22,4
 400b560:	04bfffc4 	movi	r18,-1
 400b564:	bc400017 	ldw	r17,0(r23)
 400b568:	b4000017 	ldw	r16,0(r22)
 400b56c:	0039883a 	mov	fp,zero
 400b570:	8822d0ba 	srli	r17,r17,2
 400b574:	8800031e 	bne	r17,zero,400b584 <__sprint_r.part.0+0x78>
 400b578:	00001806 	br	400b5dc <__sprint_r.part.0+0xd0>
 400b57c:	84000104 	addi	r16,r16,4
 400b580:	8f001526 	beq	r17,fp,400b5d8 <__sprint_r.part.0+0xcc>
 400b584:	81400017 	ldw	r5,0(r16)
 400b588:	980d883a 	mov	r6,r19
 400b58c:	a009883a 	mov	r4,r20
 400b590:	400cf340 	call	400cf34 <_fputwc_r>
 400b594:	e7000044 	addi	fp,fp,1
 400b598:	14bff81e 	bne	r2,r18,400b57c <__alt_data_end+0xfc00b57c>
 400b59c:	9005883a 	mov	r2,r18
 400b5a0:	a8000215 	stw	zero,8(r21)
 400b5a4:	a8000115 	stw	zero,4(r21)
 400b5a8:	dfc00917 	ldw	ra,36(sp)
 400b5ac:	df000817 	ldw	fp,32(sp)
 400b5b0:	ddc00717 	ldw	r23,28(sp)
 400b5b4:	dd800617 	ldw	r22,24(sp)
 400b5b8:	dd400517 	ldw	r21,20(sp)
 400b5bc:	dd000417 	ldw	r20,16(sp)
 400b5c0:	dcc00317 	ldw	r19,12(sp)
 400b5c4:	dc800217 	ldw	r18,8(sp)
 400b5c8:	dc400117 	ldw	r17,4(sp)
 400b5cc:	dc000017 	ldw	r16,0(sp)
 400b5d0:	dec00a04 	addi	sp,sp,40
 400b5d4:	f800283a 	ret
 400b5d8:	a8800217 	ldw	r2,8(r21)
 400b5dc:	8c63883a 	add	r17,r17,r17
 400b5e0:	8c63883a 	add	r17,r17,r17
 400b5e4:	1445c83a 	sub	r2,r2,r17
 400b5e8:	a8800215 	stw	r2,8(r21)
 400b5ec:	b5800204 	addi	r22,r22,8
 400b5f0:	bdc00204 	addi	r23,r23,8
 400b5f4:	103fdb1e 	bne	r2,zero,400b564 <__alt_data_end+0xfc00b564>
 400b5f8:	0005883a 	mov	r2,zero
 400b5fc:	003fe806 	br	400b5a0 <__alt_data_end+0xfc00b5a0>
 400b600:	40090dc0 	call	40090dc <__sfvwrite_r>
 400b604:	003fe606 	br	400b5a0 <__alt_data_end+0xfc00b5a0>

0400b608 <__sprint_r>:
 400b608:	30c00217 	ldw	r3,8(r6)
 400b60c:	18000126 	beq	r3,zero,400b614 <__sprint_r+0xc>
 400b610:	400b50c1 	jmpi	400b50c <__sprint_r.part.0>
 400b614:	30000115 	stw	zero,4(r6)
 400b618:	0005883a 	mov	r2,zero
 400b61c:	f800283a 	ret

0400b620 <___vfiprintf_internal_r>:
 400b620:	deffc904 	addi	sp,sp,-220
 400b624:	df003515 	stw	fp,212(sp)
 400b628:	dd003115 	stw	r20,196(sp)
 400b62c:	dfc03615 	stw	ra,216(sp)
 400b630:	ddc03415 	stw	r23,208(sp)
 400b634:	dd803315 	stw	r22,204(sp)
 400b638:	dd403215 	stw	r21,200(sp)
 400b63c:	dcc03015 	stw	r19,192(sp)
 400b640:	dc802f15 	stw	r18,188(sp)
 400b644:	dc402e15 	stw	r17,184(sp)
 400b648:	dc002d15 	stw	r16,180(sp)
 400b64c:	d9002015 	stw	r4,128(sp)
 400b650:	d9c02215 	stw	r7,136(sp)
 400b654:	2829883a 	mov	r20,r5
 400b658:	3039883a 	mov	fp,r6
 400b65c:	20000226 	beq	r4,zero,400b668 <___vfiprintf_internal_r+0x48>
 400b660:	20800e17 	ldw	r2,56(r4)
 400b664:	1000cf26 	beq	r2,zero,400b9a4 <___vfiprintf_internal_r+0x384>
 400b668:	a080030b 	ldhu	r2,12(r20)
 400b66c:	10c8000c 	andi	r3,r2,8192
 400b670:	1800061e 	bne	r3,zero,400b68c <___vfiprintf_internal_r+0x6c>
 400b674:	a1001917 	ldw	r4,100(r20)
 400b678:	00f7ffc4 	movi	r3,-8193
 400b67c:	10880014 	ori	r2,r2,8192
 400b680:	20c6703a 	and	r3,r4,r3
 400b684:	a080030d 	sth	r2,12(r20)
 400b688:	a0c01915 	stw	r3,100(r20)
 400b68c:	10c0020c 	andi	r3,r2,8
 400b690:	1800a926 	beq	r3,zero,400b938 <___vfiprintf_internal_r+0x318>
 400b694:	a0c00417 	ldw	r3,16(r20)
 400b698:	1800a726 	beq	r3,zero,400b938 <___vfiprintf_internal_r+0x318>
 400b69c:	1080068c 	andi	r2,r2,26
 400b6a0:	00c00284 	movi	r3,10
 400b6a4:	10c0ac26 	beq	r2,r3,400b958 <___vfiprintf_internal_r+0x338>
 400b6a8:	da801a04 	addi	r10,sp,104
 400b6ac:	da801e15 	stw	r10,120(sp)
 400b6b0:	d8801e17 	ldw	r2,120(sp)
 400b6b4:	da8019c4 	addi	r10,sp,103
 400b6b8:	05810074 	movhi	r22,1025
 400b6bc:	05c10074 	movhi	r23,1025
 400b6c0:	da801f15 	stw	r10,124(sp)
 400b6c4:	1295c83a 	sub	r10,r2,r10
 400b6c8:	b5963404 	addi	r22,r22,22736
 400b6cc:	bdd63004 	addi	r23,r23,22720
 400b6d0:	dec01a15 	stw	sp,104(sp)
 400b6d4:	d8001c15 	stw	zero,112(sp)
 400b6d8:	d8001b15 	stw	zero,108(sp)
 400b6dc:	d8002615 	stw	zero,152(sp)
 400b6e0:	d8002315 	stw	zero,140(sp)
 400b6e4:	da802715 	stw	r10,156(sp)
 400b6e8:	d811883a 	mov	r8,sp
 400b6ec:	dd002115 	stw	r20,132(sp)
 400b6f0:	e021883a 	mov	r16,fp
 400b6f4:	80800007 	ldb	r2,0(r16)
 400b6f8:	1003ea26 	beq	r2,zero,400c6a4 <___vfiprintf_internal_r+0x1084>
 400b6fc:	00c00944 	movi	r3,37
 400b700:	8025883a 	mov	r18,r16
 400b704:	10c0021e 	bne	r2,r3,400b710 <___vfiprintf_internal_r+0xf0>
 400b708:	00001606 	br	400b764 <___vfiprintf_internal_r+0x144>
 400b70c:	10c00326 	beq	r2,r3,400b71c <___vfiprintf_internal_r+0xfc>
 400b710:	94800044 	addi	r18,r18,1
 400b714:	90800007 	ldb	r2,0(r18)
 400b718:	103ffc1e 	bne	r2,zero,400b70c <__alt_data_end+0xfc00b70c>
 400b71c:	9423c83a 	sub	r17,r18,r16
 400b720:	88001026 	beq	r17,zero,400b764 <___vfiprintf_internal_r+0x144>
 400b724:	d8c01c17 	ldw	r3,112(sp)
 400b728:	d8801b17 	ldw	r2,108(sp)
 400b72c:	44000015 	stw	r16,0(r8)
 400b730:	88c7883a 	add	r3,r17,r3
 400b734:	10800044 	addi	r2,r2,1
 400b738:	44400115 	stw	r17,4(r8)
 400b73c:	d8c01c15 	stw	r3,112(sp)
 400b740:	d8801b15 	stw	r2,108(sp)
 400b744:	010001c4 	movi	r4,7
 400b748:	2080760e 	bge	r4,r2,400b924 <___vfiprintf_internal_r+0x304>
 400b74c:	1803821e 	bne	r3,zero,400c558 <___vfiprintf_internal_r+0xf38>
 400b750:	da802317 	ldw	r10,140(sp)
 400b754:	d8001b15 	stw	zero,108(sp)
 400b758:	d811883a 	mov	r8,sp
 400b75c:	5455883a 	add	r10,r10,r17
 400b760:	da802315 	stw	r10,140(sp)
 400b764:	90800007 	ldb	r2,0(r18)
 400b768:	10044626 	beq	r2,zero,400c884 <___vfiprintf_internal_r+0x1264>
 400b76c:	90c00047 	ldb	r3,1(r18)
 400b770:	94000044 	addi	r16,r18,1
 400b774:	d8001d85 	stb	zero,118(sp)
 400b778:	0009883a 	mov	r4,zero
 400b77c:	000f883a 	mov	r7,zero
 400b780:	027fffc4 	movi	r9,-1
 400b784:	0023883a 	mov	r17,zero
 400b788:	0029883a 	mov	r20,zero
 400b78c:	01401604 	movi	r5,88
 400b790:	01800244 	movi	r6,9
 400b794:	03400a84 	movi	r13,42
 400b798:	03001b04 	movi	r12,108
 400b79c:	84000044 	addi	r16,r16,1
 400b7a0:	18bff804 	addi	r2,r3,-32
 400b7a4:	28827336 	bltu	r5,r2,400c174 <___vfiprintf_internal_r+0xb54>
 400b7a8:	100490ba 	slli	r2,r2,2
 400b7ac:	02810074 	movhi	r10,1025
 400b7b0:	52adf004 	addi	r10,r10,-18496
 400b7b4:	1285883a 	add	r2,r2,r10
 400b7b8:	10800017 	ldw	r2,0(r2)
 400b7bc:	1000683a 	jmp	r2
 400b7c0:	0400bea8 	cmpgeui	r16,zero,762
 400b7c4:	0400c174 	movhi	r16,773
 400b7c8:	0400c174 	movhi	r16,773
 400b7cc:	0400bec8 	cmpgei	r16,zero,763
 400b7d0:	0400c174 	movhi	r16,773
 400b7d4:	0400c174 	movhi	r16,773
 400b7d8:	0400c174 	movhi	r16,773
 400b7dc:	0400c174 	movhi	r16,773
 400b7e0:	0400c174 	movhi	r16,773
 400b7e4:	0400c174 	movhi	r16,773
 400b7e8:	0400c0b0 	cmpltui	r16,zero,770
 400b7ec:	0400c0cc 	andi	r16,zero,771
 400b7f0:	0400c174 	movhi	r16,773
 400b7f4:	0400b9b4 	movhi	r16,742
 400b7f8:	0400c0dc 	xori	r16,zero,771
 400b7fc:	0400c174 	movhi	r16,773
 400b800:	0400bed4 	movui	r16,763
 400b804:	0400bee0 	cmpeqi	r16,zero,763
 400b808:	0400bee0 	cmpeqi	r16,zero,763
 400b80c:	0400bee0 	cmpeqi	r16,zero,763
 400b810:	0400bee0 	cmpeqi	r16,zero,763
 400b814:	0400bee0 	cmpeqi	r16,zero,763
 400b818:	0400bee0 	cmpeqi	r16,zero,763
 400b81c:	0400bee0 	cmpeqi	r16,zero,763
 400b820:	0400bee0 	cmpeqi	r16,zero,763
 400b824:	0400bee0 	cmpeqi	r16,zero,763
 400b828:	0400c174 	movhi	r16,773
 400b82c:	0400c174 	movhi	r16,773
 400b830:	0400c174 	movhi	r16,773
 400b834:	0400c174 	movhi	r16,773
 400b838:	0400c174 	movhi	r16,773
 400b83c:	0400c174 	movhi	r16,773
 400b840:	0400c174 	movhi	r16,773
 400b844:	0400c174 	movhi	r16,773
 400b848:	0400c174 	movhi	r16,773
 400b84c:	0400c174 	movhi	r16,773
 400b850:	0400bf0c 	andi	r16,zero,764
 400b854:	0400c174 	movhi	r16,773
 400b858:	0400c174 	movhi	r16,773
 400b85c:	0400c174 	movhi	r16,773
 400b860:	0400c174 	movhi	r16,773
 400b864:	0400c174 	movhi	r16,773
 400b868:	0400c174 	movhi	r16,773
 400b86c:	0400c174 	movhi	r16,773
 400b870:	0400c174 	movhi	r16,773
 400b874:	0400c174 	movhi	r16,773
 400b878:	0400c174 	movhi	r16,773
 400b87c:	0400bf44 	movi	r16,765
 400b880:	0400c174 	movhi	r16,773
 400b884:	0400c174 	movhi	r16,773
 400b888:	0400c174 	movhi	r16,773
 400b88c:	0400c174 	movhi	r16,773
 400b890:	0400c174 	movhi	r16,773
 400b894:	0400bf9c 	xori	r16,zero,766
 400b898:	0400c174 	movhi	r16,773
 400b89c:	0400c174 	movhi	r16,773
 400b8a0:	0400c00c 	andi	r16,zero,768
 400b8a4:	0400c174 	movhi	r16,773
 400b8a8:	0400c174 	movhi	r16,773
 400b8ac:	0400c174 	movhi	r16,773
 400b8b0:	0400c174 	movhi	r16,773
 400b8b4:	0400c174 	movhi	r16,773
 400b8b8:	0400c174 	movhi	r16,773
 400b8bc:	0400c174 	movhi	r16,773
 400b8c0:	0400c174 	movhi	r16,773
 400b8c4:	0400c174 	movhi	r16,773
 400b8c8:	0400c174 	movhi	r16,773
 400b8cc:	0400bdb8 	rdprs	r16,zero,758
 400b8d0:	0400bde4 	muli	r16,zero,759
 400b8d4:	0400c174 	movhi	r16,773
 400b8d8:	0400c174 	movhi	r16,773
 400b8dc:	0400c174 	movhi	r16,773
 400b8e0:	0400c11c 	xori	r16,zero,772
 400b8e4:	0400bde4 	muli	r16,zero,759
 400b8e8:	0400c174 	movhi	r16,773
 400b8ec:	0400c174 	movhi	r16,773
 400b8f0:	0400bc78 	rdprs	r16,zero,753
 400b8f4:	0400c174 	movhi	r16,773
 400b8f8:	0400bc88 	cmpgei	r16,zero,754
 400b8fc:	0400bcc4 	movi	r16,755
 400b900:	0400b9c0 	call	400b9c <__reset-0x3bff464>
 400b904:	0400bc6c 	andhi	r16,zero,753
 400b908:	0400c174 	movhi	r16,773
 400b90c:	0400c048 	cmpgei	r16,zero,769
 400b910:	0400c174 	movhi	r16,773
 400b914:	0400c0a0 	cmpeqi	r16,zero,770
 400b918:	0400c174 	movhi	r16,773
 400b91c:	0400c174 	movhi	r16,773
 400b920:	0400bd64 	muli	r16,zero,757
 400b924:	42000204 	addi	r8,r8,8
 400b928:	da802317 	ldw	r10,140(sp)
 400b92c:	5455883a 	add	r10,r10,r17
 400b930:	da802315 	stw	r10,140(sp)
 400b934:	003f8b06 	br	400b764 <__alt_data_end+0xfc00b764>
 400b938:	d9002017 	ldw	r4,128(sp)
 400b93c:	a00b883a 	mov	r5,r20
 400b940:	4006c840 	call	4006c84 <__swsetup_r>
 400b944:	1003b11e 	bne	r2,zero,400c80c <___vfiprintf_internal_r+0x11ec>
 400b948:	a080030b 	ldhu	r2,12(r20)
 400b94c:	00c00284 	movi	r3,10
 400b950:	1080068c 	andi	r2,r2,26
 400b954:	10ff541e 	bne	r2,r3,400b6a8 <__alt_data_end+0xfc00b6a8>
 400b958:	a080038f 	ldh	r2,14(r20)
 400b95c:	103f5216 	blt	r2,zero,400b6a8 <__alt_data_end+0xfc00b6a8>
 400b960:	d9c02217 	ldw	r7,136(sp)
 400b964:	d9002017 	ldw	r4,128(sp)
 400b968:	e00d883a 	mov	r6,fp
 400b96c:	a00b883a 	mov	r5,r20
 400b970:	400ca980 	call	400ca98 <__sbprintf>
 400b974:	dfc03617 	ldw	ra,216(sp)
 400b978:	df003517 	ldw	fp,212(sp)
 400b97c:	ddc03417 	ldw	r23,208(sp)
 400b980:	dd803317 	ldw	r22,204(sp)
 400b984:	dd403217 	ldw	r21,200(sp)
 400b988:	dd003117 	ldw	r20,196(sp)
 400b98c:	dcc03017 	ldw	r19,192(sp)
 400b990:	dc802f17 	ldw	r18,188(sp)
 400b994:	dc402e17 	ldw	r17,184(sp)
 400b998:	dc002d17 	ldw	r16,180(sp)
 400b99c:	dec03704 	addi	sp,sp,220
 400b9a0:	f800283a 	ret
 400b9a4:	4008c580 	call	4008c58 <__sinit>
 400b9a8:	003f2f06 	br	400b668 <__alt_data_end+0xfc00b668>
 400b9ac:	0463c83a 	sub	r17,zero,r17
 400b9b0:	d8802215 	stw	r2,136(sp)
 400b9b4:	a5000114 	ori	r20,r20,4
 400b9b8:	80c00007 	ldb	r3,0(r16)
 400b9bc:	003f7706 	br	400b79c <__alt_data_end+0xfc00b79c>
 400b9c0:	00800c04 	movi	r2,48
 400b9c4:	da802217 	ldw	r10,136(sp)
 400b9c8:	d8801d05 	stb	r2,116(sp)
 400b9cc:	00801e04 	movi	r2,120
 400b9d0:	d8801d45 	stb	r2,117(sp)
 400b9d4:	d8001d85 	stb	zero,118(sp)
 400b9d8:	50c00104 	addi	r3,r10,4
 400b9dc:	54800017 	ldw	r18,0(r10)
 400b9e0:	0027883a 	mov	r19,zero
 400b9e4:	a0800094 	ori	r2,r20,2
 400b9e8:	48030b16 	blt	r9,zero,400c618 <___vfiprintf_internal_r+0xff8>
 400b9ec:	00bfdfc4 	movi	r2,-129
 400b9f0:	a096703a 	and	r11,r20,r2
 400b9f4:	d8c02215 	stw	r3,136(sp)
 400b9f8:	5d000094 	ori	r20,r11,2
 400b9fc:	90032b1e 	bne	r18,zero,400c6ac <___vfiprintf_internal_r+0x108c>
 400ba00:	00810074 	movhi	r2,1025
 400ba04:	1095cf04 	addi	r2,r2,22332
 400ba08:	d8802615 	stw	r2,152(sp)
 400ba0c:	0039883a 	mov	fp,zero
 400ba10:	48017b1e 	bne	r9,zero,400c000 <___vfiprintf_internal_r+0x9e0>
 400ba14:	0013883a 	mov	r9,zero
 400ba18:	0027883a 	mov	r19,zero
 400ba1c:	dd401a04 	addi	r21,sp,104
 400ba20:	4825883a 	mov	r18,r9
 400ba24:	4cc0010e 	bge	r9,r19,400ba2c <___vfiprintf_internal_r+0x40c>
 400ba28:	9825883a 	mov	r18,r19
 400ba2c:	e7003fcc 	andi	fp,fp,255
 400ba30:	e700201c 	xori	fp,fp,128
 400ba34:	e73fe004 	addi	fp,fp,-128
 400ba38:	e0000126 	beq	fp,zero,400ba40 <___vfiprintf_internal_r+0x420>
 400ba3c:	94800044 	addi	r18,r18,1
 400ba40:	a380008c 	andi	r14,r20,2
 400ba44:	70000126 	beq	r14,zero,400ba4c <___vfiprintf_internal_r+0x42c>
 400ba48:	94800084 	addi	r18,r18,2
 400ba4c:	a700210c 	andi	fp,r20,132
 400ba50:	e001df1e 	bne	fp,zero,400c1d0 <___vfiprintf_internal_r+0xbb0>
 400ba54:	8c87c83a 	sub	r3,r17,r18
 400ba58:	00c1dd0e 	bge	zero,r3,400c1d0 <___vfiprintf_internal_r+0xbb0>
 400ba5c:	01c00404 	movi	r7,16
 400ba60:	d8801c17 	ldw	r2,112(sp)
 400ba64:	38c3ad0e 	bge	r7,r3,400c91c <___vfiprintf_internal_r+0x12fc>
 400ba68:	02810074 	movhi	r10,1025
 400ba6c:	52963404 	addi	r10,r10,22736
 400ba70:	dc002915 	stw	r16,164(sp)
 400ba74:	d9801b17 	ldw	r6,108(sp)
 400ba78:	da802415 	stw	r10,144(sp)
 400ba7c:	03c001c4 	movi	r15,7
 400ba80:	da402515 	stw	r9,148(sp)
 400ba84:	db802815 	stw	r14,160(sp)
 400ba88:	1821883a 	mov	r16,r3
 400ba8c:	00000506 	br	400baa4 <___vfiprintf_internal_r+0x484>
 400ba90:	31400084 	addi	r5,r6,2
 400ba94:	42000204 	addi	r8,r8,8
 400ba98:	200d883a 	mov	r6,r4
 400ba9c:	843ffc04 	addi	r16,r16,-16
 400baa0:	3c000d0e 	bge	r7,r16,400bad8 <___vfiprintf_internal_r+0x4b8>
 400baa4:	10800404 	addi	r2,r2,16
 400baa8:	31000044 	addi	r4,r6,1
 400baac:	45800015 	stw	r22,0(r8)
 400bab0:	41c00115 	stw	r7,4(r8)
 400bab4:	d8801c15 	stw	r2,112(sp)
 400bab8:	d9001b15 	stw	r4,108(sp)
 400babc:	793ff40e 	bge	r15,r4,400ba90 <__alt_data_end+0xfc00ba90>
 400bac0:	1001b51e 	bne	r2,zero,400c198 <___vfiprintf_internal_r+0xb78>
 400bac4:	843ffc04 	addi	r16,r16,-16
 400bac8:	000d883a 	mov	r6,zero
 400bacc:	01400044 	movi	r5,1
 400bad0:	d811883a 	mov	r8,sp
 400bad4:	3c3ff316 	blt	r7,r16,400baa4 <__alt_data_end+0xfc00baa4>
 400bad8:	8007883a 	mov	r3,r16
 400badc:	da402517 	ldw	r9,148(sp)
 400bae0:	db802817 	ldw	r14,160(sp)
 400bae4:	dc002917 	ldw	r16,164(sp)
 400bae8:	da802417 	ldw	r10,144(sp)
 400baec:	1885883a 	add	r2,r3,r2
 400baf0:	40c00115 	stw	r3,4(r8)
 400baf4:	42800015 	stw	r10,0(r8)
 400baf8:	d8801c15 	stw	r2,112(sp)
 400bafc:	d9401b15 	stw	r5,108(sp)
 400bb00:	00c001c4 	movi	r3,7
 400bb04:	19426016 	blt	r3,r5,400c488 <___vfiprintf_internal_r+0xe68>
 400bb08:	d8c01d87 	ldb	r3,118(sp)
 400bb0c:	42000204 	addi	r8,r8,8
 400bb10:	29000044 	addi	r4,r5,1
 400bb14:	1801b31e 	bne	r3,zero,400c1e4 <___vfiprintf_internal_r+0xbc4>
 400bb18:	7001c026 	beq	r14,zero,400c21c <___vfiprintf_internal_r+0xbfc>
 400bb1c:	d8c01d04 	addi	r3,sp,116
 400bb20:	10800084 	addi	r2,r2,2
 400bb24:	40c00015 	stw	r3,0(r8)
 400bb28:	00c00084 	movi	r3,2
 400bb2c:	40c00115 	stw	r3,4(r8)
 400bb30:	d8801c15 	stw	r2,112(sp)
 400bb34:	d9001b15 	stw	r4,108(sp)
 400bb38:	00c001c4 	movi	r3,7
 400bb3c:	1902650e 	bge	r3,r4,400c4d4 <___vfiprintf_internal_r+0xeb4>
 400bb40:	10029a1e 	bne	r2,zero,400c5ac <___vfiprintf_internal_r+0xf8c>
 400bb44:	00c02004 	movi	r3,128
 400bb48:	01000044 	movi	r4,1
 400bb4c:	000b883a 	mov	r5,zero
 400bb50:	d811883a 	mov	r8,sp
 400bb54:	e0c1b31e 	bne	fp,r3,400c224 <___vfiprintf_internal_r+0xc04>
 400bb58:	8cb9c83a 	sub	fp,r17,r18
 400bb5c:	0701b10e 	bge	zero,fp,400c224 <___vfiprintf_internal_r+0xc04>
 400bb60:	01c00404 	movi	r7,16
 400bb64:	3f03890e 	bge	r7,fp,400c98c <___vfiprintf_internal_r+0x136c>
 400bb68:	00c10074 	movhi	r3,1025
 400bb6c:	18d63004 	addi	r3,r3,22720
 400bb70:	d8c02415 	stw	r3,144(sp)
 400bb74:	8007883a 	mov	r3,r16
 400bb78:	034001c4 	movi	r13,7
 400bb7c:	e021883a 	mov	r16,fp
 400bb80:	da402515 	stw	r9,148(sp)
 400bb84:	1839883a 	mov	fp,r3
 400bb88:	00000506 	br	400bba0 <___vfiprintf_internal_r+0x580>
 400bb8c:	29800084 	addi	r6,r5,2
 400bb90:	42000204 	addi	r8,r8,8
 400bb94:	180b883a 	mov	r5,r3
 400bb98:	843ffc04 	addi	r16,r16,-16
 400bb9c:	3c000d0e 	bge	r7,r16,400bbd4 <___vfiprintf_internal_r+0x5b4>
 400bba0:	10800404 	addi	r2,r2,16
 400bba4:	28c00044 	addi	r3,r5,1
 400bba8:	45c00015 	stw	r23,0(r8)
 400bbac:	41c00115 	stw	r7,4(r8)
 400bbb0:	d8801c15 	stw	r2,112(sp)
 400bbb4:	d8c01b15 	stw	r3,108(sp)
 400bbb8:	68fff40e 	bge	r13,r3,400bb8c <__alt_data_end+0xfc00bb8c>
 400bbbc:	1002241e 	bne	r2,zero,400c450 <___vfiprintf_internal_r+0xe30>
 400bbc0:	843ffc04 	addi	r16,r16,-16
 400bbc4:	01800044 	movi	r6,1
 400bbc8:	000b883a 	mov	r5,zero
 400bbcc:	d811883a 	mov	r8,sp
 400bbd0:	3c3ff316 	blt	r7,r16,400bba0 <__alt_data_end+0xfc00bba0>
 400bbd4:	da402517 	ldw	r9,148(sp)
 400bbd8:	e007883a 	mov	r3,fp
 400bbdc:	8039883a 	mov	fp,r16
 400bbe0:	1821883a 	mov	r16,r3
 400bbe4:	d8c02417 	ldw	r3,144(sp)
 400bbe8:	1705883a 	add	r2,r2,fp
 400bbec:	47000115 	stw	fp,4(r8)
 400bbf0:	40c00015 	stw	r3,0(r8)
 400bbf4:	d8801c15 	stw	r2,112(sp)
 400bbf8:	d9801b15 	stw	r6,108(sp)
 400bbfc:	00c001c4 	movi	r3,7
 400bc00:	19827616 	blt	r3,r6,400c5dc <___vfiprintf_internal_r+0xfbc>
 400bc04:	4cf9c83a 	sub	fp,r9,r19
 400bc08:	42000204 	addi	r8,r8,8
 400bc0c:	31000044 	addi	r4,r6,1
 400bc10:	300b883a 	mov	r5,r6
 400bc14:	07018516 	blt	zero,fp,400c22c <___vfiprintf_internal_r+0xc0c>
 400bc18:	9885883a 	add	r2,r19,r2
 400bc1c:	45400015 	stw	r21,0(r8)
 400bc20:	44c00115 	stw	r19,4(r8)
 400bc24:	d8801c15 	stw	r2,112(sp)
 400bc28:	d9001b15 	stw	r4,108(sp)
 400bc2c:	00c001c4 	movi	r3,7
 400bc30:	1901dd0e 	bge	r3,r4,400c3a8 <___vfiprintf_internal_r+0xd88>
 400bc34:	1002401e 	bne	r2,zero,400c538 <___vfiprintf_internal_r+0xf18>
 400bc38:	d8001b15 	stw	zero,108(sp)
 400bc3c:	a2c0010c 	andi	r11,r20,4
 400bc40:	58000226 	beq	r11,zero,400bc4c <___vfiprintf_internal_r+0x62c>
 400bc44:	8ca7c83a 	sub	r19,r17,r18
 400bc48:	04c2f216 	blt	zero,r19,400c814 <___vfiprintf_internal_r+0x11f4>
 400bc4c:	8c80010e 	bge	r17,r18,400bc54 <___vfiprintf_internal_r+0x634>
 400bc50:	9023883a 	mov	r17,r18
 400bc54:	da802317 	ldw	r10,140(sp)
 400bc58:	5455883a 	add	r10,r10,r17
 400bc5c:	da802315 	stw	r10,140(sp)
 400bc60:	d8001b15 	stw	zero,108(sp)
 400bc64:	d811883a 	mov	r8,sp
 400bc68:	003ea206 	br	400b6f4 <__alt_data_end+0xfc00b6f4>
 400bc6c:	a5000814 	ori	r20,r20,32
 400bc70:	80c00007 	ldb	r3,0(r16)
 400bc74:	003ec906 	br	400b79c <__alt_data_end+0xfc00b79c>
 400bc78:	80c00007 	ldb	r3,0(r16)
 400bc7c:	1b030926 	beq	r3,r12,400c8a4 <___vfiprintf_internal_r+0x1284>
 400bc80:	a5000414 	ori	r20,r20,16
 400bc84:	003ec506 	br	400b79c <__alt_data_end+0xfc00b79c>
 400bc88:	21003fcc 	andi	r4,r4,255
 400bc8c:	20035e1e 	bne	r4,zero,400ca08 <___vfiprintf_internal_r+0x13e8>
 400bc90:	a080080c 	andi	r2,r20,32
 400bc94:	1002a526 	beq	r2,zero,400c72c <___vfiprintf_internal_r+0x110c>
 400bc98:	da802217 	ldw	r10,136(sp)
 400bc9c:	50800017 	ldw	r2,0(r10)
 400bca0:	da802317 	ldw	r10,140(sp)
 400bca4:	5007d7fa 	srai	r3,r10,31
 400bca8:	da802217 	ldw	r10,136(sp)
 400bcac:	10c00115 	stw	r3,4(r2)
 400bcb0:	52800104 	addi	r10,r10,4
 400bcb4:	da802215 	stw	r10,136(sp)
 400bcb8:	da802317 	ldw	r10,140(sp)
 400bcbc:	12800015 	stw	r10,0(r2)
 400bcc0:	003e8c06 	br	400b6f4 <__alt_data_end+0xfc00b6f4>
 400bcc4:	21003fcc 	andi	r4,r4,255
 400bcc8:	2003511e 	bne	r4,zero,400ca10 <___vfiprintf_internal_r+0x13f0>
 400bccc:	a080080c 	andi	r2,r20,32
 400bcd0:	1000a126 	beq	r2,zero,400bf58 <___vfiprintf_internal_r+0x938>
 400bcd4:	da802217 	ldw	r10,136(sp)
 400bcd8:	d8001d85 	stb	zero,118(sp)
 400bcdc:	50800204 	addi	r2,r10,8
 400bce0:	54800017 	ldw	r18,0(r10)
 400bce4:	54c00117 	ldw	r19,4(r10)
 400bce8:	4802b416 	blt	r9,zero,400c7bc <___vfiprintf_internal_r+0x119c>
 400bcec:	013fdfc4 	movi	r4,-129
 400bcf0:	94c6b03a 	or	r3,r18,r19
 400bcf4:	d8802215 	stw	r2,136(sp)
 400bcf8:	a128703a 	and	r20,r20,r4
 400bcfc:	1800a226 	beq	r3,zero,400bf88 <___vfiprintf_internal_r+0x968>
 400bd00:	0039883a 	mov	fp,zero
 400bd04:	dd401a04 	addi	r21,sp,104
 400bd08:	9006d0fa 	srli	r3,r18,3
 400bd0c:	9808977a 	slli	r4,r19,29
 400bd10:	9826d0fa 	srli	r19,r19,3
 400bd14:	948001cc 	andi	r18,r18,7
 400bd18:	90800c04 	addi	r2,r18,48
 400bd1c:	ad7fffc4 	addi	r21,r21,-1
 400bd20:	20e4b03a 	or	r18,r4,r3
 400bd24:	a8800005 	stb	r2,0(r21)
 400bd28:	94c6b03a 	or	r3,r18,r19
 400bd2c:	183ff61e 	bne	r3,zero,400bd08 <__alt_data_end+0xfc00bd08>
 400bd30:	a0c0004c 	andi	r3,r20,1
 400bd34:	18005926 	beq	r3,zero,400be9c <___vfiprintf_internal_r+0x87c>
 400bd38:	10803fcc 	andi	r2,r2,255
 400bd3c:	1080201c 	xori	r2,r2,128
 400bd40:	10bfe004 	addi	r2,r2,-128
 400bd44:	00c00c04 	movi	r3,48
 400bd48:	10c05426 	beq	r2,r3,400be9c <___vfiprintf_internal_r+0x87c>
 400bd4c:	da801e17 	ldw	r10,120(sp)
 400bd50:	a8bfffc4 	addi	r2,r21,-1
 400bd54:	a8ffffc5 	stb	r3,-1(r21)
 400bd58:	50a7c83a 	sub	r19,r10,r2
 400bd5c:	102b883a 	mov	r21,r2
 400bd60:	003f2f06 	br	400ba20 <__alt_data_end+0xfc00ba20>
 400bd64:	21003fcc 	andi	r4,r4,255
 400bd68:	2003421e 	bne	r4,zero,400ca74 <___vfiprintf_internal_r+0x1454>
 400bd6c:	00810074 	movhi	r2,1025
 400bd70:	1095cf04 	addi	r2,r2,22332
 400bd74:	d8802615 	stw	r2,152(sp)
 400bd78:	a080080c 	andi	r2,r20,32
 400bd7c:	1000aa26 	beq	r2,zero,400c028 <___vfiprintf_internal_r+0xa08>
 400bd80:	da802217 	ldw	r10,136(sp)
 400bd84:	54800017 	ldw	r18,0(r10)
 400bd88:	54c00117 	ldw	r19,4(r10)
 400bd8c:	52800204 	addi	r10,r10,8
 400bd90:	da802215 	stw	r10,136(sp)
 400bd94:	a080004c 	andi	r2,r20,1
 400bd98:	1001d226 	beq	r2,zero,400c4e4 <___vfiprintf_internal_r+0xec4>
 400bd9c:	94c4b03a 	or	r2,r18,r19
 400bda0:	1002351e 	bne	r2,zero,400c678 <___vfiprintf_internal_r+0x1058>
 400bda4:	d8001d85 	stb	zero,118(sp)
 400bda8:	48022216 	blt	r9,zero,400c634 <___vfiprintf_internal_r+0x1014>
 400bdac:	00bfdfc4 	movi	r2,-129
 400bdb0:	a0a8703a 	and	r20,r20,r2
 400bdb4:	003f1506 	br	400ba0c <__alt_data_end+0xfc00ba0c>
 400bdb8:	da802217 	ldw	r10,136(sp)
 400bdbc:	04800044 	movi	r18,1
 400bdc0:	d8001d85 	stb	zero,118(sp)
 400bdc4:	50800017 	ldw	r2,0(r10)
 400bdc8:	52800104 	addi	r10,r10,4
 400bdcc:	da802215 	stw	r10,136(sp)
 400bdd0:	d8801005 	stb	r2,64(sp)
 400bdd4:	9027883a 	mov	r19,r18
 400bdd8:	dd401004 	addi	r21,sp,64
 400bddc:	0013883a 	mov	r9,zero
 400bde0:	003f1706 	br	400ba40 <__alt_data_end+0xfc00ba40>
 400bde4:	21003fcc 	andi	r4,r4,255
 400bde8:	2003201e 	bne	r4,zero,400ca6c <___vfiprintf_internal_r+0x144c>
 400bdec:	a080080c 	andi	r2,r20,32
 400bdf0:	10004b26 	beq	r2,zero,400bf20 <___vfiprintf_internal_r+0x900>
 400bdf4:	da802217 	ldw	r10,136(sp)
 400bdf8:	50800117 	ldw	r2,4(r10)
 400bdfc:	54800017 	ldw	r18,0(r10)
 400be00:	52800204 	addi	r10,r10,8
 400be04:	da802215 	stw	r10,136(sp)
 400be08:	1027883a 	mov	r19,r2
 400be0c:	10022c16 	blt	r2,zero,400c6c0 <___vfiprintf_internal_r+0x10a0>
 400be10:	df001d83 	ldbu	fp,118(sp)
 400be14:	48007216 	blt	r9,zero,400bfe0 <___vfiprintf_internal_r+0x9c0>
 400be18:	00ffdfc4 	movi	r3,-129
 400be1c:	94c4b03a 	or	r2,r18,r19
 400be20:	a0e8703a 	and	r20,r20,r3
 400be24:	1000cc26 	beq	r2,zero,400c158 <___vfiprintf_internal_r+0xb38>
 400be28:	98021026 	beq	r19,zero,400c66c <___vfiprintf_internal_r+0x104c>
 400be2c:	dc402415 	stw	r17,144(sp)
 400be30:	dc002515 	stw	r16,148(sp)
 400be34:	9823883a 	mov	r17,r19
 400be38:	9021883a 	mov	r16,r18
 400be3c:	dd401a04 	addi	r21,sp,104
 400be40:	4825883a 	mov	r18,r9
 400be44:	4027883a 	mov	r19,r8
 400be48:	8009883a 	mov	r4,r16
 400be4c:	880b883a 	mov	r5,r17
 400be50:	01800284 	movi	r6,10
 400be54:	000f883a 	mov	r7,zero
 400be58:	400da000 	call	400da00 <__umoddi3>
 400be5c:	10800c04 	addi	r2,r2,48
 400be60:	ad7fffc4 	addi	r21,r21,-1
 400be64:	8009883a 	mov	r4,r16
 400be68:	880b883a 	mov	r5,r17
 400be6c:	a8800005 	stb	r2,0(r21)
 400be70:	01800284 	movi	r6,10
 400be74:	000f883a 	mov	r7,zero
 400be78:	400d4880 	call	400d488 <__udivdi3>
 400be7c:	1021883a 	mov	r16,r2
 400be80:	10c4b03a 	or	r2,r2,r3
 400be84:	1823883a 	mov	r17,r3
 400be88:	103fef1e 	bne	r2,zero,400be48 <__alt_data_end+0xfc00be48>
 400be8c:	dc402417 	ldw	r17,144(sp)
 400be90:	dc002517 	ldw	r16,148(sp)
 400be94:	9013883a 	mov	r9,r18
 400be98:	9811883a 	mov	r8,r19
 400be9c:	da801e17 	ldw	r10,120(sp)
 400bea0:	5567c83a 	sub	r19,r10,r21
 400bea4:	003ede06 	br	400ba20 <__alt_data_end+0xfc00ba20>
 400bea8:	38803fcc 	andi	r2,r7,255
 400beac:	1080201c 	xori	r2,r2,128
 400beb0:	10bfe004 	addi	r2,r2,-128
 400beb4:	1002371e 	bne	r2,zero,400c794 <___vfiprintf_internal_r+0x1174>
 400beb8:	01000044 	movi	r4,1
 400bebc:	01c00804 	movi	r7,32
 400bec0:	80c00007 	ldb	r3,0(r16)
 400bec4:	003e3506 	br	400b79c <__alt_data_end+0xfc00b79c>
 400bec8:	a5000054 	ori	r20,r20,1
 400becc:	80c00007 	ldb	r3,0(r16)
 400bed0:	003e3206 	br	400b79c <__alt_data_end+0xfc00b79c>
 400bed4:	a5002014 	ori	r20,r20,128
 400bed8:	80c00007 	ldb	r3,0(r16)
 400bedc:	003e2f06 	br	400b79c <__alt_data_end+0xfc00b79c>
 400bee0:	8015883a 	mov	r10,r16
 400bee4:	0023883a 	mov	r17,zero
 400bee8:	18bff404 	addi	r2,r3,-48
 400beec:	50c00007 	ldb	r3,0(r10)
 400bef0:	8c4002a4 	muli	r17,r17,10
 400bef4:	84000044 	addi	r16,r16,1
 400bef8:	8015883a 	mov	r10,r16
 400befc:	1463883a 	add	r17,r2,r17
 400bf00:	18bff404 	addi	r2,r3,-48
 400bf04:	30bff92e 	bgeu	r6,r2,400beec <__alt_data_end+0xfc00beec>
 400bf08:	003e2506 	br	400b7a0 <__alt_data_end+0xfc00b7a0>
 400bf0c:	21003fcc 	andi	r4,r4,255
 400bf10:	2002d41e 	bne	r4,zero,400ca64 <___vfiprintf_internal_r+0x1444>
 400bf14:	a5000414 	ori	r20,r20,16
 400bf18:	a080080c 	andi	r2,r20,32
 400bf1c:	103fb51e 	bne	r2,zero,400bdf4 <__alt_data_end+0xfc00bdf4>
 400bf20:	a080040c 	andi	r2,r20,16
 400bf24:	1001f826 	beq	r2,zero,400c708 <___vfiprintf_internal_r+0x10e8>
 400bf28:	da802217 	ldw	r10,136(sp)
 400bf2c:	54800017 	ldw	r18,0(r10)
 400bf30:	52800104 	addi	r10,r10,4
 400bf34:	da802215 	stw	r10,136(sp)
 400bf38:	9027d7fa 	srai	r19,r18,31
 400bf3c:	9805883a 	mov	r2,r19
 400bf40:	003fb206 	br	400be0c <__alt_data_end+0xfc00be0c>
 400bf44:	21003fcc 	andi	r4,r4,255
 400bf48:	2002c41e 	bne	r4,zero,400ca5c <___vfiprintf_internal_r+0x143c>
 400bf4c:	a5000414 	ori	r20,r20,16
 400bf50:	a080080c 	andi	r2,r20,32
 400bf54:	103f5f1e 	bne	r2,zero,400bcd4 <__alt_data_end+0xfc00bcd4>
 400bf58:	a080040c 	andi	r2,r20,16
 400bf5c:	10020f26 	beq	r2,zero,400c79c <___vfiprintf_internal_r+0x117c>
 400bf60:	da802217 	ldw	r10,136(sp)
 400bf64:	d8001d85 	stb	zero,118(sp)
 400bf68:	0027883a 	mov	r19,zero
 400bf6c:	50800104 	addi	r2,r10,4
 400bf70:	54800017 	ldw	r18,0(r10)
 400bf74:	48021116 	blt	r9,zero,400c7bc <___vfiprintf_internal_r+0x119c>
 400bf78:	00ffdfc4 	movi	r3,-129
 400bf7c:	d8802215 	stw	r2,136(sp)
 400bf80:	a0e8703a 	and	r20,r20,r3
 400bf84:	903f5e1e 	bne	r18,zero,400bd00 <__alt_data_end+0xfc00bd00>
 400bf88:	0039883a 	mov	fp,zero
 400bf8c:	4802a626 	beq	r9,zero,400ca28 <___vfiprintf_internal_r+0x1408>
 400bf90:	0025883a 	mov	r18,zero
 400bf94:	0027883a 	mov	r19,zero
 400bf98:	003f5a06 	br	400bd04 <__alt_data_end+0xfc00bd04>
 400bf9c:	21003fcc 	andi	r4,r4,255
 400bfa0:	20029f1e 	bne	r4,zero,400ca20 <___vfiprintf_internal_r+0x1400>
 400bfa4:	a5000414 	ori	r20,r20,16
 400bfa8:	a080080c 	andi	r2,r20,32
 400bfac:	10005e1e 	bne	r2,zero,400c128 <___vfiprintf_internal_r+0xb08>
 400bfb0:	a080040c 	andi	r2,r20,16
 400bfb4:	1001a21e 	bne	r2,zero,400c640 <___vfiprintf_internal_r+0x1020>
 400bfb8:	a080100c 	andi	r2,r20,64
 400bfbc:	d8001d85 	stb	zero,118(sp)
 400bfc0:	da802217 	ldw	r10,136(sp)
 400bfc4:	1002231e 	bne	r2,zero,400c854 <___vfiprintf_internal_r+0x1234>
 400bfc8:	50800104 	addi	r2,r10,4
 400bfcc:	54800017 	ldw	r18,0(r10)
 400bfd0:	0027883a 	mov	r19,zero
 400bfd4:	4801a00e 	bge	r9,zero,400c658 <___vfiprintf_internal_r+0x1038>
 400bfd8:	d8802215 	stw	r2,136(sp)
 400bfdc:	0039883a 	mov	fp,zero
 400bfe0:	94c4b03a 	or	r2,r18,r19
 400bfe4:	103f901e 	bne	r2,zero,400be28 <__alt_data_end+0xfc00be28>
 400bfe8:	00800044 	movi	r2,1
 400bfec:	10803fcc 	andi	r2,r2,255
 400bff0:	00c00044 	movi	r3,1
 400bff4:	10c05926 	beq	r2,r3,400c15c <___vfiprintf_internal_r+0xb3c>
 400bff8:	00c00084 	movi	r3,2
 400bffc:	10ffe41e 	bne	r2,r3,400bf90 <__alt_data_end+0xfc00bf90>
 400c000:	0025883a 	mov	r18,zero
 400c004:	0027883a 	mov	r19,zero
 400c008:	00013d06 	br	400c500 <___vfiprintf_internal_r+0xee0>
 400c00c:	21003fcc 	andi	r4,r4,255
 400c010:	2002811e 	bne	r4,zero,400ca18 <___vfiprintf_internal_r+0x13f8>
 400c014:	00810074 	movhi	r2,1025
 400c018:	1095ca04 	addi	r2,r2,22312
 400c01c:	d8802615 	stw	r2,152(sp)
 400c020:	a080080c 	andi	r2,r20,32
 400c024:	103f561e 	bne	r2,zero,400bd80 <__alt_data_end+0xfc00bd80>
 400c028:	a080040c 	andi	r2,r20,16
 400c02c:	1001d126 	beq	r2,zero,400c774 <___vfiprintf_internal_r+0x1154>
 400c030:	da802217 	ldw	r10,136(sp)
 400c034:	0027883a 	mov	r19,zero
 400c038:	54800017 	ldw	r18,0(r10)
 400c03c:	52800104 	addi	r10,r10,4
 400c040:	da802215 	stw	r10,136(sp)
 400c044:	003f5306 	br	400bd94 <__alt_data_end+0xfc00bd94>
 400c048:	da802217 	ldw	r10,136(sp)
 400c04c:	d8001d85 	stb	zero,118(sp)
 400c050:	55400017 	ldw	r21,0(r10)
 400c054:	50c00104 	addi	r3,r10,4
 400c058:	a8024226 	beq	r21,zero,400c964 <___vfiprintf_internal_r+0x1344>
 400c05c:	48021816 	blt	r9,zero,400c8c0 <___vfiprintf_internal_r+0x12a0>
 400c060:	480d883a 	mov	r6,r9
 400c064:	000b883a 	mov	r5,zero
 400c068:	a809883a 	mov	r4,r21
 400c06c:	d8c02a15 	stw	r3,168(sp)
 400c070:	da002b15 	stw	r8,172(sp)
 400c074:	da402c15 	stw	r9,176(sp)
 400c078:	40099b80 	call	40099b8 <memchr>
 400c07c:	d8c02a17 	ldw	r3,168(sp)
 400c080:	da002b17 	ldw	r8,172(sp)
 400c084:	da402c17 	ldw	r9,176(sp)
 400c088:	10024826 	beq	r2,zero,400c9ac <___vfiprintf_internal_r+0x138c>
 400c08c:	1567c83a 	sub	r19,r2,r21
 400c090:	df001d83 	ldbu	fp,118(sp)
 400c094:	d8c02215 	stw	r3,136(sp)
 400c098:	0013883a 	mov	r9,zero
 400c09c:	003e6006 	br	400ba20 <__alt_data_end+0xfc00ba20>
 400c0a0:	21003fcc 	andi	r4,r4,255
 400c0a4:	203fc026 	beq	r4,zero,400bfa8 <__alt_data_end+0xfc00bfa8>
 400c0a8:	d9c01d85 	stb	r7,118(sp)
 400c0ac:	003fbe06 	br	400bfa8 <__alt_data_end+0xfc00bfa8>
 400c0b0:	da802217 	ldw	r10,136(sp)
 400c0b4:	54400017 	ldw	r17,0(r10)
 400c0b8:	50800104 	addi	r2,r10,4
 400c0bc:	883e3b16 	blt	r17,zero,400b9ac <__alt_data_end+0xfc00b9ac>
 400c0c0:	d8802215 	stw	r2,136(sp)
 400c0c4:	80c00007 	ldb	r3,0(r16)
 400c0c8:	003db406 	br	400b79c <__alt_data_end+0xfc00b79c>
 400c0cc:	01000044 	movi	r4,1
 400c0d0:	01c00ac4 	movi	r7,43
 400c0d4:	80c00007 	ldb	r3,0(r16)
 400c0d8:	003db006 	br	400b79c <__alt_data_end+0xfc00b79c>
 400c0dc:	80c00007 	ldb	r3,0(r16)
 400c0e0:	82800044 	addi	r10,r16,1
 400c0e4:	1b423c26 	beq	r3,r13,400c9d8 <___vfiprintf_internal_r+0x13b8>
 400c0e8:	18bff404 	addi	r2,r3,-48
 400c0ec:	0013883a 	mov	r9,zero
 400c0f0:	30822b36 	bltu	r6,r2,400c9a0 <___vfiprintf_internal_r+0x1380>
 400c0f4:	50c00007 	ldb	r3,0(r10)
 400c0f8:	4a4002a4 	muli	r9,r9,10
 400c0fc:	54000044 	addi	r16,r10,1
 400c100:	8015883a 	mov	r10,r16
 400c104:	4893883a 	add	r9,r9,r2
 400c108:	18bff404 	addi	r2,r3,-48
 400c10c:	30bff92e 	bgeu	r6,r2,400c0f4 <__alt_data_end+0xfc00c0f4>
 400c110:	483da30e 	bge	r9,zero,400b7a0 <__alt_data_end+0xfc00b7a0>
 400c114:	027fffc4 	movi	r9,-1
 400c118:	003da106 	br	400b7a0 <__alt_data_end+0xfc00b7a0>
 400c11c:	a5001014 	ori	r20,r20,64
 400c120:	80c00007 	ldb	r3,0(r16)
 400c124:	003d9d06 	br	400b79c <__alt_data_end+0xfc00b79c>
 400c128:	da802217 	ldw	r10,136(sp)
 400c12c:	d8001d85 	stb	zero,118(sp)
 400c130:	50c00204 	addi	r3,r10,8
 400c134:	54800017 	ldw	r18,0(r10)
 400c138:	54c00117 	ldw	r19,4(r10)
 400c13c:	4801ca16 	blt	r9,zero,400c868 <___vfiprintf_internal_r+0x1248>
 400c140:	013fdfc4 	movi	r4,-129
 400c144:	94c4b03a 	or	r2,r18,r19
 400c148:	d8c02215 	stw	r3,136(sp)
 400c14c:	a128703a 	and	r20,r20,r4
 400c150:	0039883a 	mov	fp,zero
 400c154:	103f341e 	bne	r2,zero,400be28 <__alt_data_end+0xfc00be28>
 400c158:	483e2e26 	beq	r9,zero,400ba14 <__alt_data_end+0xfc00ba14>
 400c15c:	0025883a 	mov	r18,zero
 400c160:	94800c04 	addi	r18,r18,48
 400c164:	dc8019c5 	stb	r18,103(sp)
 400c168:	dcc02717 	ldw	r19,156(sp)
 400c16c:	dd4019c4 	addi	r21,sp,103
 400c170:	003e2b06 	br	400ba20 <__alt_data_end+0xfc00ba20>
 400c174:	21003fcc 	andi	r4,r4,255
 400c178:	2002361e 	bne	r4,zero,400ca54 <___vfiprintf_internal_r+0x1434>
 400c17c:	1801c126 	beq	r3,zero,400c884 <___vfiprintf_internal_r+0x1264>
 400c180:	04800044 	movi	r18,1
 400c184:	d8c01005 	stb	r3,64(sp)
 400c188:	d8001d85 	stb	zero,118(sp)
 400c18c:	9027883a 	mov	r19,r18
 400c190:	dd401004 	addi	r21,sp,64
 400c194:	003f1106 	br	400bddc <__alt_data_end+0xfc00bddc>
 400c198:	d9402117 	ldw	r5,132(sp)
 400c19c:	d9002017 	ldw	r4,128(sp)
 400c1a0:	d9801a04 	addi	r6,sp,104
 400c1a4:	d9c02b15 	stw	r7,172(sp)
 400c1a8:	dbc02a15 	stw	r15,168(sp)
 400c1ac:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c1b0:	d9c02b17 	ldw	r7,172(sp)
 400c1b4:	dbc02a17 	ldw	r15,168(sp)
 400c1b8:	10006d1e 	bne	r2,zero,400c370 <___vfiprintf_internal_r+0xd50>
 400c1bc:	d9801b17 	ldw	r6,108(sp)
 400c1c0:	d8801c17 	ldw	r2,112(sp)
 400c1c4:	d811883a 	mov	r8,sp
 400c1c8:	31400044 	addi	r5,r6,1
 400c1cc:	003e3306 	br	400ba9c <__alt_data_end+0xfc00ba9c>
 400c1d0:	d9401b17 	ldw	r5,108(sp)
 400c1d4:	d8801c17 	ldw	r2,112(sp)
 400c1d8:	29000044 	addi	r4,r5,1
 400c1dc:	d8c01d87 	ldb	r3,118(sp)
 400c1e0:	183e4d26 	beq	r3,zero,400bb18 <__alt_data_end+0xfc00bb18>
 400c1e4:	00c00044 	movi	r3,1
 400c1e8:	d9401d84 	addi	r5,sp,118
 400c1ec:	10c5883a 	add	r2,r2,r3
 400c1f0:	41400015 	stw	r5,0(r8)
 400c1f4:	40c00115 	stw	r3,4(r8)
 400c1f8:	d8801c15 	stw	r2,112(sp)
 400c1fc:	d9001b15 	stw	r4,108(sp)
 400c200:	014001c4 	movi	r5,7
 400c204:	2900a90e 	bge	r5,r4,400c4ac <___vfiprintf_internal_r+0xe8c>
 400c208:	1000da1e 	bne	r2,zero,400c574 <___vfiprintf_internal_r+0xf54>
 400c20c:	7000ab1e 	bne	r14,zero,400c4bc <___vfiprintf_internal_r+0xe9c>
 400c210:	000b883a 	mov	r5,zero
 400c214:	1809883a 	mov	r4,r3
 400c218:	d811883a 	mov	r8,sp
 400c21c:	00c02004 	movi	r3,128
 400c220:	e0fe4d26 	beq	fp,r3,400bb58 <__alt_data_end+0xfc00bb58>
 400c224:	4cf9c83a 	sub	fp,r9,r19
 400c228:	073e7b0e 	bge	zero,fp,400bc18 <__alt_data_end+0xfc00bc18>
 400c22c:	01c00404 	movi	r7,16
 400c230:	3f01900e 	bge	r7,fp,400c874 <___vfiprintf_internal_r+0x1254>
 400c234:	00c10074 	movhi	r3,1025
 400c238:	18d63004 	addi	r3,r3,22720
 400c23c:	d8c02415 	stw	r3,144(sp)
 400c240:	034001c4 	movi	r13,7
 400c244:	00000506 	br	400c25c <___vfiprintf_internal_r+0xc3c>
 400c248:	29000084 	addi	r4,r5,2
 400c24c:	42000204 	addi	r8,r8,8
 400c250:	180b883a 	mov	r5,r3
 400c254:	e73ffc04 	addi	fp,fp,-16
 400c258:	3f000d0e 	bge	r7,fp,400c290 <___vfiprintf_internal_r+0xc70>
 400c25c:	10800404 	addi	r2,r2,16
 400c260:	28c00044 	addi	r3,r5,1
 400c264:	45c00015 	stw	r23,0(r8)
 400c268:	41c00115 	stw	r7,4(r8)
 400c26c:	d8801c15 	stw	r2,112(sp)
 400c270:	d8c01b15 	stw	r3,108(sp)
 400c274:	68fff40e 	bge	r13,r3,400c248 <__alt_data_end+0xfc00c248>
 400c278:	1000101e 	bne	r2,zero,400c2bc <___vfiprintf_internal_r+0xc9c>
 400c27c:	e73ffc04 	addi	fp,fp,-16
 400c280:	01000044 	movi	r4,1
 400c284:	000b883a 	mov	r5,zero
 400c288:	d811883a 	mov	r8,sp
 400c28c:	3f3ff316 	blt	r7,fp,400c25c <__alt_data_end+0xfc00c25c>
 400c290:	da802417 	ldw	r10,144(sp)
 400c294:	1705883a 	add	r2,r2,fp
 400c298:	47000115 	stw	fp,4(r8)
 400c29c:	42800015 	stw	r10,0(r8)
 400c2a0:	d8801c15 	stw	r2,112(sp)
 400c2a4:	d9001b15 	stw	r4,108(sp)
 400c2a8:	00c001c4 	movi	r3,7
 400c2ac:	19003616 	blt	r3,r4,400c388 <___vfiprintf_internal_r+0xd68>
 400c2b0:	42000204 	addi	r8,r8,8
 400c2b4:	21000044 	addi	r4,r4,1
 400c2b8:	003e5706 	br	400bc18 <__alt_data_end+0xfc00bc18>
 400c2bc:	d9402117 	ldw	r5,132(sp)
 400c2c0:	d9002017 	ldw	r4,128(sp)
 400c2c4:	d9801a04 	addi	r6,sp,104
 400c2c8:	d9c02b15 	stw	r7,172(sp)
 400c2cc:	db402a15 	stw	r13,168(sp)
 400c2d0:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c2d4:	d9c02b17 	ldw	r7,172(sp)
 400c2d8:	db402a17 	ldw	r13,168(sp)
 400c2dc:	1000241e 	bne	r2,zero,400c370 <___vfiprintf_internal_r+0xd50>
 400c2e0:	d9401b17 	ldw	r5,108(sp)
 400c2e4:	d8801c17 	ldw	r2,112(sp)
 400c2e8:	d811883a 	mov	r8,sp
 400c2ec:	29000044 	addi	r4,r5,1
 400c2f0:	003fd806 	br	400c254 <__alt_data_end+0xfc00c254>
 400c2f4:	d9401b17 	ldw	r5,108(sp)
 400c2f8:	00c10074 	movhi	r3,1025
 400c2fc:	18d63404 	addi	r3,r3,22736
 400c300:	d8c02415 	stw	r3,144(sp)
 400c304:	29400044 	addi	r5,r5,1
 400c308:	d8c02417 	ldw	r3,144(sp)
 400c30c:	14c5883a 	add	r2,r2,r19
 400c310:	44c00115 	stw	r19,4(r8)
 400c314:	40c00015 	stw	r3,0(r8)
 400c318:	d8801c15 	stw	r2,112(sp)
 400c31c:	d9401b15 	stw	r5,108(sp)
 400c320:	00c001c4 	movi	r3,7
 400c324:	1940070e 	bge	r3,r5,400c344 <___vfiprintf_internal_r+0xd24>
 400c328:	103e4826 	beq	r2,zero,400bc4c <__alt_data_end+0xfc00bc4c>
 400c32c:	d9402117 	ldw	r5,132(sp)
 400c330:	d9002017 	ldw	r4,128(sp)
 400c334:	d9801a04 	addi	r6,sp,104
 400c338:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c33c:	10000c1e 	bne	r2,zero,400c370 <___vfiprintf_internal_r+0xd50>
 400c340:	d8801c17 	ldw	r2,112(sp)
 400c344:	8c80010e 	bge	r17,r18,400c34c <___vfiprintf_internal_r+0xd2c>
 400c348:	9023883a 	mov	r17,r18
 400c34c:	da802317 	ldw	r10,140(sp)
 400c350:	5455883a 	add	r10,r10,r17
 400c354:	da802315 	stw	r10,140(sp)
 400c358:	103e4126 	beq	r2,zero,400bc60 <__alt_data_end+0xfc00bc60>
 400c35c:	d9402117 	ldw	r5,132(sp)
 400c360:	d9002017 	ldw	r4,128(sp)
 400c364:	d9801a04 	addi	r6,sp,104
 400c368:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c36c:	103e3c26 	beq	r2,zero,400bc60 <__alt_data_end+0xfc00bc60>
 400c370:	dd002117 	ldw	r20,132(sp)
 400c374:	a080030b 	ldhu	r2,12(r20)
 400c378:	1080100c 	andi	r2,r2,64
 400c37c:	1001231e 	bne	r2,zero,400c80c <___vfiprintf_internal_r+0x11ec>
 400c380:	d8802317 	ldw	r2,140(sp)
 400c384:	003d7b06 	br	400b974 <__alt_data_end+0xfc00b974>
 400c388:	1000991e 	bne	r2,zero,400c5f0 <___vfiprintf_internal_r+0xfd0>
 400c38c:	00c00044 	movi	r3,1
 400c390:	9805883a 	mov	r2,r19
 400c394:	dd400015 	stw	r21,0(sp)
 400c398:	dcc00115 	stw	r19,4(sp)
 400c39c:	dcc01c15 	stw	r19,112(sp)
 400c3a0:	d8c01b15 	stw	r3,108(sp)
 400c3a4:	d811883a 	mov	r8,sp
 400c3a8:	42000204 	addi	r8,r8,8
 400c3ac:	a2c0010c 	andi	r11,r20,4
 400c3b0:	583fe426 	beq	r11,zero,400c344 <__alt_data_end+0xfc00c344>
 400c3b4:	8ca7c83a 	sub	r19,r17,r18
 400c3b8:	04ffe20e 	bge	zero,r19,400c344 <__alt_data_end+0xfc00c344>
 400c3bc:	01c00404 	movi	r7,16
 400c3c0:	3cffcc0e 	bge	r7,r19,400c2f4 <__alt_data_end+0xfc00c2f4>
 400c3c4:	02810074 	movhi	r10,1025
 400c3c8:	52963404 	addi	r10,r10,22736
 400c3cc:	d9001b17 	ldw	r4,108(sp)
 400c3d0:	da802415 	stw	r10,144(sp)
 400c3d4:	382b883a 	mov	r21,r7
 400c3d8:	050001c4 	movi	r20,7
 400c3dc:	df002017 	ldw	fp,128(sp)
 400c3e0:	00000506 	br	400c3f8 <___vfiprintf_internal_r+0xdd8>
 400c3e4:	21400084 	addi	r5,r4,2
 400c3e8:	42000204 	addi	r8,r8,8
 400c3ec:	1809883a 	mov	r4,r3
 400c3f0:	9cfffc04 	addi	r19,r19,-16
 400c3f4:	acffc40e 	bge	r21,r19,400c308 <__alt_data_end+0xfc00c308>
 400c3f8:	10800404 	addi	r2,r2,16
 400c3fc:	20c00044 	addi	r3,r4,1
 400c400:	45800015 	stw	r22,0(r8)
 400c404:	45400115 	stw	r21,4(r8)
 400c408:	d8801c15 	stw	r2,112(sp)
 400c40c:	d8c01b15 	stw	r3,108(sp)
 400c410:	a0fff40e 	bge	r20,r3,400c3e4 <__alt_data_end+0xfc00c3e4>
 400c414:	1000041e 	bne	r2,zero,400c428 <___vfiprintf_internal_r+0xe08>
 400c418:	01400044 	movi	r5,1
 400c41c:	0009883a 	mov	r4,zero
 400c420:	d811883a 	mov	r8,sp
 400c424:	003ff206 	br	400c3f0 <__alt_data_end+0xfc00c3f0>
 400c428:	d9402117 	ldw	r5,132(sp)
 400c42c:	d9801a04 	addi	r6,sp,104
 400c430:	e009883a 	mov	r4,fp
 400c434:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c438:	103fcd1e 	bne	r2,zero,400c370 <__alt_data_end+0xfc00c370>
 400c43c:	d9001b17 	ldw	r4,108(sp)
 400c440:	d8801c17 	ldw	r2,112(sp)
 400c444:	d811883a 	mov	r8,sp
 400c448:	21400044 	addi	r5,r4,1
 400c44c:	003fe806 	br	400c3f0 <__alt_data_end+0xfc00c3f0>
 400c450:	d9402117 	ldw	r5,132(sp)
 400c454:	d9002017 	ldw	r4,128(sp)
 400c458:	d9801a04 	addi	r6,sp,104
 400c45c:	d9c02b15 	stw	r7,172(sp)
 400c460:	db402a15 	stw	r13,168(sp)
 400c464:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c468:	d9c02b17 	ldw	r7,172(sp)
 400c46c:	db402a17 	ldw	r13,168(sp)
 400c470:	103fbf1e 	bne	r2,zero,400c370 <__alt_data_end+0xfc00c370>
 400c474:	d9401b17 	ldw	r5,108(sp)
 400c478:	d8801c17 	ldw	r2,112(sp)
 400c47c:	d811883a 	mov	r8,sp
 400c480:	29800044 	addi	r6,r5,1
 400c484:	003dc406 	br	400bb98 <__alt_data_end+0xfc00bb98>
 400c488:	1000d21e 	bne	r2,zero,400c7d4 <___vfiprintf_internal_r+0x11b4>
 400c48c:	d8c01d87 	ldb	r3,118(sp)
 400c490:	18009526 	beq	r3,zero,400c6e8 <___vfiprintf_internal_r+0x10c8>
 400c494:	00800044 	movi	r2,1
 400c498:	d8c01d84 	addi	r3,sp,118
 400c49c:	1009883a 	mov	r4,r2
 400c4a0:	d8c00015 	stw	r3,0(sp)
 400c4a4:	d8800115 	stw	r2,4(sp)
 400c4a8:	d811883a 	mov	r8,sp
 400c4ac:	200b883a 	mov	r5,r4
 400c4b0:	42000204 	addi	r8,r8,8
 400c4b4:	21000044 	addi	r4,r4,1
 400c4b8:	003d9706 	br	400bb18 <__alt_data_end+0xfc00bb18>
 400c4bc:	d9001d04 	addi	r4,sp,116
 400c4c0:	00800084 	movi	r2,2
 400c4c4:	d9000015 	stw	r4,0(sp)
 400c4c8:	d8800115 	stw	r2,4(sp)
 400c4cc:	1809883a 	mov	r4,r3
 400c4d0:	d811883a 	mov	r8,sp
 400c4d4:	200b883a 	mov	r5,r4
 400c4d8:	42000204 	addi	r8,r8,8
 400c4dc:	21000044 	addi	r4,r4,1
 400c4e0:	003f4e06 	br	400c21c <__alt_data_end+0xfc00c21c>
 400c4e4:	d8001d85 	stb	zero,118(sp)
 400c4e8:	48005016 	blt	r9,zero,400c62c <___vfiprintf_internal_r+0x100c>
 400c4ec:	00ffdfc4 	movi	r3,-129
 400c4f0:	94c4b03a 	or	r2,r18,r19
 400c4f4:	a0e8703a 	and	r20,r20,r3
 400c4f8:	103d4426 	beq	r2,zero,400ba0c <__alt_data_end+0xfc00ba0c>
 400c4fc:	0039883a 	mov	fp,zero
 400c500:	d9002617 	ldw	r4,152(sp)
 400c504:	dd401a04 	addi	r21,sp,104
 400c508:	908003cc 	andi	r2,r18,15
 400c50c:	9806973a 	slli	r3,r19,28
 400c510:	2085883a 	add	r2,r4,r2
 400c514:	9024d13a 	srli	r18,r18,4
 400c518:	10800003 	ldbu	r2,0(r2)
 400c51c:	9826d13a 	srli	r19,r19,4
 400c520:	ad7fffc4 	addi	r21,r21,-1
 400c524:	1ca4b03a 	or	r18,r3,r18
 400c528:	a8800005 	stb	r2,0(r21)
 400c52c:	94c4b03a 	or	r2,r18,r19
 400c530:	103ff51e 	bne	r2,zero,400c508 <__alt_data_end+0xfc00c508>
 400c534:	003e5906 	br	400be9c <__alt_data_end+0xfc00be9c>
 400c538:	d9402117 	ldw	r5,132(sp)
 400c53c:	d9002017 	ldw	r4,128(sp)
 400c540:	d9801a04 	addi	r6,sp,104
 400c544:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c548:	103f891e 	bne	r2,zero,400c370 <__alt_data_end+0xfc00c370>
 400c54c:	d8801c17 	ldw	r2,112(sp)
 400c550:	d811883a 	mov	r8,sp
 400c554:	003f9506 	br	400c3ac <__alt_data_end+0xfc00c3ac>
 400c558:	d9402117 	ldw	r5,132(sp)
 400c55c:	d9002017 	ldw	r4,128(sp)
 400c560:	d9801a04 	addi	r6,sp,104
 400c564:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c568:	103f811e 	bne	r2,zero,400c370 <__alt_data_end+0xfc00c370>
 400c56c:	d811883a 	mov	r8,sp
 400c570:	003ced06 	br	400b928 <__alt_data_end+0xfc00b928>
 400c574:	d9402117 	ldw	r5,132(sp)
 400c578:	d9002017 	ldw	r4,128(sp)
 400c57c:	d9801a04 	addi	r6,sp,104
 400c580:	da402c15 	stw	r9,176(sp)
 400c584:	db802a15 	stw	r14,168(sp)
 400c588:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c58c:	da402c17 	ldw	r9,176(sp)
 400c590:	db802a17 	ldw	r14,168(sp)
 400c594:	103f761e 	bne	r2,zero,400c370 <__alt_data_end+0xfc00c370>
 400c598:	d9401b17 	ldw	r5,108(sp)
 400c59c:	d8801c17 	ldw	r2,112(sp)
 400c5a0:	d811883a 	mov	r8,sp
 400c5a4:	29000044 	addi	r4,r5,1
 400c5a8:	003d5b06 	br	400bb18 <__alt_data_end+0xfc00bb18>
 400c5ac:	d9402117 	ldw	r5,132(sp)
 400c5b0:	d9002017 	ldw	r4,128(sp)
 400c5b4:	d9801a04 	addi	r6,sp,104
 400c5b8:	da402c15 	stw	r9,176(sp)
 400c5bc:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c5c0:	da402c17 	ldw	r9,176(sp)
 400c5c4:	103f6a1e 	bne	r2,zero,400c370 <__alt_data_end+0xfc00c370>
 400c5c8:	d9401b17 	ldw	r5,108(sp)
 400c5cc:	d8801c17 	ldw	r2,112(sp)
 400c5d0:	d811883a 	mov	r8,sp
 400c5d4:	29000044 	addi	r4,r5,1
 400c5d8:	003f1006 	br	400c21c <__alt_data_end+0xfc00c21c>
 400c5dc:	1000c31e 	bne	r2,zero,400c8ec <___vfiprintf_internal_r+0x12cc>
 400c5e0:	01000044 	movi	r4,1
 400c5e4:	000b883a 	mov	r5,zero
 400c5e8:	d811883a 	mov	r8,sp
 400c5ec:	003f0d06 	br	400c224 <__alt_data_end+0xfc00c224>
 400c5f0:	d9402117 	ldw	r5,132(sp)
 400c5f4:	d9002017 	ldw	r4,128(sp)
 400c5f8:	d9801a04 	addi	r6,sp,104
 400c5fc:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c600:	103f5b1e 	bne	r2,zero,400c370 <__alt_data_end+0xfc00c370>
 400c604:	d9001b17 	ldw	r4,108(sp)
 400c608:	d8801c17 	ldw	r2,112(sp)
 400c60c:	d811883a 	mov	r8,sp
 400c610:	21000044 	addi	r4,r4,1
 400c614:	003d8006 	br	400bc18 <__alt_data_end+0xfc00bc18>
 400c618:	01010074 	movhi	r4,1025
 400c61c:	2115cf04 	addi	r4,r4,22332
 400c620:	d9002615 	stw	r4,152(sp)
 400c624:	d8c02215 	stw	r3,136(sp)
 400c628:	1029883a 	mov	r20,r2
 400c62c:	94c4b03a 	or	r2,r18,r19
 400c630:	103fb21e 	bne	r2,zero,400c4fc <__alt_data_end+0xfc00c4fc>
 400c634:	0039883a 	mov	fp,zero
 400c638:	00800084 	movi	r2,2
 400c63c:	003e6b06 	br	400bfec <__alt_data_end+0xfc00bfec>
 400c640:	da802217 	ldw	r10,136(sp)
 400c644:	d8001d85 	stb	zero,118(sp)
 400c648:	0027883a 	mov	r19,zero
 400c64c:	50800104 	addi	r2,r10,4
 400c650:	54800017 	ldw	r18,0(r10)
 400c654:	483e6016 	blt	r9,zero,400bfd8 <__alt_data_end+0xfc00bfd8>
 400c658:	00ffdfc4 	movi	r3,-129
 400c65c:	d8802215 	stw	r2,136(sp)
 400c660:	a0e8703a 	and	r20,r20,r3
 400c664:	0039883a 	mov	fp,zero
 400c668:	903ebb26 	beq	r18,zero,400c158 <__alt_data_end+0xfc00c158>
 400c66c:	00800244 	movi	r2,9
 400c670:	14bdee36 	bltu	r2,r18,400be2c <__alt_data_end+0xfc00be2c>
 400c674:	003eba06 	br	400c160 <__alt_data_end+0xfc00c160>
 400c678:	00800c04 	movi	r2,48
 400c67c:	d8c01d45 	stb	r3,117(sp)
 400c680:	d8801d05 	stb	r2,116(sp)
 400c684:	d8001d85 	stb	zero,118(sp)
 400c688:	a0c00094 	ori	r3,r20,2
 400c68c:	4800a916 	blt	r9,zero,400c934 <___vfiprintf_internal_r+0x1314>
 400c690:	00bfdfc4 	movi	r2,-129
 400c694:	a096703a 	and	r11,r20,r2
 400c698:	5d000094 	ori	r20,r11,2
 400c69c:	0039883a 	mov	fp,zero
 400c6a0:	003f9706 	br	400c500 <__alt_data_end+0xfc00c500>
 400c6a4:	8025883a 	mov	r18,r16
 400c6a8:	003c2e06 	br	400b764 <__alt_data_end+0xfc00b764>
 400c6ac:	00810074 	movhi	r2,1025
 400c6b0:	1095cf04 	addi	r2,r2,22332
 400c6b4:	0039883a 	mov	fp,zero
 400c6b8:	d8802615 	stw	r2,152(sp)
 400c6bc:	003f9006 	br	400c500 <__alt_data_end+0xfc00c500>
 400c6c0:	04a5c83a 	sub	r18,zero,r18
 400c6c4:	07000b44 	movi	fp,45
 400c6c8:	9004c03a 	cmpne	r2,r18,zero
 400c6cc:	04e7c83a 	sub	r19,zero,r19
 400c6d0:	df001d85 	stb	fp,118(sp)
 400c6d4:	98a7c83a 	sub	r19,r19,r2
 400c6d8:	48009f16 	blt	r9,zero,400c958 <___vfiprintf_internal_r+0x1338>
 400c6dc:	00bfdfc4 	movi	r2,-129
 400c6e0:	a0a8703a 	and	r20,r20,r2
 400c6e4:	003dd006 	br	400be28 <__alt_data_end+0xfc00be28>
 400c6e8:	70004c26 	beq	r14,zero,400c81c <___vfiprintf_internal_r+0x11fc>
 400c6ec:	00800084 	movi	r2,2
 400c6f0:	d8c01d04 	addi	r3,sp,116
 400c6f4:	d8c00015 	stw	r3,0(sp)
 400c6f8:	d8800115 	stw	r2,4(sp)
 400c6fc:	01000044 	movi	r4,1
 400c700:	d811883a 	mov	r8,sp
 400c704:	003f7306 	br	400c4d4 <__alt_data_end+0xfc00c4d4>
 400c708:	a080100c 	andi	r2,r20,64
 400c70c:	da802217 	ldw	r10,136(sp)
 400c710:	103e0626 	beq	r2,zero,400bf2c <__alt_data_end+0xfc00bf2c>
 400c714:	5480000f 	ldh	r18,0(r10)
 400c718:	52800104 	addi	r10,r10,4
 400c71c:	da802215 	stw	r10,136(sp)
 400c720:	9027d7fa 	srai	r19,r18,31
 400c724:	9805883a 	mov	r2,r19
 400c728:	003db806 	br	400be0c <__alt_data_end+0xfc00be0c>
 400c72c:	a080040c 	andi	r2,r20,16
 400c730:	1000091e 	bne	r2,zero,400c758 <___vfiprintf_internal_r+0x1138>
 400c734:	a2c0100c 	andi	r11,r20,64
 400c738:	58000726 	beq	r11,zero,400c758 <___vfiprintf_internal_r+0x1138>
 400c73c:	da802217 	ldw	r10,136(sp)
 400c740:	50800017 	ldw	r2,0(r10)
 400c744:	52800104 	addi	r10,r10,4
 400c748:	da802215 	stw	r10,136(sp)
 400c74c:	da802317 	ldw	r10,140(sp)
 400c750:	1280000d 	sth	r10,0(r2)
 400c754:	003be706 	br	400b6f4 <__alt_data_end+0xfc00b6f4>
 400c758:	da802217 	ldw	r10,136(sp)
 400c75c:	50800017 	ldw	r2,0(r10)
 400c760:	52800104 	addi	r10,r10,4
 400c764:	da802215 	stw	r10,136(sp)
 400c768:	da802317 	ldw	r10,140(sp)
 400c76c:	12800015 	stw	r10,0(r2)
 400c770:	003be006 	br	400b6f4 <__alt_data_end+0xfc00b6f4>
 400c774:	a080100c 	andi	r2,r20,64
 400c778:	da802217 	ldw	r10,136(sp)
 400c77c:	10003026 	beq	r2,zero,400c840 <___vfiprintf_internal_r+0x1220>
 400c780:	5480000b 	ldhu	r18,0(r10)
 400c784:	52800104 	addi	r10,r10,4
 400c788:	0027883a 	mov	r19,zero
 400c78c:	da802215 	stw	r10,136(sp)
 400c790:	003d8006 	br	400bd94 <__alt_data_end+0xfc00bd94>
 400c794:	80c00007 	ldb	r3,0(r16)
 400c798:	003c0006 	br	400b79c <__alt_data_end+0xfc00b79c>
 400c79c:	a080100c 	andi	r2,r20,64
 400c7a0:	d8001d85 	stb	zero,118(sp)
 400c7a4:	da802217 	ldw	r10,136(sp)
 400c7a8:	1000201e 	bne	r2,zero,400c82c <___vfiprintf_internal_r+0x120c>
 400c7ac:	50800104 	addi	r2,r10,4
 400c7b0:	54800017 	ldw	r18,0(r10)
 400c7b4:	0027883a 	mov	r19,zero
 400c7b8:	483def0e 	bge	r9,zero,400bf78 <__alt_data_end+0xfc00bf78>
 400c7bc:	94c6b03a 	or	r3,r18,r19
 400c7c0:	d8802215 	stw	r2,136(sp)
 400c7c4:	183d4e1e 	bne	r3,zero,400bd00 <__alt_data_end+0xfc00bd00>
 400c7c8:	0039883a 	mov	fp,zero
 400c7cc:	0005883a 	mov	r2,zero
 400c7d0:	003e0606 	br	400bfec <__alt_data_end+0xfc00bfec>
 400c7d4:	d9402117 	ldw	r5,132(sp)
 400c7d8:	d9002017 	ldw	r4,128(sp)
 400c7dc:	d9801a04 	addi	r6,sp,104
 400c7e0:	da402c15 	stw	r9,176(sp)
 400c7e4:	db802a15 	stw	r14,168(sp)
 400c7e8:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c7ec:	da402c17 	ldw	r9,176(sp)
 400c7f0:	db802a17 	ldw	r14,168(sp)
 400c7f4:	103ede1e 	bne	r2,zero,400c370 <__alt_data_end+0xfc00c370>
 400c7f8:	d9401b17 	ldw	r5,108(sp)
 400c7fc:	d8801c17 	ldw	r2,112(sp)
 400c800:	d811883a 	mov	r8,sp
 400c804:	29000044 	addi	r4,r5,1
 400c808:	003e7406 	br	400c1dc <__alt_data_end+0xfc00c1dc>
 400c80c:	00bfffc4 	movi	r2,-1
 400c810:	003c5806 	br	400b974 <__alt_data_end+0xfc00b974>
 400c814:	d811883a 	mov	r8,sp
 400c818:	003ee806 	br	400c3bc <__alt_data_end+0xfc00c3bc>
 400c81c:	000b883a 	mov	r5,zero
 400c820:	01000044 	movi	r4,1
 400c824:	d811883a 	mov	r8,sp
 400c828:	003e7c06 	br	400c21c <__alt_data_end+0xfc00c21c>
 400c82c:	50800104 	addi	r2,r10,4
 400c830:	5480000b 	ldhu	r18,0(r10)
 400c834:	0027883a 	mov	r19,zero
 400c838:	483dcf0e 	bge	r9,zero,400bf78 <__alt_data_end+0xfc00bf78>
 400c83c:	003fdf06 	br	400c7bc <__alt_data_end+0xfc00c7bc>
 400c840:	54800017 	ldw	r18,0(r10)
 400c844:	52800104 	addi	r10,r10,4
 400c848:	0027883a 	mov	r19,zero
 400c84c:	da802215 	stw	r10,136(sp)
 400c850:	003d5006 	br	400bd94 <__alt_data_end+0xfc00bd94>
 400c854:	50800104 	addi	r2,r10,4
 400c858:	5480000b 	ldhu	r18,0(r10)
 400c85c:	0027883a 	mov	r19,zero
 400c860:	483f7d0e 	bge	r9,zero,400c658 <__alt_data_end+0xfc00c658>
 400c864:	003ddc06 	br	400bfd8 <__alt_data_end+0xfc00bfd8>
 400c868:	d8c02215 	stw	r3,136(sp)
 400c86c:	0039883a 	mov	fp,zero
 400c870:	003ddb06 	br	400bfe0 <__alt_data_end+0xfc00bfe0>
 400c874:	02810074 	movhi	r10,1025
 400c878:	52963004 	addi	r10,r10,22720
 400c87c:	da802415 	stw	r10,144(sp)
 400c880:	003e8306 	br	400c290 <__alt_data_end+0xfc00c290>
 400c884:	d8801c17 	ldw	r2,112(sp)
 400c888:	dd002117 	ldw	r20,132(sp)
 400c88c:	103eb926 	beq	r2,zero,400c374 <__alt_data_end+0xfc00c374>
 400c890:	d9002017 	ldw	r4,128(sp)
 400c894:	d9801a04 	addi	r6,sp,104
 400c898:	a00b883a 	mov	r5,r20
 400c89c:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c8a0:	003eb406 	br	400c374 <__alt_data_end+0xfc00c374>
 400c8a4:	80c00043 	ldbu	r3,1(r16)
 400c8a8:	a5000814 	ori	r20,r20,32
 400c8ac:	84000044 	addi	r16,r16,1
 400c8b0:	18c03fcc 	andi	r3,r3,255
 400c8b4:	18c0201c 	xori	r3,r3,128
 400c8b8:	18ffe004 	addi	r3,r3,-128
 400c8bc:	003bb706 	br	400b79c <__alt_data_end+0xfc00b79c>
 400c8c0:	a809883a 	mov	r4,r21
 400c8c4:	d8c02a15 	stw	r3,168(sp)
 400c8c8:	da002b15 	stw	r8,172(sp)
 400c8cc:	400491c0 	call	400491c <strlen>
 400c8d0:	d8c02a17 	ldw	r3,168(sp)
 400c8d4:	1027883a 	mov	r19,r2
 400c8d8:	df001d83 	ldbu	fp,118(sp)
 400c8dc:	d8c02215 	stw	r3,136(sp)
 400c8e0:	0013883a 	mov	r9,zero
 400c8e4:	da002b17 	ldw	r8,172(sp)
 400c8e8:	003c4d06 	br	400ba20 <__alt_data_end+0xfc00ba20>
 400c8ec:	d9402117 	ldw	r5,132(sp)
 400c8f0:	d9002017 	ldw	r4,128(sp)
 400c8f4:	d9801a04 	addi	r6,sp,104
 400c8f8:	da402c15 	stw	r9,176(sp)
 400c8fc:	400b50c0 	call	400b50c <__sprint_r.part.0>
 400c900:	da402c17 	ldw	r9,176(sp)
 400c904:	103e9a1e 	bne	r2,zero,400c370 <__alt_data_end+0xfc00c370>
 400c908:	d9401b17 	ldw	r5,108(sp)
 400c90c:	d8801c17 	ldw	r2,112(sp)
 400c910:	d811883a 	mov	r8,sp
 400c914:	29000044 	addi	r4,r5,1
 400c918:	003e4206 	br	400c224 <__alt_data_end+0xfc00c224>
 400c91c:	d9401b17 	ldw	r5,108(sp)
 400c920:	01010074 	movhi	r4,1025
 400c924:	21163404 	addi	r4,r4,22736
 400c928:	d9002415 	stw	r4,144(sp)
 400c92c:	29400044 	addi	r5,r5,1
 400c930:	003c6d06 	br	400bae8 <__alt_data_end+0xfc00bae8>
 400c934:	0039883a 	mov	fp,zero
 400c938:	00800084 	movi	r2,2
 400c93c:	10803fcc 	andi	r2,r2,255
 400c940:	01000044 	movi	r4,1
 400c944:	11001e26 	beq	r2,r4,400c9c0 <___vfiprintf_internal_r+0x13a0>
 400c948:	01000084 	movi	r4,2
 400c94c:	11001e1e 	bne	r2,r4,400c9c8 <___vfiprintf_internal_r+0x13a8>
 400c950:	1829883a 	mov	r20,r3
 400c954:	003eea06 	br	400c500 <__alt_data_end+0xfc00c500>
 400c958:	a007883a 	mov	r3,r20
 400c95c:	00800044 	movi	r2,1
 400c960:	003ff606 	br	400c93c <__alt_data_end+0xfc00c93c>
 400c964:	00800184 	movi	r2,6
 400c968:	1240012e 	bgeu	r2,r9,400c970 <___vfiprintf_internal_r+0x1350>
 400c96c:	1013883a 	mov	r9,r2
 400c970:	4827883a 	mov	r19,r9
 400c974:	4825883a 	mov	r18,r9
 400c978:	48001516 	blt	r9,zero,400c9d0 <___vfiprintf_internal_r+0x13b0>
 400c97c:	05410074 	movhi	r21,1025
 400c980:	d8c02215 	stw	r3,136(sp)
 400c984:	ad55d404 	addi	r21,r21,22352
 400c988:	003d1406 	br	400bddc <__alt_data_end+0xfc00bddc>
 400c98c:	02810074 	movhi	r10,1025
 400c990:	52963004 	addi	r10,r10,22720
 400c994:	da802415 	stw	r10,144(sp)
 400c998:	200d883a 	mov	r6,r4
 400c99c:	003c9106 	br	400bbe4 <__alt_data_end+0xfc00bbe4>
 400c9a0:	5021883a 	mov	r16,r10
 400c9a4:	0013883a 	mov	r9,zero
 400c9a8:	003b7d06 	br	400b7a0 <__alt_data_end+0xfc00b7a0>
 400c9ac:	4827883a 	mov	r19,r9
 400c9b0:	df001d83 	ldbu	fp,118(sp)
 400c9b4:	d8c02215 	stw	r3,136(sp)
 400c9b8:	0013883a 	mov	r9,zero
 400c9bc:	003c1806 	br	400ba20 <__alt_data_end+0xfc00ba20>
 400c9c0:	1829883a 	mov	r20,r3
 400c9c4:	003d1806 	br	400be28 <__alt_data_end+0xfc00be28>
 400c9c8:	1829883a 	mov	r20,r3
 400c9cc:	003ccd06 	br	400bd04 <__alt_data_end+0xfc00bd04>
 400c9d0:	0025883a 	mov	r18,zero
 400c9d4:	003fe906 	br	400c97c <__alt_data_end+0xfc00c97c>
 400c9d8:	d8802217 	ldw	r2,136(sp)
 400c9dc:	80c00043 	ldbu	r3,1(r16)
 400c9e0:	5021883a 	mov	r16,r10
 400c9e4:	12400017 	ldw	r9,0(r2)
 400c9e8:	10800104 	addi	r2,r2,4
 400c9ec:	d8802215 	stw	r2,136(sp)
 400c9f0:	483faf0e 	bge	r9,zero,400c8b0 <__alt_data_end+0xfc00c8b0>
 400c9f4:	18c03fcc 	andi	r3,r3,255
 400c9f8:	18c0201c 	xori	r3,r3,128
 400c9fc:	027fffc4 	movi	r9,-1
 400ca00:	18ffe004 	addi	r3,r3,-128
 400ca04:	003b6506 	br	400b79c <__alt_data_end+0xfc00b79c>
 400ca08:	d9c01d85 	stb	r7,118(sp)
 400ca0c:	003ca006 	br	400bc90 <__alt_data_end+0xfc00bc90>
 400ca10:	d9c01d85 	stb	r7,118(sp)
 400ca14:	003cad06 	br	400bccc <__alt_data_end+0xfc00bccc>
 400ca18:	d9c01d85 	stb	r7,118(sp)
 400ca1c:	003d7d06 	br	400c014 <__alt_data_end+0xfc00c014>
 400ca20:	d9c01d85 	stb	r7,118(sp)
 400ca24:	003d5f06 	br	400bfa4 <__alt_data_end+0xfc00bfa4>
 400ca28:	a080004c 	andi	r2,r20,1
 400ca2c:	0039883a 	mov	fp,zero
 400ca30:	10000526 	beq	r2,zero,400ca48 <___vfiprintf_internal_r+0x1428>
 400ca34:	00800c04 	movi	r2,48
 400ca38:	d88019c5 	stb	r2,103(sp)
 400ca3c:	dcc02717 	ldw	r19,156(sp)
 400ca40:	dd4019c4 	addi	r21,sp,103
 400ca44:	003bf606 	br	400ba20 <__alt_data_end+0xfc00ba20>
 400ca48:	0027883a 	mov	r19,zero
 400ca4c:	dd401a04 	addi	r21,sp,104
 400ca50:	003bf306 	br	400ba20 <__alt_data_end+0xfc00ba20>
 400ca54:	d9c01d85 	stb	r7,118(sp)
 400ca58:	003dc806 	br	400c17c <__alt_data_end+0xfc00c17c>
 400ca5c:	d9c01d85 	stb	r7,118(sp)
 400ca60:	003d3a06 	br	400bf4c <__alt_data_end+0xfc00bf4c>
 400ca64:	d9c01d85 	stb	r7,118(sp)
 400ca68:	003d2a06 	br	400bf14 <__alt_data_end+0xfc00bf14>
 400ca6c:	d9c01d85 	stb	r7,118(sp)
 400ca70:	003cde06 	br	400bdec <__alt_data_end+0xfc00bdec>
 400ca74:	d9c01d85 	stb	r7,118(sp)
 400ca78:	003cbc06 	br	400bd6c <__alt_data_end+0xfc00bd6c>

0400ca7c <__vfiprintf_internal>:
 400ca7c:	00810074 	movhi	r2,1025
 400ca80:	109d1f04 	addi	r2,r2,29820
 400ca84:	300f883a 	mov	r7,r6
 400ca88:	280d883a 	mov	r6,r5
 400ca8c:	200b883a 	mov	r5,r4
 400ca90:	11000017 	ldw	r4,0(r2)
 400ca94:	400b6201 	jmpi	400b620 <___vfiprintf_internal_r>

0400ca98 <__sbprintf>:
 400ca98:	2880030b 	ldhu	r2,12(r5)
 400ca9c:	2ac01917 	ldw	r11,100(r5)
 400caa0:	2a80038b 	ldhu	r10,14(r5)
 400caa4:	2a400717 	ldw	r9,28(r5)
 400caa8:	2a000917 	ldw	r8,36(r5)
 400caac:	defee204 	addi	sp,sp,-1144
 400cab0:	00c10004 	movi	r3,1024
 400cab4:	dc011a15 	stw	r16,1128(sp)
 400cab8:	10bfff4c 	andi	r2,r2,65533
 400cabc:	2821883a 	mov	r16,r5
 400cac0:	d8cb883a 	add	r5,sp,r3
 400cac4:	dc811c15 	stw	r18,1136(sp)
 400cac8:	dc411b15 	stw	r17,1132(sp)
 400cacc:	dfc11d15 	stw	ra,1140(sp)
 400cad0:	2025883a 	mov	r18,r4
 400cad4:	d881030d 	sth	r2,1036(sp)
 400cad8:	dac11915 	stw	r11,1124(sp)
 400cadc:	da81038d 	sth	r10,1038(sp)
 400cae0:	da410715 	stw	r9,1052(sp)
 400cae4:	da010915 	stw	r8,1060(sp)
 400cae8:	dec10015 	stw	sp,1024(sp)
 400caec:	dec10415 	stw	sp,1040(sp)
 400caf0:	d8c10215 	stw	r3,1032(sp)
 400caf4:	d8c10515 	stw	r3,1044(sp)
 400caf8:	d8010615 	stw	zero,1048(sp)
 400cafc:	400b6200 	call	400b620 <___vfiprintf_internal_r>
 400cb00:	1023883a 	mov	r17,r2
 400cb04:	10000416 	blt	r2,zero,400cb18 <__sbprintf+0x80>
 400cb08:	d9410004 	addi	r5,sp,1024
 400cb0c:	9009883a 	mov	r4,r18
 400cb10:	400887c0 	call	400887c <_fflush_r>
 400cb14:	10000d1e 	bne	r2,zero,400cb4c <__sbprintf+0xb4>
 400cb18:	d881030b 	ldhu	r2,1036(sp)
 400cb1c:	1080100c 	andi	r2,r2,64
 400cb20:	10000326 	beq	r2,zero,400cb30 <__sbprintf+0x98>
 400cb24:	8080030b 	ldhu	r2,12(r16)
 400cb28:	10801014 	ori	r2,r2,64
 400cb2c:	8080030d 	sth	r2,12(r16)
 400cb30:	8805883a 	mov	r2,r17
 400cb34:	dfc11d17 	ldw	ra,1140(sp)
 400cb38:	dc811c17 	ldw	r18,1136(sp)
 400cb3c:	dc411b17 	ldw	r17,1132(sp)
 400cb40:	dc011a17 	ldw	r16,1128(sp)
 400cb44:	dec11e04 	addi	sp,sp,1144
 400cb48:	f800283a 	ret
 400cb4c:	047fffc4 	movi	r17,-1
 400cb50:	003ff106 	br	400cb18 <__alt_data_end+0xfc00cb18>

0400cb54 <_write_r>:
 400cb54:	defffd04 	addi	sp,sp,-12
 400cb58:	2805883a 	mov	r2,r5
 400cb5c:	dc000015 	stw	r16,0(sp)
 400cb60:	040100b4 	movhi	r16,1026
 400cb64:	dc400115 	stw	r17,4(sp)
 400cb68:	300b883a 	mov	r5,r6
 400cb6c:	84241504 	addi	r16,r16,-28588
 400cb70:	2023883a 	mov	r17,r4
 400cb74:	380d883a 	mov	r6,r7
 400cb78:	1009883a 	mov	r4,r2
 400cb7c:	dfc00215 	stw	ra,8(sp)
 400cb80:	80000015 	stw	zero,0(r16)
 400cb84:	4010f5c0 	call	4010f5c <write>
 400cb88:	00ffffc4 	movi	r3,-1
 400cb8c:	10c00526 	beq	r2,r3,400cba4 <_write_r+0x50>
 400cb90:	dfc00217 	ldw	ra,8(sp)
 400cb94:	dc400117 	ldw	r17,4(sp)
 400cb98:	dc000017 	ldw	r16,0(sp)
 400cb9c:	dec00304 	addi	sp,sp,12
 400cba0:	f800283a 	ret
 400cba4:	80c00017 	ldw	r3,0(r16)
 400cba8:	183ff926 	beq	r3,zero,400cb90 <__alt_data_end+0xfc00cb90>
 400cbac:	88c00015 	stw	r3,0(r17)
 400cbb0:	003ff706 	br	400cb90 <__alt_data_end+0xfc00cb90>

0400cbb4 <_close_r>:
 400cbb4:	defffd04 	addi	sp,sp,-12
 400cbb8:	dc000015 	stw	r16,0(sp)
 400cbbc:	040100b4 	movhi	r16,1026
 400cbc0:	dc400115 	stw	r17,4(sp)
 400cbc4:	84241504 	addi	r16,r16,-28588
 400cbc8:	2023883a 	mov	r17,r4
 400cbcc:	2809883a 	mov	r4,r5
 400cbd0:	dfc00215 	stw	ra,8(sp)
 400cbd4:	80000015 	stw	zero,0(r16)
 400cbd8:	40105780 	call	4010578 <close>
 400cbdc:	00ffffc4 	movi	r3,-1
 400cbe0:	10c00526 	beq	r2,r3,400cbf8 <_close_r+0x44>
 400cbe4:	dfc00217 	ldw	ra,8(sp)
 400cbe8:	dc400117 	ldw	r17,4(sp)
 400cbec:	dc000017 	ldw	r16,0(sp)
 400cbf0:	dec00304 	addi	sp,sp,12
 400cbf4:	f800283a 	ret
 400cbf8:	80c00017 	ldw	r3,0(r16)
 400cbfc:	183ff926 	beq	r3,zero,400cbe4 <__alt_data_end+0xfc00cbe4>
 400cc00:	88c00015 	stw	r3,0(r17)
 400cc04:	003ff706 	br	400cbe4 <__alt_data_end+0xfc00cbe4>

0400cc08 <_calloc_r>:
 400cc08:	298b383a 	mul	r5,r5,r6
 400cc0c:	defffe04 	addi	sp,sp,-8
 400cc10:	dfc00115 	stw	ra,4(sp)
 400cc14:	dc000015 	stw	r16,0(sp)
 400cc18:	4003e340 	call	4003e34 <_malloc_r>
 400cc1c:	10002926 	beq	r2,zero,400ccc4 <_calloc_r+0xbc>
 400cc20:	11bfff17 	ldw	r6,-4(r2)
 400cc24:	1021883a 	mov	r16,r2
 400cc28:	00bfff04 	movi	r2,-4
 400cc2c:	308c703a 	and	r6,r6,r2
 400cc30:	00c00904 	movi	r3,36
 400cc34:	308d883a 	add	r6,r6,r2
 400cc38:	19801636 	bltu	r3,r6,400cc94 <_calloc_r+0x8c>
 400cc3c:	008004c4 	movi	r2,19
 400cc40:	11800b2e 	bgeu	r2,r6,400cc70 <_calloc_r+0x68>
 400cc44:	80000015 	stw	zero,0(r16)
 400cc48:	80000115 	stw	zero,4(r16)
 400cc4c:	008006c4 	movi	r2,27
 400cc50:	11801a2e 	bgeu	r2,r6,400ccbc <_calloc_r+0xb4>
 400cc54:	80000215 	stw	zero,8(r16)
 400cc58:	80000315 	stw	zero,12(r16)
 400cc5c:	30c0151e 	bne	r6,r3,400ccb4 <_calloc_r+0xac>
 400cc60:	80000415 	stw	zero,16(r16)
 400cc64:	80800604 	addi	r2,r16,24
 400cc68:	80000515 	stw	zero,20(r16)
 400cc6c:	00000106 	br	400cc74 <_calloc_r+0x6c>
 400cc70:	8005883a 	mov	r2,r16
 400cc74:	10000015 	stw	zero,0(r2)
 400cc78:	10000115 	stw	zero,4(r2)
 400cc7c:	10000215 	stw	zero,8(r2)
 400cc80:	8005883a 	mov	r2,r16
 400cc84:	dfc00117 	ldw	ra,4(sp)
 400cc88:	dc000017 	ldw	r16,0(sp)
 400cc8c:	dec00204 	addi	sp,sp,8
 400cc90:	f800283a 	ret
 400cc94:	000b883a 	mov	r5,zero
 400cc98:	8009883a 	mov	r4,r16
 400cc9c:	4009bf80 	call	4009bf8 <memset>
 400cca0:	8005883a 	mov	r2,r16
 400cca4:	dfc00117 	ldw	ra,4(sp)
 400cca8:	dc000017 	ldw	r16,0(sp)
 400ccac:	dec00204 	addi	sp,sp,8
 400ccb0:	f800283a 	ret
 400ccb4:	80800404 	addi	r2,r16,16
 400ccb8:	003fee06 	br	400cc74 <__alt_data_end+0xfc00cc74>
 400ccbc:	80800204 	addi	r2,r16,8
 400ccc0:	003fec06 	br	400cc74 <__alt_data_end+0xfc00cc74>
 400ccc4:	0005883a 	mov	r2,zero
 400ccc8:	003fee06 	br	400cc84 <__alt_data_end+0xfc00cc84>

0400cccc <_fclose_r>:
 400cccc:	28003926 	beq	r5,zero,400cdb4 <_fclose_r+0xe8>
 400ccd0:	defffc04 	addi	sp,sp,-16
 400ccd4:	dc400115 	stw	r17,4(sp)
 400ccd8:	dc000015 	stw	r16,0(sp)
 400ccdc:	dfc00315 	stw	ra,12(sp)
 400cce0:	dc800215 	stw	r18,8(sp)
 400cce4:	2023883a 	mov	r17,r4
 400cce8:	2821883a 	mov	r16,r5
 400ccec:	20000226 	beq	r4,zero,400ccf8 <_fclose_r+0x2c>
 400ccf0:	20800e17 	ldw	r2,56(r4)
 400ccf4:	10002726 	beq	r2,zero,400cd94 <_fclose_r+0xc8>
 400ccf8:	8080030f 	ldh	r2,12(r16)
 400ccfc:	1000071e 	bne	r2,zero,400cd1c <_fclose_r+0x50>
 400cd00:	0005883a 	mov	r2,zero
 400cd04:	dfc00317 	ldw	ra,12(sp)
 400cd08:	dc800217 	ldw	r18,8(sp)
 400cd0c:	dc400117 	ldw	r17,4(sp)
 400cd10:	dc000017 	ldw	r16,0(sp)
 400cd14:	dec00404 	addi	sp,sp,16
 400cd18:	f800283a 	ret
 400cd1c:	800b883a 	mov	r5,r16
 400cd20:	8809883a 	mov	r4,r17
 400cd24:	40086600 	call	4008660 <__sflush_r>
 400cd28:	1025883a 	mov	r18,r2
 400cd2c:	80800b17 	ldw	r2,44(r16)
 400cd30:	10000426 	beq	r2,zero,400cd44 <_fclose_r+0x78>
 400cd34:	81400717 	ldw	r5,28(r16)
 400cd38:	8809883a 	mov	r4,r17
 400cd3c:	103ee83a 	callr	r2
 400cd40:	10001616 	blt	r2,zero,400cd9c <_fclose_r+0xd0>
 400cd44:	8080030b 	ldhu	r2,12(r16)
 400cd48:	1080200c 	andi	r2,r2,128
 400cd4c:	1000151e 	bne	r2,zero,400cda4 <_fclose_r+0xd8>
 400cd50:	81400c17 	ldw	r5,48(r16)
 400cd54:	28000526 	beq	r5,zero,400cd6c <_fclose_r+0xa0>
 400cd58:	80801004 	addi	r2,r16,64
 400cd5c:	28800226 	beq	r5,r2,400cd68 <_fclose_r+0x9c>
 400cd60:	8809883a 	mov	r4,r17
 400cd64:	4008dcc0 	call	4008dcc <_free_r>
 400cd68:	80000c15 	stw	zero,48(r16)
 400cd6c:	81401117 	ldw	r5,68(r16)
 400cd70:	28000326 	beq	r5,zero,400cd80 <_fclose_r+0xb4>
 400cd74:	8809883a 	mov	r4,r17
 400cd78:	4008dcc0 	call	4008dcc <_free_r>
 400cd7c:	80001115 	stw	zero,68(r16)
 400cd80:	4008c680 	call	4008c68 <__sfp_lock_acquire>
 400cd84:	8000030d 	sth	zero,12(r16)
 400cd88:	4008c6c0 	call	4008c6c <__sfp_lock_release>
 400cd8c:	9005883a 	mov	r2,r18
 400cd90:	003fdc06 	br	400cd04 <__alt_data_end+0xfc00cd04>
 400cd94:	4008c580 	call	4008c58 <__sinit>
 400cd98:	003fd706 	br	400ccf8 <__alt_data_end+0xfc00ccf8>
 400cd9c:	04bfffc4 	movi	r18,-1
 400cda0:	003fe806 	br	400cd44 <__alt_data_end+0xfc00cd44>
 400cda4:	81400417 	ldw	r5,16(r16)
 400cda8:	8809883a 	mov	r4,r17
 400cdac:	4008dcc0 	call	4008dcc <_free_r>
 400cdb0:	003fe706 	br	400cd50 <__alt_data_end+0xfc00cd50>
 400cdb4:	0005883a 	mov	r2,zero
 400cdb8:	f800283a 	ret

0400cdbc <fclose>:
 400cdbc:	00810074 	movhi	r2,1025
 400cdc0:	109d1f04 	addi	r2,r2,29820
 400cdc4:	200b883a 	mov	r5,r4
 400cdc8:	11000017 	ldw	r4,0(r2)
 400cdcc:	400cccc1 	jmpi	400cccc <_fclose_r>

0400cdd0 <__fputwc>:
 400cdd0:	defff804 	addi	sp,sp,-32
 400cdd4:	dcc00415 	stw	r19,16(sp)
 400cdd8:	dc800315 	stw	r18,12(sp)
 400cddc:	dc000115 	stw	r16,4(sp)
 400cde0:	dfc00715 	stw	ra,28(sp)
 400cde4:	dd400615 	stw	r21,24(sp)
 400cde8:	dd000515 	stw	r20,20(sp)
 400cdec:	dc400215 	stw	r17,8(sp)
 400cdf0:	2027883a 	mov	r19,r4
 400cdf4:	2825883a 	mov	r18,r5
 400cdf8:	3021883a 	mov	r16,r6
 400cdfc:	40097a80 	call	40097a8 <__locale_mb_cur_max>
 400ce00:	00c00044 	movi	r3,1
 400ce04:	10c03e26 	beq	r2,r3,400cf00 <__fputwc+0x130>
 400ce08:	81c01704 	addi	r7,r16,92
 400ce0c:	900d883a 	mov	r6,r18
 400ce10:	d80b883a 	mov	r5,sp
 400ce14:	9809883a 	mov	r4,r19
 400ce18:	400d2a00 	call	400d2a0 <_wcrtomb_r>
 400ce1c:	1029883a 	mov	r20,r2
 400ce20:	00bfffc4 	movi	r2,-1
 400ce24:	a0802026 	beq	r20,r2,400cea8 <__fputwc+0xd8>
 400ce28:	d9400003 	ldbu	r5,0(sp)
 400ce2c:	a0001c26 	beq	r20,zero,400cea0 <__fputwc+0xd0>
 400ce30:	0023883a 	mov	r17,zero
 400ce34:	05400284 	movi	r21,10
 400ce38:	00000906 	br	400ce60 <__fputwc+0x90>
 400ce3c:	80800017 	ldw	r2,0(r16)
 400ce40:	11400005 	stb	r5,0(r2)
 400ce44:	80c00017 	ldw	r3,0(r16)
 400ce48:	18c00044 	addi	r3,r3,1
 400ce4c:	80c00015 	stw	r3,0(r16)
 400ce50:	8c400044 	addi	r17,r17,1
 400ce54:	dc45883a 	add	r2,sp,r17
 400ce58:	8d00112e 	bgeu	r17,r20,400cea0 <__fputwc+0xd0>
 400ce5c:	11400003 	ldbu	r5,0(r2)
 400ce60:	80c00217 	ldw	r3,8(r16)
 400ce64:	18ffffc4 	addi	r3,r3,-1
 400ce68:	80c00215 	stw	r3,8(r16)
 400ce6c:	183ff30e 	bge	r3,zero,400ce3c <__alt_data_end+0xfc00ce3c>
 400ce70:	80800617 	ldw	r2,24(r16)
 400ce74:	18801916 	blt	r3,r2,400cedc <__fputwc+0x10c>
 400ce78:	80800017 	ldw	r2,0(r16)
 400ce7c:	11400005 	stb	r5,0(r2)
 400ce80:	80800017 	ldw	r2,0(r16)
 400ce84:	10c00003 	ldbu	r3,0(r2)
 400ce88:	10800044 	addi	r2,r2,1
 400ce8c:	1d402326 	beq	r3,r21,400cf1c <__fputwc+0x14c>
 400ce90:	80800015 	stw	r2,0(r16)
 400ce94:	8c400044 	addi	r17,r17,1
 400ce98:	dc45883a 	add	r2,sp,r17
 400ce9c:	8d3fef36 	bltu	r17,r20,400ce5c <__alt_data_end+0xfc00ce5c>
 400cea0:	9005883a 	mov	r2,r18
 400cea4:	00000406 	br	400ceb8 <__fputwc+0xe8>
 400cea8:	80c0030b 	ldhu	r3,12(r16)
 400ceac:	a005883a 	mov	r2,r20
 400ceb0:	18c01014 	ori	r3,r3,64
 400ceb4:	80c0030d 	sth	r3,12(r16)
 400ceb8:	dfc00717 	ldw	ra,28(sp)
 400cebc:	dd400617 	ldw	r21,24(sp)
 400cec0:	dd000517 	ldw	r20,20(sp)
 400cec4:	dcc00417 	ldw	r19,16(sp)
 400cec8:	dc800317 	ldw	r18,12(sp)
 400cecc:	dc400217 	ldw	r17,8(sp)
 400ced0:	dc000117 	ldw	r16,4(sp)
 400ced4:	dec00804 	addi	sp,sp,32
 400ced8:	f800283a 	ret
 400cedc:	800d883a 	mov	r6,r16
 400cee0:	29403fcc 	andi	r5,r5,255
 400cee4:	9809883a 	mov	r4,r19
 400cee8:	400d1480 	call	400d148 <__swbuf_r>
 400ceec:	10bfffe0 	cmpeqi	r2,r2,-1
 400cef0:	10803fcc 	andi	r2,r2,255
 400cef4:	103fd626 	beq	r2,zero,400ce50 <__alt_data_end+0xfc00ce50>
 400cef8:	00bfffc4 	movi	r2,-1
 400cefc:	003fee06 	br	400ceb8 <__alt_data_end+0xfc00ceb8>
 400cf00:	90ffffc4 	addi	r3,r18,-1
 400cf04:	01003f84 	movi	r4,254
 400cf08:	20ffbf36 	bltu	r4,r3,400ce08 <__alt_data_end+0xfc00ce08>
 400cf0c:	900b883a 	mov	r5,r18
 400cf10:	dc800005 	stb	r18,0(sp)
 400cf14:	1029883a 	mov	r20,r2
 400cf18:	003fc506 	br	400ce30 <__alt_data_end+0xfc00ce30>
 400cf1c:	800d883a 	mov	r6,r16
 400cf20:	a80b883a 	mov	r5,r21
 400cf24:	9809883a 	mov	r4,r19
 400cf28:	400d1480 	call	400d148 <__swbuf_r>
 400cf2c:	10bfffe0 	cmpeqi	r2,r2,-1
 400cf30:	003fef06 	br	400cef0 <__alt_data_end+0xfc00cef0>

0400cf34 <_fputwc_r>:
 400cf34:	3080030b 	ldhu	r2,12(r6)
 400cf38:	10c8000c 	andi	r3,r2,8192
 400cf3c:	1800051e 	bne	r3,zero,400cf54 <_fputwc_r+0x20>
 400cf40:	30c01917 	ldw	r3,100(r6)
 400cf44:	10880014 	ori	r2,r2,8192
 400cf48:	3080030d 	sth	r2,12(r6)
 400cf4c:	18880014 	ori	r2,r3,8192
 400cf50:	30801915 	stw	r2,100(r6)
 400cf54:	400cdd01 	jmpi	400cdd0 <__fputwc>

0400cf58 <fputwc>:
 400cf58:	00810074 	movhi	r2,1025
 400cf5c:	defffc04 	addi	sp,sp,-16
 400cf60:	109d1f04 	addi	r2,r2,29820
 400cf64:	dc000115 	stw	r16,4(sp)
 400cf68:	14000017 	ldw	r16,0(r2)
 400cf6c:	dc400215 	stw	r17,8(sp)
 400cf70:	dfc00315 	stw	ra,12(sp)
 400cf74:	2023883a 	mov	r17,r4
 400cf78:	80000226 	beq	r16,zero,400cf84 <fputwc+0x2c>
 400cf7c:	80800e17 	ldw	r2,56(r16)
 400cf80:	10001026 	beq	r2,zero,400cfc4 <fputwc+0x6c>
 400cf84:	2880030b 	ldhu	r2,12(r5)
 400cf88:	10c8000c 	andi	r3,r2,8192
 400cf8c:	1800051e 	bne	r3,zero,400cfa4 <fputwc+0x4c>
 400cf90:	28c01917 	ldw	r3,100(r5)
 400cf94:	10880014 	ori	r2,r2,8192
 400cf98:	2880030d 	sth	r2,12(r5)
 400cf9c:	18880014 	ori	r2,r3,8192
 400cfa0:	28801915 	stw	r2,100(r5)
 400cfa4:	280d883a 	mov	r6,r5
 400cfa8:	8009883a 	mov	r4,r16
 400cfac:	880b883a 	mov	r5,r17
 400cfb0:	dfc00317 	ldw	ra,12(sp)
 400cfb4:	dc400217 	ldw	r17,8(sp)
 400cfb8:	dc000117 	ldw	r16,4(sp)
 400cfbc:	dec00404 	addi	sp,sp,16
 400cfc0:	400cdd01 	jmpi	400cdd0 <__fputwc>
 400cfc4:	8009883a 	mov	r4,r16
 400cfc8:	d9400015 	stw	r5,0(sp)
 400cfcc:	4008c580 	call	4008c58 <__sinit>
 400cfd0:	d9400017 	ldw	r5,0(sp)
 400cfd4:	003feb06 	br	400cf84 <__alt_data_end+0xfc00cf84>

0400cfd8 <_fstat_r>:
 400cfd8:	defffd04 	addi	sp,sp,-12
 400cfdc:	2805883a 	mov	r2,r5
 400cfe0:	dc000015 	stw	r16,0(sp)
 400cfe4:	040100b4 	movhi	r16,1026
 400cfe8:	dc400115 	stw	r17,4(sp)
 400cfec:	84241504 	addi	r16,r16,-28588
 400cff0:	2023883a 	mov	r17,r4
 400cff4:	300b883a 	mov	r5,r6
 400cff8:	1009883a 	mov	r4,r2
 400cffc:	dfc00215 	stw	ra,8(sp)
 400d000:	80000015 	stw	zero,0(r16)
 400d004:	40106b00 	call	40106b0 <fstat>
 400d008:	00ffffc4 	movi	r3,-1
 400d00c:	10c00526 	beq	r2,r3,400d024 <_fstat_r+0x4c>
 400d010:	dfc00217 	ldw	ra,8(sp)
 400d014:	dc400117 	ldw	r17,4(sp)
 400d018:	dc000017 	ldw	r16,0(sp)
 400d01c:	dec00304 	addi	sp,sp,12
 400d020:	f800283a 	ret
 400d024:	80c00017 	ldw	r3,0(r16)
 400d028:	183ff926 	beq	r3,zero,400d010 <__alt_data_end+0xfc00d010>
 400d02c:	88c00015 	stw	r3,0(r17)
 400d030:	003ff706 	br	400d010 <__alt_data_end+0xfc00d010>

0400d034 <_isatty_r>:
 400d034:	defffd04 	addi	sp,sp,-12
 400d038:	dc000015 	stw	r16,0(sp)
 400d03c:	040100b4 	movhi	r16,1026
 400d040:	dc400115 	stw	r17,4(sp)
 400d044:	84241504 	addi	r16,r16,-28588
 400d048:	2023883a 	mov	r17,r4
 400d04c:	2809883a 	mov	r4,r5
 400d050:	dfc00215 	stw	ra,8(sp)
 400d054:	80000015 	stw	zero,0(r16)
 400d058:	401079c0 	call	401079c <isatty>
 400d05c:	00ffffc4 	movi	r3,-1
 400d060:	10c00526 	beq	r2,r3,400d078 <_isatty_r+0x44>
 400d064:	dfc00217 	ldw	ra,8(sp)
 400d068:	dc400117 	ldw	r17,4(sp)
 400d06c:	dc000017 	ldw	r16,0(sp)
 400d070:	dec00304 	addi	sp,sp,12
 400d074:	f800283a 	ret
 400d078:	80c00017 	ldw	r3,0(r16)
 400d07c:	183ff926 	beq	r3,zero,400d064 <__alt_data_end+0xfc00d064>
 400d080:	88c00015 	stw	r3,0(r17)
 400d084:	003ff706 	br	400d064 <__alt_data_end+0xfc00d064>

0400d088 <_lseek_r>:
 400d088:	defffd04 	addi	sp,sp,-12
 400d08c:	2805883a 	mov	r2,r5
 400d090:	dc000015 	stw	r16,0(sp)
 400d094:	040100b4 	movhi	r16,1026
 400d098:	dc400115 	stw	r17,4(sp)
 400d09c:	300b883a 	mov	r5,r6
 400d0a0:	84241504 	addi	r16,r16,-28588
 400d0a4:	2023883a 	mov	r17,r4
 400d0a8:	380d883a 	mov	r6,r7
 400d0ac:	1009883a 	mov	r4,r2
 400d0b0:	dfc00215 	stw	ra,8(sp)
 400d0b4:	80000015 	stw	zero,0(r16)
 400d0b8:	40109680 	call	4010968 <lseek>
 400d0bc:	00ffffc4 	movi	r3,-1
 400d0c0:	10c00526 	beq	r2,r3,400d0d8 <_lseek_r+0x50>
 400d0c4:	dfc00217 	ldw	ra,8(sp)
 400d0c8:	dc400117 	ldw	r17,4(sp)
 400d0cc:	dc000017 	ldw	r16,0(sp)
 400d0d0:	dec00304 	addi	sp,sp,12
 400d0d4:	f800283a 	ret
 400d0d8:	80c00017 	ldw	r3,0(r16)
 400d0dc:	183ff926 	beq	r3,zero,400d0c4 <__alt_data_end+0xfc00d0c4>
 400d0e0:	88c00015 	stw	r3,0(r17)
 400d0e4:	003ff706 	br	400d0c4 <__alt_data_end+0xfc00d0c4>

0400d0e8 <_read_r>:
 400d0e8:	defffd04 	addi	sp,sp,-12
 400d0ec:	2805883a 	mov	r2,r5
 400d0f0:	dc000015 	stw	r16,0(sp)
 400d0f4:	040100b4 	movhi	r16,1026
 400d0f8:	dc400115 	stw	r17,4(sp)
 400d0fc:	300b883a 	mov	r5,r6
 400d100:	84241504 	addi	r16,r16,-28588
 400d104:	2023883a 	mov	r17,r4
 400d108:	380d883a 	mov	r6,r7
 400d10c:	1009883a 	mov	r4,r2
 400d110:	dfc00215 	stw	ra,8(sp)
 400d114:	80000015 	stw	zero,0(r16)
 400d118:	4010b3c0 	call	4010b3c <read>
 400d11c:	00ffffc4 	movi	r3,-1
 400d120:	10c00526 	beq	r2,r3,400d138 <_read_r+0x50>
 400d124:	dfc00217 	ldw	ra,8(sp)
 400d128:	dc400117 	ldw	r17,4(sp)
 400d12c:	dc000017 	ldw	r16,0(sp)
 400d130:	dec00304 	addi	sp,sp,12
 400d134:	f800283a 	ret
 400d138:	80c00017 	ldw	r3,0(r16)
 400d13c:	183ff926 	beq	r3,zero,400d124 <__alt_data_end+0xfc00d124>
 400d140:	88c00015 	stw	r3,0(r17)
 400d144:	003ff706 	br	400d124 <__alt_data_end+0xfc00d124>

0400d148 <__swbuf_r>:
 400d148:	defffb04 	addi	sp,sp,-20
 400d14c:	dcc00315 	stw	r19,12(sp)
 400d150:	dc800215 	stw	r18,8(sp)
 400d154:	dc000015 	stw	r16,0(sp)
 400d158:	dfc00415 	stw	ra,16(sp)
 400d15c:	dc400115 	stw	r17,4(sp)
 400d160:	2025883a 	mov	r18,r4
 400d164:	2827883a 	mov	r19,r5
 400d168:	3021883a 	mov	r16,r6
 400d16c:	20000226 	beq	r4,zero,400d178 <__swbuf_r+0x30>
 400d170:	20800e17 	ldw	r2,56(r4)
 400d174:	10004226 	beq	r2,zero,400d280 <__swbuf_r+0x138>
 400d178:	80800617 	ldw	r2,24(r16)
 400d17c:	8100030b 	ldhu	r4,12(r16)
 400d180:	80800215 	stw	r2,8(r16)
 400d184:	2080020c 	andi	r2,r4,8
 400d188:	10003626 	beq	r2,zero,400d264 <__swbuf_r+0x11c>
 400d18c:	80c00417 	ldw	r3,16(r16)
 400d190:	18003426 	beq	r3,zero,400d264 <__swbuf_r+0x11c>
 400d194:	2088000c 	andi	r2,r4,8192
 400d198:	9c403fcc 	andi	r17,r19,255
 400d19c:	10001a26 	beq	r2,zero,400d208 <__swbuf_r+0xc0>
 400d1a0:	80800017 	ldw	r2,0(r16)
 400d1a4:	81000517 	ldw	r4,20(r16)
 400d1a8:	10c7c83a 	sub	r3,r2,r3
 400d1ac:	1900200e 	bge	r3,r4,400d230 <__swbuf_r+0xe8>
 400d1b0:	18c00044 	addi	r3,r3,1
 400d1b4:	81000217 	ldw	r4,8(r16)
 400d1b8:	11400044 	addi	r5,r2,1
 400d1bc:	81400015 	stw	r5,0(r16)
 400d1c0:	213fffc4 	addi	r4,r4,-1
 400d1c4:	81000215 	stw	r4,8(r16)
 400d1c8:	14c00005 	stb	r19,0(r2)
 400d1cc:	80800517 	ldw	r2,20(r16)
 400d1d0:	10c01e26 	beq	r2,r3,400d24c <__swbuf_r+0x104>
 400d1d4:	8080030b 	ldhu	r2,12(r16)
 400d1d8:	1080004c 	andi	r2,r2,1
 400d1dc:	10000226 	beq	r2,zero,400d1e8 <__swbuf_r+0xa0>
 400d1e0:	00800284 	movi	r2,10
 400d1e4:	88801926 	beq	r17,r2,400d24c <__swbuf_r+0x104>
 400d1e8:	8805883a 	mov	r2,r17
 400d1ec:	dfc00417 	ldw	ra,16(sp)
 400d1f0:	dcc00317 	ldw	r19,12(sp)
 400d1f4:	dc800217 	ldw	r18,8(sp)
 400d1f8:	dc400117 	ldw	r17,4(sp)
 400d1fc:	dc000017 	ldw	r16,0(sp)
 400d200:	dec00504 	addi	sp,sp,20
 400d204:	f800283a 	ret
 400d208:	81401917 	ldw	r5,100(r16)
 400d20c:	00b7ffc4 	movi	r2,-8193
 400d210:	21080014 	ori	r4,r4,8192
 400d214:	2884703a 	and	r2,r5,r2
 400d218:	80801915 	stw	r2,100(r16)
 400d21c:	80800017 	ldw	r2,0(r16)
 400d220:	8100030d 	sth	r4,12(r16)
 400d224:	81000517 	ldw	r4,20(r16)
 400d228:	10c7c83a 	sub	r3,r2,r3
 400d22c:	193fe016 	blt	r3,r4,400d1b0 <__alt_data_end+0xfc00d1b0>
 400d230:	800b883a 	mov	r5,r16
 400d234:	9009883a 	mov	r4,r18
 400d238:	400887c0 	call	400887c <_fflush_r>
 400d23c:	1000071e 	bne	r2,zero,400d25c <__swbuf_r+0x114>
 400d240:	80800017 	ldw	r2,0(r16)
 400d244:	00c00044 	movi	r3,1
 400d248:	003fda06 	br	400d1b4 <__alt_data_end+0xfc00d1b4>
 400d24c:	800b883a 	mov	r5,r16
 400d250:	9009883a 	mov	r4,r18
 400d254:	400887c0 	call	400887c <_fflush_r>
 400d258:	103fe326 	beq	r2,zero,400d1e8 <__alt_data_end+0xfc00d1e8>
 400d25c:	00bfffc4 	movi	r2,-1
 400d260:	003fe206 	br	400d1ec <__alt_data_end+0xfc00d1ec>
 400d264:	800b883a 	mov	r5,r16
 400d268:	9009883a 	mov	r4,r18
 400d26c:	4006c840 	call	4006c84 <__swsetup_r>
 400d270:	103ffa1e 	bne	r2,zero,400d25c <__alt_data_end+0xfc00d25c>
 400d274:	8100030b 	ldhu	r4,12(r16)
 400d278:	80c00417 	ldw	r3,16(r16)
 400d27c:	003fc506 	br	400d194 <__alt_data_end+0xfc00d194>
 400d280:	4008c580 	call	4008c58 <__sinit>
 400d284:	003fbc06 	br	400d178 <__alt_data_end+0xfc00d178>

0400d288 <__swbuf>:
 400d288:	00810074 	movhi	r2,1025
 400d28c:	109d1f04 	addi	r2,r2,29820
 400d290:	280d883a 	mov	r6,r5
 400d294:	200b883a 	mov	r5,r4
 400d298:	11000017 	ldw	r4,0(r2)
 400d29c:	400d1481 	jmpi	400d148 <__swbuf_r>

0400d2a0 <_wcrtomb_r>:
 400d2a0:	defff604 	addi	sp,sp,-40
 400d2a4:	00810074 	movhi	r2,1025
 400d2a8:	dc800815 	stw	r18,32(sp)
 400d2ac:	dc400715 	stw	r17,28(sp)
 400d2b0:	dc000615 	stw	r16,24(sp)
 400d2b4:	109d2104 	addi	r2,r2,29828
 400d2b8:	dfc00915 	stw	ra,36(sp)
 400d2bc:	2021883a 	mov	r16,r4
 400d2c0:	3823883a 	mov	r17,r7
 400d2c4:	14800017 	ldw	r18,0(r2)
 400d2c8:	28001426 	beq	r5,zero,400d31c <_wcrtomb_r+0x7c>
 400d2cc:	d9400415 	stw	r5,16(sp)
 400d2d0:	d9800515 	stw	r6,20(sp)
 400d2d4:	400979c0 	call	400979c <__locale_charset>
 400d2d8:	d9800517 	ldw	r6,20(sp)
 400d2dc:	d9400417 	ldw	r5,16(sp)
 400d2e0:	100f883a 	mov	r7,r2
 400d2e4:	dc400015 	stw	r17,0(sp)
 400d2e8:	8009883a 	mov	r4,r16
 400d2ec:	903ee83a 	callr	r18
 400d2f0:	00ffffc4 	movi	r3,-1
 400d2f4:	10c0031e 	bne	r2,r3,400d304 <_wcrtomb_r+0x64>
 400d2f8:	88000015 	stw	zero,0(r17)
 400d2fc:	00c02284 	movi	r3,138
 400d300:	80c00015 	stw	r3,0(r16)
 400d304:	dfc00917 	ldw	ra,36(sp)
 400d308:	dc800817 	ldw	r18,32(sp)
 400d30c:	dc400717 	ldw	r17,28(sp)
 400d310:	dc000617 	ldw	r16,24(sp)
 400d314:	dec00a04 	addi	sp,sp,40
 400d318:	f800283a 	ret
 400d31c:	400979c0 	call	400979c <__locale_charset>
 400d320:	100f883a 	mov	r7,r2
 400d324:	dc400015 	stw	r17,0(sp)
 400d328:	000d883a 	mov	r6,zero
 400d32c:	d9400104 	addi	r5,sp,4
 400d330:	8009883a 	mov	r4,r16
 400d334:	903ee83a 	callr	r18
 400d338:	003fed06 	br	400d2f0 <__alt_data_end+0xfc00d2f0>

0400d33c <wcrtomb>:
 400d33c:	defff604 	addi	sp,sp,-40
 400d340:	00810074 	movhi	r2,1025
 400d344:	dc800615 	stw	r18,24(sp)
 400d348:	dc400515 	stw	r17,20(sp)
 400d34c:	109d1f04 	addi	r2,r2,29820
 400d350:	dfc00915 	stw	ra,36(sp)
 400d354:	dd000815 	stw	r20,32(sp)
 400d358:	dcc00715 	stw	r19,28(sp)
 400d35c:	dc000415 	stw	r16,16(sp)
 400d360:	3025883a 	mov	r18,r6
 400d364:	14400017 	ldw	r17,0(r2)
 400d368:	20001926 	beq	r4,zero,400d3d0 <wcrtomb+0x94>
 400d36c:	00810074 	movhi	r2,1025
 400d370:	109d2104 	addi	r2,r2,29828
 400d374:	15000017 	ldw	r20,0(r2)
 400d378:	2021883a 	mov	r16,r4
 400d37c:	2827883a 	mov	r19,r5
 400d380:	400979c0 	call	400979c <__locale_charset>
 400d384:	100f883a 	mov	r7,r2
 400d388:	dc800015 	stw	r18,0(sp)
 400d38c:	980d883a 	mov	r6,r19
 400d390:	800b883a 	mov	r5,r16
 400d394:	8809883a 	mov	r4,r17
 400d398:	a03ee83a 	callr	r20
 400d39c:	00ffffc4 	movi	r3,-1
 400d3a0:	10c0031e 	bne	r2,r3,400d3b0 <wcrtomb+0x74>
 400d3a4:	90000015 	stw	zero,0(r18)
 400d3a8:	00c02284 	movi	r3,138
 400d3ac:	88c00015 	stw	r3,0(r17)
 400d3b0:	dfc00917 	ldw	ra,36(sp)
 400d3b4:	dd000817 	ldw	r20,32(sp)
 400d3b8:	dcc00717 	ldw	r19,28(sp)
 400d3bc:	dc800617 	ldw	r18,24(sp)
 400d3c0:	dc400517 	ldw	r17,20(sp)
 400d3c4:	dc000417 	ldw	r16,16(sp)
 400d3c8:	dec00a04 	addi	sp,sp,40
 400d3cc:	f800283a 	ret
 400d3d0:	00810074 	movhi	r2,1025
 400d3d4:	109d2104 	addi	r2,r2,29828
 400d3d8:	14000017 	ldw	r16,0(r2)
 400d3dc:	400979c0 	call	400979c <__locale_charset>
 400d3e0:	100f883a 	mov	r7,r2
 400d3e4:	dc800015 	stw	r18,0(sp)
 400d3e8:	000d883a 	mov	r6,zero
 400d3ec:	d9400104 	addi	r5,sp,4
 400d3f0:	8809883a 	mov	r4,r17
 400d3f4:	803ee83a 	callr	r16
 400d3f8:	003fe806 	br	400d39c <__alt_data_end+0xfc00d39c>

0400d3fc <__ascii_wctomb>:
 400d3fc:	28000526 	beq	r5,zero,400d414 <__ascii_wctomb+0x18>
 400d400:	00803fc4 	movi	r2,255
 400d404:	11800536 	bltu	r2,r6,400d41c <__ascii_wctomb+0x20>
 400d408:	29800005 	stb	r6,0(r5)
 400d40c:	00800044 	movi	r2,1
 400d410:	f800283a 	ret
 400d414:	0005883a 	mov	r2,zero
 400d418:	f800283a 	ret
 400d41c:	00802284 	movi	r2,138
 400d420:	20800015 	stw	r2,0(r4)
 400d424:	00bfffc4 	movi	r2,-1
 400d428:	f800283a 	ret

0400d42c <_wctomb_r>:
 400d42c:	00810074 	movhi	r2,1025
 400d430:	defff904 	addi	sp,sp,-28
 400d434:	109d2104 	addi	r2,r2,29828
 400d438:	dfc00615 	stw	ra,24(sp)
 400d43c:	dc400515 	stw	r17,20(sp)
 400d440:	dc000415 	stw	r16,16(sp)
 400d444:	3823883a 	mov	r17,r7
 400d448:	14000017 	ldw	r16,0(r2)
 400d44c:	d9000115 	stw	r4,4(sp)
 400d450:	d9400215 	stw	r5,8(sp)
 400d454:	d9800315 	stw	r6,12(sp)
 400d458:	400979c0 	call	400979c <__locale_charset>
 400d45c:	d9800317 	ldw	r6,12(sp)
 400d460:	d9400217 	ldw	r5,8(sp)
 400d464:	d9000117 	ldw	r4,4(sp)
 400d468:	100f883a 	mov	r7,r2
 400d46c:	dc400015 	stw	r17,0(sp)
 400d470:	803ee83a 	callr	r16
 400d474:	dfc00617 	ldw	ra,24(sp)
 400d478:	dc400517 	ldw	r17,20(sp)
 400d47c:	dc000417 	ldw	r16,16(sp)
 400d480:	dec00704 	addi	sp,sp,28
 400d484:	f800283a 	ret

0400d488 <__udivdi3>:
 400d488:	defff504 	addi	sp,sp,-44
 400d48c:	dcc00415 	stw	r19,16(sp)
 400d490:	dc000115 	stw	r16,4(sp)
 400d494:	dfc00a15 	stw	ra,40(sp)
 400d498:	df000915 	stw	fp,36(sp)
 400d49c:	ddc00815 	stw	r23,32(sp)
 400d4a0:	dd800715 	stw	r22,28(sp)
 400d4a4:	dd400615 	stw	r21,24(sp)
 400d4a8:	dd000515 	stw	r20,20(sp)
 400d4ac:	dc800315 	stw	r18,12(sp)
 400d4b0:	dc400215 	stw	r17,8(sp)
 400d4b4:	2027883a 	mov	r19,r4
 400d4b8:	2821883a 	mov	r16,r5
 400d4bc:	3800411e 	bne	r7,zero,400d5c4 <__udivdi3+0x13c>
 400d4c0:	3023883a 	mov	r17,r6
 400d4c4:	2025883a 	mov	r18,r4
 400d4c8:	2980522e 	bgeu	r5,r6,400d614 <__udivdi3+0x18c>
 400d4cc:	00bfffd4 	movui	r2,65535
 400d4d0:	282d883a 	mov	r22,r5
 400d4d4:	1180a836 	bltu	r2,r6,400d778 <__udivdi3+0x2f0>
 400d4d8:	00803fc4 	movi	r2,255
 400d4dc:	1185803a 	cmpltu	r2,r2,r6
 400d4e0:	100490fa 	slli	r2,r2,3
 400d4e4:	3086d83a 	srl	r3,r6,r2
 400d4e8:	01010074 	movhi	r4,1025
 400d4ec:	21158504 	addi	r4,r4,22036
 400d4f0:	20c7883a 	add	r3,r4,r3
 400d4f4:	18c00003 	ldbu	r3,0(r3)
 400d4f8:	1885883a 	add	r2,r3,r2
 400d4fc:	00c00804 	movi	r3,32
 400d500:	1887c83a 	sub	r3,r3,r2
 400d504:	18000526 	beq	r3,zero,400d51c <__udivdi3+0x94>
 400d508:	80e0983a 	sll	r16,r16,r3
 400d50c:	9884d83a 	srl	r2,r19,r2
 400d510:	30e2983a 	sll	r17,r6,r3
 400d514:	98e4983a 	sll	r18,r19,r3
 400d518:	142cb03a 	or	r22,r2,r16
 400d51c:	882ad43a 	srli	r21,r17,16
 400d520:	b009883a 	mov	r4,r22
 400d524:	8d3fffcc 	andi	r20,r17,65535
 400d528:	a80b883a 	mov	r5,r21
 400d52c:	40032540 	call	4003254 <__umodsi3>
 400d530:	b009883a 	mov	r4,r22
 400d534:	a80b883a 	mov	r5,r21
 400d538:	1027883a 	mov	r19,r2
 400d53c:	40031f00 	call	40031f0 <__udivsi3>
 400d540:	102d883a 	mov	r22,r2
 400d544:	9826943a 	slli	r19,r19,16
 400d548:	9004d43a 	srli	r2,r18,16
 400d54c:	a5a1383a 	mul	r16,r20,r22
 400d550:	14c4b03a 	or	r2,r2,r19
 400d554:	1400052e 	bgeu	r2,r16,400d56c <__udivdi3+0xe4>
 400d558:	1445883a 	add	r2,r2,r17
 400d55c:	b0ffffc4 	addi	r3,r22,-1
 400d560:	14400136 	bltu	r2,r17,400d568 <__udivdi3+0xe0>
 400d564:	14012336 	bltu	r2,r16,400d9f4 <__udivdi3+0x56c>
 400d568:	182d883a 	mov	r22,r3
 400d56c:	1421c83a 	sub	r16,r2,r16
 400d570:	a80b883a 	mov	r5,r21
 400d574:	8009883a 	mov	r4,r16
 400d578:	40032540 	call	4003254 <__umodsi3>
 400d57c:	1027883a 	mov	r19,r2
 400d580:	a80b883a 	mov	r5,r21
 400d584:	8009883a 	mov	r4,r16
 400d588:	40031f00 	call	40031f0 <__udivsi3>
 400d58c:	9826943a 	slli	r19,r19,16
 400d590:	a0a9383a 	mul	r20,r20,r2
 400d594:	94bfffcc 	andi	r18,r18,65535
 400d598:	94e4b03a 	or	r18,r18,r19
 400d59c:	9500052e 	bgeu	r18,r20,400d5b4 <__udivdi3+0x12c>
 400d5a0:	8ca5883a 	add	r18,r17,r18
 400d5a4:	10ffffc4 	addi	r3,r2,-1
 400d5a8:	9440f136 	bltu	r18,r17,400d970 <__udivdi3+0x4e8>
 400d5ac:	9500f02e 	bgeu	r18,r20,400d970 <__udivdi3+0x4e8>
 400d5b0:	10bfff84 	addi	r2,r2,-2
 400d5b4:	b00c943a 	slli	r6,r22,16
 400d5b8:	0007883a 	mov	r3,zero
 400d5bc:	3084b03a 	or	r2,r6,r2
 400d5c0:	00005906 	br	400d728 <__udivdi3+0x2a0>
 400d5c4:	29c05636 	bltu	r5,r7,400d720 <__udivdi3+0x298>
 400d5c8:	00bfffd4 	movui	r2,65535
 400d5cc:	11c0622e 	bgeu	r2,r7,400d758 <__udivdi3+0x2d0>
 400d5d0:	00804034 	movhi	r2,256
 400d5d4:	10bfffc4 	addi	r2,r2,-1
 400d5d8:	11c0ee36 	bltu	r2,r7,400d994 <__udivdi3+0x50c>
 400d5dc:	00800404 	movi	r2,16
 400d5e0:	3886d83a 	srl	r3,r7,r2
 400d5e4:	01010074 	movhi	r4,1025
 400d5e8:	21158504 	addi	r4,r4,22036
 400d5ec:	20c7883a 	add	r3,r4,r3
 400d5f0:	18c00003 	ldbu	r3,0(r3)
 400d5f4:	05400804 	movi	r21,32
 400d5f8:	1885883a 	add	r2,r3,r2
 400d5fc:	a8abc83a 	sub	r21,r21,r2
 400d600:	a800621e 	bne	r21,zero,400d78c <__udivdi3+0x304>
 400d604:	3c00e936 	bltu	r7,r16,400d9ac <__udivdi3+0x524>
 400d608:	9985403a 	cmpgeu	r2,r19,r6
 400d60c:	0007883a 	mov	r3,zero
 400d610:	00004506 	br	400d728 <__udivdi3+0x2a0>
 400d614:	3000041e 	bne	r6,zero,400d628 <__udivdi3+0x1a0>
 400d618:	000b883a 	mov	r5,zero
 400d61c:	01000044 	movi	r4,1
 400d620:	40031f00 	call	40031f0 <__udivsi3>
 400d624:	1023883a 	mov	r17,r2
 400d628:	00bfffd4 	movui	r2,65535
 400d62c:	14404e2e 	bgeu	r2,r17,400d768 <__udivdi3+0x2e0>
 400d630:	00804034 	movhi	r2,256
 400d634:	10bfffc4 	addi	r2,r2,-1
 400d638:	1440d836 	bltu	r2,r17,400d99c <__udivdi3+0x514>
 400d63c:	00800404 	movi	r2,16
 400d640:	8886d83a 	srl	r3,r17,r2
 400d644:	01010074 	movhi	r4,1025
 400d648:	21158504 	addi	r4,r4,22036
 400d64c:	20c7883a 	add	r3,r4,r3
 400d650:	18c00003 	ldbu	r3,0(r3)
 400d654:	1885883a 	add	r2,r3,r2
 400d658:	00c00804 	movi	r3,32
 400d65c:	1887c83a 	sub	r3,r3,r2
 400d660:	18008f1e 	bne	r3,zero,400d8a0 <__udivdi3+0x418>
 400d664:	882ad43a 	srli	r21,r17,16
 400d668:	8461c83a 	sub	r16,r16,r17
 400d66c:	8d3fffcc 	andi	r20,r17,65535
 400d670:	00c00044 	movi	r3,1
 400d674:	8009883a 	mov	r4,r16
 400d678:	a80b883a 	mov	r5,r21
 400d67c:	d8c00015 	stw	r3,0(sp)
 400d680:	40032540 	call	4003254 <__umodsi3>
 400d684:	8009883a 	mov	r4,r16
 400d688:	a80b883a 	mov	r5,r21
 400d68c:	1027883a 	mov	r19,r2
 400d690:	40031f00 	call	40031f0 <__udivsi3>
 400d694:	9826943a 	slli	r19,r19,16
 400d698:	9008d43a 	srli	r4,r18,16
 400d69c:	1521383a 	mul	r16,r2,r20
 400d6a0:	102d883a 	mov	r22,r2
 400d6a4:	24c8b03a 	or	r4,r4,r19
 400d6a8:	d8c00017 	ldw	r3,0(sp)
 400d6ac:	2400052e 	bgeu	r4,r16,400d6c4 <__udivdi3+0x23c>
 400d6b0:	2449883a 	add	r4,r4,r17
 400d6b4:	b0bfffc4 	addi	r2,r22,-1
 400d6b8:	24400136 	bltu	r4,r17,400d6c0 <__udivdi3+0x238>
 400d6bc:	2400ca36 	bltu	r4,r16,400d9e8 <__udivdi3+0x560>
 400d6c0:	102d883a 	mov	r22,r2
 400d6c4:	2421c83a 	sub	r16,r4,r16
 400d6c8:	a80b883a 	mov	r5,r21
 400d6cc:	8009883a 	mov	r4,r16
 400d6d0:	d8c00015 	stw	r3,0(sp)
 400d6d4:	40032540 	call	4003254 <__umodsi3>
 400d6d8:	1027883a 	mov	r19,r2
 400d6dc:	a80b883a 	mov	r5,r21
 400d6e0:	8009883a 	mov	r4,r16
 400d6e4:	40031f00 	call	40031f0 <__udivsi3>
 400d6e8:	9826943a 	slli	r19,r19,16
 400d6ec:	1529383a 	mul	r20,r2,r20
 400d6f0:	94bfffcc 	andi	r18,r18,65535
 400d6f4:	94e4b03a 	or	r18,r18,r19
 400d6f8:	d8c00017 	ldw	r3,0(sp)
 400d6fc:	9500052e 	bgeu	r18,r20,400d714 <__udivdi3+0x28c>
 400d700:	8ca5883a 	add	r18,r17,r18
 400d704:	113fffc4 	addi	r4,r2,-1
 400d708:	94409736 	bltu	r18,r17,400d968 <__udivdi3+0x4e0>
 400d70c:	9500962e 	bgeu	r18,r20,400d968 <__udivdi3+0x4e0>
 400d710:	10bfff84 	addi	r2,r2,-2
 400d714:	b00c943a 	slli	r6,r22,16
 400d718:	3084b03a 	or	r2,r6,r2
 400d71c:	00000206 	br	400d728 <__udivdi3+0x2a0>
 400d720:	0007883a 	mov	r3,zero
 400d724:	0005883a 	mov	r2,zero
 400d728:	dfc00a17 	ldw	ra,40(sp)
 400d72c:	df000917 	ldw	fp,36(sp)
 400d730:	ddc00817 	ldw	r23,32(sp)
 400d734:	dd800717 	ldw	r22,28(sp)
 400d738:	dd400617 	ldw	r21,24(sp)
 400d73c:	dd000517 	ldw	r20,20(sp)
 400d740:	dcc00417 	ldw	r19,16(sp)
 400d744:	dc800317 	ldw	r18,12(sp)
 400d748:	dc400217 	ldw	r17,8(sp)
 400d74c:	dc000117 	ldw	r16,4(sp)
 400d750:	dec00b04 	addi	sp,sp,44
 400d754:	f800283a 	ret
 400d758:	00803fc4 	movi	r2,255
 400d75c:	11c5803a 	cmpltu	r2,r2,r7
 400d760:	100490fa 	slli	r2,r2,3
 400d764:	003f9e06 	br	400d5e0 <__alt_data_end+0xfc00d5e0>
 400d768:	00803fc4 	movi	r2,255
 400d76c:	1445803a 	cmpltu	r2,r2,r17
 400d770:	100490fa 	slli	r2,r2,3
 400d774:	003fb206 	br	400d640 <__alt_data_end+0xfc00d640>
 400d778:	00804034 	movhi	r2,256
 400d77c:	10bfffc4 	addi	r2,r2,-1
 400d780:	11808836 	bltu	r2,r6,400d9a4 <__udivdi3+0x51c>
 400d784:	00800404 	movi	r2,16
 400d788:	003f5606 	br	400d4e4 <__alt_data_end+0xfc00d4e4>
 400d78c:	30aed83a 	srl	r23,r6,r2
 400d790:	3d4e983a 	sll	r7,r7,r21
 400d794:	80acd83a 	srl	r22,r16,r2
 400d798:	9884d83a 	srl	r2,r19,r2
 400d79c:	3deeb03a 	or	r23,r7,r23
 400d7a0:	b824d43a 	srli	r18,r23,16
 400d7a4:	8560983a 	sll	r16,r16,r21
 400d7a8:	b009883a 	mov	r4,r22
 400d7ac:	900b883a 	mov	r5,r18
 400d7b0:	3568983a 	sll	r20,r6,r21
 400d7b4:	1420b03a 	or	r16,r2,r16
 400d7b8:	40032540 	call	4003254 <__umodsi3>
 400d7bc:	b009883a 	mov	r4,r22
 400d7c0:	900b883a 	mov	r5,r18
 400d7c4:	1023883a 	mov	r17,r2
 400d7c8:	40031f00 	call	40031f0 <__udivsi3>
 400d7cc:	8808943a 	slli	r4,r17,16
 400d7d0:	bf3fffcc 	andi	fp,r23,65535
 400d7d4:	8006d43a 	srli	r3,r16,16
 400d7d8:	e0a3383a 	mul	r17,fp,r2
 400d7dc:	100d883a 	mov	r6,r2
 400d7e0:	1906b03a 	or	r3,r3,r4
 400d7e4:	1c40042e 	bgeu	r3,r17,400d7f8 <__udivdi3+0x370>
 400d7e8:	1dc7883a 	add	r3,r3,r23
 400d7ec:	10bfffc4 	addi	r2,r2,-1
 400d7f0:	1dc0752e 	bgeu	r3,r23,400d9c8 <__udivdi3+0x540>
 400d7f4:	100d883a 	mov	r6,r2
 400d7f8:	1c63c83a 	sub	r17,r3,r17
 400d7fc:	900b883a 	mov	r5,r18
 400d800:	8809883a 	mov	r4,r17
 400d804:	d9800015 	stw	r6,0(sp)
 400d808:	40032540 	call	4003254 <__umodsi3>
 400d80c:	102d883a 	mov	r22,r2
 400d810:	8809883a 	mov	r4,r17
 400d814:	900b883a 	mov	r5,r18
 400d818:	40031f00 	call	40031f0 <__udivsi3>
 400d81c:	b02c943a 	slli	r22,r22,16
 400d820:	e089383a 	mul	r4,fp,r2
 400d824:	843fffcc 	andi	r16,r16,65535
 400d828:	85a0b03a 	or	r16,r16,r22
 400d82c:	d9800017 	ldw	r6,0(sp)
 400d830:	8100042e 	bgeu	r16,r4,400d844 <__udivdi3+0x3bc>
 400d834:	85e1883a 	add	r16,r16,r23
 400d838:	10ffffc4 	addi	r3,r2,-1
 400d83c:	85c05e2e 	bgeu	r16,r23,400d9b8 <__udivdi3+0x530>
 400d840:	1805883a 	mov	r2,r3
 400d844:	300c943a 	slli	r6,r6,16
 400d848:	a17fffcc 	andi	r5,r20,65535
 400d84c:	a028d43a 	srli	r20,r20,16
 400d850:	3084b03a 	or	r2,r6,r2
 400d854:	10ffffcc 	andi	r3,r2,65535
 400d858:	100cd43a 	srli	r6,r2,16
 400d85c:	194f383a 	mul	r7,r3,r5
 400d860:	1d07383a 	mul	r3,r3,r20
 400d864:	314b383a 	mul	r5,r6,r5
 400d868:	3810d43a 	srli	r8,r7,16
 400d86c:	8121c83a 	sub	r16,r16,r4
 400d870:	1947883a 	add	r3,r3,r5
 400d874:	40c7883a 	add	r3,r8,r3
 400d878:	350d383a 	mul	r6,r6,r20
 400d87c:	1940022e 	bgeu	r3,r5,400d888 <__udivdi3+0x400>
 400d880:	01000074 	movhi	r4,1
 400d884:	310d883a 	add	r6,r6,r4
 400d888:	1828d43a 	srli	r20,r3,16
 400d88c:	a18d883a 	add	r6,r20,r6
 400d890:	81803e36 	bltu	r16,r6,400d98c <__udivdi3+0x504>
 400d894:	81803826 	beq	r16,r6,400d978 <__udivdi3+0x4f0>
 400d898:	0007883a 	mov	r3,zero
 400d89c:	003fa206 	br	400d728 <__alt_data_end+0xfc00d728>
 400d8a0:	88e2983a 	sll	r17,r17,r3
 400d8a4:	80a8d83a 	srl	r20,r16,r2
 400d8a8:	80e0983a 	sll	r16,r16,r3
 400d8ac:	882ad43a 	srli	r21,r17,16
 400d8b0:	9884d83a 	srl	r2,r19,r2
 400d8b4:	a009883a 	mov	r4,r20
 400d8b8:	a80b883a 	mov	r5,r21
 400d8bc:	142eb03a 	or	r23,r2,r16
 400d8c0:	98e4983a 	sll	r18,r19,r3
 400d8c4:	40032540 	call	4003254 <__umodsi3>
 400d8c8:	a009883a 	mov	r4,r20
 400d8cc:	a80b883a 	mov	r5,r21
 400d8d0:	1021883a 	mov	r16,r2
 400d8d4:	40031f00 	call	40031f0 <__udivsi3>
 400d8d8:	1039883a 	mov	fp,r2
 400d8dc:	8d3fffcc 	andi	r20,r17,65535
 400d8e0:	8020943a 	slli	r16,r16,16
 400d8e4:	b804d43a 	srli	r2,r23,16
 400d8e8:	a72d383a 	mul	r22,r20,fp
 400d8ec:	1404b03a 	or	r2,r2,r16
 400d8f0:	1580062e 	bgeu	r2,r22,400d90c <__udivdi3+0x484>
 400d8f4:	1445883a 	add	r2,r2,r17
 400d8f8:	e0ffffc4 	addi	r3,fp,-1
 400d8fc:	14403836 	bltu	r2,r17,400d9e0 <__udivdi3+0x558>
 400d900:	1580372e 	bgeu	r2,r22,400d9e0 <__udivdi3+0x558>
 400d904:	e73fff84 	addi	fp,fp,-2
 400d908:	1445883a 	add	r2,r2,r17
 400d90c:	15adc83a 	sub	r22,r2,r22
 400d910:	a80b883a 	mov	r5,r21
 400d914:	b009883a 	mov	r4,r22
 400d918:	40032540 	call	4003254 <__umodsi3>
 400d91c:	1027883a 	mov	r19,r2
 400d920:	b009883a 	mov	r4,r22
 400d924:	a80b883a 	mov	r5,r21
 400d928:	40031f00 	call	40031f0 <__udivsi3>
 400d92c:	9826943a 	slli	r19,r19,16
 400d930:	a0a1383a 	mul	r16,r20,r2
 400d934:	b93fffcc 	andi	r4,r23,65535
 400d938:	24c8b03a 	or	r4,r4,r19
 400d93c:	2400062e 	bgeu	r4,r16,400d958 <__udivdi3+0x4d0>
 400d940:	2449883a 	add	r4,r4,r17
 400d944:	10ffffc4 	addi	r3,r2,-1
 400d948:	24402336 	bltu	r4,r17,400d9d8 <__udivdi3+0x550>
 400d94c:	2400222e 	bgeu	r4,r16,400d9d8 <__udivdi3+0x550>
 400d950:	10bfff84 	addi	r2,r2,-2
 400d954:	2449883a 	add	r4,r4,r17
 400d958:	e038943a 	slli	fp,fp,16
 400d95c:	2421c83a 	sub	r16,r4,r16
 400d960:	e086b03a 	or	r3,fp,r2
 400d964:	003f4306 	br	400d674 <__alt_data_end+0xfc00d674>
 400d968:	2005883a 	mov	r2,r4
 400d96c:	003f6906 	br	400d714 <__alt_data_end+0xfc00d714>
 400d970:	1805883a 	mov	r2,r3
 400d974:	003f0f06 	br	400d5b4 <__alt_data_end+0xfc00d5b4>
 400d978:	1806943a 	slli	r3,r3,16
 400d97c:	9d66983a 	sll	r19,r19,r21
 400d980:	39ffffcc 	andi	r7,r7,65535
 400d984:	19c7883a 	add	r3,r3,r7
 400d988:	98ffc32e 	bgeu	r19,r3,400d898 <__alt_data_end+0xfc00d898>
 400d98c:	10bfffc4 	addi	r2,r2,-1
 400d990:	003fc106 	br	400d898 <__alt_data_end+0xfc00d898>
 400d994:	00800604 	movi	r2,24
 400d998:	003f1106 	br	400d5e0 <__alt_data_end+0xfc00d5e0>
 400d99c:	00800604 	movi	r2,24
 400d9a0:	003f2706 	br	400d640 <__alt_data_end+0xfc00d640>
 400d9a4:	00800604 	movi	r2,24
 400d9a8:	003ece06 	br	400d4e4 <__alt_data_end+0xfc00d4e4>
 400d9ac:	0007883a 	mov	r3,zero
 400d9b0:	00800044 	movi	r2,1
 400d9b4:	003f5c06 	br	400d728 <__alt_data_end+0xfc00d728>
 400d9b8:	813fa12e 	bgeu	r16,r4,400d840 <__alt_data_end+0xfc00d840>
 400d9bc:	10bfff84 	addi	r2,r2,-2
 400d9c0:	85e1883a 	add	r16,r16,r23
 400d9c4:	003f9f06 	br	400d844 <__alt_data_end+0xfc00d844>
 400d9c8:	1c7f8a2e 	bgeu	r3,r17,400d7f4 <__alt_data_end+0xfc00d7f4>
 400d9cc:	31bfff84 	addi	r6,r6,-2
 400d9d0:	1dc7883a 	add	r3,r3,r23
 400d9d4:	003f8806 	br	400d7f8 <__alt_data_end+0xfc00d7f8>
 400d9d8:	1805883a 	mov	r2,r3
 400d9dc:	003fde06 	br	400d958 <__alt_data_end+0xfc00d958>
 400d9e0:	1839883a 	mov	fp,r3
 400d9e4:	003fc906 	br	400d90c <__alt_data_end+0xfc00d90c>
 400d9e8:	b5bfff84 	addi	r22,r22,-2
 400d9ec:	2449883a 	add	r4,r4,r17
 400d9f0:	003f3406 	br	400d6c4 <__alt_data_end+0xfc00d6c4>
 400d9f4:	b5bfff84 	addi	r22,r22,-2
 400d9f8:	1445883a 	add	r2,r2,r17
 400d9fc:	003edb06 	br	400d56c <__alt_data_end+0xfc00d56c>

0400da00 <__umoddi3>:
 400da00:	defff404 	addi	sp,sp,-48
 400da04:	df000a15 	stw	fp,40(sp)
 400da08:	dc400315 	stw	r17,12(sp)
 400da0c:	dc000215 	stw	r16,8(sp)
 400da10:	dfc00b15 	stw	ra,44(sp)
 400da14:	ddc00915 	stw	r23,36(sp)
 400da18:	dd800815 	stw	r22,32(sp)
 400da1c:	dd400715 	stw	r21,28(sp)
 400da20:	dd000615 	stw	r20,24(sp)
 400da24:	dcc00515 	stw	r19,20(sp)
 400da28:	dc800415 	stw	r18,16(sp)
 400da2c:	2021883a 	mov	r16,r4
 400da30:	2823883a 	mov	r17,r5
 400da34:	2839883a 	mov	fp,r5
 400da38:	38003c1e 	bne	r7,zero,400db2c <__umoddi3+0x12c>
 400da3c:	3027883a 	mov	r19,r6
 400da40:	2029883a 	mov	r20,r4
 400da44:	2980512e 	bgeu	r5,r6,400db8c <__umoddi3+0x18c>
 400da48:	00bfffd4 	movui	r2,65535
 400da4c:	11809a36 	bltu	r2,r6,400dcb8 <__umoddi3+0x2b8>
 400da50:	01003fc4 	movi	r4,255
 400da54:	2189803a 	cmpltu	r4,r4,r6
 400da58:	200890fa 	slli	r4,r4,3
 400da5c:	3104d83a 	srl	r2,r6,r4
 400da60:	00c10074 	movhi	r3,1025
 400da64:	18d58504 	addi	r3,r3,22036
 400da68:	1885883a 	add	r2,r3,r2
 400da6c:	10c00003 	ldbu	r3,0(r2)
 400da70:	00800804 	movi	r2,32
 400da74:	1909883a 	add	r4,r3,r4
 400da78:	1125c83a 	sub	r18,r2,r4
 400da7c:	90000526 	beq	r18,zero,400da94 <__umoddi3+0x94>
 400da80:	8ca2983a 	sll	r17,r17,r18
 400da84:	8108d83a 	srl	r4,r16,r4
 400da88:	34a6983a 	sll	r19,r6,r18
 400da8c:	84a8983a 	sll	r20,r16,r18
 400da90:	2478b03a 	or	fp,r4,r17
 400da94:	982ed43a 	srli	r23,r19,16
 400da98:	e009883a 	mov	r4,fp
 400da9c:	9dbfffcc 	andi	r22,r19,65535
 400daa0:	b80b883a 	mov	r5,r23
 400daa4:	40032540 	call	4003254 <__umodsi3>
 400daa8:	e009883a 	mov	r4,fp
 400daac:	b80b883a 	mov	r5,r23
 400dab0:	102b883a 	mov	r21,r2
 400dab4:	40031f00 	call	40031f0 <__udivsi3>
 400dab8:	a806943a 	slli	r3,r21,16
 400dabc:	a008d43a 	srli	r4,r20,16
 400dac0:	b085383a 	mul	r2,r22,r2
 400dac4:	20c8b03a 	or	r4,r4,r3
 400dac8:	2080032e 	bgeu	r4,r2,400dad8 <__umoddi3+0xd8>
 400dacc:	24c9883a 	add	r4,r4,r19
 400dad0:	24c00136 	bltu	r4,r19,400dad8 <__umoddi3+0xd8>
 400dad4:	20811036 	bltu	r4,r2,400df18 <__umoddi3+0x518>
 400dad8:	20abc83a 	sub	r21,r4,r2
 400dadc:	b80b883a 	mov	r5,r23
 400dae0:	a809883a 	mov	r4,r21
 400dae4:	40032540 	call	4003254 <__umodsi3>
 400dae8:	1023883a 	mov	r17,r2
 400daec:	b80b883a 	mov	r5,r23
 400daf0:	a809883a 	mov	r4,r21
 400daf4:	40031f00 	call	40031f0 <__udivsi3>
 400daf8:	8822943a 	slli	r17,r17,16
 400dafc:	b085383a 	mul	r2,r22,r2
 400db00:	a0ffffcc 	andi	r3,r20,65535
 400db04:	1c46b03a 	or	r3,r3,r17
 400db08:	1880042e 	bgeu	r3,r2,400db1c <__umoddi3+0x11c>
 400db0c:	1cc7883a 	add	r3,r3,r19
 400db10:	1cc00236 	bltu	r3,r19,400db1c <__umoddi3+0x11c>
 400db14:	1880012e 	bgeu	r3,r2,400db1c <__umoddi3+0x11c>
 400db18:	1cc7883a 	add	r3,r3,r19
 400db1c:	1885c83a 	sub	r2,r3,r2
 400db20:	1484d83a 	srl	r2,r2,r18
 400db24:	0007883a 	mov	r3,zero
 400db28:	00004f06 	br	400dc68 <__umoddi3+0x268>
 400db2c:	29c04c36 	bltu	r5,r7,400dc60 <__umoddi3+0x260>
 400db30:	00bfffd4 	movui	r2,65535
 400db34:	11c0582e 	bgeu	r2,r7,400dc98 <__umoddi3+0x298>
 400db38:	00804034 	movhi	r2,256
 400db3c:	10bfffc4 	addi	r2,r2,-1
 400db40:	11c0e736 	bltu	r2,r7,400dee0 <__umoddi3+0x4e0>
 400db44:	01000404 	movi	r4,16
 400db48:	3904d83a 	srl	r2,r7,r4
 400db4c:	00c10074 	movhi	r3,1025
 400db50:	18d58504 	addi	r3,r3,22036
 400db54:	1885883a 	add	r2,r3,r2
 400db58:	14c00003 	ldbu	r19,0(r2)
 400db5c:	00c00804 	movi	r3,32
 400db60:	9927883a 	add	r19,r19,r4
 400db64:	1ce9c83a 	sub	r20,r3,r19
 400db68:	a000581e 	bne	r20,zero,400dccc <__umoddi3+0x2cc>
 400db6c:	3c400136 	bltu	r7,r17,400db74 <__umoddi3+0x174>
 400db70:	8180eb36 	bltu	r16,r6,400df20 <__umoddi3+0x520>
 400db74:	8185c83a 	sub	r2,r16,r6
 400db78:	89e3c83a 	sub	r17,r17,r7
 400db7c:	8089803a 	cmpltu	r4,r16,r2
 400db80:	8939c83a 	sub	fp,r17,r4
 400db84:	e007883a 	mov	r3,fp
 400db88:	00003706 	br	400dc68 <__umoddi3+0x268>
 400db8c:	3000041e 	bne	r6,zero,400dba0 <__umoddi3+0x1a0>
 400db90:	000b883a 	mov	r5,zero
 400db94:	01000044 	movi	r4,1
 400db98:	40031f00 	call	40031f0 <__udivsi3>
 400db9c:	1027883a 	mov	r19,r2
 400dba0:	00bfffd4 	movui	r2,65535
 400dba4:	14c0402e 	bgeu	r2,r19,400dca8 <__umoddi3+0x2a8>
 400dba8:	00804034 	movhi	r2,256
 400dbac:	10bfffc4 	addi	r2,r2,-1
 400dbb0:	14c0cd36 	bltu	r2,r19,400dee8 <__umoddi3+0x4e8>
 400dbb4:	00800404 	movi	r2,16
 400dbb8:	9886d83a 	srl	r3,r19,r2
 400dbbc:	01010074 	movhi	r4,1025
 400dbc0:	21158504 	addi	r4,r4,22036
 400dbc4:	20c7883a 	add	r3,r4,r3
 400dbc8:	18c00003 	ldbu	r3,0(r3)
 400dbcc:	1887883a 	add	r3,r3,r2
 400dbd0:	00800804 	movi	r2,32
 400dbd4:	10e5c83a 	sub	r18,r2,r3
 400dbd8:	9000901e 	bne	r18,zero,400de1c <__umoddi3+0x41c>
 400dbdc:	982cd43a 	srli	r22,r19,16
 400dbe0:	8ce3c83a 	sub	r17,r17,r19
 400dbe4:	9d7fffcc 	andi	r21,r19,65535
 400dbe8:	b00b883a 	mov	r5,r22
 400dbec:	8809883a 	mov	r4,r17
 400dbf0:	40032540 	call	4003254 <__umodsi3>
 400dbf4:	8809883a 	mov	r4,r17
 400dbf8:	b00b883a 	mov	r5,r22
 400dbfc:	1021883a 	mov	r16,r2
 400dc00:	40031f00 	call	40031f0 <__udivsi3>
 400dc04:	8006943a 	slli	r3,r16,16
 400dc08:	a008d43a 	srli	r4,r20,16
 400dc0c:	1545383a 	mul	r2,r2,r21
 400dc10:	20c8b03a 	or	r4,r4,r3
 400dc14:	2080042e 	bgeu	r4,r2,400dc28 <__umoddi3+0x228>
 400dc18:	24c9883a 	add	r4,r4,r19
 400dc1c:	24c00236 	bltu	r4,r19,400dc28 <__umoddi3+0x228>
 400dc20:	2080012e 	bgeu	r4,r2,400dc28 <__umoddi3+0x228>
 400dc24:	24c9883a 	add	r4,r4,r19
 400dc28:	20a1c83a 	sub	r16,r4,r2
 400dc2c:	b00b883a 	mov	r5,r22
 400dc30:	8009883a 	mov	r4,r16
 400dc34:	40032540 	call	4003254 <__umodsi3>
 400dc38:	1023883a 	mov	r17,r2
 400dc3c:	b00b883a 	mov	r5,r22
 400dc40:	8009883a 	mov	r4,r16
 400dc44:	40031f00 	call	40031f0 <__udivsi3>
 400dc48:	8822943a 	slli	r17,r17,16
 400dc4c:	1545383a 	mul	r2,r2,r21
 400dc50:	a53fffcc 	andi	r20,r20,65535
 400dc54:	a446b03a 	or	r3,r20,r17
 400dc58:	18bfb02e 	bgeu	r3,r2,400db1c <__alt_data_end+0xfc00db1c>
 400dc5c:	003fab06 	br	400db0c <__alt_data_end+0xfc00db0c>
 400dc60:	2005883a 	mov	r2,r4
 400dc64:	2807883a 	mov	r3,r5
 400dc68:	dfc00b17 	ldw	ra,44(sp)
 400dc6c:	df000a17 	ldw	fp,40(sp)
 400dc70:	ddc00917 	ldw	r23,36(sp)
 400dc74:	dd800817 	ldw	r22,32(sp)
 400dc78:	dd400717 	ldw	r21,28(sp)
 400dc7c:	dd000617 	ldw	r20,24(sp)
 400dc80:	dcc00517 	ldw	r19,20(sp)
 400dc84:	dc800417 	ldw	r18,16(sp)
 400dc88:	dc400317 	ldw	r17,12(sp)
 400dc8c:	dc000217 	ldw	r16,8(sp)
 400dc90:	dec00c04 	addi	sp,sp,48
 400dc94:	f800283a 	ret
 400dc98:	04c03fc4 	movi	r19,255
 400dc9c:	99c9803a 	cmpltu	r4,r19,r7
 400dca0:	200890fa 	slli	r4,r4,3
 400dca4:	003fa806 	br	400db48 <__alt_data_end+0xfc00db48>
 400dca8:	00803fc4 	movi	r2,255
 400dcac:	14c5803a 	cmpltu	r2,r2,r19
 400dcb0:	100490fa 	slli	r2,r2,3
 400dcb4:	003fc006 	br	400dbb8 <__alt_data_end+0xfc00dbb8>
 400dcb8:	00804034 	movhi	r2,256
 400dcbc:	10bfffc4 	addi	r2,r2,-1
 400dcc0:	11808b36 	bltu	r2,r6,400def0 <__umoddi3+0x4f0>
 400dcc4:	01000404 	movi	r4,16
 400dcc8:	003f6406 	br	400da5c <__alt_data_end+0xfc00da5c>
 400dccc:	34c4d83a 	srl	r2,r6,r19
 400dcd0:	3d0e983a 	sll	r7,r7,r20
 400dcd4:	8cf8d83a 	srl	fp,r17,r19
 400dcd8:	8d10983a 	sll	r8,r17,r20
 400dcdc:	38aab03a 	or	r21,r7,r2
 400dce0:	a82cd43a 	srli	r22,r21,16
 400dce4:	84e2d83a 	srl	r17,r16,r19
 400dce8:	e009883a 	mov	r4,fp
 400dcec:	b00b883a 	mov	r5,r22
 400dcf0:	8a22b03a 	or	r17,r17,r8
 400dcf4:	3524983a 	sll	r18,r6,r20
 400dcf8:	40032540 	call	4003254 <__umodsi3>
 400dcfc:	e009883a 	mov	r4,fp
 400dd00:	b00b883a 	mov	r5,r22
 400dd04:	102f883a 	mov	r23,r2
 400dd08:	40031f00 	call	40031f0 <__udivsi3>
 400dd0c:	100d883a 	mov	r6,r2
 400dd10:	b808943a 	slli	r4,r23,16
 400dd14:	aa3fffcc 	andi	r8,r21,65535
 400dd18:	8804d43a 	srli	r2,r17,16
 400dd1c:	41af383a 	mul	r23,r8,r6
 400dd20:	8520983a 	sll	r16,r16,r20
 400dd24:	1104b03a 	or	r2,r2,r4
 400dd28:	15c0042e 	bgeu	r2,r23,400dd3c <__umoddi3+0x33c>
 400dd2c:	1545883a 	add	r2,r2,r21
 400dd30:	30ffffc4 	addi	r3,r6,-1
 400dd34:	1540742e 	bgeu	r2,r21,400df08 <__umoddi3+0x508>
 400dd38:	180d883a 	mov	r6,r3
 400dd3c:	15efc83a 	sub	r23,r2,r23
 400dd40:	b00b883a 	mov	r5,r22
 400dd44:	b809883a 	mov	r4,r23
 400dd48:	d9800115 	stw	r6,4(sp)
 400dd4c:	da000015 	stw	r8,0(sp)
 400dd50:	40032540 	call	4003254 <__umodsi3>
 400dd54:	b00b883a 	mov	r5,r22
 400dd58:	b809883a 	mov	r4,r23
 400dd5c:	1039883a 	mov	fp,r2
 400dd60:	40031f00 	call	40031f0 <__udivsi3>
 400dd64:	da000017 	ldw	r8,0(sp)
 400dd68:	e038943a 	slli	fp,fp,16
 400dd6c:	100b883a 	mov	r5,r2
 400dd70:	4089383a 	mul	r4,r8,r2
 400dd74:	8a3fffcc 	andi	r8,r17,65535
 400dd78:	4710b03a 	or	r8,r8,fp
 400dd7c:	d9800117 	ldw	r6,4(sp)
 400dd80:	4100042e 	bgeu	r8,r4,400dd94 <__umoddi3+0x394>
 400dd84:	4551883a 	add	r8,r8,r21
 400dd88:	10bfffc4 	addi	r2,r2,-1
 400dd8c:	45405a2e 	bgeu	r8,r21,400def8 <__umoddi3+0x4f8>
 400dd90:	100b883a 	mov	r5,r2
 400dd94:	300c943a 	slli	r6,r6,16
 400dd98:	91ffffcc 	andi	r7,r18,65535
 400dd9c:	9004d43a 	srli	r2,r18,16
 400dda0:	314cb03a 	or	r6,r6,r5
 400dda4:	317fffcc 	andi	r5,r6,65535
 400dda8:	300cd43a 	srli	r6,r6,16
 400ddac:	29d3383a 	mul	r9,r5,r7
 400ddb0:	288b383a 	mul	r5,r5,r2
 400ddb4:	31cf383a 	mul	r7,r6,r7
 400ddb8:	4806d43a 	srli	r3,r9,16
 400ddbc:	4111c83a 	sub	r8,r8,r4
 400ddc0:	29cb883a 	add	r5,r5,r7
 400ddc4:	194b883a 	add	r5,r3,r5
 400ddc8:	3085383a 	mul	r2,r6,r2
 400ddcc:	29c0022e 	bgeu	r5,r7,400ddd8 <__umoddi3+0x3d8>
 400ddd0:	00c00074 	movhi	r3,1
 400ddd4:	10c5883a 	add	r2,r2,r3
 400ddd8:	2808d43a 	srli	r4,r5,16
 400dddc:	280a943a 	slli	r5,r5,16
 400dde0:	4a7fffcc 	andi	r9,r9,65535
 400dde4:	2085883a 	add	r2,r4,r2
 400dde8:	2a4b883a 	add	r5,r5,r9
 400ddec:	40803636 	bltu	r8,r2,400dec8 <__umoddi3+0x4c8>
 400ddf0:	40804d26 	beq	r8,r2,400df28 <__umoddi3+0x528>
 400ddf4:	4089c83a 	sub	r4,r8,r2
 400ddf8:	280f883a 	mov	r7,r5
 400ddfc:	81cfc83a 	sub	r7,r16,r7
 400de00:	81c7803a 	cmpltu	r3,r16,r7
 400de04:	20c7c83a 	sub	r3,r4,r3
 400de08:	1cc4983a 	sll	r2,r3,r19
 400de0c:	3d0ed83a 	srl	r7,r7,r20
 400de10:	1d06d83a 	srl	r3,r3,r20
 400de14:	11c4b03a 	or	r2,r2,r7
 400de18:	003f9306 	br	400dc68 <__alt_data_end+0xfc00dc68>
 400de1c:	9ca6983a 	sll	r19,r19,r18
 400de20:	88e8d83a 	srl	r20,r17,r3
 400de24:	80c4d83a 	srl	r2,r16,r3
 400de28:	982cd43a 	srli	r22,r19,16
 400de2c:	8ca2983a 	sll	r17,r17,r18
 400de30:	a009883a 	mov	r4,r20
 400de34:	b00b883a 	mov	r5,r22
 400de38:	1478b03a 	or	fp,r2,r17
 400de3c:	40032540 	call	4003254 <__umodsi3>
 400de40:	a009883a 	mov	r4,r20
 400de44:	b00b883a 	mov	r5,r22
 400de48:	1023883a 	mov	r17,r2
 400de4c:	40031f00 	call	40031f0 <__udivsi3>
 400de50:	9d7fffcc 	andi	r21,r19,65535
 400de54:	880a943a 	slli	r5,r17,16
 400de58:	e008d43a 	srli	r4,fp,16
 400de5c:	a885383a 	mul	r2,r21,r2
 400de60:	84a8983a 	sll	r20,r16,r18
 400de64:	2148b03a 	or	r4,r4,r5
 400de68:	2080042e 	bgeu	r4,r2,400de7c <__umoddi3+0x47c>
 400de6c:	24c9883a 	add	r4,r4,r19
 400de70:	24c00236 	bltu	r4,r19,400de7c <__umoddi3+0x47c>
 400de74:	2080012e 	bgeu	r4,r2,400de7c <__umoddi3+0x47c>
 400de78:	24c9883a 	add	r4,r4,r19
 400de7c:	20a3c83a 	sub	r17,r4,r2
 400de80:	b00b883a 	mov	r5,r22
 400de84:	8809883a 	mov	r4,r17
 400de88:	40032540 	call	4003254 <__umodsi3>
 400de8c:	102f883a 	mov	r23,r2
 400de90:	8809883a 	mov	r4,r17
 400de94:	b00b883a 	mov	r5,r22
 400de98:	40031f00 	call	40031f0 <__udivsi3>
 400de9c:	b82e943a 	slli	r23,r23,16
 400dea0:	a885383a 	mul	r2,r21,r2
 400dea4:	e13fffcc 	andi	r4,fp,65535
 400dea8:	25c8b03a 	or	r4,r4,r23
 400deac:	2080042e 	bgeu	r4,r2,400dec0 <__umoddi3+0x4c0>
 400deb0:	24c9883a 	add	r4,r4,r19
 400deb4:	24c00236 	bltu	r4,r19,400dec0 <__umoddi3+0x4c0>
 400deb8:	2080012e 	bgeu	r4,r2,400dec0 <__umoddi3+0x4c0>
 400debc:	24c9883a 	add	r4,r4,r19
 400dec0:	20a3c83a 	sub	r17,r4,r2
 400dec4:	003f4806 	br	400dbe8 <__alt_data_end+0xfc00dbe8>
 400dec8:	2c8fc83a 	sub	r7,r5,r18
 400decc:	1545c83a 	sub	r2,r2,r21
 400ded0:	29cb803a 	cmpltu	r5,r5,r7
 400ded4:	1145c83a 	sub	r2,r2,r5
 400ded8:	4089c83a 	sub	r4,r8,r2
 400dedc:	003fc706 	br	400ddfc <__alt_data_end+0xfc00ddfc>
 400dee0:	01000604 	movi	r4,24
 400dee4:	003f1806 	br	400db48 <__alt_data_end+0xfc00db48>
 400dee8:	00800604 	movi	r2,24
 400deec:	003f3206 	br	400dbb8 <__alt_data_end+0xfc00dbb8>
 400def0:	01000604 	movi	r4,24
 400def4:	003ed906 	br	400da5c <__alt_data_end+0xfc00da5c>
 400def8:	413fa52e 	bgeu	r8,r4,400dd90 <__alt_data_end+0xfc00dd90>
 400defc:	297fff84 	addi	r5,r5,-2
 400df00:	4551883a 	add	r8,r8,r21
 400df04:	003fa306 	br	400dd94 <__alt_data_end+0xfc00dd94>
 400df08:	15ff8b2e 	bgeu	r2,r23,400dd38 <__alt_data_end+0xfc00dd38>
 400df0c:	31bfff84 	addi	r6,r6,-2
 400df10:	1545883a 	add	r2,r2,r21
 400df14:	003f8906 	br	400dd3c <__alt_data_end+0xfc00dd3c>
 400df18:	24c9883a 	add	r4,r4,r19
 400df1c:	003eee06 	br	400dad8 <__alt_data_end+0xfc00dad8>
 400df20:	8005883a 	mov	r2,r16
 400df24:	003f1706 	br	400db84 <__alt_data_end+0xfc00db84>
 400df28:	817fe736 	bltu	r16,r5,400dec8 <__alt_data_end+0xfc00dec8>
 400df2c:	280f883a 	mov	r7,r5
 400df30:	0009883a 	mov	r4,zero
 400df34:	003fb106 	br	400ddfc <__alt_data_end+0xfc00ddfc>

0400df38 <__adddf3>:
 400df38:	02c00434 	movhi	r11,16
 400df3c:	5affffc4 	addi	r11,r11,-1
 400df40:	2806d7fa 	srli	r3,r5,31
 400df44:	2ad4703a 	and	r10,r5,r11
 400df48:	3ad2703a 	and	r9,r7,r11
 400df4c:	3804d53a 	srli	r2,r7,20
 400df50:	3018d77a 	srli	r12,r6,29
 400df54:	280ad53a 	srli	r5,r5,20
 400df58:	501490fa 	slli	r10,r10,3
 400df5c:	2010d77a 	srli	r8,r4,29
 400df60:	481290fa 	slli	r9,r9,3
 400df64:	380ed7fa 	srli	r7,r7,31
 400df68:	defffb04 	addi	sp,sp,-20
 400df6c:	dc800215 	stw	r18,8(sp)
 400df70:	dc400115 	stw	r17,4(sp)
 400df74:	dc000015 	stw	r16,0(sp)
 400df78:	dfc00415 	stw	ra,16(sp)
 400df7c:	dcc00315 	stw	r19,12(sp)
 400df80:	1c803fcc 	andi	r18,r3,255
 400df84:	2c01ffcc 	andi	r16,r5,2047
 400df88:	5210b03a 	or	r8,r10,r8
 400df8c:	202290fa 	slli	r17,r4,3
 400df90:	1081ffcc 	andi	r2,r2,2047
 400df94:	4b12b03a 	or	r9,r9,r12
 400df98:	300c90fa 	slli	r6,r6,3
 400df9c:	91c07526 	beq	r18,r7,400e174 <__adddf3+0x23c>
 400dfa0:	8087c83a 	sub	r3,r16,r2
 400dfa4:	00c0ab0e 	bge	zero,r3,400e254 <__adddf3+0x31c>
 400dfa8:	10002a1e 	bne	r2,zero,400e054 <__adddf3+0x11c>
 400dfac:	4984b03a 	or	r2,r9,r6
 400dfb0:	1000961e 	bne	r2,zero,400e20c <__adddf3+0x2d4>
 400dfb4:	888001cc 	andi	r2,r17,7
 400dfb8:	10000726 	beq	r2,zero,400dfd8 <__adddf3+0xa0>
 400dfbc:	888003cc 	andi	r2,r17,15
 400dfc0:	00c00104 	movi	r3,4
 400dfc4:	10c00426 	beq	r2,r3,400dfd8 <__adddf3+0xa0>
 400dfc8:	88c7883a 	add	r3,r17,r3
 400dfcc:	1c63803a 	cmpltu	r17,r3,r17
 400dfd0:	4451883a 	add	r8,r8,r17
 400dfd4:	1823883a 	mov	r17,r3
 400dfd8:	4080202c 	andhi	r2,r8,128
 400dfdc:	10005926 	beq	r2,zero,400e144 <__adddf3+0x20c>
 400dfe0:	84000044 	addi	r16,r16,1
 400dfe4:	0081ffc4 	movi	r2,2047
 400dfe8:	8080ba26 	beq	r16,r2,400e2d4 <__adddf3+0x39c>
 400dfec:	00bfe034 	movhi	r2,65408
 400dff0:	10bfffc4 	addi	r2,r2,-1
 400dff4:	4090703a 	and	r8,r8,r2
 400dff8:	4004977a 	slli	r2,r8,29
 400dffc:	4010927a 	slli	r8,r8,9
 400e000:	8822d0fa 	srli	r17,r17,3
 400e004:	8401ffcc 	andi	r16,r16,2047
 400e008:	4010d33a 	srli	r8,r8,12
 400e00c:	9007883a 	mov	r3,r18
 400e010:	1444b03a 	or	r2,r2,r17
 400e014:	8401ffcc 	andi	r16,r16,2047
 400e018:	8020953a 	slli	r16,r16,20
 400e01c:	18c03fcc 	andi	r3,r3,255
 400e020:	01000434 	movhi	r4,16
 400e024:	213fffc4 	addi	r4,r4,-1
 400e028:	180697fa 	slli	r3,r3,31
 400e02c:	4110703a 	and	r8,r8,r4
 400e030:	4410b03a 	or	r8,r8,r16
 400e034:	40c6b03a 	or	r3,r8,r3
 400e038:	dfc00417 	ldw	ra,16(sp)
 400e03c:	dcc00317 	ldw	r19,12(sp)
 400e040:	dc800217 	ldw	r18,8(sp)
 400e044:	dc400117 	ldw	r17,4(sp)
 400e048:	dc000017 	ldw	r16,0(sp)
 400e04c:	dec00504 	addi	sp,sp,20
 400e050:	f800283a 	ret
 400e054:	0081ffc4 	movi	r2,2047
 400e058:	80bfd626 	beq	r16,r2,400dfb4 <__alt_data_end+0xfc00dfb4>
 400e05c:	4a402034 	orhi	r9,r9,128
 400e060:	00800e04 	movi	r2,56
 400e064:	10c09f16 	blt	r2,r3,400e2e4 <__adddf3+0x3ac>
 400e068:	008007c4 	movi	r2,31
 400e06c:	10c0c216 	blt	r2,r3,400e378 <__adddf3+0x440>
 400e070:	00800804 	movi	r2,32
 400e074:	10c5c83a 	sub	r2,r2,r3
 400e078:	488a983a 	sll	r5,r9,r2
 400e07c:	30c8d83a 	srl	r4,r6,r3
 400e080:	3084983a 	sll	r2,r6,r2
 400e084:	48c6d83a 	srl	r3,r9,r3
 400e088:	290cb03a 	or	r6,r5,r4
 400e08c:	1004c03a 	cmpne	r2,r2,zero
 400e090:	308cb03a 	or	r6,r6,r2
 400e094:	898dc83a 	sub	r6,r17,r6
 400e098:	89a3803a 	cmpltu	r17,r17,r6
 400e09c:	40d1c83a 	sub	r8,r8,r3
 400e0a0:	4451c83a 	sub	r8,r8,r17
 400e0a4:	3023883a 	mov	r17,r6
 400e0a8:	4080202c 	andhi	r2,r8,128
 400e0ac:	10002326 	beq	r2,zero,400e13c <__adddf3+0x204>
 400e0b0:	04c02034 	movhi	r19,128
 400e0b4:	9cffffc4 	addi	r19,r19,-1
 400e0b8:	44e6703a 	and	r19,r8,r19
 400e0bc:	98007626 	beq	r19,zero,400e298 <__adddf3+0x360>
 400e0c0:	9809883a 	mov	r4,r19
 400e0c4:	4003da80 	call	4003da8 <__clzsi2>
 400e0c8:	10fffe04 	addi	r3,r2,-8
 400e0cc:	010007c4 	movi	r4,31
 400e0d0:	20c07716 	blt	r4,r3,400e2b0 <__adddf3+0x378>
 400e0d4:	00800804 	movi	r2,32
 400e0d8:	10c5c83a 	sub	r2,r2,r3
 400e0dc:	8884d83a 	srl	r2,r17,r2
 400e0e0:	98d0983a 	sll	r8,r19,r3
 400e0e4:	88e2983a 	sll	r17,r17,r3
 400e0e8:	1204b03a 	or	r2,r2,r8
 400e0ec:	1c007416 	blt	r3,r16,400e2c0 <__adddf3+0x388>
 400e0f0:	1c21c83a 	sub	r16,r3,r16
 400e0f4:	82000044 	addi	r8,r16,1
 400e0f8:	00c007c4 	movi	r3,31
 400e0fc:	1a009116 	blt	r3,r8,400e344 <__adddf3+0x40c>
 400e100:	00c00804 	movi	r3,32
 400e104:	1a07c83a 	sub	r3,r3,r8
 400e108:	8a08d83a 	srl	r4,r17,r8
 400e10c:	88e2983a 	sll	r17,r17,r3
 400e110:	10c6983a 	sll	r3,r2,r3
 400e114:	1210d83a 	srl	r8,r2,r8
 400e118:	8804c03a 	cmpne	r2,r17,zero
 400e11c:	1906b03a 	or	r3,r3,r4
 400e120:	18a2b03a 	or	r17,r3,r2
 400e124:	0021883a 	mov	r16,zero
 400e128:	003fa206 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e12c:	1890b03a 	or	r8,r3,r2
 400e130:	40017d26 	beq	r8,zero,400e728 <__adddf3+0x7f0>
 400e134:	1011883a 	mov	r8,r2
 400e138:	1823883a 	mov	r17,r3
 400e13c:	888001cc 	andi	r2,r17,7
 400e140:	103f9e1e 	bne	r2,zero,400dfbc <__alt_data_end+0xfc00dfbc>
 400e144:	4004977a 	slli	r2,r8,29
 400e148:	8822d0fa 	srli	r17,r17,3
 400e14c:	4010d0fa 	srli	r8,r8,3
 400e150:	9007883a 	mov	r3,r18
 400e154:	1444b03a 	or	r2,r2,r17
 400e158:	0101ffc4 	movi	r4,2047
 400e15c:	81002426 	beq	r16,r4,400e1f0 <__adddf3+0x2b8>
 400e160:	8120703a 	and	r16,r16,r4
 400e164:	01000434 	movhi	r4,16
 400e168:	213fffc4 	addi	r4,r4,-1
 400e16c:	4110703a 	and	r8,r8,r4
 400e170:	003fa806 	br	400e014 <__alt_data_end+0xfc00e014>
 400e174:	8089c83a 	sub	r4,r16,r2
 400e178:	01005e0e 	bge	zero,r4,400e2f4 <__adddf3+0x3bc>
 400e17c:	10002b26 	beq	r2,zero,400e22c <__adddf3+0x2f4>
 400e180:	0081ffc4 	movi	r2,2047
 400e184:	80bf8b26 	beq	r16,r2,400dfb4 <__alt_data_end+0xfc00dfb4>
 400e188:	4a402034 	orhi	r9,r9,128
 400e18c:	00800e04 	movi	r2,56
 400e190:	1100a40e 	bge	r2,r4,400e424 <__adddf3+0x4ec>
 400e194:	498cb03a 	or	r6,r9,r6
 400e198:	300ac03a 	cmpne	r5,r6,zero
 400e19c:	0013883a 	mov	r9,zero
 400e1a0:	2c4b883a 	add	r5,r5,r17
 400e1a4:	2c63803a 	cmpltu	r17,r5,r17
 400e1a8:	4a11883a 	add	r8,r9,r8
 400e1ac:	8a11883a 	add	r8,r17,r8
 400e1b0:	2823883a 	mov	r17,r5
 400e1b4:	4080202c 	andhi	r2,r8,128
 400e1b8:	103fe026 	beq	r2,zero,400e13c <__alt_data_end+0xfc00e13c>
 400e1bc:	84000044 	addi	r16,r16,1
 400e1c0:	0081ffc4 	movi	r2,2047
 400e1c4:	8080d226 	beq	r16,r2,400e510 <__adddf3+0x5d8>
 400e1c8:	00bfe034 	movhi	r2,65408
 400e1cc:	10bfffc4 	addi	r2,r2,-1
 400e1d0:	4090703a 	and	r8,r8,r2
 400e1d4:	880ad07a 	srli	r5,r17,1
 400e1d8:	400897fa 	slli	r4,r8,31
 400e1dc:	88c0004c 	andi	r3,r17,1
 400e1e0:	28e2b03a 	or	r17,r5,r3
 400e1e4:	4010d07a 	srli	r8,r8,1
 400e1e8:	2462b03a 	or	r17,r4,r17
 400e1ec:	003f7106 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e1f0:	4088b03a 	or	r4,r8,r2
 400e1f4:	20014526 	beq	r4,zero,400e70c <__adddf3+0x7d4>
 400e1f8:	01000434 	movhi	r4,16
 400e1fc:	42000234 	orhi	r8,r8,8
 400e200:	213fffc4 	addi	r4,r4,-1
 400e204:	4110703a 	and	r8,r8,r4
 400e208:	003f8206 	br	400e014 <__alt_data_end+0xfc00e014>
 400e20c:	18ffffc4 	addi	r3,r3,-1
 400e210:	1800491e 	bne	r3,zero,400e338 <__adddf3+0x400>
 400e214:	898bc83a 	sub	r5,r17,r6
 400e218:	8963803a 	cmpltu	r17,r17,r5
 400e21c:	4251c83a 	sub	r8,r8,r9
 400e220:	4451c83a 	sub	r8,r8,r17
 400e224:	2823883a 	mov	r17,r5
 400e228:	003f9f06 	br	400e0a8 <__alt_data_end+0xfc00e0a8>
 400e22c:	4984b03a 	or	r2,r9,r6
 400e230:	103f6026 	beq	r2,zero,400dfb4 <__alt_data_end+0xfc00dfb4>
 400e234:	213fffc4 	addi	r4,r4,-1
 400e238:	2000931e 	bne	r4,zero,400e488 <__adddf3+0x550>
 400e23c:	898d883a 	add	r6,r17,r6
 400e240:	3463803a 	cmpltu	r17,r6,r17
 400e244:	4251883a 	add	r8,r8,r9
 400e248:	8a11883a 	add	r8,r17,r8
 400e24c:	3023883a 	mov	r17,r6
 400e250:	003fd806 	br	400e1b4 <__alt_data_end+0xfc00e1b4>
 400e254:	1800541e 	bne	r3,zero,400e3a8 <__adddf3+0x470>
 400e258:	80800044 	addi	r2,r16,1
 400e25c:	1081ffcc 	andi	r2,r2,2047
 400e260:	00c00044 	movi	r3,1
 400e264:	1880a00e 	bge	r3,r2,400e4e8 <__adddf3+0x5b0>
 400e268:	8989c83a 	sub	r4,r17,r6
 400e26c:	8905803a 	cmpltu	r2,r17,r4
 400e270:	4267c83a 	sub	r19,r8,r9
 400e274:	98a7c83a 	sub	r19,r19,r2
 400e278:	9880202c 	andhi	r2,r19,128
 400e27c:	10006326 	beq	r2,zero,400e40c <__adddf3+0x4d4>
 400e280:	3463c83a 	sub	r17,r6,r17
 400e284:	4a07c83a 	sub	r3,r9,r8
 400e288:	344d803a 	cmpltu	r6,r6,r17
 400e28c:	19a7c83a 	sub	r19,r3,r6
 400e290:	3825883a 	mov	r18,r7
 400e294:	983f8a1e 	bne	r19,zero,400e0c0 <__alt_data_end+0xfc00e0c0>
 400e298:	8809883a 	mov	r4,r17
 400e29c:	4003da80 	call	4003da8 <__clzsi2>
 400e2a0:	10800804 	addi	r2,r2,32
 400e2a4:	10fffe04 	addi	r3,r2,-8
 400e2a8:	010007c4 	movi	r4,31
 400e2ac:	20ff890e 	bge	r4,r3,400e0d4 <__alt_data_end+0xfc00e0d4>
 400e2b0:	10bff604 	addi	r2,r2,-40
 400e2b4:	8884983a 	sll	r2,r17,r2
 400e2b8:	0023883a 	mov	r17,zero
 400e2bc:	1c3f8c0e 	bge	r3,r16,400e0f0 <__alt_data_end+0xfc00e0f0>
 400e2c0:	023fe034 	movhi	r8,65408
 400e2c4:	423fffc4 	addi	r8,r8,-1
 400e2c8:	80e1c83a 	sub	r16,r16,r3
 400e2cc:	1210703a 	and	r8,r2,r8
 400e2d0:	003f3806 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e2d4:	9007883a 	mov	r3,r18
 400e2d8:	0011883a 	mov	r8,zero
 400e2dc:	0005883a 	mov	r2,zero
 400e2e0:	003f4c06 	br	400e014 <__alt_data_end+0xfc00e014>
 400e2e4:	498cb03a 	or	r6,r9,r6
 400e2e8:	300cc03a 	cmpne	r6,r6,zero
 400e2ec:	0007883a 	mov	r3,zero
 400e2f0:	003f6806 	br	400e094 <__alt_data_end+0xfc00e094>
 400e2f4:	20009c1e 	bne	r4,zero,400e568 <__adddf3+0x630>
 400e2f8:	80800044 	addi	r2,r16,1
 400e2fc:	1141ffcc 	andi	r5,r2,2047
 400e300:	01000044 	movi	r4,1
 400e304:	2140670e 	bge	r4,r5,400e4a4 <__adddf3+0x56c>
 400e308:	0101ffc4 	movi	r4,2047
 400e30c:	11007f26 	beq	r2,r4,400e50c <__adddf3+0x5d4>
 400e310:	898d883a 	add	r6,r17,r6
 400e314:	4247883a 	add	r3,r8,r9
 400e318:	3451803a 	cmpltu	r8,r6,r17
 400e31c:	40d1883a 	add	r8,r8,r3
 400e320:	402297fa 	slli	r17,r8,31
 400e324:	300cd07a 	srli	r6,r6,1
 400e328:	4010d07a 	srli	r8,r8,1
 400e32c:	1021883a 	mov	r16,r2
 400e330:	89a2b03a 	or	r17,r17,r6
 400e334:	003f1f06 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e338:	0081ffc4 	movi	r2,2047
 400e33c:	80bf481e 	bne	r16,r2,400e060 <__alt_data_end+0xfc00e060>
 400e340:	003f1c06 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e344:	843ff844 	addi	r16,r16,-31
 400e348:	01000804 	movi	r4,32
 400e34c:	1406d83a 	srl	r3,r2,r16
 400e350:	41005026 	beq	r8,r4,400e494 <__adddf3+0x55c>
 400e354:	01001004 	movi	r4,64
 400e358:	2211c83a 	sub	r8,r4,r8
 400e35c:	1204983a 	sll	r2,r2,r8
 400e360:	88a2b03a 	or	r17,r17,r2
 400e364:	8822c03a 	cmpne	r17,r17,zero
 400e368:	1c62b03a 	or	r17,r3,r17
 400e36c:	0011883a 	mov	r8,zero
 400e370:	0021883a 	mov	r16,zero
 400e374:	003f7106 	br	400e13c <__alt_data_end+0xfc00e13c>
 400e378:	193ff804 	addi	r4,r3,-32
 400e37c:	00800804 	movi	r2,32
 400e380:	4908d83a 	srl	r4,r9,r4
 400e384:	18804526 	beq	r3,r2,400e49c <__adddf3+0x564>
 400e388:	00801004 	movi	r2,64
 400e38c:	10c5c83a 	sub	r2,r2,r3
 400e390:	4886983a 	sll	r3,r9,r2
 400e394:	198cb03a 	or	r6,r3,r6
 400e398:	300cc03a 	cmpne	r6,r6,zero
 400e39c:	218cb03a 	or	r6,r4,r6
 400e3a0:	0007883a 	mov	r3,zero
 400e3a4:	003f3b06 	br	400e094 <__alt_data_end+0xfc00e094>
 400e3a8:	80002a26 	beq	r16,zero,400e454 <__adddf3+0x51c>
 400e3ac:	0101ffc4 	movi	r4,2047
 400e3b0:	11006826 	beq	r2,r4,400e554 <__adddf3+0x61c>
 400e3b4:	00c7c83a 	sub	r3,zero,r3
 400e3b8:	42002034 	orhi	r8,r8,128
 400e3bc:	01000e04 	movi	r4,56
 400e3c0:	20c07c16 	blt	r4,r3,400e5b4 <__adddf3+0x67c>
 400e3c4:	010007c4 	movi	r4,31
 400e3c8:	20c0da16 	blt	r4,r3,400e734 <__adddf3+0x7fc>
 400e3cc:	01000804 	movi	r4,32
 400e3d0:	20c9c83a 	sub	r4,r4,r3
 400e3d4:	4114983a 	sll	r10,r8,r4
 400e3d8:	88cad83a 	srl	r5,r17,r3
 400e3dc:	8908983a 	sll	r4,r17,r4
 400e3e0:	40c6d83a 	srl	r3,r8,r3
 400e3e4:	5162b03a 	or	r17,r10,r5
 400e3e8:	2008c03a 	cmpne	r4,r4,zero
 400e3ec:	8922b03a 	or	r17,r17,r4
 400e3f0:	3463c83a 	sub	r17,r6,r17
 400e3f4:	48c7c83a 	sub	r3,r9,r3
 400e3f8:	344d803a 	cmpltu	r6,r6,r17
 400e3fc:	1991c83a 	sub	r8,r3,r6
 400e400:	1021883a 	mov	r16,r2
 400e404:	3825883a 	mov	r18,r7
 400e408:	003f2706 	br	400e0a8 <__alt_data_end+0xfc00e0a8>
 400e40c:	24d0b03a 	or	r8,r4,r19
 400e410:	40001b1e 	bne	r8,zero,400e480 <__adddf3+0x548>
 400e414:	0005883a 	mov	r2,zero
 400e418:	0007883a 	mov	r3,zero
 400e41c:	0021883a 	mov	r16,zero
 400e420:	003f4d06 	br	400e158 <__alt_data_end+0xfc00e158>
 400e424:	008007c4 	movi	r2,31
 400e428:	11003c16 	blt	r2,r4,400e51c <__adddf3+0x5e4>
 400e42c:	00800804 	movi	r2,32
 400e430:	1105c83a 	sub	r2,r2,r4
 400e434:	488e983a 	sll	r7,r9,r2
 400e438:	310ad83a 	srl	r5,r6,r4
 400e43c:	3084983a 	sll	r2,r6,r2
 400e440:	4912d83a 	srl	r9,r9,r4
 400e444:	394ab03a 	or	r5,r7,r5
 400e448:	1004c03a 	cmpne	r2,r2,zero
 400e44c:	288ab03a 	or	r5,r5,r2
 400e450:	003f5306 	br	400e1a0 <__alt_data_end+0xfc00e1a0>
 400e454:	4448b03a 	or	r4,r8,r17
 400e458:	20003e26 	beq	r4,zero,400e554 <__adddf3+0x61c>
 400e45c:	00c6303a 	nor	r3,zero,r3
 400e460:	18003a1e 	bne	r3,zero,400e54c <__adddf3+0x614>
 400e464:	3463c83a 	sub	r17,r6,r17
 400e468:	4a07c83a 	sub	r3,r9,r8
 400e46c:	344d803a 	cmpltu	r6,r6,r17
 400e470:	1991c83a 	sub	r8,r3,r6
 400e474:	1021883a 	mov	r16,r2
 400e478:	3825883a 	mov	r18,r7
 400e47c:	003f0a06 	br	400e0a8 <__alt_data_end+0xfc00e0a8>
 400e480:	2023883a 	mov	r17,r4
 400e484:	003f0d06 	br	400e0bc <__alt_data_end+0xfc00e0bc>
 400e488:	0081ffc4 	movi	r2,2047
 400e48c:	80bf3f1e 	bne	r16,r2,400e18c <__alt_data_end+0xfc00e18c>
 400e490:	003ec806 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e494:	0005883a 	mov	r2,zero
 400e498:	003fb106 	br	400e360 <__alt_data_end+0xfc00e360>
 400e49c:	0007883a 	mov	r3,zero
 400e4a0:	003fbc06 	br	400e394 <__alt_data_end+0xfc00e394>
 400e4a4:	4444b03a 	or	r2,r8,r17
 400e4a8:	8000871e 	bne	r16,zero,400e6c8 <__adddf3+0x790>
 400e4ac:	1000ba26 	beq	r2,zero,400e798 <__adddf3+0x860>
 400e4b0:	4984b03a 	or	r2,r9,r6
 400e4b4:	103ebf26 	beq	r2,zero,400dfb4 <__alt_data_end+0xfc00dfb4>
 400e4b8:	8985883a 	add	r2,r17,r6
 400e4bc:	4247883a 	add	r3,r8,r9
 400e4c0:	1451803a 	cmpltu	r8,r2,r17
 400e4c4:	40d1883a 	add	r8,r8,r3
 400e4c8:	40c0202c 	andhi	r3,r8,128
 400e4cc:	1023883a 	mov	r17,r2
 400e4d0:	183f1a26 	beq	r3,zero,400e13c <__alt_data_end+0xfc00e13c>
 400e4d4:	00bfe034 	movhi	r2,65408
 400e4d8:	10bfffc4 	addi	r2,r2,-1
 400e4dc:	2021883a 	mov	r16,r4
 400e4e0:	4090703a 	and	r8,r8,r2
 400e4e4:	003eb306 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e4e8:	4444b03a 	or	r2,r8,r17
 400e4ec:	8000291e 	bne	r16,zero,400e594 <__adddf3+0x65c>
 400e4f0:	10004b1e 	bne	r2,zero,400e620 <__adddf3+0x6e8>
 400e4f4:	4990b03a 	or	r8,r9,r6
 400e4f8:	40008b26 	beq	r8,zero,400e728 <__adddf3+0x7f0>
 400e4fc:	4811883a 	mov	r8,r9
 400e500:	3023883a 	mov	r17,r6
 400e504:	3825883a 	mov	r18,r7
 400e508:	003eaa06 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e50c:	1021883a 	mov	r16,r2
 400e510:	0011883a 	mov	r8,zero
 400e514:	0005883a 	mov	r2,zero
 400e518:	003f0f06 	br	400e158 <__alt_data_end+0xfc00e158>
 400e51c:	217ff804 	addi	r5,r4,-32
 400e520:	00800804 	movi	r2,32
 400e524:	494ad83a 	srl	r5,r9,r5
 400e528:	20807d26 	beq	r4,r2,400e720 <__adddf3+0x7e8>
 400e52c:	00801004 	movi	r2,64
 400e530:	1109c83a 	sub	r4,r2,r4
 400e534:	4912983a 	sll	r9,r9,r4
 400e538:	498cb03a 	or	r6,r9,r6
 400e53c:	300cc03a 	cmpne	r6,r6,zero
 400e540:	298ab03a 	or	r5,r5,r6
 400e544:	0013883a 	mov	r9,zero
 400e548:	003f1506 	br	400e1a0 <__alt_data_end+0xfc00e1a0>
 400e54c:	0101ffc4 	movi	r4,2047
 400e550:	113f9a1e 	bne	r2,r4,400e3bc <__alt_data_end+0xfc00e3bc>
 400e554:	4811883a 	mov	r8,r9
 400e558:	3023883a 	mov	r17,r6
 400e55c:	1021883a 	mov	r16,r2
 400e560:	3825883a 	mov	r18,r7
 400e564:	003e9306 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e568:	8000161e 	bne	r16,zero,400e5c4 <__adddf3+0x68c>
 400e56c:	444ab03a 	or	r5,r8,r17
 400e570:	28005126 	beq	r5,zero,400e6b8 <__adddf3+0x780>
 400e574:	0108303a 	nor	r4,zero,r4
 400e578:	20004d1e 	bne	r4,zero,400e6b0 <__adddf3+0x778>
 400e57c:	89a3883a 	add	r17,r17,r6
 400e580:	4253883a 	add	r9,r8,r9
 400e584:	898d803a 	cmpltu	r6,r17,r6
 400e588:	3251883a 	add	r8,r6,r9
 400e58c:	1021883a 	mov	r16,r2
 400e590:	003f0806 	br	400e1b4 <__alt_data_end+0xfc00e1b4>
 400e594:	1000301e 	bne	r2,zero,400e658 <__adddf3+0x720>
 400e598:	4984b03a 	or	r2,r9,r6
 400e59c:	10007126 	beq	r2,zero,400e764 <__adddf3+0x82c>
 400e5a0:	4811883a 	mov	r8,r9
 400e5a4:	3023883a 	mov	r17,r6
 400e5a8:	3825883a 	mov	r18,r7
 400e5ac:	0401ffc4 	movi	r16,2047
 400e5b0:	003e8006 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e5b4:	4462b03a 	or	r17,r8,r17
 400e5b8:	8822c03a 	cmpne	r17,r17,zero
 400e5bc:	0007883a 	mov	r3,zero
 400e5c0:	003f8b06 	br	400e3f0 <__alt_data_end+0xfc00e3f0>
 400e5c4:	0141ffc4 	movi	r5,2047
 400e5c8:	11403b26 	beq	r2,r5,400e6b8 <__adddf3+0x780>
 400e5cc:	0109c83a 	sub	r4,zero,r4
 400e5d0:	42002034 	orhi	r8,r8,128
 400e5d4:	01400e04 	movi	r5,56
 400e5d8:	29006716 	blt	r5,r4,400e778 <__adddf3+0x840>
 400e5dc:	014007c4 	movi	r5,31
 400e5e0:	29007016 	blt	r5,r4,400e7a4 <__adddf3+0x86c>
 400e5e4:	01400804 	movi	r5,32
 400e5e8:	290bc83a 	sub	r5,r5,r4
 400e5ec:	4154983a 	sll	r10,r8,r5
 400e5f0:	890ed83a 	srl	r7,r17,r4
 400e5f4:	894a983a 	sll	r5,r17,r5
 400e5f8:	4108d83a 	srl	r4,r8,r4
 400e5fc:	51e2b03a 	or	r17,r10,r7
 400e600:	280ac03a 	cmpne	r5,r5,zero
 400e604:	8962b03a 	or	r17,r17,r5
 400e608:	89a3883a 	add	r17,r17,r6
 400e60c:	2253883a 	add	r9,r4,r9
 400e610:	898d803a 	cmpltu	r6,r17,r6
 400e614:	3251883a 	add	r8,r6,r9
 400e618:	1021883a 	mov	r16,r2
 400e61c:	003ee506 	br	400e1b4 <__alt_data_end+0xfc00e1b4>
 400e620:	4984b03a 	or	r2,r9,r6
 400e624:	103e6326 	beq	r2,zero,400dfb4 <__alt_data_end+0xfc00dfb4>
 400e628:	8987c83a 	sub	r3,r17,r6
 400e62c:	88c9803a 	cmpltu	r4,r17,r3
 400e630:	4245c83a 	sub	r2,r8,r9
 400e634:	1105c83a 	sub	r2,r2,r4
 400e638:	1100202c 	andhi	r4,r2,128
 400e63c:	203ebb26 	beq	r4,zero,400e12c <__alt_data_end+0xfc00e12c>
 400e640:	3463c83a 	sub	r17,r6,r17
 400e644:	4a07c83a 	sub	r3,r9,r8
 400e648:	344d803a 	cmpltu	r6,r6,r17
 400e64c:	1991c83a 	sub	r8,r3,r6
 400e650:	3825883a 	mov	r18,r7
 400e654:	003e5706 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e658:	4984b03a 	or	r2,r9,r6
 400e65c:	10002e26 	beq	r2,zero,400e718 <__adddf3+0x7e0>
 400e660:	4004d0fa 	srli	r2,r8,3
 400e664:	8822d0fa 	srli	r17,r17,3
 400e668:	4010977a 	slli	r8,r8,29
 400e66c:	10c0022c 	andhi	r3,r2,8
 400e670:	4462b03a 	or	r17,r8,r17
 400e674:	18000826 	beq	r3,zero,400e698 <__adddf3+0x760>
 400e678:	4808d0fa 	srli	r4,r9,3
 400e67c:	20c0022c 	andhi	r3,r4,8
 400e680:	1800051e 	bne	r3,zero,400e698 <__adddf3+0x760>
 400e684:	300cd0fa 	srli	r6,r6,3
 400e688:	4806977a 	slli	r3,r9,29
 400e68c:	2005883a 	mov	r2,r4
 400e690:	3825883a 	mov	r18,r7
 400e694:	19a2b03a 	or	r17,r3,r6
 400e698:	8810d77a 	srli	r8,r17,29
 400e69c:	100490fa 	slli	r2,r2,3
 400e6a0:	882290fa 	slli	r17,r17,3
 400e6a4:	0401ffc4 	movi	r16,2047
 400e6a8:	4090b03a 	or	r8,r8,r2
 400e6ac:	003e4106 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e6b0:	0141ffc4 	movi	r5,2047
 400e6b4:	117fc71e 	bne	r2,r5,400e5d4 <__alt_data_end+0xfc00e5d4>
 400e6b8:	4811883a 	mov	r8,r9
 400e6bc:	3023883a 	mov	r17,r6
 400e6c0:	1021883a 	mov	r16,r2
 400e6c4:	003e3b06 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e6c8:	10002f26 	beq	r2,zero,400e788 <__adddf3+0x850>
 400e6cc:	4984b03a 	or	r2,r9,r6
 400e6d0:	10001126 	beq	r2,zero,400e718 <__adddf3+0x7e0>
 400e6d4:	4004d0fa 	srli	r2,r8,3
 400e6d8:	8822d0fa 	srli	r17,r17,3
 400e6dc:	4010977a 	slli	r8,r8,29
 400e6e0:	10c0022c 	andhi	r3,r2,8
 400e6e4:	4462b03a 	or	r17,r8,r17
 400e6e8:	183feb26 	beq	r3,zero,400e698 <__alt_data_end+0xfc00e698>
 400e6ec:	4808d0fa 	srli	r4,r9,3
 400e6f0:	20c0022c 	andhi	r3,r4,8
 400e6f4:	183fe81e 	bne	r3,zero,400e698 <__alt_data_end+0xfc00e698>
 400e6f8:	300cd0fa 	srli	r6,r6,3
 400e6fc:	4806977a 	slli	r3,r9,29
 400e700:	2005883a 	mov	r2,r4
 400e704:	19a2b03a 	or	r17,r3,r6
 400e708:	003fe306 	br	400e698 <__alt_data_end+0xfc00e698>
 400e70c:	0011883a 	mov	r8,zero
 400e710:	0005883a 	mov	r2,zero
 400e714:	003e3f06 	br	400e014 <__alt_data_end+0xfc00e014>
 400e718:	0401ffc4 	movi	r16,2047
 400e71c:	003e2506 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e720:	0013883a 	mov	r9,zero
 400e724:	003f8406 	br	400e538 <__alt_data_end+0xfc00e538>
 400e728:	0005883a 	mov	r2,zero
 400e72c:	0007883a 	mov	r3,zero
 400e730:	003e8906 	br	400e158 <__alt_data_end+0xfc00e158>
 400e734:	197ff804 	addi	r5,r3,-32
 400e738:	01000804 	movi	r4,32
 400e73c:	414ad83a 	srl	r5,r8,r5
 400e740:	19002426 	beq	r3,r4,400e7d4 <__adddf3+0x89c>
 400e744:	01001004 	movi	r4,64
 400e748:	20c7c83a 	sub	r3,r4,r3
 400e74c:	40c6983a 	sll	r3,r8,r3
 400e750:	1c46b03a 	or	r3,r3,r17
 400e754:	1806c03a 	cmpne	r3,r3,zero
 400e758:	28e2b03a 	or	r17,r5,r3
 400e75c:	0007883a 	mov	r3,zero
 400e760:	003f2306 	br	400e3f0 <__alt_data_end+0xfc00e3f0>
 400e764:	0007883a 	mov	r3,zero
 400e768:	5811883a 	mov	r8,r11
 400e76c:	00bfffc4 	movi	r2,-1
 400e770:	0401ffc4 	movi	r16,2047
 400e774:	003e7806 	br	400e158 <__alt_data_end+0xfc00e158>
 400e778:	4462b03a 	or	r17,r8,r17
 400e77c:	8822c03a 	cmpne	r17,r17,zero
 400e780:	0009883a 	mov	r4,zero
 400e784:	003fa006 	br	400e608 <__alt_data_end+0xfc00e608>
 400e788:	4811883a 	mov	r8,r9
 400e78c:	3023883a 	mov	r17,r6
 400e790:	0401ffc4 	movi	r16,2047
 400e794:	003e0706 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e798:	4811883a 	mov	r8,r9
 400e79c:	3023883a 	mov	r17,r6
 400e7a0:	003e0406 	br	400dfb4 <__alt_data_end+0xfc00dfb4>
 400e7a4:	21fff804 	addi	r7,r4,-32
 400e7a8:	01400804 	movi	r5,32
 400e7ac:	41ced83a 	srl	r7,r8,r7
 400e7b0:	21400a26 	beq	r4,r5,400e7dc <__adddf3+0x8a4>
 400e7b4:	01401004 	movi	r5,64
 400e7b8:	2909c83a 	sub	r4,r5,r4
 400e7bc:	4108983a 	sll	r4,r8,r4
 400e7c0:	2448b03a 	or	r4,r4,r17
 400e7c4:	2008c03a 	cmpne	r4,r4,zero
 400e7c8:	3922b03a 	or	r17,r7,r4
 400e7cc:	0009883a 	mov	r4,zero
 400e7d0:	003f8d06 	br	400e608 <__alt_data_end+0xfc00e608>
 400e7d4:	0007883a 	mov	r3,zero
 400e7d8:	003fdd06 	br	400e750 <__alt_data_end+0xfc00e750>
 400e7dc:	0009883a 	mov	r4,zero
 400e7e0:	003ff706 	br	400e7c0 <__alt_data_end+0xfc00e7c0>

0400e7e4 <__divdf3>:
 400e7e4:	defff204 	addi	sp,sp,-56
 400e7e8:	dd400915 	stw	r21,36(sp)
 400e7ec:	282ad53a 	srli	r21,r5,20
 400e7f0:	dd000815 	stw	r20,32(sp)
 400e7f4:	2828d7fa 	srli	r20,r5,31
 400e7f8:	dc000415 	stw	r16,16(sp)
 400e7fc:	04000434 	movhi	r16,16
 400e800:	df000c15 	stw	fp,48(sp)
 400e804:	843fffc4 	addi	r16,r16,-1
 400e808:	dfc00d15 	stw	ra,52(sp)
 400e80c:	ddc00b15 	stw	r23,44(sp)
 400e810:	dd800a15 	stw	r22,40(sp)
 400e814:	dcc00715 	stw	r19,28(sp)
 400e818:	dc800615 	stw	r18,24(sp)
 400e81c:	dc400515 	stw	r17,20(sp)
 400e820:	ad41ffcc 	andi	r21,r21,2047
 400e824:	2c20703a 	and	r16,r5,r16
 400e828:	a7003fcc 	andi	fp,r20,255
 400e82c:	a8006126 	beq	r21,zero,400e9b4 <__divdf3+0x1d0>
 400e830:	0081ffc4 	movi	r2,2047
 400e834:	2025883a 	mov	r18,r4
 400e838:	a8803726 	beq	r21,r2,400e918 <__divdf3+0x134>
 400e83c:	80800434 	orhi	r2,r16,16
 400e840:	100490fa 	slli	r2,r2,3
 400e844:	2020d77a 	srli	r16,r4,29
 400e848:	202490fa 	slli	r18,r4,3
 400e84c:	ad7f0044 	addi	r21,r21,-1023
 400e850:	80a0b03a 	or	r16,r16,r2
 400e854:	0027883a 	mov	r19,zero
 400e858:	0013883a 	mov	r9,zero
 400e85c:	3804d53a 	srli	r2,r7,20
 400e860:	382cd7fa 	srli	r22,r7,31
 400e864:	04400434 	movhi	r17,16
 400e868:	8c7fffc4 	addi	r17,r17,-1
 400e86c:	1081ffcc 	andi	r2,r2,2047
 400e870:	3011883a 	mov	r8,r6
 400e874:	3c62703a 	and	r17,r7,r17
 400e878:	b5c03fcc 	andi	r23,r22,255
 400e87c:	10006c26 	beq	r2,zero,400ea30 <__divdf3+0x24c>
 400e880:	00c1ffc4 	movi	r3,2047
 400e884:	10c06426 	beq	r2,r3,400ea18 <__divdf3+0x234>
 400e888:	88c00434 	orhi	r3,r17,16
 400e88c:	180690fa 	slli	r3,r3,3
 400e890:	3022d77a 	srli	r17,r6,29
 400e894:	301090fa 	slli	r8,r6,3
 400e898:	10bf0044 	addi	r2,r2,-1023
 400e89c:	88e2b03a 	or	r17,r17,r3
 400e8a0:	000f883a 	mov	r7,zero
 400e8a4:	a58cf03a 	xor	r6,r20,r22
 400e8a8:	3cc8b03a 	or	r4,r7,r19
 400e8ac:	a8abc83a 	sub	r21,r21,r2
 400e8b0:	008003c4 	movi	r2,15
 400e8b4:	3007883a 	mov	r3,r6
 400e8b8:	34c03fcc 	andi	r19,r6,255
 400e8bc:	11009036 	bltu	r2,r4,400eb00 <__divdf3+0x31c>
 400e8c0:	200890ba 	slli	r4,r4,2
 400e8c4:	00810074 	movhi	r2,1025
 400e8c8:	10ba3604 	addi	r2,r2,-5928
 400e8cc:	2089883a 	add	r4,r4,r2
 400e8d0:	20800017 	ldw	r2,0(r4)
 400e8d4:	1000683a 	jmp	r2
 400e8d8:	0400eb00 	call	400eb0 <__reset-0x3bff150>
 400e8dc:	0400e950 	cmplti	r16,zero,933
 400e8e0:	0400eaf0 	cmpltui	r16,zero,939
 400e8e4:	0400e944 	movi	r16,933
 400e8e8:	0400eaf0 	cmpltui	r16,zero,939
 400e8ec:	0400eac4 	movi	r16,939
 400e8f0:	0400eaf0 	cmpltui	r16,zero,939
 400e8f4:	0400e944 	movi	r16,933
 400e8f8:	0400e950 	cmplti	r16,zero,933
 400e8fc:	0400e950 	cmplti	r16,zero,933
 400e900:	0400eac4 	movi	r16,939
 400e904:	0400e944 	movi	r16,933
 400e908:	0400e934 	movhi	r16,932
 400e90c:	0400e934 	movhi	r16,932
 400e910:	0400e934 	movhi	r16,932
 400e914:	0400ede4 	muli	r16,zero,951
 400e918:	2404b03a 	or	r2,r4,r16
 400e91c:	1000661e 	bne	r2,zero,400eab8 <__divdf3+0x2d4>
 400e920:	04c00204 	movi	r19,8
 400e924:	0021883a 	mov	r16,zero
 400e928:	0025883a 	mov	r18,zero
 400e92c:	02400084 	movi	r9,2
 400e930:	003fca06 	br	400e85c <__alt_data_end+0xfc00e85c>
 400e934:	8023883a 	mov	r17,r16
 400e938:	9011883a 	mov	r8,r18
 400e93c:	e02f883a 	mov	r23,fp
 400e940:	480f883a 	mov	r7,r9
 400e944:	00800084 	movi	r2,2
 400e948:	3881311e 	bne	r7,r2,400ee10 <__divdf3+0x62c>
 400e94c:	b827883a 	mov	r19,r23
 400e950:	98c0004c 	andi	r3,r19,1
 400e954:	0081ffc4 	movi	r2,2047
 400e958:	000b883a 	mov	r5,zero
 400e95c:	0025883a 	mov	r18,zero
 400e960:	1004953a 	slli	r2,r2,20
 400e964:	18c03fcc 	andi	r3,r3,255
 400e968:	04400434 	movhi	r17,16
 400e96c:	8c7fffc4 	addi	r17,r17,-1
 400e970:	180697fa 	slli	r3,r3,31
 400e974:	2c4a703a 	and	r5,r5,r17
 400e978:	288ab03a 	or	r5,r5,r2
 400e97c:	28c6b03a 	or	r3,r5,r3
 400e980:	9005883a 	mov	r2,r18
 400e984:	dfc00d17 	ldw	ra,52(sp)
 400e988:	df000c17 	ldw	fp,48(sp)
 400e98c:	ddc00b17 	ldw	r23,44(sp)
 400e990:	dd800a17 	ldw	r22,40(sp)
 400e994:	dd400917 	ldw	r21,36(sp)
 400e998:	dd000817 	ldw	r20,32(sp)
 400e99c:	dcc00717 	ldw	r19,28(sp)
 400e9a0:	dc800617 	ldw	r18,24(sp)
 400e9a4:	dc400517 	ldw	r17,20(sp)
 400e9a8:	dc000417 	ldw	r16,16(sp)
 400e9ac:	dec00e04 	addi	sp,sp,56
 400e9b0:	f800283a 	ret
 400e9b4:	2404b03a 	or	r2,r4,r16
 400e9b8:	2027883a 	mov	r19,r4
 400e9bc:	10003926 	beq	r2,zero,400eaa4 <__divdf3+0x2c0>
 400e9c0:	80012e26 	beq	r16,zero,400ee7c <__divdf3+0x698>
 400e9c4:	8009883a 	mov	r4,r16
 400e9c8:	d9800315 	stw	r6,12(sp)
 400e9cc:	d9c00215 	stw	r7,8(sp)
 400e9d0:	4003da80 	call	4003da8 <__clzsi2>
 400e9d4:	d9800317 	ldw	r6,12(sp)
 400e9d8:	d9c00217 	ldw	r7,8(sp)
 400e9dc:	113ffd44 	addi	r4,r2,-11
 400e9e0:	00c00704 	movi	r3,28
 400e9e4:	19012116 	blt	r3,r4,400ee6c <__divdf3+0x688>
 400e9e8:	00c00744 	movi	r3,29
 400e9ec:	147ffe04 	addi	r17,r2,-8
 400e9f0:	1907c83a 	sub	r3,r3,r4
 400e9f4:	8460983a 	sll	r16,r16,r17
 400e9f8:	98c6d83a 	srl	r3,r19,r3
 400e9fc:	9c64983a 	sll	r18,r19,r17
 400ea00:	1c20b03a 	or	r16,r3,r16
 400ea04:	1080fcc4 	addi	r2,r2,1011
 400ea08:	00abc83a 	sub	r21,zero,r2
 400ea0c:	0027883a 	mov	r19,zero
 400ea10:	0013883a 	mov	r9,zero
 400ea14:	003f9106 	br	400e85c <__alt_data_end+0xfc00e85c>
 400ea18:	3446b03a 	or	r3,r6,r17
 400ea1c:	18001f1e 	bne	r3,zero,400ea9c <__divdf3+0x2b8>
 400ea20:	0023883a 	mov	r17,zero
 400ea24:	0011883a 	mov	r8,zero
 400ea28:	01c00084 	movi	r7,2
 400ea2c:	003f9d06 	br	400e8a4 <__alt_data_end+0xfc00e8a4>
 400ea30:	3446b03a 	or	r3,r6,r17
 400ea34:	18001526 	beq	r3,zero,400ea8c <__divdf3+0x2a8>
 400ea38:	88011b26 	beq	r17,zero,400eea8 <__divdf3+0x6c4>
 400ea3c:	8809883a 	mov	r4,r17
 400ea40:	d9800315 	stw	r6,12(sp)
 400ea44:	da400115 	stw	r9,4(sp)
 400ea48:	4003da80 	call	4003da8 <__clzsi2>
 400ea4c:	d9800317 	ldw	r6,12(sp)
 400ea50:	da400117 	ldw	r9,4(sp)
 400ea54:	113ffd44 	addi	r4,r2,-11
 400ea58:	00c00704 	movi	r3,28
 400ea5c:	19010e16 	blt	r3,r4,400ee98 <__divdf3+0x6b4>
 400ea60:	00c00744 	movi	r3,29
 400ea64:	123ffe04 	addi	r8,r2,-8
 400ea68:	1907c83a 	sub	r3,r3,r4
 400ea6c:	8a22983a 	sll	r17,r17,r8
 400ea70:	30c6d83a 	srl	r3,r6,r3
 400ea74:	3210983a 	sll	r8,r6,r8
 400ea78:	1c62b03a 	or	r17,r3,r17
 400ea7c:	1080fcc4 	addi	r2,r2,1011
 400ea80:	0085c83a 	sub	r2,zero,r2
 400ea84:	000f883a 	mov	r7,zero
 400ea88:	003f8606 	br	400e8a4 <__alt_data_end+0xfc00e8a4>
 400ea8c:	0023883a 	mov	r17,zero
 400ea90:	0011883a 	mov	r8,zero
 400ea94:	01c00044 	movi	r7,1
 400ea98:	003f8206 	br	400e8a4 <__alt_data_end+0xfc00e8a4>
 400ea9c:	01c000c4 	movi	r7,3
 400eaa0:	003f8006 	br	400e8a4 <__alt_data_end+0xfc00e8a4>
 400eaa4:	04c00104 	movi	r19,4
 400eaa8:	0021883a 	mov	r16,zero
 400eaac:	0025883a 	mov	r18,zero
 400eab0:	02400044 	movi	r9,1
 400eab4:	003f6906 	br	400e85c <__alt_data_end+0xfc00e85c>
 400eab8:	04c00304 	movi	r19,12
 400eabc:	024000c4 	movi	r9,3
 400eac0:	003f6606 	br	400e85c <__alt_data_end+0xfc00e85c>
 400eac4:	01400434 	movhi	r5,16
 400eac8:	0007883a 	mov	r3,zero
 400eacc:	297fffc4 	addi	r5,r5,-1
 400ead0:	04bfffc4 	movi	r18,-1
 400ead4:	0081ffc4 	movi	r2,2047
 400ead8:	003fa106 	br	400e960 <__alt_data_end+0xfc00e960>
 400eadc:	00c00044 	movi	r3,1
 400eae0:	1887c83a 	sub	r3,r3,r2
 400eae4:	01000e04 	movi	r4,56
 400eae8:	20c1210e 	bge	r4,r3,400ef70 <__divdf3+0x78c>
 400eaec:	98c0004c 	andi	r3,r19,1
 400eaf0:	0005883a 	mov	r2,zero
 400eaf4:	000b883a 	mov	r5,zero
 400eaf8:	0025883a 	mov	r18,zero
 400eafc:	003f9806 	br	400e960 <__alt_data_end+0xfc00e960>
 400eb00:	8c00fd36 	bltu	r17,r16,400eef8 <__divdf3+0x714>
 400eb04:	8440fb26 	beq	r16,r17,400eef4 <__divdf3+0x710>
 400eb08:	8007883a 	mov	r3,r16
 400eb0c:	ad7fffc4 	addi	r21,r21,-1
 400eb10:	0021883a 	mov	r16,zero
 400eb14:	4004d63a 	srli	r2,r8,24
 400eb18:	8822923a 	slli	r17,r17,8
 400eb1c:	1809883a 	mov	r4,r3
 400eb20:	402c923a 	slli	r22,r8,8
 400eb24:	88b8b03a 	or	fp,r17,r2
 400eb28:	e028d43a 	srli	r20,fp,16
 400eb2c:	d8c00015 	stw	r3,0(sp)
 400eb30:	e5ffffcc 	andi	r23,fp,65535
 400eb34:	a00b883a 	mov	r5,r20
 400eb38:	40031f00 	call	40031f0 <__udivsi3>
 400eb3c:	d8c00017 	ldw	r3,0(sp)
 400eb40:	a00b883a 	mov	r5,r20
 400eb44:	d8800315 	stw	r2,12(sp)
 400eb48:	1809883a 	mov	r4,r3
 400eb4c:	40032540 	call	4003254 <__umodsi3>
 400eb50:	d9800317 	ldw	r6,12(sp)
 400eb54:	1006943a 	slli	r3,r2,16
 400eb58:	9004d43a 	srli	r2,r18,16
 400eb5c:	b9a3383a 	mul	r17,r23,r6
 400eb60:	10c4b03a 	or	r2,r2,r3
 400eb64:	1440062e 	bgeu	r2,r17,400eb80 <__divdf3+0x39c>
 400eb68:	1705883a 	add	r2,r2,fp
 400eb6c:	30ffffc4 	addi	r3,r6,-1
 400eb70:	1700ee36 	bltu	r2,fp,400ef2c <__divdf3+0x748>
 400eb74:	1440ed2e 	bgeu	r2,r17,400ef2c <__divdf3+0x748>
 400eb78:	31bfff84 	addi	r6,r6,-2
 400eb7c:	1705883a 	add	r2,r2,fp
 400eb80:	1463c83a 	sub	r17,r2,r17
 400eb84:	a00b883a 	mov	r5,r20
 400eb88:	8809883a 	mov	r4,r17
 400eb8c:	d9800315 	stw	r6,12(sp)
 400eb90:	40031f00 	call	40031f0 <__udivsi3>
 400eb94:	a00b883a 	mov	r5,r20
 400eb98:	8809883a 	mov	r4,r17
 400eb9c:	d8800215 	stw	r2,8(sp)
 400eba0:	40032540 	call	4003254 <__umodsi3>
 400eba4:	d9c00217 	ldw	r7,8(sp)
 400eba8:	1004943a 	slli	r2,r2,16
 400ebac:	94bfffcc 	andi	r18,r18,65535
 400ebb0:	b9d1383a 	mul	r8,r23,r7
 400ebb4:	90a4b03a 	or	r18,r18,r2
 400ebb8:	d9800317 	ldw	r6,12(sp)
 400ebbc:	9200062e 	bgeu	r18,r8,400ebd8 <__divdf3+0x3f4>
 400ebc0:	9725883a 	add	r18,r18,fp
 400ebc4:	38bfffc4 	addi	r2,r7,-1
 400ebc8:	9700d636 	bltu	r18,fp,400ef24 <__divdf3+0x740>
 400ebcc:	9200d52e 	bgeu	r18,r8,400ef24 <__divdf3+0x740>
 400ebd0:	39ffff84 	addi	r7,r7,-2
 400ebd4:	9725883a 	add	r18,r18,fp
 400ebd8:	3004943a 	slli	r2,r6,16
 400ebdc:	b012d43a 	srli	r9,r22,16
 400ebe0:	b1bfffcc 	andi	r6,r22,65535
 400ebe4:	11e2b03a 	or	r17,r2,r7
 400ebe8:	8806d43a 	srli	r3,r17,16
 400ebec:	893fffcc 	andi	r4,r17,65535
 400ebf0:	218b383a 	mul	r5,r4,r6
 400ebf4:	30c5383a 	mul	r2,r6,r3
 400ebf8:	2249383a 	mul	r4,r4,r9
 400ebfc:	280ed43a 	srli	r7,r5,16
 400ec00:	9225c83a 	sub	r18,r18,r8
 400ec04:	2089883a 	add	r4,r4,r2
 400ec08:	3909883a 	add	r4,r7,r4
 400ec0c:	1a47383a 	mul	r3,r3,r9
 400ec10:	2080022e 	bgeu	r4,r2,400ec1c <__divdf3+0x438>
 400ec14:	00800074 	movhi	r2,1
 400ec18:	1887883a 	add	r3,r3,r2
 400ec1c:	2004d43a 	srli	r2,r4,16
 400ec20:	2008943a 	slli	r4,r4,16
 400ec24:	297fffcc 	andi	r5,r5,65535
 400ec28:	10c7883a 	add	r3,r2,r3
 400ec2c:	2149883a 	add	r4,r4,r5
 400ec30:	90c0a536 	bltu	r18,r3,400eec8 <__divdf3+0x6e4>
 400ec34:	90c0bf26 	beq	r18,r3,400ef34 <__divdf3+0x750>
 400ec38:	90c7c83a 	sub	r3,r18,r3
 400ec3c:	810fc83a 	sub	r7,r16,r4
 400ec40:	81e5803a 	cmpltu	r18,r16,r7
 400ec44:	1ca5c83a 	sub	r18,r3,r18
 400ec48:	e480c126 	beq	fp,r18,400ef50 <__divdf3+0x76c>
 400ec4c:	a00b883a 	mov	r5,r20
 400ec50:	9009883a 	mov	r4,r18
 400ec54:	d9800315 	stw	r6,12(sp)
 400ec58:	d9c00215 	stw	r7,8(sp)
 400ec5c:	da400115 	stw	r9,4(sp)
 400ec60:	40031f00 	call	40031f0 <__udivsi3>
 400ec64:	a00b883a 	mov	r5,r20
 400ec68:	9009883a 	mov	r4,r18
 400ec6c:	d8800015 	stw	r2,0(sp)
 400ec70:	40032540 	call	4003254 <__umodsi3>
 400ec74:	d9c00217 	ldw	r7,8(sp)
 400ec78:	da000017 	ldw	r8,0(sp)
 400ec7c:	1006943a 	slli	r3,r2,16
 400ec80:	3804d43a 	srli	r2,r7,16
 400ec84:	ba21383a 	mul	r16,r23,r8
 400ec88:	d9800317 	ldw	r6,12(sp)
 400ec8c:	10c4b03a 	or	r2,r2,r3
 400ec90:	da400117 	ldw	r9,4(sp)
 400ec94:	1400062e 	bgeu	r2,r16,400ecb0 <__divdf3+0x4cc>
 400ec98:	1705883a 	add	r2,r2,fp
 400ec9c:	40ffffc4 	addi	r3,r8,-1
 400eca0:	1700ad36 	bltu	r2,fp,400ef58 <__divdf3+0x774>
 400eca4:	1400ac2e 	bgeu	r2,r16,400ef58 <__divdf3+0x774>
 400eca8:	423fff84 	addi	r8,r8,-2
 400ecac:	1705883a 	add	r2,r2,fp
 400ecb0:	1421c83a 	sub	r16,r2,r16
 400ecb4:	a00b883a 	mov	r5,r20
 400ecb8:	8009883a 	mov	r4,r16
 400ecbc:	d9800315 	stw	r6,12(sp)
 400ecc0:	d9c00215 	stw	r7,8(sp)
 400ecc4:	da000015 	stw	r8,0(sp)
 400ecc8:	da400115 	stw	r9,4(sp)
 400eccc:	40031f00 	call	40031f0 <__udivsi3>
 400ecd0:	8009883a 	mov	r4,r16
 400ecd4:	a00b883a 	mov	r5,r20
 400ecd8:	1025883a 	mov	r18,r2
 400ecdc:	40032540 	call	4003254 <__umodsi3>
 400ece0:	d9c00217 	ldw	r7,8(sp)
 400ece4:	1004943a 	slli	r2,r2,16
 400ece8:	bcaf383a 	mul	r23,r23,r18
 400ecec:	393fffcc 	andi	r4,r7,65535
 400ecf0:	2088b03a 	or	r4,r4,r2
 400ecf4:	d9800317 	ldw	r6,12(sp)
 400ecf8:	da000017 	ldw	r8,0(sp)
 400ecfc:	da400117 	ldw	r9,4(sp)
 400ed00:	25c0062e 	bgeu	r4,r23,400ed1c <__divdf3+0x538>
 400ed04:	2709883a 	add	r4,r4,fp
 400ed08:	90bfffc4 	addi	r2,r18,-1
 400ed0c:	27009436 	bltu	r4,fp,400ef60 <__divdf3+0x77c>
 400ed10:	25c0932e 	bgeu	r4,r23,400ef60 <__divdf3+0x77c>
 400ed14:	94bfff84 	addi	r18,r18,-2
 400ed18:	2709883a 	add	r4,r4,fp
 400ed1c:	4004943a 	slli	r2,r8,16
 400ed20:	25efc83a 	sub	r23,r4,r23
 400ed24:	1490b03a 	or	r8,r2,r18
 400ed28:	4008d43a 	srli	r4,r8,16
 400ed2c:	40ffffcc 	andi	r3,r8,65535
 400ed30:	30c5383a 	mul	r2,r6,r3
 400ed34:	1a47383a 	mul	r3,r3,r9
 400ed38:	310d383a 	mul	r6,r6,r4
 400ed3c:	100ad43a 	srli	r5,r2,16
 400ed40:	4913383a 	mul	r9,r9,r4
 400ed44:	1987883a 	add	r3,r3,r6
 400ed48:	28c7883a 	add	r3,r5,r3
 400ed4c:	1980022e 	bgeu	r3,r6,400ed58 <__divdf3+0x574>
 400ed50:	01000074 	movhi	r4,1
 400ed54:	4913883a 	add	r9,r9,r4
 400ed58:	1808d43a 	srli	r4,r3,16
 400ed5c:	1806943a 	slli	r3,r3,16
 400ed60:	10bfffcc 	andi	r2,r2,65535
 400ed64:	2253883a 	add	r9,r4,r9
 400ed68:	1887883a 	add	r3,r3,r2
 400ed6c:	ba403836 	bltu	r23,r9,400ee50 <__divdf3+0x66c>
 400ed70:	ba403626 	beq	r23,r9,400ee4c <__divdf3+0x668>
 400ed74:	42000054 	ori	r8,r8,1
 400ed78:	a880ffc4 	addi	r2,r21,1023
 400ed7c:	00bf570e 	bge	zero,r2,400eadc <__alt_data_end+0xfc00eadc>
 400ed80:	40c001cc 	andi	r3,r8,7
 400ed84:	18000726 	beq	r3,zero,400eda4 <__divdf3+0x5c0>
 400ed88:	40c003cc 	andi	r3,r8,15
 400ed8c:	01000104 	movi	r4,4
 400ed90:	19000426 	beq	r3,r4,400eda4 <__divdf3+0x5c0>
 400ed94:	4107883a 	add	r3,r8,r4
 400ed98:	1a11803a 	cmpltu	r8,r3,r8
 400ed9c:	8a23883a 	add	r17,r17,r8
 400eda0:	1811883a 	mov	r8,r3
 400eda4:	88c0402c 	andhi	r3,r17,256
 400eda8:	18000426 	beq	r3,zero,400edbc <__divdf3+0x5d8>
 400edac:	00ffc034 	movhi	r3,65280
 400edb0:	18ffffc4 	addi	r3,r3,-1
 400edb4:	a8810004 	addi	r2,r21,1024
 400edb8:	88e2703a 	and	r17,r17,r3
 400edbc:	00c1ff84 	movi	r3,2046
 400edc0:	18bee316 	blt	r3,r2,400e950 <__alt_data_end+0xfc00e950>
 400edc4:	8824977a 	slli	r18,r17,29
 400edc8:	4010d0fa 	srli	r8,r8,3
 400edcc:	8822927a 	slli	r17,r17,9
 400edd0:	1081ffcc 	andi	r2,r2,2047
 400edd4:	9224b03a 	or	r18,r18,r8
 400edd8:	880ad33a 	srli	r5,r17,12
 400eddc:	98c0004c 	andi	r3,r19,1
 400ede0:	003edf06 	br	400e960 <__alt_data_end+0xfc00e960>
 400ede4:	8080022c 	andhi	r2,r16,8
 400ede8:	10001226 	beq	r2,zero,400ee34 <__divdf3+0x650>
 400edec:	8880022c 	andhi	r2,r17,8
 400edf0:	1000101e 	bne	r2,zero,400ee34 <__divdf3+0x650>
 400edf4:	00800434 	movhi	r2,16
 400edf8:	89400234 	orhi	r5,r17,8
 400edfc:	10bfffc4 	addi	r2,r2,-1
 400ee00:	b007883a 	mov	r3,r22
 400ee04:	288a703a 	and	r5,r5,r2
 400ee08:	4025883a 	mov	r18,r8
 400ee0c:	003f3106 	br	400ead4 <__alt_data_end+0xfc00ead4>
 400ee10:	008000c4 	movi	r2,3
 400ee14:	3880a626 	beq	r7,r2,400f0b0 <__divdf3+0x8cc>
 400ee18:	00800044 	movi	r2,1
 400ee1c:	3880521e 	bne	r7,r2,400ef68 <__divdf3+0x784>
 400ee20:	b807883a 	mov	r3,r23
 400ee24:	0005883a 	mov	r2,zero
 400ee28:	000b883a 	mov	r5,zero
 400ee2c:	0025883a 	mov	r18,zero
 400ee30:	003ecb06 	br	400e960 <__alt_data_end+0xfc00e960>
 400ee34:	00800434 	movhi	r2,16
 400ee38:	81400234 	orhi	r5,r16,8
 400ee3c:	10bfffc4 	addi	r2,r2,-1
 400ee40:	a007883a 	mov	r3,r20
 400ee44:	288a703a 	and	r5,r5,r2
 400ee48:	003f2206 	br	400ead4 <__alt_data_end+0xfc00ead4>
 400ee4c:	183fca26 	beq	r3,zero,400ed78 <__alt_data_end+0xfc00ed78>
 400ee50:	e5ef883a 	add	r23,fp,r23
 400ee54:	40bfffc4 	addi	r2,r8,-1
 400ee58:	bf00392e 	bgeu	r23,fp,400ef40 <__divdf3+0x75c>
 400ee5c:	1011883a 	mov	r8,r2
 400ee60:	ba7fc41e 	bne	r23,r9,400ed74 <__alt_data_end+0xfc00ed74>
 400ee64:	b0ffc31e 	bne	r22,r3,400ed74 <__alt_data_end+0xfc00ed74>
 400ee68:	003fc306 	br	400ed78 <__alt_data_end+0xfc00ed78>
 400ee6c:	143ff604 	addi	r16,r2,-40
 400ee70:	9c20983a 	sll	r16,r19,r16
 400ee74:	0025883a 	mov	r18,zero
 400ee78:	003ee206 	br	400ea04 <__alt_data_end+0xfc00ea04>
 400ee7c:	d9800315 	stw	r6,12(sp)
 400ee80:	d9c00215 	stw	r7,8(sp)
 400ee84:	4003da80 	call	4003da8 <__clzsi2>
 400ee88:	10800804 	addi	r2,r2,32
 400ee8c:	d9c00217 	ldw	r7,8(sp)
 400ee90:	d9800317 	ldw	r6,12(sp)
 400ee94:	003ed106 	br	400e9dc <__alt_data_end+0xfc00e9dc>
 400ee98:	147ff604 	addi	r17,r2,-40
 400ee9c:	3462983a 	sll	r17,r6,r17
 400eea0:	0011883a 	mov	r8,zero
 400eea4:	003ef506 	br	400ea7c <__alt_data_end+0xfc00ea7c>
 400eea8:	3009883a 	mov	r4,r6
 400eeac:	d9800315 	stw	r6,12(sp)
 400eeb0:	da400115 	stw	r9,4(sp)
 400eeb4:	4003da80 	call	4003da8 <__clzsi2>
 400eeb8:	10800804 	addi	r2,r2,32
 400eebc:	da400117 	ldw	r9,4(sp)
 400eec0:	d9800317 	ldw	r6,12(sp)
 400eec4:	003ee306 	br	400ea54 <__alt_data_end+0xfc00ea54>
 400eec8:	85a1883a 	add	r16,r16,r22
 400eecc:	8585803a 	cmpltu	r2,r16,r22
 400eed0:	1705883a 	add	r2,r2,fp
 400eed4:	14a5883a 	add	r18,r2,r18
 400eed8:	88bfffc4 	addi	r2,r17,-1
 400eedc:	e4800c2e 	bgeu	fp,r18,400ef10 <__divdf3+0x72c>
 400eee0:	90c03e36 	bltu	r18,r3,400efdc <__divdf3+0x7f8>
 400eee4:	1c806926 	beq	r3,r18,400f08c <__divdf3+0x8a8>
 400eee8:	90c7c83a 	sub	r3,r18,r3
 400eeec:	1023883a 	mov	r17,r2
 400eef0:	003f5206 	br	400ec3c <__alt_data_end+0xfc00ec3c>
 400eef4:	923f0436 	bltu	r18,r8,400eb08 <__alt_data_end+0xfc00eb08>
 400eef8:	800897fa 	slli	r4,r16,31
 400eefc:	9004d07a 	srli	r2,r18,1
 400ef00:	8006d07a 	srli	r3,r16,1
 400ef04:	902097fa 	slli	r16,r18,31
 400ef08:	20a4b03a 	or	r18,r4,r2
 400ef0c:	003f0106 	br	400eb14 <__alt_data_end+0xfc00eb14>
 400ef10:	e4bff51e 	bne	fp,r18,400eee8 <__alt_data_end+0xfc00eee8>
 400ef14:	85bff22e 	bgeu	r16,r22,400eee0 <__alt_data_end+0xfc00eee0>
 400ef18:	e0c7c83a 	sub	r3,fp,r3
 400ef1c:	1023883a 	mov	r17,r2
 400ef20:	003f4606 	br	400ec3c <__alt_data_end+0xfc00ec3c>
 400ef24:	100f883a 	mov	r7,r2
 400ef28:	003f2b06 	br	400ebd8 <__alt_data_end+0xfc00ebd8>
 400ef2c:	180d883a 	mov	r6,r3
 400ef30:	003f1306 	br	400eb80 <__alt_data_end+0xfc00eb80>
 400ef34:	813fe436 	bltu	r16,r4,400eec8 <__alt_data_end+0xfc00eec8>
 400ef38:	0007883a 	mov	r3,zero
 400ef3c:	003f3f06 	br	400ec3c <__alt_data_end+0xfc00ec3c>
 400ef40:	ba402c36 	bltu	r23,r9,400eff4 <__divdf3+0x810>
 400ef44:	4dc05426 	beq	r9,r23,400f098 <__divdf3+0x8b4>
 400ef48:	1011883a 	mov	r8,r2
 400ef4c:	003f8906 	br	400ed74 <__alt_data_end+0xfc00ed74>
 400ef50:	023fffc4 	movi	r8,-1
 400ef54:	003f8806 	br	400ed78 <__alt_data_end+0xfc00ed78>
 400ef58:	1811883a 	mov	r8,r3
 400ef5c:	003f5406 	br	400ecb0 <__alt_data_end+0xfc00ecb0>
 400ef60:	1025883a 	mov	r18,r2
 400ef64:	003f6d06 	br	400ed1c <__alt_data_end+0xfc00ed1c>
 400ef68:	b827883a 	mov	r19,r23
 400ef6c:	003f8206 	br	400ed78 <__alt_data_end+0xfc00ed78>
 400ef70:	010007c4 	movi	r4,31
 400ef74:	20c02616 	blt	r4,r3,400f010 <__divdf3+0x82c>
 400ef78:	00800804 	movi	r2,32
 400ef7c:	10c5c83a 	sub	r2,r2,r3
 400ef80:	888a983a 	sll	r5,r17,r2
 400ef84:	40c8d83a 	srl	r4,r8,r3
 400ef88:	4084983a 	sll	r2,r8,r2
 400ef8c:	88e2d83a 	srl	r17,r17,r3
 400ef90:	2906b03a 	or	r3,r5,r4
 400ef94:	1004c03a 	cmpne	r2,r2,zero
 400ef98:	1886b03a 	or	r3,r3,r2
 400ef9c:	188001cc 	andi	r2,r3,7
 400efa0:	10000726 	beq	r2,zero,400efc0 <__divdf3+0x7dc>
 400efa4:	188003cc 	andi	r2,r3,15
 400efa8:	01000104 	movi	r4,4
 400efac:	11000426 	beq	r2,r4,400efc0 <__divdf3+0x7dc>
 400efb0:	1805883a 	mov	r2,r3
 400efb4:	10c00104 	addi	r3,r2,4
 400efb8:	1885803a 	cmpltu	r2,r3,r2
 400efbc:	88a3883a 	add	r17,r17,r2
 400efc0:	8880202c 	andhi	r2,r17,128
 400efc4:	10002726 	beq	r2,zero,400f064 <__divdf3+0x880>
 400efc8:	98c0004c 	andi	r3,r19,1
 400efcc:	00800044 	movi	r2,1
 400efd0:	000b883a 	mov	r5,zero
 400efd4:	0025883a 	mov	r18,zero
 400efd8:	003e6106 	br	400e960 <__alt_data_end+0xfc00e960>
 400efdc:	85a1883a 	add	r16,r16,r22
 400efe0:	8585803a 	cmpltu	r2,r16,r22
 400efe4:	1705883a 	add	r2,r2,fp
 400efe8:	14a5883a 	add	r18,r2,r18
 400efec:	8c7fff84 	addi	r17,r17,-2
 400eff0:	003f1106 	br	400ec38 <__alt_data_end+0xfc00ec38>
 400eff4:	b589883a 	add	r4,r22,r22
 400eff8:	25ad803a 	cmpltu	r22,r4,r22
 400effc:	b739883a 	add	fp,r22,fp
 400f000:	40bfff84 	addi	r2,r8,-2
 400f004:	bf2f883a 	add	r23,r23,fp
 400f008:	202d883a 	mov	r22,r4
 400f00c:	003f9306 	br	400ee5c <__alt_data_end+0xfc00ee5c>
 400f010:	013ff844 	movi	r4,-31
 400f014:	2085c83a 	sub	r2,r4,r2
 400f018:	8888d83a 	srl	r4,r17,r2
 400f01c:	00800804 	movi	r2,32
 400f020:	18802126 	beq	r3,r2,400f0a8 <__divdf3+0x8c4>
 400f024:	00801004 	movi	r2,64
 400f028:	10c5c83a 	sub	r2,r2,r3
 400f02c:	8884983a 	sll	r2,r17,r2
 400f030:	1204b03a 	or	r2,r2,r8
 400f034:	1004c03a 	cmpne	r2,r2,zero
 400f038:	2084b03a 	or	r2,r4,r2
 400f03c:	144001cc 	andi	r17,r2,7
 400f040:	88000d1e 	bne	r17,zero,400f078 <__divdf3+0x894>
 400f044:	000b883a 	mov	r5,zero
 400f048:	1024d0fa 	srli	r18,r2,3
 400f04c:	98c0004c 	andi	r3,r19,1
 400f050:	0005883a 	mov	r2,zero
 400f054:	9464b03a 	or	r18,r18,r17
 400f058:	003e4106 	br	400e960 <__alt_data_end+0xfc00e960>
 400f05c:	1007883a 	mov	r3,r2
 400f060:	0023883a 	mov	r17,zero
 400f064:	880a927a 	slli	r5,r17,9
 400f068:	1805883a 	mov	r2,r3
 400f06c:	8822977a 	slli	r17,r17,29
 400f070:	280ad33a 	srli	r5,r5,12
 400f074:	003ff406 	br	400f048 <__alt_data_end+0xfc00f048>
 400f078:	10c003cc 	andi	r3,r2,15
 400f07c:	01000104 	movi	r4,4
 400f080:	193ff626 	beq	r3,r4,400f05c <__alt_data_end+0xfc00f05c>
 400f084:	0023883a 	mov	r17,zero
 400f088:	003fca06 	br	400efb4 <__alt_data_end+0xfc00efb4>
 400f08c:	813fd336 	bltu	r16,r4,400efdc <__alt_data_end+0xfc00efdc>
 400f090:	1023883a 	mov	r17,r2
 400f094:	003fa806 	br	400ef38 <__alt_data_end+0xfc00ef38>
 400f098:	b0ffd636 	bltu	r22,r3,400eff4 <__alt_data_end+0xfc00eff4>
 400f09c:	1011883a 	mov	r8,r2
 400f0a0:	b0ff341e 	bne	r22,r3,400ed74 <__alt_data_end+0xfc00ed74>
 400f0a4:	003f3406 	br	400ed78 <__alt_data_end+0xfc00ed78>
 400f0a8:	0005883a 	mov	r2,zero
 400f0ac:	003fe006 	br	400f030 <__alt_data_end+0xfc00f030>
 400f0b0:	00800434 	movhi	r2,16
 400f0b4:	89400234 	orhi	r5,r17,8
 400f0b8:	10bfffc4 	addi	r2,r2,-1
 400f0bc:	b807883a 	mov	r3,r23
 400f0c0:	288a703a 	and	r5,r5,r2
 400f0c4:	4025883a 	mov	r18,r8
 400f0c8:	003e8206 	br	400ead4 <__alt_data_end+0xfc00ead4>

0400f0cc <__eqdf2>:
 400f0cc:	2804d53a 	srli	r2,r5,20
 400f0d0:	3806d53a 	srli	r3,r7,20
 400f0d4:	02000434 	movhi	r8,16
 400f0d8:	423fffc4 	addi	r8,r8,-1
 400f0dc:	1081ffcc 	andi	r2,r2,2047
 400f0e0:	0281ffc4 	movi	r10,2047
 400f0e4:	2a12703a 	and	r9,r5,r8
 400f0e8:	18c1ffcc 	andi	r3,r3,2047
 400f0ec:	3a10703a 	and	r8,r7,r8
 400f0f0:	280ad7fa 	srli	r5,r5,31
 400f0f4:	380ed7fa 	srli	r7,r7,31
 400f0f8:	12801026 	beq	r2,r10,400f13c <__eqdf2+0x70>
 400f0fc:	0281ffc4 	movi	r10,2047
 400f100:	1a800a26 	beq	r3,r10,400f12c <__eqdf2+0x60>
 400f104:	10c00226 	beq	r2,r3,400f110 <__eqdf2+0x44>
 400f108:	00800044 	movi	r2,1
 400f10c:	f800283a 	ret
 400f110:	4a3ffd1e 	bne	r9,r8,400f108 <__alt_data_end+0xfc00f108>
 400f114:	21bffc1e 	bne	r4,r6,400f108 <__alt_data_end+0xfc00f108>
 400f118:	29c00c26 	beq	r5,r7,400f14c <__eqdf2+0x80>
 400f11c:	103ffa1e 	bne	r2,zero,400f108 <__alt_data_end+0xfc00f108>
 400f120:	2244b03a 	or	r2,r4,r9
 400f124:	1004c03a 	cmpne	r2,r2,zero
 400f128:	f800283a 	ret
 400f12c:	3214b03a 	or	r10,r6,r8
 400f130:	503ff426 	beq	r10,zero,400f104 <__alt_data_end+0xfc00f104>
 400f134:	00800044 	movi	r2,1
 400f138:	f800283a 	ret
 400f13c:	2254b03a 	or	r10,r4,r9
 400f140:	503fee26 	beq	r10,zero,400f0fc <__alt_data_end+0xfc00f0fc>
 400f144:	00800044 	movi	r2,1
 400f148:	f800283a 	ret
 400f14c:	0005883a 	mov	r2,zero
 400f150:	f800283a 	ret

0400f154 <__gedf2>:
 400f154:	2804d53a 	srli	r2,r5,20
 400f158:	3806d53a 	srli	r3,r7,20
 400f15c:	02000434 	movhi	r8,16
 400f160:	423fffc4 	addi	r8,r8,-1
 400f164:	1081ffcc 	andi	r2,r2,2047
 400f168:	0241ffc4 	movi	r9,2047
 400f16c:	2a14703a 	and	r10,r5,r8
 400f170:	18c1ffcc 	andi	r3,r3,2047
 400f174:	3a10703a 	and	r8,r7,r8
 400f178:	280ad7fa 	srli	r5,r5,31
 400f17c:	380ed7fa 	srli	r7,r7,31
 400f180:	12401d26 	beq	r2,r9,400f1f8 <__gedf2+0xa4>
 400f184:	0241ffc4 	movi	r9,2047
 400f188:	1a401226 	beq	r3,r9,400f1d4 <__gedf2+0x80>
 400f18c:	1000081e 	bne	r2,zero,400f1b0 <__gedf2+0x5c>
 400f190:	2296b03a 	or	r11,r4,r10
 400f194:	5813003a 	cmpeq	r9,r11,zero
 400f198:	1800091e 	bne	r3,zero,400f1c0 <__gedf2+0x6c>
 400f19c:	3218b03a 	or	r12,r6,r8
 400f1a0:	6000071e 	bne	r12,zero,400f1c0 <__gedf2+0x6c>
 400f1a4:	0005883a 	mov	r2,zero
 400f1a8:	5800101e 	bne	r11,zero,400f1ec <__gedf2+0x98>
 400f1ac:	f800283a 	ret
 400f1b0:	18000c1e 	bne	r3,zero,400f1e4 <__gedf2+0x90>
 400f1b4:	3212b03a 	or	r9,r6,r8
 400f1b8:	48000c26 	beq	r9,zero,400f1ec <__gedf2+0x98>
 400f1bc:	0013883a 	mov	r9,zero
 400f1c0:	39c03fcc 	andi	r7,r7,255
 400f1c4:	48000826 	beq	r9,zero,400f1e8 <__gedf2+0x94>
 400f1c8:	38000926 	beq	r7,zero,400f1f0 <__gedf2+0x9c>
 400f1cc:	00800044 	movi	r2,1
 400f1d0:	f800283a 	ret
 400f1d4:	3212b03a 	or	r9,r6,r8
 400f1d8:	483fec26 	beq	r9,zero,400f18c <__alt_data_end+0xfc00f18c>
 400f1dc:	00bfff84 	movi	r2,-2
 400f1e0:	f800283a 	ret
 400f1e4:	39c03fcc 	andi	r7,r7,255
 400f1e8:	29c00626 	beq	r5,r7,400f204 <__gedf2+0xb0>
 400f1ec:	283ff726 	beq	r5,zero,400f1cc <__alt_data_end+0xfc00f1cc>
 400f1f0:	00bfffc4 	movi	r2,-1
 400f1f4:	f800283a 	ret
 400f1f8:	2292b03a 	or	r9,r4,r10
 400f1fc:	483fe126 	beq	r9,zero,400f184 <__alt_data_end+0xfc00f184>
 400f200:	003ff606 	br	400f1dc <__alt_data_end+0xfc00f1dc>
 400f204:	18bff916 	blt	r3,r2,400f1ec <__alt_data_end+0xfc00f1ec>
 400f208:	10c00316 	blt	r2,r3,400f218 <__gedf2+0xc4>
 400f20c:	42bff736 	bltu	r8,r10,400f1ec <__alt_data_end+0xfc00f1ec>
 400f210:	52000326 	beq	r10,r8,400f220 <__gedf2+0xcc>
 400f214:	5200042e 	bgeu	r10,r8,400f228 <__gedf2+0xd4>
 400f218:	283fec1e 	bne	r5,zero,400f1cc <__alt_data_end+0xfc00f1cc>
 400f21c:	003ff406 	br	400f1f0 <__alt_data_end+0xfc00f1f0>
 400f220:	313ff236 	bltu	r6,r4,400f1ec <__alt_data_end+0xfc00f1ec>
 400f224:	21bffc36 	bltu	r4,r6,400f218 <__alt_data_end+0xfc00f218>
 400f228:	0005883a 	mov	r2,zero
 400f22c:	f800283a 	ret

0400f230 <__ledf2>:
 400f230:	2804d53a 	srli	r2,r5,20
 400f234:	3810d53a 	srli	r8,r7,20
 400f238:	00c00434 	movhi	r3,16
 400f23c:	18ffffc4 	addi	r3,r3,-1
 400f240:	1081ffcc 	andi	r2,r2,2047
 400f244:	0241ffc4 	movi	r9,2047
 400f248:	28d4703a 	and	r10,r5,r3
 400f24c:	4201ffcc 	andi	r8,r8,2047
 400f250:	38c6703a 	and	r3,r7,r3
 400f254:	280ad7fa 	srli	r5,r5,31
 400f258:	380ed7fa 	srli	r7,r7,31
 400f25c:	12401f26 	beq	r2,r9,400f2dc <__ledf2+0xac>
 400f260:	0241ffc4 	movi	r9,2047
 400f264:	42401426 	beq	r8,r9,400f2b8 <__ledf2+0x88>
 400f268:	1000091e 	bne	r2,zero,400f290 <__ledf2+0x60>
 400f26c:	2296b03a 	or	r11,r4,r10
 400f270:	5813003a 	cmpeq	r9,r11,zero
 400f274:	29403fcc 	andi	r5,r5,255
 400f278:	40000a1e 	bne	r8,zero,400f2a4 <__ledf2+0x74>
 400f27c:	30d8b03a 	or	r12,r6,r3
 400f280:	6000081e 	bne	r12,zero,400f2a4 <__ledf2+0x74>
 400f284:	0005883a 	mov	r2,zero
 400f288:	5800111e 	bne	r11,zero,400f2d0 <__ledf2+0xa0>
 400f28c:	f800283a 	ret
 400f290:	29403fcc 	andi	r5,r5,255
 400f294:	40000c1e 	bne	r8,zero,400f2c8 <__ledf2+0x98>
 400f298:	30d2b03a 	or	r9,r6,r3
 400f29c:	48000c26 	beq	r9,zero,400f2d0 <__ledf2+0xa0>
 400f2a0:	0013883a 	mov	r9,zero
 400f2a4:	39c03fcc 	andi	r7,r7,255
 400f2a8:	48000826 	beq	r9,zero,400f2cc <__ledf2+0x9c>
 400f2ac:	38001126 	beq	r7,zero,400f2f4 <__ledf2+0xc4>
 400f2b0:	00800044 	movi	r2,1
 400f2b4:	f800283a 	ret
 400f2b8:	30d2b03a 	or	r9,r6,r3
 400f2bc:	483fea26 	beq	r9,zero,400f268 <__alt_data_end+0xfc00f268>
 400f2c0:	00800084 	movi	r2,2
 400f2c4:	f800283a 	ret
 400f2c8:	39c03fcc 	andi	r7,r7,255
 400f2cc:	39400726 	beq	r7,r5,400f2ec <__ledf2+0xbc>
 400f2d0:	2800081e 	bne	r5,zero,400f2f4 <__ledf2+0xc4>
 400f2d4:	00800044 	movi	r2,1
 400f2d8:	f800283a 	ret
 400f2dc:	2292b03a 	or	r9,r4,r10
 400f2e0:	483fdf26 	beq	r9,zero,400f260 <__alt_data_end+0xfc00f260>
 400f2e4:	00800084 	movi	r2,2
 400f2e8:	f800283a 	ret
 400f2ec:	4080030e 	bge	r8,r2,400f2fc <__ledf2+0xcc>
 400f2f0:	383fef26 	beq	r7,zero,400f2b0 <__alt_data_end+0xfc00f2b0>
 400f2f4:	00bfffc4 	movi	r2,-1
 400f2f8:	f800283a 	ret
 400f2fc:	123feb16 	blt	r2,r8,400f2ac <__alt_data_end+0xfc00f2ac>
 400f300:	1abff336 	bltu	r3,r10,400f2d0 <__alt_data_end+0xfc00f2d0>
 400f304:	50c00326 	beq	r10,r3,400f314 <__ledf2+0xe4>
 400f308:	50c0042e 	bgeu	r10,r3,400f31c <__ledf2+0xec>
 400f30c:	283fe81e 	bne	r5,zero,400f2b0 <__alt_data_end+0xfc00f2b0>
 400f310:	003ff806 	br	400f2f4 <__alt_data_end+0xfc00f2f4>
 400f314:	313fee36 	bltu	r6,r4,400f2d0 <__alt_data_end+0xfc00f2d0>
 400f318:	21bffc36 	bltu	r4,r6,400f30c <__alt_data_end+0xfc00f30c>
 400f31c:	0005883a 	mov	r2,zero
 400f320:	f800283a 	ret

0400f324 <__muldf3>:
 400f324:	defff304 	addi	sp,sp,-52
 400f328:	2804d53a 	srli	r2,r5,20
 400f32c:	dd800915 	stw	r22,36(sp)
 400f330:	282cd7fa 	srli	r22,r5,31
 400f334:	dc000315 	stw	r16,12(sp)
 400f338:	04000434 	movhi	r16,16
 400f33c:	dd400815 	stw	r21,32(sp)
 400f340:	dc800515 	stw	r18,20(sp)
 400f344:	843fffc4 	addi	r16,r16,-1
 400f348:	dfc00c15 	stw	ra,48(sp)
 400f34c:	df000b15 	stw	fp,44(sp)
 400f350:	ddc00a15 	stw	r23,40(sp)
 400f354:	dd000715 	stw	r20,28(sp)
 400f358:	dcc00615 	stw	r19,24(sp)
 400f35c:	dc400415 	stw	r17,16(sp)
 400f360:	1481ffcc 	andi	r18,r2,2047
 400f364:	2c20703a 	and	r16,r5,r16
 400f368:	b02b883a 	mov	r21,r22
 400f36c:	b2403fcc 	andi	r9,r22,255
 400f370:	90006026 	beq	r18,zero,400f4f4 <__muldf3+0x1d0>
 400f374:	0081ffc4 	movi	r2,2047
 400f378:	2029883a 	mov	r20,r4
 400f37c:	90803626 	beq	r18,r2,400f458 <__muldf3+0x134>
 400f380:	80800434 	orhi	r2,r16,16
 400f384:	100490fa 	slli	r2,r2,3
 400f388:	2020d77a 	srli	r16,r4,29
 400f38c:	202890fa 	slli	r20,r4,3
 400f390:	94bf0044 	addi	r18,r18,-1023
 400f394:	80a0b03a 	or	r16,r16,r2
 400f398:	0027883a 	mov	r19,zero
 400f39c:	0039883a 	mov	fp,zero
 400f3a0:	3804d53a 	srli	r2,r7,20
 400f3a4:	382ed7fa 	srli	r23,r7,31
 400f3a8:	04400434 	movhi	r17,16
 400f3ac:	8c7fffc4 	addi	r17,r17,-1
 400f3b0:	1081ffcc 	andi	r2,r2,2047
 400f3b4:	3011883a 	mov	r8,r6
 400f3b8:	3c62703a 	and	r17,r7,r17
 400f3bc:	ba803fcc 	andi	r10,r23,255
 400f3c0:	10006d26 	beq	r2,zero,400f578 <__muldf3+0x254>
 400f3c4:	00c1ffc4 	movi	r3,2047
 400f3c8:	10c06526 	beq	r2,r3,400f560 <__muldf3+0x23c>
 400f3cc:	88c00434 	orhi	r3,r17,16
 400f3d0:	180690fa 	slli	r3,r3,3
 400f3d4:	3022d77a 	srli	r17,r6,29
 400f3d8:	301090fa 	slli	r8,r6,3
 400f3dc:	10bf0044 	addi	r2,r2,-1023
 400f3e0:	88e2b03a 	or	r17,r17,r3
 400f3e4:	000b883a 	mov	r5,zero
 400f3e8:	9085883a 	add	r2,r18,r2
 400f3ec:	2cc8b03a 	or	r4,r5,r19
 400f3f0:	00c003c4 	movi	r3,15
 400f3f4:	bdacf03a 	xor	r22,r23,r22
 400f3f8:	12c00044 	addi	r11,r2,1
 400f3fc:	19009936 	bltu	r3,r4,400f664 <__muldf3+0x340>
 400f400:	200890ba 	slli	r4,r4,2
 400f404:	00c10074 	movhi	r3,1025
 400f408:	18fd0604 	addi	r3,r3,-3048
 400f40c:	20c9883a 	add	r4,r4,r3
 400f410:	20c00017 	ldw	r3,0(r4)
 400f414:	1800683a 	jmp	r3
 400f418:	0400f664 	muli	r16,zero,985
 400f41c:	0400f478 	rdprs	r16,zero,977
 400f420:	0400f478 	rdprs	r16,zero,977
 400f424:	0400f474 	movhi	r16,977
 400f428:	0400f640 	call	400f64 <__reset-0x3bff09c>
 400f42c:	0400f640 	call	400f64 <__reset-0x3bff09c>
 400f430:	0400f628 	cmpgeui	r16,zero,984
 400f434:	0400f474 	movhi	r16,977
 400f438:	0400f640 	call	400f64 <__reset-0x3bff09c>
 400f43c:	0400f628 	cmpgeui	r16,zero,984
 400f440:	0400f640 	call	400f64 <__reset-0x3bff09c>
 400f444:	0400f474 	movhi	r16,977
 400f448:	0400f650 	cmplti	r16,zero,985
 400f44c:	0400f650 	cmplti	r16,zero,985
 400f450:	0400f650 	cmplti	r16,zero,985
 400f454:	0400f86c 	andhi	r16,zero,993
 400f458:	2404b03a 	or	r2,r4,r16
 400f45c:	10006f1e 	bne	r2,zero,400f61c <__muldf3+0x2f8>
 400f460:	04c00204 	movi	r19,8
 400f464:	0021883a 	mov	r16,zero
 400f468:	0029883a 	mov	r20,zero
 400f46c:	07000084 	movi	fp,2
 400f470:	003fcb06 	br	400f3a0 <__alt_data_end+0xfc00f3a0>
 400f474:	502d883a 	mov	r22,r10
 400f478:	00800084 	movi	r2,2
 400f47c:	28805726 	beq	r5,r2,400f5dc <__muldf3+0x2b8>
 400f480:	008000c4 	movi	r2,3
 400f484:	28816626 	beq	r5,r2,400fa20 <__muldf3+0x6fc>
 400f488:	00800044 	movi	r2,1
 400f48c:	2881411e 	bne	r5,r2,400f994 <__muldf3+0x670>
 400f490:	b02b883a 	mov	r21,r22
 400f494:	0005883a 	mov	r2,zero
 400f498:	000b883a 	mov	r5,zero
 400f49c:	0029883a 	mov	r20,zero
 400f4a0:	1004953a 	slli	r2,r2,20
 400f4a4:	a8c03fcc 	andi	r3,r21,255
 400f4a8:	04400434 	movhi	r17,16
 400f4ac:	8c7fffc4 	addi	r17,r17,-1
 400f4b0:	180697fa 	slli	r3,r3,31
 400f4b4:	2c4a703a 	and	r5,r5,r17
 400f4b8:	288ab03a 	or	r5,r5,r2
 400f4bc:	28c6b03a 	or	r3,r5,r3
 400f4c0:	a005883a 	mov	r2,r20
 400f4c4:	dfc00c17 	ldw	ra,48(sp)
 400f4c8:	df000b17 	ldw	fp,44(sp)
 400f4cc:	ddc00a17 	ldw	r23,40(sp)
 400f4d0:	dd800917 	ldw	r22,36(sp)
 400f4d4:	dd400817 	ldw	r21,32(sp)
 400f4d8:	dd000717 	ldw	r20,28(sp)
 400f4dc:	dcc00617 	ldw	r19,24(sp)
 400f4e0:	dc800517 	ldw	r18,20(sp)
 400f4e4:	dc400417 	ldw	r17,16(sp)
 400f4e8:	dc000317 	ldw	r16,12(sp)
 400f4ec:	dec00d04 	addi	sp,sp,52
 400f4f0:	f800283a 	ret
 400f4f4:	2404b03a 	or	r2,r4,r16
 400f4f8:	2027883a 	mov	r19,r4
 400f4fc:	10004226 	beq	r2,zero,400f608 <__muldf3+0x2e4>
 400f500:	8000fc26 	beq	r16,zero,400f8f4 <__muldf3+0x5d0>
 400f504:	8009883a 	mov	r4,r16
 400f508:	d9800215 	stw	r6,8(sp)
 400f50c:	d9c00015 	stw	r7,0(sp)
 400f510:	da400115 	stw	r9,4(sp)
 400f514:	4003da80 	call	4003da8 <__clzsi2>
 400f518:	d9800217 	ldw	r6,8(sp)
 400f51c:	d9c00017 	ldw	r7,0(sp)
 400f520:	da400117 	ldw	r9,4(sp)
 400f524:	113ffd44 	addi	r4,r2,-11
 400f528:	00c00704 	movi	r3,28
 400f52c:	1900ed16 	blt	r3,r4,400f8e4 <__muldf3+0x5c0>
 400f530:	00c00744 	movi	r3,29
 400f534:	147ffe04 	addi	r17,r2,-8
 400f538:	1907c83a 	sub	r3,r3,r4
 400f53c:	8460983a 	sll	r16,r16,r17
 400f540:	98c6d83a 	srl	r3,r19,r3
 400f544:	9c68983a 	sll	r20,r19,r17
 400f548:	1c20b03a 	or	r16,r3,r16
 400f54c:	1080fcc4 	addi	r2,r2,1011
 400f550:	00a5c83a 	sub	r18,zero,r2
 400f554:	0027883a 	mov	r19,zero
 400f558:	0039883a 	mov	fp,zero
 400f55c:	003f9006 	br	400f3a0 <__alt_data_end+0xfc00f3a0>
 400f560:	3446b03a 	or	r3,r6,r17
 400f564:	1800261e 	bne	r3,zero,400f600 <__muldf3+0x2dc>
 400f568:	0023883a 	mov	r17,zero
 400f56c:	0011883a 	mov	r8,zero
 400f570:	01400084 	movi	r5,2
 400f574:	003f9c06 	br	400f3e8 <__alt_data_end+0xfc00f3e8>
 400f578:	3446b03a 	or	r3,r6,r17
 400f57c:	18001c26 	beq	r3,zero,400f5f0 <__muldf3+0x2cc>
 400f580:	8800ce26 	beq	r17,zero,400f8bc <__muldf3+0x598>
 400f584:	8809883a 	mov	r4,r17
 400f588:	d9800215 	stw	r6,8(sp)
 400f58c:	da400115 	stw	r9,4(sp)
 400f590:	da800015 	stw	r10,0(sp)
 400f594:	4003da80 	call	4003da8 <__clzsi2>
 400f598:	d9800217 	ldw	r6,8(sp)
 400f59c:	da400117 	ldw	r9,4(sp)
 400f5a0:	da800017 	ldw	r10,0(sp)
 400f5a4:	113ffd44 	addi	r4,r2,-11
 400f5a8:	00c00704 	movi	r3,28
 400f5ac:	1900bf16 	blt	r3,r4,400f8ac <__muldf3+0x588>
 400f5b0:	00c00744 	movi	r3,29
 400f5b4:	123ffe04 	addi	r8,r2,-8
 400f5b8:	1907c83a 	sub	r3,r3,r4
 400f5bc:	8a22983a 	sll	r17,r17,r8
 400f5c0:	30c6d83a 	srl	r3,r6,r3
 400f5c4:	3210983a 	sll	r8,r6,r8
 400f5c8:	1c62b03a 	or	r17,r3,r17
 400f5cc:	1080fcc4 	addi	r2,r2,1011
 400f5d0:	0085c83a 	sub	r2,zero,r2
 400f5d4:	000b883a 	mov	r5,zero
 400f5d8:	003f8306 	br	400f3e8 <__alt_data_end+0xfc00f3e8>
 400f5dc:	b02b883a 	mov	r21,r22
 400f5e0:	0081ffc4 	movi	r2,2047
 400f5e4:	000b883a 	mov	r5,zero
 400f5e8:	0029883a 	mov	r20,zero
 400f5ec:	003fac06 	br	400f4a0 <__alt_data_end+0xfc00f4a0>
 400f5f0:	0023883a 	mov	r17,zero
 400f5f4:	0011883a 	mov	r8,zero
 400f5f8:	01400044 	movi	r5,1
 400f5fc:	003f7a06 	br	400f3e8 <__alt_data_end+0xfc00f3e8>
 400f600:	014000c4 	movi	r5,3
 400f604:	003f7806 	br	400f3e8 <__alt_data_end+0xfc00f3e8>
 400f608:	04c00104 	movi	r19,4
 400f60c:	0021883a 	mov	r16,zero
 400f610:	0029883a 	mov	r20,zero
 400f614:	07000044 	movi	fp,1
 400f618:	003f6106 	br	400f3a0 <__alt_data_end+0xfc00f3a0>
 400f61c:	04c00304 	movi	r19,12
 400f620:	070000c4 	movi	fp,3
 400f624:	003f5e06 	br	400f3a0 <__alt_data_end+0xfc00f3a0>
 400f628:	01400434 	movhi	r5,16
 400f62c:	002b883a 	mov	r21,zero
 400f630:	297fffc4 	addi	r5,r5,-1
 400f634:	053fffc4 	movi	r20,-1
 400f638:	0081ffc4 	movi	r2,2047
 400f63c:	003f9806 	br	400f4a0 <__alt_data_end+0xfc00f4a0>
 400f640:	8023883a 	mov	r17,r16
 400f644:	a011883a 	mov	r8,r20
 400f648:	e00b883a 	mov	r5,fp
 400f64c:	003f8a06 	br	400f478 <__alt_data_end+0xfc00f478>
 400f650:	8023883a 	mov	r17,r16
 400f654:	a011883a 	mov	r8,r20
 400f658:	482d883a 	mov	r22,r9
 400f65c:	e00b883a 	mov	r5,fp
 400f660:	003f8506 	br	400f478 <__alt_data_end+0xfc00f478>
 400f664:	a00ad43a 	srli	r5,r20,16
 400f668:	401ad43a 	srli	r13,r8,16
 400f66c:	a53fffcc 	andi	r20,r20,65535
 400f670:	423fffcc 	andi	r8,r8,65535
 400f674:	4519383a 	mul	r12,r8,r20
 400f678:	4147383a 	mul	r3,r8,r5
 400f67c:	6d09383a 	mul	r4,r13,r20
 400f680:	600cd43a 	srli	r6,r12,16
 400f684:	2b5d383a 	mul	r14,r5,r13
 400f688:	20c9883a 	add	r4,r4,r3
 400f68c:	310d883a 	add	r6,r6,r4
 400f690:	30c0022e 	bgeu	r6,r3,400f69c <__muldf3+0x378>
 400f694:	00c00074 	movhi	r3,1
 400f698:	70dd883a 	add	r14,r14,r3
 400f69c:	8826d43a 	srli	r19,r17,16
 400f6a0:	8bffffcc 	andi	r15,r17,65535
 400f6a4:	7d23383a 	mul	r17,r15,r20
 400f6a8:	7949383a 	mul	r4,r15,r5
 400f6ac:	9d29383a 	mul	r20,r19,r20
 400f6b0:	8814d43a 	srli	r10,r17,16
 400f6b4:	3012943a 	slli	r9,r6,16
 400f6b8:	a129883a 	add	r20,r20,r4
 400f6bc:	633fffcc 	andi	r12,r12,65535
 400f6c0:	5515883a 	add	r10,r10,r20
 400f6c4:	3006d43a 	srli	r3,r6,16
 400f6c8:	4b13883a 	add	r9,r9,r12
 400f6cc:	2ccb383a 	mul	r5,r5,r19
 400f6d0:	5100022e 	bgeu	r10,r4,400f6dc <__muldf3+0x3b8>
 400f6d4:	01000074 	movhi	r4,1
 400f6d8:	290b883a 	add	r5,r5,r4
 400f6dc:	802ad43a 	srli	r21,r16,16
 400f6e0:	843fffcc 	andi	r16,r16,65535
 400f6e4:	440d383a 	mul	r6,r8,r16
 400f6e8:	4565383a 	mul	r18,r8,r21
 400f6ec:	8349383a 	mul	r4,r16,r13
 400f6f0:	500e943a 	slli	r7,r10,16
 400f6f4:	3010d43a 	srli	r8,r6,16
 400f6f8:	5028d43a 	srli	r20,r10,16
 400f6fc:	2489883a 	add	r4,r4,r18
 400f700:	8abfffcc 	andi	r10,r17,65535
 400f704:	3a95883a 	add	r10,r7,r10
 400f708:	4119883a 	add	r12,r8,r4
 400f70c:	a169883a 	add	r20,r20,r5
 400f710:	1a87883a 	add	r3,r3,r10
 400f714:	6d5b383a 	mul	r13,r13,r21
 400f718:	6480022e 	bgeu	r12,r18,400f724 <__muldf3+0x400>
 400f71c:	01000074 	movhi	r4,1
 400f720:	691b883a 	add	r13,r13,r4
 400f724:	7c25383a 	mul	r18,r15,r16
 400f728:	7d4b383a 	mul	r5,r15,r21
 400f72c:	84cf383a 	mul	r7,r16,r19
 400f730:	901ed43a 	srli	r15,r18,16
 400f734:	6008d43a 	srli	r4,r12,16
 400f738:	6010943a 	slli	r8,r12,16
 400f73c:	394f883a 	add	r7,r7,r5
 400f740:	333fffcc 	andi	r12,r6,65535
 400f744:	79df883a 	add	r15,r15,r7
 400f748:	235b883a 	add	r13,r4,r13
 400f74c:	9d63383a 	mul	r17,r19,r21
 400f750:	4309883a 	add	r4,r8,r12
 400f754:	7940022e 	bgeu	r15,r5,400f760 <__muldf3+0x43c>
 400f758:	01400074 	movhi	r5,1
 400f75c:	8963883a 	add	r17,r17,r5
 400f760:	780a943a 	slli	r5,r15,16
 400f764:	91bfffcc 	andi	r6,r18,65535
 400f768:	70c7883a 	add	r3,r14,r3
 400f76c:	298d883a 	add	r6,r5,r6
 400f770:	1a8f803a 	cmpltu	r7,r3,r10
 400f774:	350b883a 	add	r5,r6,r20
 400f778:	20c7883a 	add	r3,r4,r3
 400f77c:	3955883a 	add	r10,r7,r5
 400f780:	1909803a 	cmpltu	r4,r3,r4
 400f784:	6a91883a 	add	r8,r13,r10
 400f788:	780cd43a 	srli	r6,r15,16
 400f78c:	2219883a 	add	r12,r4,r8
 400f790:	2d0b803a 	cmpltu	r5,r5,r20
 400f794:	51cf803a 	cmpltu	r7,r10,r7
 400f798:	29ceb03a 	or	r7,r5,r7
 400f79c:	4351803a 	cmpltu	r8,r8,r13
 400f7a0:	610b803a 	cmpltu	r5,r12,r4
 400f7a4:	4148b03a 	or	r4,r8,r5
 400f7a8:	398f883a 	add	r7,r7,r6
 400f7ac:	3909883a 	add	r4,r7,r4
 400f7b0:	1810927a 	slli	r8,r3,9
 400f7b4:	2449883a 	add	r4,r4,r17
 400f7b8:	2008927a 	slli	r4,r4,9
 400f7bc:	6022d5fa 	srli	r17,r12,23
 400f7c0:	1806d5fa 	srli	r3,r3,23
 400f7c4:	4252b03a 	or	r9,r8,r9
 400f7c8:	600a927a 	slli	r5,r12,9
 400f7cc:	4810c03a 	cmpne	r8,r9,zero
 400f7d0:	2462b03a 	or	r17,r4,r17
 400f7d4:	40c6b03a 	or	r3,r8,r3
 400f7d8:	8900402c 	andhi	r4,r17,256
 400f7dc:	1950b03a 	or	r8,r3,r5
 400f7e0:	20000726 	beq	r4,zero,400f800 <__muldf3+0x4dc>
 400f7e4:	4006d07a 	srli	r3,r8,1
 400f7e8:	880497fa 	slli	r2,r17,31
 400f7ec:	4200004c 	andi	r8,r8,1
 400f7f0:	8822d07a 	srli	r17,r17,1
 400f7f4:	1a10b03a 	or	r8,r3,r8
 400f7f8:	1210b03a 	or	r8,r2,r8
 400f7fc:	5805883a 	mov	r2,r11
 400f800:	1140ffc4 	addi	r5,r2,1023
 400f804:	0140440e 	bge	zero,r5,400f918 <__muldf3+0x5f4>
 400f808:	40c001cc 	andi	r3,r8,7
 400f80c:	18000726 	beq	r3,zero,400f82c <__muldf3+0x508>
 400f810:	40c003cc 	andi	r3,r8,15
 400f814:	01000104 	movi	r4,4
 400f818:	19000426 	beq	r3,r4,400f82c <__muldf3+0x508>
 400f81c:	4107883a 	add	r3,r8,r4
 400f820:	1a11803a 	cmpltu	r8,r3,r8
 400f824:	8a23883a 	add	r17,r17,r8
 400f828:	1811883a 	mov	r8,r3
 400f82c:	88c0402c 	andhi	r3,r17,256
 400f830:	18000426 	beq	r3,zero,400f844 <__muldf3+0x520>
 400f834:	11410004 	addi	r5,r2,1024
 400f838:	00bfc034 	movhi	r2,65280
 400f83c:	10bfffc4 	addi	r2,r2,-1
 400f840:	88a2703a 	and	r17,r17,r2
 400f844:	0081ff84 	movi	r2,2046
 400f848:	117f6416 	blt	r2,r5,400f5dc <__alt_data_end+0xfc00f5dc>
 400f84c:	8828977a 	slli	r20,r17,29
 400f850:	4010d0fa 	srli	r8,r8,3
 400f854:	8822927a 	slli	r17,r17,9
 400f858:	2881ffcc 	andi	r2,r5,2047
 400f85c:	a228b03a 	or	r20,r20,r8
 400f860:	880ad33a 	srli	r5,r17,12
 400f864:	b02b883a 	mov	r21,r22
 400f868:	003f0d06 	br	400f4a0 <__alt_data_end+0xfc00f4a0>
 400f86c:	8080022c 	andhi	r2,r16,8
 400f870:	10000926 	beq	r2,zero,400f898 <__muldf3+0x574>
 400f874:	8880022c 	andhi	r2,r17,8
 400f878:	1000071e 	bne	r2,zero,400f898 <__muldf3+0x574>
 400f87c:	00800434 	movhi	r2,16
 400f880:	89400234 	orhi	r5,r17,8
 400f884:	10bfffc4 	addi	r2,r2,-1
 400f888:	b82b883a 	mov	r21,r23
 400f88c:	288a703a 	and	r5,r5,r2
 400f890:	4029883a 	mov	r20,r8
 400f894:	003f6806 	br	400f638 <__alt_data_end+0xfc00f638>
 400f898:	00800434 	movhi	r2,16
 400f89c:	81400234 	orhi	r5,r16,8
 400f8a0:	10bfffc4 	addi	r2,r2,-1
 400f8a4:	288a703a 	and	r5,r5,r2
 400f8a8:	003f6306 	br	400f638 <__alt_data_end+0xfc00f638>
 400f8ac:	147ff604 	addi	r17,r2,-40
 400f8b0:	3462983a 	sll	r17,r6,r17
 400f8b4:	0011883a 	mov	r8,zero
 400f8b8:	003f4406 	br	400f5cc <__alt_data_end+0xfc00f5cc>
 400f8bc:	3009883a 	mov	r4,r6
 400f8c0:	d9800215 	stw	r6,8(sp)
 400f8c4:	da400115 	stw	r9,4(sp)
 400f8c8:	da800015 	stw	r10,0(sp)
 400f8cc:	4003da80 	call	4003da8 <__clzsi2>
 400f8d0:	10800804 	addi	r2,r2,32
 400f8d4:	da800017 	ldw	r10,0(sp)
 400f8d8:	da400117 	ldw	r9,4(sp)
 400f8dc:	d9800217 	ldw	r6,8(sp)
 400f8e0:	003f3006 	br	400f5a4 <__alt_data_end+0xfc00f5a4>
 400f8e4:	143ff604 	addi	r16,r2,-40
 400f8e8:	9c20983a 	sll	r16,r19,r16
 400f8ec:	0029883a 	mov	r20,zero
 400f8f0:	003f1606 	br	400f54c <__alt_data_end+0xfc00f54c>
 400f8f4:	d9800215 	stw	r6,8(sp)
 400f8f8:	d9c00015 	stw	r7,0(sp)
 400f8fc:	da400115 	stw	r9,4(sp)
 400f900:	4003da80 	call	4003da8 <__clzsi2>
 400f904:	10800804 	addi	r2,r2,32
 400f908:	da400117 	ldw	r9,4(sp)
 400f90c:	d9c00017 	ldw	r7,0(sp)
 400f910:	d9800217 	ldw	r6,8(sp)
 400f914:	003f0306 	br	400f524 <__alt_data_end+0xfc00f524>
 400f918:	00c00044 	movi	r3,1
 400f91c:	1947c83a 	sub	r3,r3,r5
 400f920:	00800e04 	movi	r2,56
 400f924:	10feda16 	blt	r2,r3,400f490 <__alt_data_end+0xfc00f490>
 400f928:	008007c4 	movi	r2,31
 400f92c:	10c01b16 	blt	r2,r3,400f99c <__muldf3+0x678>
 400f930:	00800804 	movi	r2,32
 400f934:	10c5c83a 	sub	r2,r2,r3
 400f938:	888a983a 	sll	r5,r17,r2
 400f93c:	40c8d83a 	srl	r4,r8,r3
 400f940:	4084983a 	sll	r2,r8,r2
 400f944:	88e2d83a 	srl	r17,r17,r3
 400f948:	2906b03a 	or	r3,r5,r4
 400f94c:	1004c03a 	cmpne	r2,r2,zero
 400f950:	1886b03a 	or	r3,r3,r2
 400f954:	188001cc 	andi	r2,r3,7
 400f958:	10000726 	beq	r2,zero,400f978 <__muldf3+0x654>
 400f95c:	188003cc 	andi	r2,r3,15
 400f960:	01000104 	movi	r4,4
 400f964:	11000426 	beq	r2,r4,400f978 <__muldf3+0x654>
 400f968:	1805883a 	mov	r2,r3
 400f96c:	10c00104 	addi	r3,r2,4
 400f970:	1885803a 	cmpltu	r2,r3,r2
 400f974:	88a3883a 	add	r17,r17,r2
 400f978:	8880202c 	andhi	r2,r17,128
 400f97c:	10001c26 	beq	r2,zero,400f9f0 <__muldf3+0x6cc>
 400f980:	b02b883a 	mov	r21,r22
 400f984:	00800044 	movi	r2,1
 400f988:	000b883a 	mov	r5,zero
 400f98c:	0029883a 	mov	r20,zero
 400f990:	003ec306 	br	400f4a0 <__alt_data_end+0xfc00f4a0>
 400f994:	5805883a 	mov	r2,r11
 400f998:	003f9906 	br	400f800 <__alt_data_end+0xfc00f800>
 400f99c:	00bff844 	movi	r2,-31
 400f9a0:	1145c83a 	sub	r2,r2,r5
 400f9a4:	8888d83a 	srl	r4,r17,r2
 400f9a8:	00800804 	movi	r2,32
 400f9ac:	18801a26 	beq	r3,r2,400fa18 <__muldf3+0x6f4>
 400f9b0:	00801004 	movi	r2,64
 400f9b4:	10c5c83a 	sub	r2,r2,r3
 400f9b8:	8884983a 	sll	r2,r17,r2
 400f9bc:	1204b03a 	or	r2,r2,r8
 400f9c0:	1004c03a 	cmpne	r2,r2,zero
 400f9c4:	2084b03a 	or	r2,r4,r2
 400f9c8:	144001cc 	andi	r17,r2,7
 400f9cc:	88000d1e 	bne	r17,zero,400fa04 <__muldf3+0x6e0>
 400f9d0:	000b883a 	mov	r5,zero
 400f9d4:	1028d0fa 	srli	r20,r2,3
 400f9d8:	b02b883a 	mov	r21,r22
 400f9dc:	0005883a 	mov	r2,zero
 400f9e0:	a468b03a 	or	r20,r20,r17
 400f9e4:	003eae06 	br	400f4a0 <__alt_data_end+0xfc00f4a0>
 400f9e8:	1007883a 	mov	r3,r2
 400f9ec:	0023883a 	mov	r17,zero
 400f9f0:	880a927a 	slli	r5,r17,9
 400f9f4:	1805883a 	mov	r2,r3
 400f9f8:	8822977a 	slli	r17,r17,29
 400f9fc:	280ad33a 	srli	r5,r5,12
 400fa00:	003ff406 	br	400f9d4 <__alt_data_end+0xfc00f9d4>
 400fa04:	10c003cc 	andi	r3,r2,15
 400fa08:	01000104 	movi	r4,4
 400fa0c:	193ff626 	beq	r3,r4,400f9e8 <__alt_data_end+0xfc00f9e8>
 400fa10:	0023883a 	mov	r17,zero
 400fa14:	003fd506 	br	400f96c <__alt_data_end+0xfc00f96c>
 400fa18:	0005883a 	mov	r2,zero
 400fa1c:	003fe706 	br	400f9bc <__alt_data_end+0xfc00f9bc>
 400fa20:	00800434 	movhi	r2,16
 400fa24:	89400234 	orhi	r5,r17,8
 400fa28:	10bfffc4 	addi	r2,r2,-1
 400fa2c:	b02b883a 	mov	r21,r22
 400fa30:	288a703a 	and	r5,r5,r2
 400fa34:	4029883a 	mov	r20,r8
 400fa38:	003eff06 	br	400f638 <__alt_data_end+0xfc00f638>

0400fa3c <__subdf3>:
 400fa3c:	02000434 	movhi	r8,16
 400fa40:	423fffc4 	addi	r8,r8,-1
 400fa44:	defffb04 	addi	sp,sp,-20
 400fa48:	2a14703a 	and	r10,r5,r8
 400fa4c:	3812d53a 	srli	r9,r7,20
 400fa50:	3a10703a 	and	r8,r7,r8
 400fa54:	2006d77a 	srli	r3,r4,29
 400fa58:	3004d77a 	srli	r2,r6,29
 400fa5c:	dc000015 	stw	r16,0(sp)
 400fa60:	501490fa 	slli	r10,r10,3
 400fa64:	2820d53a 	srli	r16,r5,20
 400fa68:	401090fa 	slli	r8,r8,3
 400fa6c:	dc800215 	stw	r18,8(sp)
 400fa70:	dc400115 	stw	r17,4(sp)
 400fa74:	dfc00415 	stw	ra,16(sp)
 400fa78:	202290fa 	slli	r17,r4,3
 400fa7c:	dcc00315 	stw	r19,12(sp)
 400fa80:	4a41ffcc 	andi	r9,r9,2047
 400fa84:	0101ffc4 	movi	r4,2047
 400fa88:	2824d7fa 	srli	r18,r5,31
 400fa8c:	8401ffcc 	andi	r16,r16,2047
 400fa90:	50c6b03a 	or	r3,r10,r3
 400fa94:	380ed7fa 	srli	r7,r7,31
 400fa98:	408ab03a 	or	r5,r8,r2
 400fa9c:	300c90fa 	slli	r6,r6,3
 400faa0:	49009626 	beq	r9,r4,400fcfc <__subdf3+0x2c0>
 400faa4:	39c0005c 	xori	r7,r7,1
 400faa8:	8245c83a 	sub	r2,r16,r9
 400faac:	3c807426 	beq	r7,r18,400fc80 <__subdf3+0x244>
 400fab0:	0080af0e 	bge	zero,r2,400fd70 <__subdf3+0x334>
 400fab4:	48002a1e 	bne	r9,zero,400fb60 <__subdf3+0x124>
 400fab8:	2988b03a 	or	r4,r5,r6
 400fabc:	20009a1e 	bne	r4,zero,400fd28 <__subdf3+0x2ec>
 400fac0:	888001cc 	andi	r2,r17,7
 400fac4:	10000726 	beq	r2,zero,400fae4 <__subdf3+0xa8>
 400fac8:	888003cc 	andi	r2,r17,15
 400facc:	01000104 	movi	r4,4
 400fad0:	11000426 	beq	r2,r4,400fae4 <__subdf3+0xa8>
 400fad4:	890b883a 	add	r5,r17,r4
 400fad8:	2c63803a 	cmpltu	r17,r5,r17
 400fadc:	1c47883a 	add	r3,r3,r17
 400fae0:	2823883a 	mov	r17,r5
 400fae4:	1880202c 	andhi	r2,r3,128
 400fae8:	10005926 	beq	r2,zero,400fc50 <__subdf3+0x214>
 400faec:	84000044 	addi	r16,r16,1
 400faf0:	0081ffc4 	movi	r2,2047
 400faf4:	8080be26 	beq	r16,r2,400fdf0 <__subdf3+0x3b4>
 400faf8:	017fe034 	movhi	r5,65408
 400fafc:	297fffc4 	addi	r5,r5,-1
 400fb00:	1946703a 	and	r3,r3,r5
 400fb04:	1804977a 	slli	r2,r3,29
 400fb08:	1806927a 	slli	r3,r3,9
 400fb0c:	8822d0fa 	srli	r17,r17,3
 400fb10:	8401ffcc 	andi	r16,r16,2047
 400fb14:	180ad33a 	srli	r5,r3,12
 400fb18:	9100004c 	andi	r4,r18,1
 400fb1c:	1444b03a 	or	r2,r2,r17
 400fb20:	80c1ffcc 	andi	r3,r16,2047
 400fb24:	1820953a 	slli	r16,r3,20
 400fb28:	20c03fcc 	andi	r3,r4,255
 400fb2c:	180897fa 	slli	r4,r3,31
 400fb30:	00c00434 	movhi	r3,16
 400fb34:	18ffffc4 	addi	r3,r3,-1
 400fb38:	28c6703a 	and	r3,r5,r3
 400fb3c:	1c06b03a 	or	r3,r3,r16
 400fb40:	1906b03a 	or	r3,r3,r4
 400fb44:	dfc00417 	ldw	ra,16(sp)
 400fb48:	dcc00317 	ldw	r19,12(sp)
 400fb4c:	dc800217 	ldw	r18,8(sp)
 400fb50:	dc400117 	ldw	r17,4(sp)
 400fb54:	dc000017 	ldw	r16,0(sp)
 400fb58:	dec00504 	addi	sp,sp,20
 400fb5c:	f800283a 	ret
 400fb60:	0101ffc4 	movi	r4,2047
 400fb64:	813fd626 	beq	r16,r4,400fac0 <__alt_data_end+0xfc00fac0>
 400fb68:	29402034 	orhi	r5,r5,128
 400fb6c:	01000e04 	movi	r4,56
 400fb70:	2080a316 	blt	r4,r2,400fe00 <__subdf3+0x3c4>
 400fb74:	010007c4 	movi	r4,31
 400fb78:	2080c616 	blt	r4,r2,400fe94 <__subdf3+0x458>
 400fb7c:	01000804 	movi	r4,32
 400fb80:	2089c83a 	sub	r4,r4,r2
 400fb84:	2910983a 	sll	r8,r5,r4
 400fb88:	308ed83a 	srl	r7,r6,r2
 400fb8c:	3108983a 	sll	r4,r6,r4
 400fb90:	2884d83a 	srl	r2,r5,r2
 400fb94:	41ccb03a 	or	r6,r8,r7
 400fb98:	2008c03a 	cmpne	r4,r4,zero
 400fb9c:	310cb03a 	or	r6,r6,r4
 400fba0:	898dc83a 	sub	r6,r17,r6
 400fba4:	89a3803a 	cmpltu	r17,r17,r6
 400fba8:	1887c83a 	sub	r3,r3,r2
 400fbac:	1c47c83a 	sub	r3,r3,r17
 400fbb0:	3023883a 	mov	r17,r6
 400fbb4:	1880202c 	andhi	r2,r3,128
 400fbb8:	10002326 	beq	r2,zero,400fc48 <__subdf3+0x20c>
 400fbbc:	04c02034 	movhi	r19,128
 400fbc0:	9cffffc4 	addi	r19,r19,-1
 400fbc4:	1ce6703a 	and	r19,r3,r19
 400fbc8:	98007a26 	beq	r19,zero,400fdb4 <__subdf3+0x378>
 400fbcc:	9809883a 	mov	r4,r19
 400fbd0:	4003da80 	call	4003da8 <__clzsi2>
 400fbd4:	113ffe04 	addi	r4,r2,-8
 400fbd8:	00c007c4 	movi	r3,31
 400fbdc:	19007b16 	blt	r3,r4,400fdcc <__subdf3+0x390>
 400fbe0:	00800804 	movi	r2,32
 400fbe4:	1105c83a 	sub	r2,r2,r4
 400fbe8:	8884d83a 	srl	r2,r17,r2
 400fbec:	9906983a 	sll	r3,r19,r4
 400fbf0:	8922983a 	sll	r17,r17,r4
 400fbf4:	10c4b03a 	or	r2,r2,r3
 400fbf8:	24007816 	blt	r4,r16,400fddc <__subdf3+0x3a0>
 400fbfc:	2421c83a 	sub	r16,r4,r16
 400fc00:	80c00044 	addi	r3,r16,1
 400fc04:	010007c4 	movi	r4,31
 400fc08:	20c09516 	blt	r4,r3,400fe60 <__subdf3+0x424>
 400fc0c:	01400804 	movi	r5,32
 400fc10:	28cbc83a 	sub	r5,r5,r3
 400fc14:	88c8d83a 	srl	r4,r17,r3
 400fc18:	8962983a 	sll	r17,r17,r5
 400fc1c:	114a983a 	sll	r5,r2,r5
 400fc20:	10c6d83a 	srl	r3,r2,r3
 400fc24:	8804c03a 	cmpne	r2,r17,zero
 400fc28:	290ab03a 	or	r5,r5,r4
 400fc2c:	28a2b03a 	or	r17,r5,r2
 400fc30:	0021883a 	mov	r16,zero
 400fc34:	003fa206 	br	400fac0 <__alt_data_end+0xfc00fac0>
 400fc38:	2090b03a 	or	r8,r4,r2
 400fc3c:	40018e26 	beq	r8,zero,4010278 <__subdf3+0x83c>
 400fc40:	1007883a 	mov	r3,r2
 400fc44:	2023883a 	mov	r17,r4
 400fc48:	888001cc 	andi	r2,r17,7
 400fc4c:	103f9e1e 	bne	r2,zero,400fac8 <__alt_data_end+0xfc00fac8>
 400fc50:	1804977a 	slli	r2,r3,29
 400fc54:	8822d0fa 	srli	r17,r17,3
 400fc58:	1810d0fa 	srli	r8,r3,3
 400fc5c:	9100004c 	andi	r4,r18,1
 400fc60:	1444b03a 	or	r2,r2,r17
 400fc64:	00c1ffc4 	movi	r3,2047
 400fc68:	80c02826 	beq	r16,r3,400fd0c <__subdf3+0x2d0>
 400fc6c:	01400434 	movhi	r5,16
 400fc70:	297fffc4 	addi	r5,r5,-1
 400fc74:	80e0703a 	and	r16,r16,r3
 400fc78:	414a703a 	and	r5,r8,r5
 400fc7c:	003fa806 	br	400fb20 <__alt_data_end+0xfc00fb20>
 400fc80:	0080630e 	bge	zero,r2,400fe10 <__subdf3+0x3d4>
 400fc84:	48003026 	beq	r9,zero,400fd48 <__subdf3+0x30c>
 400fc88:	0101ffc4 	movi	r4,2047
 400fc8c:	813f8c26 	beq	r16,r4,400fac0 <__alt_data_end+0xfc00fac0>
 400fc90:	29402034 	orhi	r5,r5,128
 400fc94:	01000e04 	movi	r4,56
 400fc98:	2080a90e 	bge	r4,r2,400ff40 <__subdf3+0x504>
 400fc9c:	298cb03a 	or	r6,r5,r6
 400fca0:	3012c03a 	cmpne	r9,r6,zero
 400fca4:	0005883a 	mov	r2,zero
 400fca8:	4c53883a 	add	r9,r9,r17
 400fcac:	4c63803a 	cmpltu	r17,r9,r17
 400fcb0:	10c7883a 	add	r3,r2,r3
 400fcb4:	88c7883a 	add	r3,r17,r3
 400fcb8:	4823883a 	mov	r17,r9
 400fcbc:	1880202c 	andhi	r2,r3,128
 400fcc0:	1000d026 	beq	r2,zero,4010004 <__subdf3+0x5c8>
 400fcc4:	84000044 	addi	r16,r16,1
 400fcc8:	0081ffc4 	movi	r2,2047
 400fccc:	8080fe26 	beq	r16,r2,40100c8 <__subdf3+0x68c>
 400fcd0:	00bfe034 	movhi	r2,65408
 400fcd4:	10bfffc4 	addi	r2,r2,-1
 400fcd8:	1886703a 	and	r3,r3,r2
 400fcdc:	880ad07a 	srli	r5,r17,1
 400fce0:	180497fa 	slli	r2,r3,31
 400fce4:	8900004c 	andi	r4,r17,1
 400fce8:	2922b03a 	or	r17,r5,r4
 400fcec:	1806d07a 	srli	r3,r3,1
 400fcf0:	1462b03a 	or	r17,r2,r17
 400fcf4:	3825883a 	mov	r18,r7
 400fcf8:	003f7106 	br	400fac0 <__alt_data_end+0xfc00fac0>
 400fcfc:	2984b03a 	or	r2,r5,r6
 400fd00:	103f6826 	beq	r2,zero,400faa4 <__alt_data_end+0xfc00faa4>
 400fd04:	39c03fcc 	andi	r7,r7,255
 400fd08:	003f6706 	br	400faa8 <__alt_data_end+0xfc00faa8>
 400fd0c:	4086b03a 	or	r3,r8,r2
 400fd10:	18015226 	beq	r3,zero,401025c <__subdf3+0x820>
 400fd14:	00c00434 	movhi	r3,16
 400fd18:	41400234 	orhi	r5,r8,8
 400fd1c:	18ffffc4 	addi	r3,r3,-1
 400fd20:	28ca703a 	and	r5,r5,r3
 400fd24:	003f7e06 	br	400fb20 <__alt_data_end+0xfc00fb20>
 400fd28:	10bfffc4 	addi	r2,r2,-1
 400fd2c:	1000491e 	bne	r2,zero,400fe54 <__subdf3+0x418>
 400fd30:	898fc83a 	sub	r7,r17,r6
 400fd34:	89e3803a 	cmpltu	r17,r17,r7
 400fd38:	1947c83a 	sub	r3,r3,r5
 400fd3c:	1c47c83a 	sub	r3,r3,r17
 400fd40:	3823883a 	mov	r17,r7
 400fd44:	003f9b06 	br	400fbb4 <__alt_data_end+0xfc00fbb4>
 400fd48:	2988b03a 	or	r4,r5,r6
 400fd4c:	203f5c26 	beq	r4,zero,400fac0 <__alt_data_end+0xfc00fac0>
 400fd50:	10bfffc4 	addi	r2,r2,-1
 400fd54:	1000931e 	bne	r2,zero,400ffa4 <__subdf3+0x568>
 400fd58:	898d883a 	add	r6,r17,r6
 400fd5c:	3463803a 	cmpltu	r17,r6,r17
 400fd60:	1947883a 	add	r3,r3,r5
 400fd64:	88c7883a 	add	r3,r17,r3
 400fd68:	3023883a 	mov	r17,r6
 400fd6c:	003fd306 	br	400fcbc <__alt_data_end+0xfc00fcbc>
 400fd70:	1000541e 	bne	r2,zero,400fec4 <__subdf3+0x488>
 400fd74:	80800044 	addi	r2,r16,1
 400fd78:	1081ffcc 	andi	r2,r2,2047
 400fd7c:	01000044 	movi	r4,1
 400fd80:	2080a20e 	bge	r4,r2,401000c <__subdf3+0x5d0>
 400fd84:	8989c83a 	sub	r4,r17,r6
 400fd88:	8905803a 	cmpltu	r2,r17,r4
 400fd8c:	1967c83a 	sub	r19,r3,r5
 400fd90:	98a7c83a 	sub	r19,r19,r2
 400fd94:	9880202c 	andhi	r2,r19,128
 400fd98:	10006326 	beq	r2,zero,400ff28 <__subdf3+0x4ec>
 400fd9c:	3463c83a 	sub	r17,r6,r17
 400fda0:	28c7c83a 	sub	r3,r5,r3
 400fda4:	344d803a 	cmpltu	r6,r6,r17
 400fda8:	19a7c83a 	sub	r19,r3,r6
 400fdac:	3825883a 	mov	r18,r7
 400fdb0:	983f861e 	bne	r19,zero,400fbcc <__alt_data_end+0xfc00fbcc>
 400fdb4:	8809883a 	mov	r4,r17
 400fdb8:	4003da80 	call	4003da8 <__clzsi2>
 400fdbc:	10800804 	addi	r2,r2,32
 400fdc0:	113ffe04 	addi	r4,r2,-8
 400fdc4:	00c007c4 	movi	r3,31
 400fdc8:	193f850e 	bge	r3,r4,400fbe0 <__alt_data_end+0xfc00fbe0>
 400fdcc:	10bff604 	addi	r2,r2,-40
 400fdd0:	8884983a 	sll	r2,r17,r2
 400fdd4:	0023883a 	mov	r17,zero
 400fdd8:	243f880e 	bge	r4,r16,400fbfc <__alt_data_end+0xfc00fbfc>
 400fddc:	00ffe034 	movhi	r3,65408
 400fde0:	18ffffc4 	addi	r3,r3,-1
 400fde4:	8121c83a 	sub	r16,r16,r4
 400fde8:	10c6703a 	and	r3,r2,r3
 400fdec:	003f3406 	br	400fac0 <__alt_data_end+0xfc00fac0>
 400fdf0:	9100004c 	andi	r4,r18,1
 400fdf4:	000b883a 	mov	r5,zero
 400fdf8:	0005883a 	mov	r2,zero
 400fdfc:	003f4806 	br	400fb20 <__alt_data_end+0xfc00fb20>
 400fe00:	298cb03a 	or	r6,r5,r6
 400fe04:	300cc03a 	cmpne	r6,r6,zero
 400fe08:	0005883a 	mov	r2,zero
 400fe0c:	003f6406 	br	400fba0 <__alt_data_end+0xfc00fba0>
 400fe10:	10009a1e 	bne	r2,zero,401007c <__subdf3+0x640>
 400fe14:	82400044 	addi	r9,r16,1
 400fe18:	4881ffcc 	andi	r2,r9,2047
 400fe1c:	02800044 	movi	r10,1
 400fe20:	5080670e 	bge	r10,r2,400ffc0 <__subdf3+0x584>
 400fe24:	0081ffc4 	movi	r2,2047
 400fe28:	4880af26 	beq	r9,r2,40100e8 <__subdf3+0x6ac>
 400fe2c:	898d883a 	add	r6,r17,r6
 400fe30:	1945883a 	add	r2,r3,r5
 400fe34:	3447803a 	cmpltu	r3,r6,r17
 400fe38:	1887883a 	add	r3,r3,r2
 400fe3c:	182297fa 	slli	r17,r3,31
 400fe40:	300cd07a 	srli	r6,r6,1
 400fe44:	1806d07a 	srli	r3,r3,1
 400fe48:	4821883a 	mov	r16,r9
 400fe4c:	89a2b03a 	or	r17,r17,r6
 400fe50:	003f1b06 	br	400fac0 <__alt_data_end+0xfc00fac0>
 400fe54:	0101ffc4 	movi	r4,2047
 400fe58:	813f441e 	bne	r16,r4,400fb6c <__alt_data_end+0xfc00fb6c>
 400fe5c:	003f1806 	br	400fac0 <__alt_data_end+0xfc00fac0>
 400fe60:	843ff844 	addi	r16,r16,-31
 400fe64:	01400804 	movi	r5,32
 400fe68:	1408d83a 	srl	r4,r2,r16
 400fe6c:	19405026 	beq	r3,r5,400ffb0 <__subdf3+0x574>
 400fe70:	01401004 	movi	r5,64
 400fe74:	28c7c83a 	sub	r3,r5,r3
 400fe78:	10c4983a 	sll	r2,r2,r3
 400fe7c:	88a2b03a 	or	r17,r17,r2
 400fe80:	8822c03a 	cmpne	r17,r17,zero
 400fe84:	2462b03a 	or	r17,r4,r17
 400fe88:	0007883a 	mov	r3,zero
 400fe8c:	0021883a 	mov	r16,zero
 400fe90:	003f6d06 	br	400fc48 <__alt_data_end+0xfc00fc48>
 400fe94:	11fff804 	addi	r7,r2,-32
 400fe98:	01000804 	movi	r4,32
 400fe9c:	29ced83a 	srl	r7,r5,r7
 400fea0:	11004526 	beq	r2,r4,400ffb8 <__subdf3+0x57c>
 400fea4:	01001004 	movi	r4,64
 400fea8:	2089c83a 	sub	r4,r4,r2
 400feac:	2904983a 	sll	r2,r5,r4
 400feb0:	118cb03a 	or	r6,r2,r6
 400feb4:	300cc03a 	cmpne	r6,r6,zero
 400feb8:	398cb03a 	or	r6,r7,r6
 400febc:	0005883a 	mov	r2,zero
 400fec0:	003f3706 	br	400fba0 <__alt_data_end+0xfc00fba0>
 400fec4:	80002a26 	beq	r16,zero,400ff70 <__subdf3+0x534>
 400fec8:	0101ffc4 	movi	r4,2047
 400fecc:	49006626 	beq	r9,r4,4010068 <__subdf3+0x62c>
 400fed0:	0085c83a 	sub	r2,zero,r2
 400fed4:	18c02034 	orhi	r3,r3,128
 400fed8:	01000e04 	movi	r4,56
 400fedc:	20807e16 	blt	r4,r2,40100d8 <__subdf3+0x69c>
 400fee0:	010007c4 	movi	r4,31
 400fee4:	2080e716 	blt	r4,r2,4010284 <__subdf3+0x848>
 400fee8:	01000804 	movi	r4,32
 400feec:	2089c83a 	sub	r4,r4,r2
 400fef0:	1914983a 	sll	r10,r3,r4
 400fef4:	8890d83a 	srl	r8,r17,r2
 400fef8:	8908983a 	sll	r4,r17,r4
 400fefc:	1884d83a 	srl	r2,r3,r2
 400ff00:	5222b03a 	or	r17,r10,r8
 400ff04:	2006c03a 	cmpne	r3,r4,zero
 400ff08:	88e2b03a 	or	r17,r17,r3
 400ff0c:	3463c83a 	sub	r17,r6,r17
 400ff10:	2885c83a 	sub	r2,r5,r2
 400ff14:	344d803a 	cmpltu	r6,r6,r17
 400ff18:	1187c83a 	sub	r3,r2,r6
 400ff1c:	4821883a 	mov	r16,r9
 400ff20:	3825883a 	mov	r18,r7
 400ff24:	003f2306 	br	400fbb4 <__alt_data_end+0xfc00fbb4>
 400ff28:	24d0b03a 	or	r8,r4,r19
 400ff2c:	40001b1e 	bne	r8,zero,400ff9c <__subdf3+0x560>
 400ff30:	0005883a 	mov	r2,zero
 400ff34:	0009883a 	mov	r4,zero
 400ff38:	0021883a 	mov	r16,zero
 400ff3c:	003f4906 	br	400fc64 <__alt_data_end+0xfc00fc64>
 400ff40:	010007c4 	movi	r4,31
 400ff44:	20803a16 	blt	r4,r2,4010030 <__subdf3+0x5f4>
 400ff48:	01000804 	movi	r4,32
 400ff4c:	2089c83a 	sub	r4,r4,r2
 400ff50:	2912983a 	sll	r9,r5,r4
 400ff54:	3090d83a 	srl	r8,r6,r2
 400ff58:	3108983a 	sll	r4,r6,r4
 400ff5c:	2884d83a 	srl	r2,r5,r2
 400ff60:	4a12b03a 	or	r9,r9,r8
 400ff64:	2008c03a 	cmpne	r4,r4,zero
 400ff68:	4912b03a 	or	r9,r9,r4
 400ff6c:	003f4e06 	br	400fca8 <__alt_data_end+0xfc00fca8>
 400ff70:	1c48b03a 	or	r4,r3,r17
 400ff74:	20003c26 	beq	r4,zero,4010068 <__subdf3+0x62c>
 400ff78:	0084303a 	nor	r2,zero,r2
 400ff7c:	1000381e 	bne	r2,zero,4010060 <__subdf3+0x624>
 400ff80:	3463c83a 	sub	r17,r6,r17
 400ff84:	28c5c83a 	sub	r2,r5,r3
 400ff88:	344d803a 	cmpltu	r6,r6,r17
 400ff8c:	1187c83a 	sub	r3,r2,r6
 400ff90:	4821883a 	mov	r16,r9
 400ff94:	3825883a 	mov	r18,r7
 400ff98:	003f0606 	br	400fbb4 <__alt_data_end+0xfc00fbb4>
 400ff9c:	2023883a 	mov	r17,r4
 400ffa0:	003f0906 	br	400fbc8 <__alt_data_end+0xfc00fbc8>
 400ffa4:	0101ffc4 	movi	r4,2047
 400ffa8:	813f3a1e 	bne	r16,r4,400fc94 <__alt_data_end+0xfc00fc94>
 400ffac:	003ec406 	br	400fac0 <__alt_data_end+0xfc00fac0>
 400ffb0:	0005883a 	mov	r2,zero
 400ffb4:	003fb106 	br	400fe7c <__alt_data_end+0xfc00fe7c>
 400ffb8:	0005883a 	mov	r2,zero
 400ffbc:	003fbc06 	br	400feb0 <__alt_data_end+0xfc00feb0>
 400ffc0:	1c44b03a 	or	r2,r3,r17
 400ffc4:	80008e1e 	bne	r16,zero,4010200 <__subdf3+0x7c4>
 400ffc8:	1000c826 	beq	r2,zero,40102ec <__subdf3+0x8b0>
 400ffcc:	2984b03a 	or	r2,r5,r6
 400ffd0:	103ebb26 	beq	r2,zero,400fac0 <__alt_data_end+0xfc00fac0>
 400ffd4:	8989883a 	add	r4,r17,r6
 400ffd8:	1945883a 	add	r2,r3,r5
 400ffdc:	2447803a 	cmpltu	r3,r4,r17
 400ffe0:	1887883a 	add	r3,r3,r2
 400ffe4:	1880202c 	andhi	r2,r3,128
 400ffe8:	2023883a 	mov	r17,r4
 400ffec:	103f1626 	beq	r2,zero,400fc48 <__alt_data_end+0xfc00fc48>
 400fff0:	00bfe034 	movhi	r2,65408
 400fff4:	10bfffc4 	addi	r2,r2,-1
 400fff8:	5021883a 	mov	r16,r10
 400fffc:	1886703a 	and	r3,r3,r2
 4010000:	003eaf06 	br	400fac0 <__alt_data_end+0xfc00fac0>
 4010004:	3825883a 	mov	r18,r7
 4010008:	003f0f06 	br	400fc48 <__alt_data_end+0xfc00fc48>
 401000c:	1c44b03a 	or	r2,r3,r17
 4010010:	8000251e 	bne	r16,zero,40100a8 <__subdf3+0x66c>
 4010014:	1000661e 	bne	r2,zero,40101b0 <__subdf3+0x774>
 4010018:	2990b03a 	or	r8,r5,r6
 401001c:	40009626 	beq	r8,zero,4010278 <__subdf3+0x83c>
 4010020:	2807883a 	mov	r3,r5
 4010024:	3023883a 	mov	r17,r6
 4010028:	3825883a 	mov	r18,r7
 401002c:	003ea406 	br	400fac0 <__alt_data_end+0xfc00fac0>
 4010030:	127ff804 	addi	r9,r2,-32
 4010034:	01000804 	movi	r4,32
 4010038:	2a52d83a 	srl	r9,r5,r9
 401003c:	11008c26 	beq	r2,r4,4010270 <__subdf3+0x834>
 4010040:	01001004 	movi	r4,64
 4010044:	2085c83a 	sub	r2,r4,r2
 4010048:	2884983a 	sll	r2,r5,r2
 401004c:	118cb03a 	or	r6,r2,r6
 4010050:	300cc03a 	cmpne	r6,r6,zero
 4010054:	4992b03a 	or	r9,r9,r6
 4010058:	0005883a 	mov	r2,zero
 401005c:	003f1206 	br	400fca8 <__alt_data_end+0xfc00fca8>
 4010060:	0101ffc4 	movi	r4,2047
 4010064:	493f9c1e 	bne	r9,r4,400fed8 <__alt_data_end+0xfc00fed8>
 4010068:	2807883a 	mov	r3,r5
 401006c:	3023883a 	mov	r17,r6
 4010070:	4821883a 	mov	r16,r9
 4010074:	3825883a 	mov	r18,r7
 4010078:	003e9106 	br	400fac0 <__alt_data_end+0xfc00fac0>
 401007c:	80001f1e 	bne	r16,zero,40100fc <__subdf3+0x6c0>
 4010080:	1c48b03a 	or	r4,r3,r17
 4010084:	20005a26 	beq	r4,zero,40101f0 <__subdf3+0x7b4>
 4010088:	0084303a 	nor	r2,zero,r2
 401008c:	1000561e 	bne	r2,zero,40101e8 <__subdf3+0x7ac>
 4010090:	89a3883a 	add	r17,r17,r6
 4010094:	1945883a 	add	r2,r3,r5
 4010098:	898d803a 	cmpltu	r6,r17,r6
 401009c:	3087883a 	add	r3,r6,r2
 40100a0:	4821883a 	mov	r16,r9
 40100a4:	003f0506 	br	400fcbc <__alt_data_end+0xfc00fcbc>
 40100a8:	10002b1e 	bne	r2,zero,4010158 <__subdf3+0x71c>
 40100ac:	2984b03a 	or	r2,r5,r6
 40100b0:	10008026 	beq	r2,zero,40102b4 <__subdf3+0x878>
 40100b4:	2807883a 	mov	r3,r5
 40100b8:	3023883a 	mov	r17,r6
 40100bc:	3825883a 	mov	r18,r7
 40100c0:	0401ffc4 	movi	r16,2047
 40100c4:	003e7e06 	br	400fac0 <__alt_data_end+0xfc00fac0>
 40100c8:	3809883a 	mov	r4,r7
 40100cc:	0011883a 	mov	r8,zero
 40100d0:	0005883a 	mov	r2,zero
 40100d4:	003ee306 	br	400fc64 <__alt_data_end+0xfc00fc64>
 40100d8:	1c62b03a 	or	r17,r3,r17
 40100dc:	8822c03a 	cmpne	r17,r17,zero
 40100e0:	0005883a 	mov	r2,zero
 40100e4:	003f8906 	br	400ff0c <__alt_data_end+0xfc00ff0c>
 40100e8:	3809883a 	mov	r4,r7
 40100ec:	4821883a 	mov	r16,r9
 40100f0:	0011883a 	mov	r8,zero
 40100f4:	0005883a 	mov	r2,zero
 40100f8:	003eda06 	br	400fc64 <__alt_data_end+0xfc00fc64>
 40100fc:	0101ffc4 	movi	r4,2047
 4010100:	49003b26 	beq	r9,r4,40101f0 <__subdf3+0x7b4>
 4010104:	0085c83a 	sub	r2,zero,r2
 4010108:	18c02034 	orhi	r3,r3,128
 401010c:	01000e04 	movi	r4,56
 4010110:	20806e16 	blt	r4,r2,40102cc <__subdf3+0x890>
 4010114:	010007c4 	movi	r4,31
 4010118:	20807716 	blt	r4,r2,40102f8 <__subdf3+0x8bc>
 401011c:	01000804 	movi	r4,32
 4010120:	2089c83a 	sub	r4,r4,r2
 4010124:	1914983a 	sll	r10,r3,r4
 4010128:	8890d83a 	srl	r8,r17,r2
 401012c:	8908983a 	sll	r4,r17,r4
 4010130:	1884d83a 	srl	r2,r3,r2
 4010134:	5222b03a 	or	r17,r10,r8
 4010138:	2006c03a 	cmpne	r3,r4,zero
 401013c:	88e2b03a 	or	r17,r17,r3
 4010140:	89a3883a 	add	r17,r17,r6
 4010144:	1145883a 	add	r2,r2,r5
 4010148:	898d803a 	cmpltu	r6,r17,r6
 401014c:	3087883a 	add	r3,r6,r2
 4010150:	4821883a 	mov	r16,r9
 4010154:	003ed906 	br	400fcbc <__alt_data_end+0xfc00fcbc>
 4010158:	2984b03a 	or	r2,r5,r6
 401015c:	10004226 	beq	r2,zero,4010268 <__subdf3+0x82c>
 4010160:	1808d0fa 	srli	r4,r3,3
 4010164:	8822d0fa 	srli	r17,r17,3
 4010168:	1806977a 	slli	r3,r3,29
 401016c:	2080022c 	andhi	r2,r4,8
 4010170:	1c62b03a 	or	r17,r3,r17
 4010174:	10000826 	beq	r2,zero,4010198 <__subdf3+0x75c>
 4010178:	2812d0fa 	srli	r9,r5,3
 401017c:	4880022c 	andhi	r2,r9,8
 4010180:	1000051e 	bne	r2,zero,4010198 <__subdf3+0x75c>
 4010184:	300cd0fa 	srli	r6,r6,3
 4010188:	2804977a 	slli	r2,r5,29
 401018c:	4809883a 	mov	r4,r9
 4010190:	3825883a 	mov	r18,r7
 4010194:	11a2b03a 	or	r17,r2,r6
 4010198:	8806d77a 	srli	r3,r17,29
 401019c:	200890fa 	slli	r4,r4,3
 40101a0:	882290fa 	slli	r17,r17,3
 40101a4:	0401ffc4 	movi	r16,2047
 40101a8:	1906b03a 	or	r3,r3,r4
 40101ac:	003e4406 	br	400fac0 <__alt_data_end+0xfc00fac0>
 40101b0:	2984b03a 	or	r2,r5,r6
 40101b4:	103e4226 	beq	r2,zero,400fac0 <__alt_data_end+0xfc00fac0>
 40101b8:	8989c83a 	sub	r4,r17,r6
 40101bc:	8911803a 	cmpltu	r8,r17,r4
 40101c0:	1945c83a 	sub	r2,r3,r5
 40101c4:	1205c83a 	sub	r2,r2,r8
 40101c8:	1200202c 	andhi	r8,r2,128
 40101cc:	403e9a26 	beq	r8,zero,400fc38 <__alt_data_end+0xfc00fc38>
 40101d0:	3463c83a 	sub	r17,r6,r17
 40101d4:	28c5c83a 	sub	r2,r5,r3
 40101d8:	344d803a 	cmpltu	r6,r6,r17
 40101dc:	1187c83a 	sub	r3,r2,r6
 40101e0:	3825883a 	mov	r18,r7
 40101e4:	003e3606 	br	400fac0 <__alt_data_end+0xfc00fac0>
 40101e8:	0101ffc4 	movi	r4,2047
 40101ec:	493fc71e 	bne	r9,r4,401010c <__alt_data_end+0xfc01010c>
 40101f0:	2807883a 	mov	r3,r5
 40101f4:	3023883a 	mov	r17,r6
 40101f8:	4821883a 	mov	r16,r9
 40101fc:	003e3006 	br	400fac0 <__alt_data_end+0xfc00fac0>
 4010200:	10003626 	beq	r2,zero,40102dc <__subdf3+0x8a0>
 4010204:	2984b03a 	or	r2,r5,r6
 4010208:	10001726 	beq	r2,zero,4010268 <__subdf3+0x82c>
 401020c:	1808d0fa 	srli	r4,r3,3
 4010210:	8822d0fa 	srli	r17,r17,3
 4010214:	1806977a 	slli	r3,r3,29
 4010218:	2080022c 	andhi	r2,r4,8
 401021c:	1c62b03a 	or	r17,r3,r17
 4010220:	10000726 	beq	r2,zero,4010240 <__subdf3+0x804>
 4010224:	2812d0fa 	srli	r9,r5,3
 4010228:	4880022c 	andhi	r2,r9,8
 401022c:	1000041e 	bne	r2,zero,4010240 <__subdf3+0x804>
 4010230:	300cd0fa 	srli	r6,r6,3
 4010234:	2804977a 	slli	r2,r5,29
 4010238:	4809883a 	mov	r4,r9
 401023c:	11a2b03a 	or	r17,r2,r6
 4010240:	8806d77a 	srli	r3,r17,29
 4010244:	200890fa 	slli	r4,r4,3
 4010248:	882290fa 	slli	r17,r17,3
 401024c:	3825883a 	mov	r18,r7
 4010250:	1906b03a 	or	r3,r3,r4
 4010254:	0401ffc4 	movi	r16,2047
 4010258:	003e1906 	br	400fac0 <__alt_data_end+0xfc00fac0>
 401025c:	000b883a 	mov	r5,zero
 4010260:	0005883a 	mov	r2,zero
 4010264:	003e2e06 	br	400fb20 <__alt_data_end+0xfc00fb20>
 4010268:	0401ffc4 	movi	r16,2047
 401026c:	003e1406 	br	400fac0 <__alt_data_end+0xfc00fac0>
 4010270:	0005883a 	mov	r2,zero
 4010274:	003f7506 	br	401004c <__alt_data_end+0xfc01004c>
 4010278:	0005883a 	mov	r2,zero
 401027c:	0009883a 	mov	r4,zero
 4010280:	003e7806 	br	400fc64 <__alt_data_end+0xfc00fc64>
 4010284:	123ff804 	addi	r8,r2,-32
 4010288:	01000804 	movi	r4,32
 401028c:	1a10d83a 	srl	r8,r3,r8
 4010290:	11002526 	beq	r2,r4,4010328 <__subdf3+0x8ec>
 4010294:	01001004 	movi	r4,64
 4010298:	2085c83a 	sub	r2,r4,r2
 401029c:	1884983a 	sll	r2,r3,r2
 40102a0:	1444b03a 	or	r2,r2,r17
 40102a4:	1004c03a 	cmpne	r2,r2,zero
 40102a8:	40a2b03a 	or	r17,r8,r2
 40102ac:	0005883a 	mov	r2,zero
 40102b0:	003f1606 	br	400ff0c <__alt_data_end+0xfc00ff0c>
 40102b4:	02000434 	movhi	r8,16
 40102b8:	0009883a 	mov	r4,zero
 40102bc:	423fffc4 	addi	r8,r8,-1
 40102c0:	00bfffc4 	movi	r2,-1
 40102c4:	0401ffc4 	movi	r16,2047
 40102c8:	003e6606 	br	400fc64 <__alt_data_end+0xfc00fc64>
 40102cc:	1c62b03a 	or	r17,r3,r17
 40102d0:	8822c03a 	cmpne	r17,r17,zero
 40102d4:	0005883a 	mov	r2,zero
 40102d8:	003f9906 	br	4010140 <__alt_data_end+0xfc010140>
 40102dc:	2807883a 	mov	r3,r5
 40102e0:	3023883a 	mov	r17,r6
 40102e4:	0401ffc4 	movi	r16,2047
 40102e8:	003df506 	br	400fac0 <__alt_data_end+0xfc00fac0>
 40102ec:	2807883a 	mov	r3,r5
 40102f0:	3023883a 	mov	r17,r6
 40102f4:	003df206 	br	400fac0 <__alt_data_end+0xfc00fac0>
 40102f8:	123ff804 	addi	r8,r2,-32
 40102fc:	01000804 	movi	r4,32
 4010300:	1a10d83a 	srl	r8,r3,r8
 4010304:	11000a26 	beq	r2,r4,4010330 <__subdf3+0x8f4>
 4010308:	01001004 	movi	r4,64
 401030c:	2085c83a 	sub	r2,r4,r2
 4010310:	1884983a 	sll	r2,r3,r2
 4010314:	1444b03a 	or	r2,r2,r17
 4010318:	1004c03a 	cmpne	r2,r2,zero
 401031c:	40a2b03a 	or	r17,r8,r2
 4010320:	0005883a 	mov	r2,zero
 4010324:	003f8606 	br	4010140 <__alt_data_end+0xfc010140>
 4010328:	0005883a 	mov	r2,zero
 401032c:	003fdc06 	br	40102a0 <__alt_data_end+0xfc0102a0>
 4010330:	0005883a 	mov	r2,zero
 4010334:	003ff706 	br	4010314 <__alt_data_end+0xfc010314>

04010338 <__fixdfsi>:
 4010338:	280cd53a 	srli	r6,r5,20
 401033c:	00c00434 	movhi	r3,16
 4010340:	18ffffc4 	addi	r3,r3,-1
 4010344:	3181ffcc 	andi	r6,r6,2047
 4010348:	01c0ff84 	movi	r7,1022
 401034c:	28c6703a 	and	r3,r5,r3
 4010350:	280ad7fa 	srli	r5,r5,31
 4010354:	3980120e 	bge	r7,r6,40103a0 <__fixdfsi+0x68>
 4010358:	00810744 	movi	r2,1053
 401035c:	11800c16 	blt	r2,r6,4010390 <__fixdfsi+0x58>
 4010360:	00810cc4 	movi	r2,1075
 4010364:	1185c83a 	sub	r2,r2,r6
 4010368:	01c007c4 	movi	r7,31
 401036c:	18c00434 	orhi	r3,r3,16
 4010370:	38800d16 	blt	r7,r2,40103a8 <__fixdfsi+0x70>
 4010374:	31befb44 	addi	r6,r6,-1043
 4010378:	2084d83a 	srl	r2,r4,r2
 401037c:	1986983a 	sll	r3,r3,r6
 4010380:	1884b03a 	or	r2,r3,r2
 4010384:	28000726 	beq	r5,zero,40103a4 <__fixdfsi+0x6c>
 4010388:	0085c83a 	sub	r2,zero,r2
 401038c:	f800283a 	ret
 4010390:	00a00034 	movhi	r2,32768
 4010394:	10bfffc4 	addi	r2,r2,-1
 4010398:	2885883a 	add	r2,r5,r2
 401039c:	f800283a 	ret
 40103a0:	0005883a 	mov	r2,zero
 40103a4:	f800283a 	ret
 40103a8:	008104c4 	movi	r2,1043
 40103ac:	1185c83a 	sub	r2,r2,r6
 40103b0:	1884d83a 	srl	r2,r3,r2
 40103b4:	003ff306 	br	4010384 <__alt_data_end+0xfc010384>

040103b8 <__floatsidf>:
 40103b8:	defffd04 	addi	sp,sp,-12
 40103bc:	dfc00215 	stw	ra,8(sp)
 40103c0:	dc400115 	stw	r17,4(sp)
 40103c4:	dc000015 	stw	r16,0(sp)
 40103c8:	20002b26 	beq	r4,zero,4010478 <__floatsidf+0xc0>
 40103cc:	2023883a 	mov	r17,r4
 40103d0:	2020d7fa 	srli	r16,r4,31
 40103d4:	20002d16 	blt	r4,zero,401048c <__floatsidf+0xd4>
 40103d8:	8809883a 	mov	r4,r17
 40103dc:	4003da80 	call	4003da8 <__clzsi2>
 40103e0:	01410784 	movi	r5,1054
 40103e4:	288bc83a 	sub	r5,r5,r2
 40103e8:	01010cc4 	movi	r4,1075
 40103ec:	2149c83a 	sub	r4,r4,r5
 40103f0:	00c007c4 	movi	r3,31
 40103f4:	1900160e 	bge	r3,r4,4010450 <__floatsidf+0x98>
 40103f8:	00c104c4 	movi	r3,1043
 40103fc:	1947c83a 	sub	r3,r3,r5
 4010400:	88c6983a 	sll	r3,r17,r3
 4010404:	00800434 	movhi	r2,16
 4010408:	10bfffc4 	addi	r2,r2,-1
 401040c:	1886703a 	and	r3,r3,r2
 4010410:	2941ffcc 	andi	r5,r5,2047
 4010414:	800d883a 	mov	r6,r16
 4010418:	0005883a 	mov	r2,zero
 401041c:	280a953a 	slli	r5,r5,20
 4010420:	31803fcc 	andi	r6,r6,255
 4010424:	01000434 	movhi	r4,16
 4010428:	300c97fa 	slli	r6,r6,31
 401042c:	213fffc4 	addi	r4,r4,-1
 4010430:	1906703a 	and	r3,r3,r4
 4010434:	1946b03a 	or	r3,r3,r5
 4010438:	1986b03a 	or	r3,r3,r6
 401043c:	dfc00217 	ldw	ra,8(sp)
 4010440:	dc400117 	ldw	r17,4(sp)
 4010444:	dc000017 	ldw	r16,0(sp)
 4010448:	dec00304 	addi	sp,sp,12
 401044c:	f800283a 	ret
 4010450:	00c002c4 	movi	r3,11
 4010454:	1887c83a 	sub	r3,r3,r2
 4010458:	88c6d83a 	srl	r3,r17,r3
 401045c:	8904983a 	sll	r2,r17,r4
 4010460:	01000434 	movhi	r4,16
 4010464:	213fffc4 	addi	r4,r4,-1
 4010468:	2941ffcc 	andi	r5,r5,2047
 401046c:	1906703a 	and	r3,r3,r4
 4010470:	800d883a 	mov	r6,r16
 4010474:	003fe906 	br	401041c <__alt_data_end+0xfc01041c>
 4010478:	000d883a 	mov	r6,zero
 401047c:	000b883a 	mov	r5,zero
 4010480:	0007883a 	mov	r3,zero
 4010484:	0005883a 	mov	r2,zero
 4010488:	003fe406 	br	401041c <__alt_data_end+0xfc01041c>
 401048c:	0123c83a 	sub	r17,zero,r4
 4010490:	003fd106 	br	40103d8 <__alt_data_end+0xfc0103d8>

04010494 <__floatunsidf>:
 4010494:	defffe04 	addi	sp,sp,-8
 4010498:	dc000015 	stw	r16,0(sp)
 401049c:	dfc00115 	stw	ra,4(sp)
 40104a0:	2021883a 	mov	r16,r4
 40104a4:	20002226 	beq	r4,zero,4010530 <__floatunsidf+0x9c>
 40104a8:	4003da80 	call	4003da8 <__clzsi2>
 40104ac:	01010784 	movi	r4,1054
 40104b0:	2089c83a 	sub	r4,r4,r2
 40104b4:	01810cc4 	movi	r6,1075
 40104b8:	310dc83a 	sub	r6,r6,r4
 40104bc:	00c007c4 	movi	r3,31
 40104c0:	1980120e 	bge	r3,r6,401050c <__floatunsidf+0x78>
 40104c4:	00c104c4 	movi	r3,1043
 40104c8:	1907c83a 	sub	r3,r3,r4
 40104cc:	80ca983a 	sll	r5,r16,r3
 40104d0:	00800434 	movhi	r2,16
 40104d4:	10bfffc4 	addi	r2,r2,-1
 40104d8:	2101ffcc 	andi	r4,r4,2047
 40104dc:	0021883a 	mov	r16,zero
 40104e0:	288a703a 	and	r5,r5,r2
 40104e4:	2008953a 	slli	r4,r4,20
 40104e8:	00c00434 	movhi	r3,16
 40104ec:	18ffffc4 	addi	r3,r3,-1
 40104f0:	28c6703a 	and	r3,r5,r3
 40104f4:	8005883a 	mov	r2,r16
 40104f8:	1906b03a 	or	r3,r3,r4
 40104fc:	dfc00117 	ldw	ra,4(sp)
 4010500:	dc000017 	ldw	r16,0(sp)
 4010504:	dec00204 	addi	sp,sp,8
 4010508:	f800283a 	ret
 401050c:	00c002c4 	movi	r3,11
 4010510:	188bc83a 	sub	r5,r3,r2
 4010514:	814ad83a 	srl	r5,r16,r5
 4010518:	00c00434 	movhi	r3,16
 401051c:	18ffffc4 	addi	r3,r3,-1
 4010520:	81a0983a 	sll	r16,r16,r6
 4010524:	2101ffcc 	andi	r4,r4,2047
 4010528:	28ca703a 	and	r5,r5,r3
 401052c:	003fed06 	br	40104e4 <__alt_data_end+0xfc0104e4>
 4010530:	0009883a 	mov	r4,zero
 4010534:	000b883a 	mov	r5,zero
 4010538:	003fea06 	br	40104e4 <__alt_data_end+0xfc0104e4>

0401053c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401053c:	defffe04 	addi	sp,sp,-8
 4010540:	dfc00115 	stw	ra,4(sp)
 4010544:	df000015 	stw	fp,0(sp)
 4010548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401054c:	d0a01217 	ldw	r2,-32696(gp)
 4010550:	10000326 	beq	r2,zero,4010560 <alt_get_errno+0x24>
 4010554:	d0a01217 	ldw	r2,-32696(gp)
 4010558:	103ee83a 	callr	r2
 401055c:	00000106 	br	4010564 <alt_get_errno+0x28>
 4010560:	d0a70004 	addi	r2,gp,-25600
}
 4010564:	e037883a 	mov	sp,fp
 4010568:	dfc00117 	ldw	ra,4(sp)
 401056c:	df000017 	ldw	fp,0(sp)
 4010570:	dec00204 	addi	sp,sp,8
 4010574:	f800283a 	ret

04010578 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4010578:	defffb04 	addi	sp,sp,-20
 401057c:	dfc00415 	stw	ra,16(sp)
 4010580:	df000315 	stw	fp,12(sp)
 4010584:	df000304 	addi	fp,sp,12
 4010588:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401058c:	e0bfff17 	ldw	r2,-4(fp)
 4010590:	10000616 	blt	r2,zero,40105ac <close+0x34>
 4010594:	e0bfff17 	ldw	r2,-4(fp)
 4010598:	10c00324 	muli	r3,r2,12
 401059c:	00810074 	movhi	r2,1025
 40105a0:	10988f04 	addi	r2,r2,25148
 40105a4:	1885883a 	add	r2,r3,r2
 40105a8:	00000106 	br	40105b0 <close+0x38>
 40105ac:	0005883a 	mov	r2,zero
 40105b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40105b4:	e0bffd17 	ldw	r2,-12(fp)
 40105b8:	10001926 	beq	r2,zero,4010620 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40105bc:	e0bffd17 	ldw	r2,-12(fp)
 40105c0:	10800017 	ldw	r2,0(r2)
 40105c4:	10800417 	ldw	r2,16(r2)
 40105c8:	10000626 	beq	r2,zero,40105e4 <close+0x6c>
 40105cc:	e0bffd17 	ldw	r2,-12(fp)
 40105d0:	10800017 	ldw	r2,0(r2)
 40105d4:	10800417 	ldw	r2,16(r2)
 40105d8:	e13ffd17 	ldw	r4,-12(fp)
 40105dc:	103ee83a 	callr	r2
 40105e0:	00000106 	br	40105e8 <close+0x70>
 40105e4:	0005883a 	mov	r2,zero
 40105e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40105ec:	e13fff17 	ldw	r4,-4(fp)
 40105f0:	4010c380 	call	4010c38 <alt_release_fd>
    if (rval < 0)
 40105f4:	e0bffe17 	ldw	r2,-8(fp)
 40105f8:	1000070e 	bge	r2,zero,4010618 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 40105fc:	401053c0 	call	401053c <alt_get_errno>
 4010600:	1007883a 	mov	r3,r2
 4010604:	e0bffe17 	ldw	r2,-8(fp)
 4010608:	0085c83a 	sub	r2,zero,r2
 401060c:	18800015 	stw	r2,0(r3)
      return -1;
 4010610:	00bfffc4 	movi	r2,-1
 4010614:	00000706 	br	4010634 <close+0xbc>
    }
    return 0;
 4010618:	0005883a 	mov	r2,zero
 401061c:	00000506 	br	4010634 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010620:	401053c0 	call	401053c <alt_get_errno>
 4010624:	1007883a 	mov	r3,r2
 4010628:	00801444 	movi	r2,81
 401062c:	18800015 	stw	r2,0(r3)
    return -1;
 4010630:	00bfffc4 	movi	r2,-1
  }
}
 4010634:	e037883a 	mov	sp,fp
 4010638:	dfc00117 	ldw	ra,4(sp)
 401063c:	df000017 	ldw	fp,0(sp)
 4010640:	dec00204 	addi	sp,sp,8
 4010644:	f800283a 	ret

04010648 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4010648:	defffc04 	addi	sp,sp,-16
 401064c:	df000315 	stw	fp,12(sp)
 4010650:	df000304 	addi	fp,sp,12
 4010654:	e13ffd15 	stw	r4,-12(fp)
 4010658:	e17ffe15 	stw	r5,-8(fp)
 401065c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4010660:	e0bfff17 	ldw	r2,-4(fp)
}
 4010664:	e037883a 	mov	sp,fp
 4010668:	df000017 	ldw	fp,0(sp)
 401066c:	dec00104 	addi	sp,sp,4
 4010670:	f800283a 	ret

04010674 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010674:	defffe04 	addi	sp,sp,-8
 4010678:	dfc00115 	stw	ra,4(sp)
 401067c:	df000015 	stw	fp,0(sp)
 4010680:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010684:	d0a01217 	ldw	r2,-32696(gp)
 4010688:	10000326 	beq	r2,zero,4010698 <alt_get_errno+0x24>
 401068c:	d0a01217 	ldw	r2,-32696(gp)
 4010690:	103ee83a 	callr	r2
 4010694:	00000106 	br	401069c <alt_get_errno+0x28>
 4010698:	d0a70004 	addi	r2,gp,-25600
}
 401069c:	e037883a 	mov	sp,fp
 40106a0:	dfc00117 	ldw	ra,4(sp)
 40106a4:	df000017 	ldw	fp,0(sp)
 40106a8:	dec00204 	addi	sp,sp,8
 40106ac:	f800283a 	ret

040106b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40106b0:	defffb04 	addi	sp,sp,-20
 40106b4:	dfc00415 	stw	ra,16(sp)
 40106b8:	df000315 	stw	fp,12(sp)
 40106bc:	df000304 	addi	fp,sp,12
 40106c0:	e13ffe15 	stw	r4,-8(fp)
 40106c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40106c8:	e0bffe17 	ldw	r2,-8(fp)
 40106cc:	10000616 	blt	r2,zero,40106e8 <fstat+0x38>
 40106d0:	e0bffe17 	ldw	r2,-8(fp)
 40106d4:	10c00324 	muli	r3,r2,12
 40106d8:	00810074 	movhi	r2,1025
 40106dc:	10988f04 	addi	r2,r2,25148
 40106e0:	1885883a 	add	r2,r3,r2
 40106e4:	00000106 	br	40106ec <fstat+0x3c>
 40106e8:	0005883a 	mov	r2,zero
 40106ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 40106f0:	e0bffd17 	ldw	r2,-12(fp)
 40106f4:	10001026 	beq	r2,zero,4010738 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40106f8:	e0bffd17 	ldw	r2,-12(fp)
 40106fc:	10800017 	ldw	r2,0(r2)
 4010700:	10800817 	ldw	r2,32(r2)
 4010704:	10000726 	beq	r2,zero,4010724 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4010708:	e0bffd17 	ldw	r2,-12(fp)
 401070c:	10800017 	ldw	r2,0(r2)
 4010710:	10800817 	ldw	r2,32(r2)
 4010714:	e17fff17 	ldw	r5,-4(fp)
 4010718:	e13ffd17 	ldw	r4,-12(fp)
 401071c:	103ee83a 	callr	r2
 4010720:	00000a06 	br	401074c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4010724:	e0bfff17 	ldw	r2,-4(fp)
 4010728:	00c80004 	movi	r3,8192
 401072c:	10c00115 	stw	r3,4(r2)
      return 0;
 4010730:	0005883a 	mov	r2,zero
 4010734:	00000506 	br	401074c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010738:	40106740 	call	4010674 <alt_get_errno>
 401073c:	1007883a 	mov	r3,r2
 4010740:	00801444 	movi	r2,81
 4010744:	18800015 	stw	r2,0(r3)
    return -1;
 4010748:	00bfffc4 	movi	r2,-1
  }
}
 401074c:	e037883a 	mov	sp,fp
 4010750:	dfc00117 	ldw	ra,4(sp)
 4010754:	df000017 	ldw	fp,0(sp)
 4010758:	dec00204 	addi	sp,sp,8
 401075c:	f800283a 	ret

04010760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010760:	defffe04 	addi	sp,sp,-8
 4010764:	dfc00115 	stw	ra,4(sp)
 4010768:	df000015 	stw	fp,0(sp)
 401076c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010770:	d0a01217 	ldw	r2,-32696(gp)
 4010774:	10000326 	beq	r2,zero,4010784 <alt_get_errno+0x24>
 4010778:	d0a01217 	ldw	r2,-32696(gp)
 401077c:	103ee83a 	callr	r2
 4010780:	00000106 	br	4010788 <alt_get_errno+0x28>
 4010784:	d0a70004 	addi	r2,gp,-25600
}
 4010788:	e037883a 	mov	sp,fp
 401078c:	dfc00117 	ldw	ra,4(sp)
 4010790:	df000017 	ldw	fp,0(sp)
 4010794:	dec00204 	addi	sp,sp,8
 4010798:	f800283a 	ret

0401079c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401079c:	deffed04 	addi	sp,sp,-76
 40107a0:	dfc01215 	stw	ra,72(sp)
 40107a4:	df001115 	stw	fp,68(sp)
 40107a8:	df001104 	addi	fp,sp,68
 40107ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40107b0:	e0bfff17 	ldw	r2,-4(fp)
 40107b4:	10000616 	blt	r2,zero,40107d0 <isatty+0x34>
 40107b8:	e0bfff17 	ldw	r2,-4(fp)
 40107bc:	10c00324 	muli	r3,r2,12
 40107c0:	00810074 	movhi	r2,1025
 40107c4:	10988f04 	addi	r2,r2,25148
 40107c8:	1885883a 	add	r2,r3,r2
 40107cc:	00000106 	br	40107d4 <isatty+0x38>
 40107d0:	0005883a 	mov	r2,zero
 40107d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40107d8:	e0bfef17 	ldw	r2,-68(fp)
 40107dc:	10000e26 	beq	r2,zero,4010818 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40107e0:	e0bfef17 	ldw	r2,-68(fp)
 40107e4:	10800017 	ldw	r2,0(r2)
 40107e8:	10800817 	ldw	r2,32(r2)
 40107ec:	1000021e 	bne	r2,zero,40107f8 <isatty+0x5c>
    {
      return 1;
 40107f0:	00800044 	movi	r2,1
 40107f4:	00000d06 	br	401082c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40107f8:	e0bff004 	addi	r2,fp,-64
 40107fc:	100b883a 	mov	r5,r2
 4010800:	e13fff17 	ldw	r4,-4(fp)
 4010804:	40106b00 	call	40106b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4010808:	e0bff117 	ldw	r2,-60(fp)
 401080c:	10880020 	cmpeqi	r2,r2,8192
 4010810:	10803fcc 	andi	r2,r2,255
 4010814:	00000506 	br	401082c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010818:	40107600 	call	4010760 <alt_get_errno>
 401081c:	1007883a 	mov	r3,r2
 4010820:	00801444 	movi	r2,81
 4010824:	18800015 	stw	r2,0(r3)
    return 0;
 4010828:	0005883a 	mov	r2,zero
  }
}
 401082c:	e037883a 	mov	sp,fp
 4010830:	dfc00117 	ldw	ra,4(sp)
 4010834:	df000017 	ldw	fp,0(sp)
 4010838:	dec00204 	addi	sp,sp,8
 401083c:	f800283a 	ret

04010840 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4010840:	defffc04 	addi	sp,sp,-16
 4010844:	df000315 	stw	fp,12(sp)
 4010848:	df000304 	addi	fp,sp,12
 401084c:	e13ffd15 	stw	r4,-12(fp)
 4010850:	e17ffe15 	stw	r5,-8(fp)
 4010854:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4010858:	e0fffe17 	ldw	r3,-8(fp)
 401085c:	e0bffd17 	ldw	r2,-12(fp)
 4010860:	18800c26 	beq	r3,r2,4010894 <alt_load_section+0x54>
  {
    while( to != end )
 4010864:	00000806 	br	4010888 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4010868:	e0bffe17 	ldw	r2,-8(fp)
 401086c:	10c00104 	addi	r3,r2,4
 4010870:	e0fffe15 	stw	r3,-8(fp)
 4010874:	e0fffd17 	ldw	r3,-12(fp)
 4010878:	19000104 	addi	r4,r3,4
 401087c:	e13ffd15 	stw	r4,-12(fp)
 4010880:	18c00017 	ldw	r3,0(r3)
 4010884:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4010888:	e0fffe17 	ldw	r3,-8(fp)
 401088c:	e0bfff17 	ldw	r2,-4(fp)
 4010890:	18bff51e 	bne	r3,r2,4010868 <__alt_data_end+0xfc010868>
    {
      *to++ = *from++;
    }
  }
}
 4010894:	0001883a 	nop
 4010898:	e037883a 	mov	sp,fp
 401089c:	df000017 	ldw	fp,0(sp)
 40108a0:	dec00104 	addi	sp,sp,4
 40108a4:	f800283a 	ret

040108a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40108a8:	defffe04 	addi	sp,sp,-8
 40108ac:	dfc00115 	stw	ra,4(sp)
 40108b0:	df000015 	stw	fp,0(sp)
 40108b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40108b8:	01810074 	movhi	r6,1025
 40108bc:	319d2e04 	addi	r6,r6,29880
 40108c0:	01410074 	movhi	r5,1025
 40108c4:	29565004 	addi	r5,r5,22848
 40108c8:	01010074 	movhi	r4,1025
 40108cc:	211d2e04 	addi	r4,r4,29880
 40108d0:	40108400 	call	4010840 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40108d4:	01810034 	movhi	r6,1024
 40108d8:	31809104 	addi	r6,r6,580
 40108dc:	01410034 	movhi	r5,1024
 40108e0:	29400804 	addi	r5,r5,32
 40108e4:	01010034 	movhi	r4,1024
 40108e8:	21000804 	addi	r4,r4,32
 40108ec:	40108400 	call	4010840 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40108f0:	01810074 	movhi	r6,1025
 40108f4:	31965004 	addi	r6,r6,22848
 40108f8:	01410074 	movhi	r5,1025
 40108fc:	29541404 	addi	r5,r5,20560
 4010900:	01010074 	movhi	r4,1025
 4010904:	21141404 	addi	r4,r4,20560
 4010908:	40108400 	call	4010840 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 401090c:	4013d100 	call	4013d10 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4010910:	4013f880 	call	4013f88 <alt_icache_flush_all>
}
 4010914:	0001883a 	nop
 4010918:	e037883a 	mov	sp,fp
 401091c:	dfc00117 	ldw	ra,4(sp)
 4010920:	df000017 	ldw	fp,0(sp)
 4010924:	dec00204 	addi	sp,sp,8
 4010928:	f800283a 	ret

0401092c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401092c:	defffe04 	addi	sp,sp,-8
 4010930:	dfc00115 	stw	ra,4(sp)
 4010934:	df000015 	stw	fp,0(sp)
 4010938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401093c:	d0a01217 	ldw	r2,-32696(gp)
 4010940:	10000326 	beq	r2,zero,4010950 <alt_get_errno+0x24>
 4010944:	d0a01217 	ldw	r2,-32696(gp)
 4010948:	103ee83a 	callr	r2
 401094c:	00000106 	br	4010954 <alt_get_errno+0x28>
 4010950:	d0a70004 	addi	r2,gp,-25600
}
 4010954:	e037883a 	mov	sp,fp
 4010958:	dfc00117 	ldw	ra,4(sp)
 401095c:	df000017 	ldw	fp,0(sp)
 4010960:	dec00204 	addi	sp,sp,8
 4010964:	f800283a 	ret

04010968 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4010968:	defff904 	addi	sp,sp,-28
 401096c:	dfc00615 	stw	ra,24(sp)
 4010970:	df000515 	stw	fp,20(sp)
 4010974:	df000504 	addi	fp,sp,20
 4010978:	e13ffd15 	stw	r4,-12(fp)
 401097c:	e17ffe15 	stw	r5,-8(fp)
 4010980:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4010984:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010988:	e0bffd17 	ldw	r2,-12(fp)
 401098c:	10000616 	blt	r2,zero,40109a8 <lseek+0x40>
 4010990:	e0bffd17 	ldw	r2,-12(fp)
 4010994:	10c00324 	muli	r3,r2,12
 4010998:	00810074 	movhi	r2,1025
 401099c:	10988f04 	addi	r2,r2,25148
 40109a0:	1885883a 	add	r2,r3,r2
 40109a4:	00000106 	br	40109ac <lseek+0x44>
 40109a8:	0005883a 	mov	r2,zero
 40109ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40109b0:	e0bffc17 	ldw	r2,-16(fp)
 40109b4:	10001026 	beq	r2,zero,40109f8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40109b8:	e0bffc17 	ldw	r2,-16(fp)
 40109bc:	10800017 	ldw	r2,0(r2)
 40109c0:	10800717 	ldw	r2,28(r2)
 40109c4:	10000926 	beq	r2,zero,40109ec <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40109c8:	e0bffc17 	ldw	r2,-16(fp)
 40109cc:	10800017 	ldw	r2,0(r2)
 40109d0:	10800717 	ldw	r2,28(r2)
 40109d4:	e1bfff17 	ldw	r6,-4(fp)
 40109d8:	e17ffe17 	ldw	r5,-8(fp)
 40109dc:	e13ffc17 	ldw	r4,-16(fp)
 40109e0:	103ee83a 	callr	r2
 40109e4:	e0bffb15 	stw	r2,-20(fp)
 40109e8:	00000506 	br	4010a00 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40109ec:	00bfde84 	movi	r2,-134
 40109f0:	e0bffb15 	stw	r2,-20(fp)
 40109f4:	00000206 	br	4010a00 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 40109f8:	00bfebc4 	movi	r2,-81
 40109fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4010a00:	e0bffb17 	ldw	r2,-20(fp)
 4010a04:	1000070e 	bge	r2,zero,4010a24 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4010a08:	401092c0 	call	401092c <alt_get_errno>
 4010a0c:	1007883a 	mov	r3,r2
 4010a10:	e0bffb17 	ldw	r2,-20(fp)
 4010a14:	0085c83a 	sub	r2,zero,r2
 4010a18:	18800015 	stw	r2,0(r3)
    rc = -1;
 4010a1c:	00bfffc4 	movi	r2,-1
 4010a20:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4010a24:	e0bffb17 	ldw	r2,-20(fp)
}
 4010a28:	e037883a 	mov	sp,fp
 4010a2c:	dfc00117 	ldw	ra,4(sp)
 4010a30:	df000017 	ldw	fp,0(sp)
 4010a34:	dec00204 	addi	sp,sp,8
 4010a38:	f800283a 	ret

04010a3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4010a3c:	defffd04 	addi	sp,sp,-12
 4010a40:	dfc00215 	stw	ra,8(sp)
 4010a44:	df000115 	stw	fp,4(sp)
 4010a48:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4010a4c:	0009883a 	mov	r4,zero
 4010a50:	40110880 	call	4011088 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4010a54:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4010a58:	40110c00 	call	40110c0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4010a5c:	01810074 	movhi	r6,1025
 4010a60:	31963b04 	addi	r6,r6,22764
 4010a64:	01410074 	movhi	r5,1025
 4010a68:	29563b04 	addi	r5,r5,22764
 4010a6c:	01010074 	movhi	r4,1025
 4010a70:	21163b04 	addi	r4,r4,22764
 4010a74:	40143200 	call	4014320 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4010a78:	4013e380 	call	4013e38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4010a7c:	01010074 	movhi	r4,1025
 4010a80:	210fa604 	addi	r4,r4,16024
 4010a84:	4014b540 	call	4014b54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4010a88:	d0a70417 	ldw	r2,-25584(gp)
 4010a8c:	d0e70517 	ldw	r3,-25580(gp)
 4010a90:	d1270617 	ldw	r4,-25576(gp)
 4010a94:	200d883a 	mov	r6,r4
 4010a98:	180b883a 	mov	r5,r3
 4010a9c:	1009883a 	mov	r4,r2
 4010aa0:	40007fc0 	call	40007fc <main>
 4010aa4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4010aa8:	01000044 	movi	r4,1
 4010aac:	40105780 	call	4010578 <close>
  exit (result);
 4010ab0:	e13fff17 	ldw	r4,-4(fp)
 4010ab4:	4014b680 	call	4014b68 <exit>

04010ab8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4010ab8:	defffe04 	addi	sp,sp,-8
 4010abc:	df000115 	stw	fp,4(sp)
 4010ac0:	df000104 	addi	fp,sp,4
 4010ac4:	e13fff15 	stw	r4,-4(fp)
}
 4010ac8:	0001883a 	nop
 4010acc:	e037883a 	mov	sp,fp
 4010ad0:	df000017 	ldw	fp,0(sp)
 4010ad4:	dec00104 	addi	sp,sp,4
 4010ad8:	f800283a 	ret

04010adc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4010adc:	defffe04 	addi	sp,sp,-8
 4010ae0:	df000115 	stw	fp,4(sp)
 4010ae4:	df000104 	addi	fp,sp,4
 4010ae8:	e13fff15 	stw	r4,-4(fp)
}
 4010aec:	0001883a 	nop
 4010af0:	e037883a 	mov	sp,fp
 4010af4:	df000017 	ldw	fp,0(sp)
 4010af8:	dec00104 	addi	sp,sp,4
 4010afc:	f800283a 	ret

04010b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010b00:	defffe04 	addi	sp,sp,-8
 4010b04:	dfc00115 	stw	ra,4(sp)
 4010b08:	df000015 	stw	fp,0(sp)
 4010b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010b10:	d0a01217 	ldw	r2,-32696(gp)
 4010b14:	10000326 	beq	r2,zero,4010b24 <alt_get_errno+0x24>
 4010b18:	d0a01217 	ldw	r2,-32696(gp)
 4010b1c:	103ee83a 	callr	r2
 4010b20:	00000106 	br	4010b28 <alt_get_errno+0x28>
 4010b24:	d0a70004 	addi	r2,gp,-25600
}
 4010b28:	e037883a 	mov	sp,fp
 4010b2c:	dfc00117 	ldw	ra,4(sp)
 4010b30:	df000017 	ldw	fp,0(sp)
 4010b34:	dec00204 	addi	sp,sp,8
 4010b38:	f800283a 	ret

04010b3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4010b3c:	defff904 	addi	sp,sp,-28
 4010b40:	dfc00615 	stw	ra,24(sp)
 4010b44:	df000515 	stw	fp,20(sp)
 4010b48:	df000504 	addi	fp,sp,20
 4010b4c:	e13ffd15 	stw	r4,-12(fp)
 4010b50:	e17ffe15 	stw	r5,-8(fp)
 4010b54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010b58:	e0bffd17 	ldw	r2,-12(fp)
 4010b5c:	10000616 	blt	r2,zero,4010b78 <read+0x3c>
 4010b60:	e0bffd17 	ldw	r2,-12(fp)
 4010b64:	10c00324 	muli	r3,r2,12
 4010b68:	00810074 	movhi	r2,1025
 4010b6c:	10988f04 	addi	r2,r2,25148
 4010b70:	1885883a 	add	r2,r3,r2
 4010b74:	00000106 	br	4010b7c <read+0x40>
 4010b78:	0005883a 	mov	r2,zero
 4010b7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4010b80:	e0bffb17 	ldw	r2,-20(fp)
 4010b84:	10002226 	beq	r2,zero,4010c10 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4010b88:	e0bffb17 	ldw	r2,-20(fp)
 4010b8c:	10800217 	ldw	r2,8(r2)
 4010b90:	108000cc 	andi	r2,r2,3
 4010b94:	10800060 	cmpeqi	r2,r2,1
 4010b98:	1000181e 	bne	r2,zero,4010bfc <read+0xc0>
        (fd->dev->read))
 4010b9c:	e0bffb17 	ldw	r2,-20(fp)
 4010ba0:	10800017 	ldw	r2,0(r2)
 4010ba4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4010ba8:	10001426 	beq	r2,zero,4010bfc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4010bac:	e0bffb17 	ldw	r2,-20(fp)
 4010bb0:	10800017 	ldw	r2,0(r2)
 4010bb4:	10800517 	ldw	r2,20(r2)
 4010bb8:	e0ffff17 	ldw	r3,-4(fp)
 4010bbc:	180d883a 	mov	r6,r3
 4010bc0:	e17ffe17 	ldw	r5,-8(fp)
 4010bc4:	e13ffb17 	ldw	r4,-20(fp)
 4010bc8:	103ee83a 	callr	r2
 4010bcc:	e0bffc15 	stw	r2,-16(fp)
 4010bd0:	e0bffc17 	ldw	r2,-16(fp)
 4010bd4:	1000070e 	bge	r2,zero,4010bf4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4010bd8:	4010b000 	call	4010b00 <alt_get_errno>
 4010bdc:	1007883a 	mov	r3,r2
 4010be0:	e0bffc17 	ldw	r2,-16(fp)
 4010be4:	0085c83a 	sub	r2,zero,r2
 4010be8:	18800015 	stw	r2,0(r3)
          return -1;
 4010bec:	00bfffc4 	movi	r2,-1
 4010bf0:	00000c06 	br	4010c24 <read+0xe8>
        }
        return rval;
 4010bf4:	e0bffc17 	ldw	r2,-16(fp)
 4010bf8:	00000a06 	br	4010c24 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4010bfc:	4010b000 	call	4010b00 <alt_get_errno>
 4010c00:	1007883a 	mov	r3,r2
 4010c04:	00800344 	movi	r2,13
 4010c08:	18800015 	stw	r2,0(r3)
 4010c0c:	00000406 	br	4010c20 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4010c10:	4010b000 	call	4010b00 <alt_get_errno>
 4010c14:	1007883a 	mov	r3,r2
 4010c18:	00801444 	movi	r2,81
 4010c1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4010c20:	00bfffc4 	movi	r2,-1
}
 4010c24:	e037883a 	mov	sp,fp
 4010c28:	dfc00117 	ldw	ra,4(sp)
 4010c2c:	df000017 	ldw	fp,0(sp)
 4010c30:	dec00204 	addi	sp,sp,8
 4010c34:	f800283a 	ret

04010c38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4010c38:	defffe04 	addi	sp,sp,-8
 4010c3c:	df000115 	stw	fp,4(sp)
 4010c40:	df000104 	addi	fp,sp,4
 4010c44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4010c48:	e0bfff17 	ldw	r2,-4(fp)
 4010c4c:	108000d0 	cmplti	r2,r2,3
 4010c50:	10000d1e 	bne	r2,zero,4010c88 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4010c54:	00810074 	movhi	r2,1025
 4010c58:	10988f04 	addi	r2,r2,25148
 4010c5c:	e0ffff17 	ldw	r3,-4(fp)
 4010c60:	18c00324 	muli	r3,r3,12
 4010c64:	10c5883a 	add	r2,r2,r3
 4010c68:	10800204 	addi	r2,r2,8
 4010c6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4010c70:	00810074 	movhi	r2,1025
 4010c74:	10988f04 	addi	r2,r2,25148
 4010c78:	e0ffff17 	ldw	r3,-4(fp)
 4010c7c:	18c00324 	muli	r3,r3,12
 4010c80:	10c5883a 	add	r2,r2,r3
 4010c84:	10000015 	stw	zero,0(r2)
  }
}
 4010c88:	0001883a 	nop
 4010c8c:	e037883a 	mov	sp,fp
 4010c90:	df000017 	ldw	fp,0(sp)
 4010c94:	dec00104 	addi	sp,sp,4
 4010c98:	f800283a 	ret

04010c9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4010c9c:	defff904 	addi	sp,sp,-28
 4010ca0:	df000615 	stw	fp,24(sp)
 4010ca4:	df000604 	addi	fp,sp,24
 4010ca8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010cac:	0005303a 	rdctl	r2,status
 4010cb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010cb4:	e0fffe17 	ldw	r3,-8(fp)
 4010cb8:	00bfff84 	movi	r2,-2
 4010cbc:	1884703a 	and	r2,r3,r2
 4010cc0:	1001703a 	wrctl	status,r2
  
  return context;
 4010cc4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4010cc8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4010ccc:	d0a01317 	ldw	r2,-32692(gp)
 4010cd0:	10c000c4 	addi	r3,r2,3
 4010cd4:	00bfff04 	movi	r2,-4
 4010cd8:	1884703a 	and	r2,r3,r2
 4010cdc:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4010ce0:	d0e01317 	ldw	r3,-32692(gp)
 4010ce4:	e0bfff17 	ldw	r2,-4(fp)
 4010ce8:	1887883a 	add	r3,r3,r2
 4010cec:	00820034 	movhi	r2,2048
 4010cf0:	10800004 	addi	r2,r2,0
 4010cf4:	10c0062e 	bgeu	r2,r3,4010d10 <sbrk+0x74>
 4010cf8:	e0bffb17 	ldw	r2,-20(fp)
 4010cfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010d00:	e0bffa17 	ldw	r2,-24(fp)
 4010d04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4010d08:	00bfffc4 	movi	r2,-1
 4010d0c:	00000b06 	br	4010d3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4010d10:	d0a01317 	ldw	r2,-32692(gp)
 4010d14:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4010d18:	d0e01317 	ldw	r3,-32692(gp)
 4010d1c:	e0bfff17 	ldw	r2,-4(fp)
 4010d20:	1885883a 	add	r2,r3,r2
 4010d24:	d0a01315 	stw	r2,-32692(gp)
 4010d28:	e0bffb17 	ldw	r2,-20(fp)
 4010d2c:	e0bffc15 	stw	r2,-16(fp)
 4010d30:	e0bffc17 	ldw	r2,-16(fp)
 4010d34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4010d38:	e0bffd17 	ldw	r2,-12(fp)
} 
 4010d3c:	e037883a 	mov	sp,fp
 4010d40:	df000017 	ldw	fp,0(sp)
 4010d44:	dec00104 	addi	sp,sp,4
 4010d48:	f800283a 	ret

04010d4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4010d4c:	defffa04 	addi	sp,sp,-24
 4010d50:	df000515 	stw	fp,20(sp)
 4010d54:	df000504 	addi	fp,sp,20
 4010d58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010d5c:	0005303a 	rdctl	r2,status
 4010d60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010d64:	e0fffc17 	ldw	r3,-16(fp)
 4010d68:	00bfff84 	movi	r2,-2
 4010d6c:	1884703a 	and	r2,r3,r2
 4010d70:	1001703a 	wrctl	status,r2
  
  return context;
 4010d74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4010d78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4010d7c:	e0bfff17 	ldw	r2,-4(fp)
 4010d80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4010d84:	e0bffd17 	ldw	r2,-12(fp)
 4010d88:	10800017 	ldw	r2,0(r2)
 4010d8c:	e0fffd17 	ldw	r3,-12(fp)
 4010d90:	18c00117 	ldw	r3,4(r3)
 4010d94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4010d98:	e0bffd17 	ldw	r2,-12(fp)
 4010d9c:	10800117 	ldw	r2,4(r2)
 4010da0:	e0fffd17 	ldw	r3,-12(fp)
 4010da4:	18c00017 	ldw	r3,0(r3)
 4010da8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4010dac:	e0bffd17 	ldw	r2,-12(fp)
 4010db0:	e0fffd17 	ldw	r3,-12(fp)
 4010db4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4010db8:	e0bffd17 	ldw	r2,-12(fp)
 4010dbc:	e0fffd17 	ldw	r3,-12(fp)
 4010dc0:	10c00015 	stw	r3,0(r2)
 4010dc4:	e0bffb17 	ldw	r2,-20(fp)
 4010dc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010dcc:	e0bffe17 	ldw	r2,-8(fp)
 4010dd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4010dd4:	0001883a 	nop
 4010dd8:	e037883a 	mov	sp,fp
 4010ddc:	df000017 	ldw	fp,0(sp)
 4010de0:	dec00104 	addi	sp,sp,4
 4010de4:	f800283a 	ret

04010de8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4010de8:	defffb04 	addi	sp,sp,-20
 4010dec:	dfc00415 	stw	ra,16(sp)
 4010df0:	df000315 	stw	fp,12(sp)
 4010df4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4010df8:	d0a01417 	ldw	r2,-32688(gp)
 4010dfc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4010e00:	d0a70817 	ldw	r2,-25568(gp)
 4010e04:	10800044 	addi	r2,r2,1
 4010e08:	d0a70815 	stw	r2,-25568(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4010e0c:	00002e06 	br	4010ec8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4010e10:	e0bffd17 	ldw	r2,-12(fp)
 4010e14:	10800017 	ldw	r2,0(r2)
 4010e18:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4010e1c:	e0bffd17 	ldw	r2,-12(fp)
 4010e20:	10800403 	ldbu	r2,16(r2)
 4010e24:	10803fcc 	andi	r2,r2,255
 4010e28:	10000426 	beq	r2,zero,4010e3c <alt_tick+0x54>
 4010e2c:	d0a70817 	ldw	r2,-25568(gp)
 4010e30:	1000021e 	bne	r2,zero,4010e3c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4010e34:	e0bffd17 	ldw	r2,-12(fp)
 4010e38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4010e3c:	e0bffd17 	ldw	r2,-12(fp)
 4010e40:	10800217 	ldw	r2,8(r2)
 4010e44:	d0e70817 	ldw	r3,-25568(gp)
 4010e48:	18801d36 	bltu	r3,r2,4010ec0 <alt_tick+0xd8>
 4010e4c:	e0bffd17 	ldw	r2,-12(fp)
 4010e50:	10800403 	ldbu	r2,16(r2)
 4010e54:	10803fcc 	andi	r2,r2,255
 4010e58:	1000191e 	bne	r2,zero,4010ec0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4010e5c:	e0bffd17 	ldw	r2,-12(fp)
 4010e60:	10800317 	ldw	r2,12(r2)
 4010e64:	e0fffd17 	ldw	r3,-12(fp)
 4010e68:	18c00517 	ldw	r3,20(r3)
 4010e6c:	1809883a 	mov	r4,r3
 4010e70:	103ee83a 	callr	r2
 4010e74:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4010e78:	e0bfff17 	ldw	r2,-4(fp)
 4010e7c:	1000031e 	bne	r2,zero,4010e8c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4010e80:	e13ffd17 	ldw	r4,-12(fp)
 4010e84:	4010d4c0 	call	4010d4c <alt_alarm_stop>
 4010e88:	00000d06 	br	4010ec0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4010e8c:	e0bffd17 	ldw	r2,-12(fp)
 4010e90:	10c00217 	ldw	r3,8(r2)
 4010e94:	e0bfff17 	ldw	r2,-4(fp)
 4010e98:	1887883a 	add	r3,r3,r2
 4010e9c:	e0bffd17 	ldw	r2,-12(fp)
 4010ea0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4010ea4:	e0bffd17 	ldw	r2,-12(fp)
 4010ea8:	10c00217 	ldw	r3,8(r2)
 4010eac:	d0a70817 	ldw	r2,-25568(gp)
 4010eb0:	1880032e 	bgeu	r3,r2,4010ec0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4010eb4:	e0bffd17 	ldw	r2,-12(fp)
 4010eb8:	00c00044 	movi	r3,1
 4010ebc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4010ec0:	e0bffe17 	ldw	r2,-8(fp)
 4010ec4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4010ec8:	e0fffd17 	ldw	r3,-12(fp)
 4010ecc:	d0a01404 	addi	r2,gp,-32688
 4010ed0:	18bfcf1e 	bne	r3,r2,4010e10 <__alt_data_end+0xfc010e10>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4010ed4:	0001883a 	nop
}
 4010ed8:	0001883a 	nop
 4010edc:	e037883a 	mov	sp,fp
 4010ee0:	dfc00117 	ldw	ra,4(sp)
 4010ee4:	df000017 	ldw	fp,0(sp)
 4010ee8:	dec00204 	addi	sp,sp,8
 4010eec:	f800283a 	ret

04010ef0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4010ef0:	defffd04 	addi	sp,sp,-12
 4010ef4:	dfc00215 	stw	ra,8(sp)
 4010ef8:	df000115 	stw	fp,4(sp)
 4010efc:	df000104 	addi	fp,sp,4
 4010f00:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4010f04:	e13fff17 	ldw	r4,-4(fp)
 4010f08:	4013bb80 	call	4013bb8 <alt_busy_sleep>
}
 4010f0c:	e037883a 	mov	sp,fp
 4010f10:	dfc00117 	ldw	ra,4(sp)
 4010f14:	df000017 	ldw	fp,0(sp)
 4010f18:	dec00204 	addi	sp,sp,8
 4010f1c:	f800283a 	ret

04010f20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010f20:	defffe04 	addi	sp,sp,-8
 4010f24:	dfc00115 	stw	ra,4(sp)
 4010f28:	df000015 	stw	fp,0(sp)
 4010f2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010f30:	d0a01217 	ldw	r2,-32696(gp)
 4010f34:	10000326 	beq	r2,zero,4010f44 <alt_get_errno+0x24>
 4010f38:	d0a01217 	ldw	r2,-32696(gp)
 4010f3c:	103ee83a 	callr	r2
 4010f40:	00000106 	br	4010f48 <alt_get_errno+0x28>
 4010f44:	d0a70004 	addi	r2,gp,-25600
}
 4010f48:	e037883a 	mov	sp,fp
 4010f4c:	dfc00117 	ldw	ra,4(sp)
 4010f50:	df000017 	ldw	fp,0(sp)
 4010f54:	dec00204 	addi	sp,sp,8
 4010f58:	f800283a 	ret

04010f5c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4010f5c:	defff904 	addi	sp,sp,-28
 4010f60:	dfc00615 	stw	ra,24(sp)
 4010f64:	df000515 	stw	fp,20(sp)
 4010f68:	df000504 	addi	fp,sp,20
 4010f6c:	e13ffd15 	stw	r4,-12(fp)
 4010f70:	e17ffe15 	stw	r5,-8(fp)
 4010f74:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010f78:	e0bffd17 	ldw	r2,-12(fp)
 4010f7c:	10000616 	blt	r2,zero,4010f98 <write+0x3c>
 4010f80:	e0bffd17 	ldw	r2,-12(fp)
 4010f84:	10c00324 	muli	r3,r2,12
 4010f88:	00810074 	movhi	r2,1025
 4010f8c:	10988f04 	addi	r2,r2,25148
 4010f90:	1885883a 	add	r2,r3,r2
 4010f94:	00000106 	br	4010f9c <write+0x40>
 4010f98:	0005883a 	mov	r2,zero
 4010f9c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4010fa0:	e0bffb17 	ldw	r2,-20(fp)
 4010fa4:	10002126 	beq	r2,zero,401102c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4010fa8:	e0bffb17 	ldw	r2,-20(fp)
 4010fac:	10800217 	ldw	r2,8(r2)
 4010fb0:	108000cc 	andi	r2,r2,3
 4010fb4:	10001826 	beq	r2,zero,4011018 <write+0xbc>
 4010fb8:	e0bffb17 	ldw	r2,-20(fp)
 4010fbc:	10800017 	ldw	r2,0(r2)
 4010fc0:	10800617 	ldw	r2,24(r2)
 4010fc4:	10001426 	beq	r2,zero,4011018 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4010fc8:	e0bffb17 	ldw	r2,-20(fp)
 4010fcc:	10800017 	ldw	r2,0(r2)
 4010fd0:	10800617 	ldw	r2,24(r2)
 4010fd4:	e0ffff17 	ldw	r3,-4(fp)
 4010fd8:	180d883a 	mov	r6,r3
 4010fdc:	e17ffe17 	ldw	r5,-8(fp)
 4010fe0:	e13ffb17 	ldw	r4,-20(fp)
 4010fe4:	103ee83a 	callr	r2
 4010fe8:	e0bffc15 	stw	r2,-16(fp)
 4010fec:	e0bffc17 	ldw	r2,-16(fp)
 4010ff0:	1000070e 	bge	r2,zero,4011010 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4010ff4:	4010f200 	call	4010f20 <alt_get_errno>
 4010ff8:	1007883a 	mov	r3,r2
 4010ffc:	e0bffc17 	ldw	r2,-16(fp)
 4011000:	0085c83a 	sub	r2,zero,r2
 4011004:	18800015 	stw	r2,0(r3)
        return -1;
 4011008:	00bfffc4 	movi	r2,-1
 401100c:	00000c06 	br	4011040 <write+0xe4>
      }
      return rval;
 4011010:	e0bffc17 	ldw	r2,-16(fp)
 4011014:	00000a06 	br	4011040 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4011018:	4010f200 	call	4010f20 <alt_get_errno>
 401101c:	1007883a 	mov	r3,r2
 4011020:	00800344 	movi	r2,13
 4011024:	18800015 	stw	r2,0(r3)
 4011028:	00000406 	br	401103c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401102c:	4010f200 	call	4010f20 <alt_get_errno>
 4011030:	1007883a 	mov	r3,r2
 4011034:	00801444 	movi	r2,81
 4011038:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401103c:	00bfffc4 	movi	r2,-1
}
 4011040:	e037883a 	mov	sp,fp
 4011044:	dfc00117 	ldw	ra,4(sp)
 4011048:	df000017 	ldw	fp,0(sp)
 401104c:	dec00204 	addi	sp,sp,8
 4011050:	f800283a 	ret

04011054 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4011054:	defffd04 	addi	sp,sp,-12
 4011058:	dfc00215 	stw	ra,8(sp)
 401105c:	df000115 	stw	fp,4(sp)
 4011060:	df000104 	addi	fp,sp,4
 4011064:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4011068:	d1600f04 	addi	r5,gp,-32708
 401106c:	e13fff17 	ldw	r4,-4(fp)
 4011070:	4013d940 	call	4013d94 <alt_dev_llist_insert>
}
 4011074:	e037883a 	mov	sp,fp
 4011078:	dfc00117 	ldw	ra,4(sp)
 401107c:	df000017 	ldw	fp,0(sp)
 4011080:	dec00204 	addi	sp,sp,8
 4011084:	f800283a 	ret

04011088 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4011088:	defffd04 	addi	sp,sp,-12
 401108c:	dfc00215 	stw	ra,8(sp)
 4011090:	df000115 	stw	fp,4(sp)
 4011094:	df000104 	addi	fp,sp,4
 4011098:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 401109c:	40148580 	call	4014858 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40110a0:	00800044 	movi	r2,1
 40110a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40110a8:	0001883a 	nop
 40110ac:	e037883a 	mov	sp,fp
 40110b0:	dfc00117 	ldw	ra,4(sp)
 40110b4:	df000017 	ldw	fp,0(sp)
 40110b8:	dec00204 	addi	sp,sp,8
 40110bc:	f800283a 	ret

040110c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40110c0:	defffe04 	addi	sp,sp,-8
 40110c4:	dfc00115 	stw	ra,4(sp)
 40110c8:	df000015 	stw	fp,0(sp)
 40110cc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 40110d0:	01c0fa04 	movi	r7,1000
 40110d4:	01800084 	movi	r6,2
 40110d8:	000b883a 	mov	r5,zero
 40110dc:	01020034 	movhi	r4,2048
 40110e0:	21042004 	addi	r4,r4,4224
 40110e4:	4013a100 	call	4013a10 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 40110e8:	01010074 	movhi	r4,1025
 40110ec:	2118ef04 	addi	r4,r4,25532
 40110f0:	40113840 	call	4011384 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 40110f4:	018000c4 	movi	r6,3
 40110f8:	000b883a 	mov	r5,zero
 40110fc:	01010074 	movhi	r4,1025
 4011100:	21190704 	addi	r4,r4,25628
 4011104:	4012e980 	call	4012e98 <altera_avalon_jtag_uart_init>
 4011108:	01010074 	movhi	r4,1025
 401110c:	2118fd04 	addi	r4,r4,25588
 4011110:	40110540 	call	4011054 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 4011114:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4011118:	0001883a 	nop
}
 401111c:	0001883a 	nop
 4011120:	e037883a 	mov	sp,fp
 4011124:	dfc00117 	ldw	ra,4(sp)
 4011128:	df000017 	ldw	fp,0(sp)
 401112c:	dec00204 	addi	sp,sp,8
 4011130:	f800283a 	ret

04011134 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 4011134:	defff904 	addi	sp,sp,-28
 4011138:	dfc00615 	stw	ra,24(sp)
 401113c:	df000515 	stw	fp,20(sp)
 4011140:	df000504 	addi	fp,sp,20
 4011144:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 4011148:	008000b4 	movhi	r2,2
 401114c:	10a1a804 	addi	r2,r2,-31072
 4011150:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 4011154:	e0bfff17 	ldw	r2,-4(fp)
 4011158:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 401115c:	e0bffc17 	ldw	r2,-16(fp)
 4011160:	10800717 	ldw	r2,28(r2)
 4011164:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 4011168:	e0bffd17 	ldw	r2,-12(fp)
 401116c:	10800217 	ldw	r2,8(r2)
 4011170:	10800098 	cmpnei	r2,r2,2
 4011174:	1000251e 	bne	r2,zero,401120c <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 4011178:	e0bffd17 	ldw	r2,-12(fp)
 401117c:	10c00017 	ldw	r3,0(r2)
 4011180:	e0bffd17 	ldw	r2,-12(fp)
 4011184:	10800117 	ldw	r2,4(r2)
 4011188:	e13ffe04 	addi	r4,fp,-8
 401118c:	200f883a 	mov	r7,r4
 4011190:	100d883a 	mov	r6,r2
 4011194:	180b883a 	mov	r5,r3
 4011198:	e13ffc17 	ldw	r4,-16(fp)
 401119c:	40118e40 	call	40118e4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 40111a0:	e0bffd17 	ldw	r2,-12(fp)
 40111a4:	10c00117 	ldw	r3,4(r2)
 40111a8:	e0bffe17 	ldw	r2,-8(fp)
 40111ac:	1887c83a 	sub	r3,r3,r2
 40111b0:	e0bffd17 	ldw	r2,-12(fp)
 40111b4:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 40111b8:	e0bffd17 	ldw	r2,-12(fp)
 40111bc:	10c00017 	ldw	r3,0(r2)
 40111c0:	e0bffe17 	ldw	r2,-8(fp)
 40111c4:	1887883a 	add	r3,r3,r2
 40111c8:	e0bffd17 	ldw	r2,-12(fp)
 40111cc:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 40111d0:	e0bffd17 	ldw	r2,-12(fp)
 40111d4:	10800117 	ldw	r2,4(r2)
 40111d8:	10000c26 	beq	r2,zero,401120c <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40111dc:	01400704 	movi	r5,28
 40111e0:	e13ffc17 	ldw	r4,-16(fp)
 40111e4:	4012a840 	call	4012a84 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 40111e8:	01400084 	movi	r5,2
 40111ec:	e13ffc17 	ldw	r4,-16(fp)
 40111f0:	4012b280 	call	4012b28 <alt_avalon_i2c_int_enable>
 40111f4:	00000e06 	br	4011230 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 40111f8:	e0bffb17 	ldw	r2,-20(fp)
 40111fc:	10bfffc4 	addi	r2,r2,-1
 4011200:	e0bffb15 	stw	r2,-20(fp)
 4011204:	e0bffb17 	ldw	r2,-20(fp)
 4011208:	10000426 	beq	r2,zero,401121c <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 401120c:	e13ffc17 	ldw	r4,-16(fp)
 4011210:	40118a00 	call	40118a0 <alt_avalon_i2c_is_busy>
 4011214:	103ff81e 	bne	r2,zero,40111f8 <__alt_data_end+0xfc0111f8>
 4011218:	00000106 	br	4011220 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 401121c:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 4011220:	e13ffc17 	ldw	r4,-16(fp)
 4011224:	40115480 	call	4011548 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 4011228:	e0bffd17 	ldw	r2,-12(fp)
 401122c:	10000215 	stw	zero,8(r2)
}
 4011230:	e037883a 	mov	sp,fp
 4011234:	dfc00117 	ldw	ra,4(sp)
 4011238:	df000017 	ldw	fp,0(sp)
 401123c:	dec00204 	addi	sp,sp,8
 4011240:	f800283a 	ret

04011244 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 4011244:	defffc04 	addi	sp,sp,-16
 4011248:	dfc00315 	stw	ra,12(sp)
 401124c:	df000215 	stw	fp,8(sp)
 4011250:	df000204 	addi	fp,sp,8
 4011254:	e13ffe15 	stw	r4,-8(fp)
 4011258:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 401125c:	e0bfff17 	ldw	r2,-4(fp)
 4011260:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 4011264:	e1ffff17 	ldw	r7,-4(fp)
 4011268:	000d883a 	mov	r6,zero
 401126c:	01410074 	movhi	r5,1025
 4011270:	29444d04 	addi	r5,r5,4404
 4011274:	e13ffe17 	ldw	r4,-8(fp)
 4011278:	40113300 	call	4011330 <alt_avalon_i2c_register_callback>
}
 401127c:	0001883a 	nop
 4011280:	e037883a 	mov	sp,fp
 4011284:	dfc00117 	ldw	ra,4(sp)
 4011288:	df000017 	ldw	fp,0(sp)
 401128c:	dec00204 	addi	sp,sp,8
 4011290:	f800283a 	ret

04011294 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 4011294:	defff904 	addi	sp,sp,-28
 4011298:	dfc00615 	stw	ra,24(sp)
 401129c:	df000515 	stw	fp,20(sp)
 40112a0:	df000504 	addi	fp,sp,20
 40112a4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 40112a8:	e0bfff17 	ldw	r2,-4(fp)
 40112ac:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 40112b0:	014007c4 	movi	r5,31
 40112b4:	e13ffb17 	ldw	r4,-20(fp)
 40112b8:	4012ac00 	call	4012ac0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40112bc:	01400704 	movi	r5,28
 40112c0:	e13ffb17 	ldw	r4,-20(fp)
 40112c4:	4012a840 	call	4012a84 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 40112c8:	e0bffb17 	ldw	r2,-20(fp)
 40112cc:	10800617 	ldw	r2,24(r2)
 40112d0:	10001126 	beq	r2,zero,4011318 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40112d4:	0005303a 	rdctl	r2,status
 40112d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40112dc:	e0fffd17 	ldw	r3,-12(fp)
 40112e0:	00bfff84 	movi	r2,-2
 40112e4:	1884703a 	and	r2,r3,r2
 40112e8:	1001703a 	wrctl	status,r2
  
  return context;
 40112ec:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 40112f0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 40112f4:	e0bffb17 	ldw	r2,-20(fp)
 40112f8:	10800617 	ldw	r2,24(r2)
 40112fc:	e13ffb17 	ldw	r4,-20(fp)
 4011300:	103ee83a 	callr	r2
 4011304:	e0bffc17 	ldw	r2,-16(fp)
 4011308:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401130c:	e0bffe17 	ldw	r2,-8(fp)
 4011310:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 4011314:	0001883a 	nop
 4011318:	0001883a 	nop
}
 401131c:	e037883a 	mov	sp,fp
 4011320:	dfc00117 	ldw	ra,4(sp)
 4011324:	df000017 	ldw	fp,0(sp)
 4011328:	dec00204 	addi	sp,sp,8
 401132c:	f800283a 	ret

04011330 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 4011330:	defffb04 	addi	sp,sp,-20
 4011334:	df000415 	stw	fp,16(sp)
 4011338:	df000404 	addi	fp,sp,16
 401133c:	e13ffc15 	stw	r4,-16(fp)
 4011340:	e17ffd15 	stw	r5,-12(fp)
 4011344:	e1bffe15 	stw	r6,-8(fp)
 4011348:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 401134c:	e0bffc17 	ldw	r2,-16(fp)
 4011350:	e0fffd17 	ldw	r3,-12(fp)
 4011354:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 4011358:	e0bffc17 	ldw	r2,-16(fp)
 401135c:	e0ffff17 	ldw	r3,-4(fp)
 4011360:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 4011364:	e0bffc17 	ldw	r2,-16(fp)
 4011368:	e0fffe17 	ldw	r3,-8(fp)
 401136c:	10c00815 	stw	r3,32(r2)

    return ;
 4011370:	0001883a 	nop
}
 4011374:	e037883a 	mov	sp,fp
 4011378:	df000017 	ldw	fp,0(sp)
 401137c:	dec00104 	addi	sp,sp,4
 4011380:	f800283a 	ret

04011384 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 4011384:	defff704 	addi	sp,sp,-36
 4011388:	dfc00815 	stw	ra,32(sp)
 401138c:	df000715 	stw	fp,28(sp)
 4011390:	df000704 	addi	fp,sp,28
 4011394:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 4011398:	e13fff17 	ldw	r4,-4(fp)
 401139c:	40115480 	call	4011548 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 40113a0:	014007c4 	movi	r5,31
 40113a4:	e13fff17 	ldw	r4,-4(fp)
 40113a8:	4012ac00 	call	4012ac0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40113ac:	01400704 	movi	r5,28
 40113b0:	e13fff17 	ldw	r4,-4(fp)
 40113b4:	4012a840 	call	4012a84 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 40113b8:	014000c4 	movi	r5,3
 40113bc:	e13fff17 	ldw	r4,-4(fp)
 40113c0:	4012ccc0 	call	4012ccc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 40113c4:	014000c4 	movi	r5,3
 40113c8:	e13fff17 	ldw	r4,-4(fp)
 40113cc:	4012c1c0 	call	4012c1c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 40113d0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 40113d4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 40113d8:	e0bffb04 	addi	r2,fp,-20
 40113dc:	018000b4 	movhi	r6,2
 40113e0:	31a1a804 	addi	r6,r6,-31072
 40113e4:	100b883a 	mov	r5,r2
 40113e8:	e13fff17 	ldw	r4,-4(fp)
 40113ec:	40117a40 	call	40117a4 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 40113f0:	e0bffb04 	addi	r2,fp,-20
 40113f4:	100b883a 	mov	r5,r2
 40113f8:	e13fff17 	ldw	r4,-4(fp)
 40113fc:	40116440 	call	4011644 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 4011400:	d1601604 	addi	r5,gp,-32680
 4011404:	e13fff17 	ldw	r4,-4(fp)
 4011408:	4013d940 	call	4013d94 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 401140c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 4011410:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 4011414:	e0bffa17 	ldw	r2,-24(fp)
 4011418:	10000c1e 	bne	r2,zero,401144c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 401141c:	e0bfff17 	ldw	r2,-4(fp)
 4011420:	10c00417 	ldw	r3,16(r2)
 4011424:	e0bfff17 	ldw	r2,-4(fp)
 4011428:	10800517 	ldw	r2,20(r2)
 401142c:	d8000015 	stw	zero,0(sp)
 4011430:	e1ffff17 	ldw	r7,-4(fp)
 4011434:	01810074 	movhi	r6,1025
 4011438:	3184a504 	addi	r6,r6,4756
 401143c:	100b883a 	mov	r5,r2
 4011440:	1809883a 	mov	r4,r3
 4011444:	4013fbc0 	call	4013fbc <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 4011448:	00000406 	br	401145c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 401144c:	01010074 	movhi	r4,1025
 4011450:	21164804 	addi	r4,r4,22816
 4011454:	40145f00 	call	40145f0 <alt_printf>
    }

    return;
 4011458:	0001883a 	nop

}
 401145c:	e037883a 	mov	sp,fp
 4011460:	dfc00117 	ldw	ra,4(sp)
 4011464:	df000017 	ldw	fp,0(sp)
 4011468:	dec00204 	addi	sp,sp,8
 401146c:	f800283a 	ret

04011470 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 4011470:	defffc04 	addi	sp,sp,-16
 4011474:	dfc00315 	stw	ra,12(sp)
 4011478:	df000215 	stw	fp,8(sp)
 401147c:	df000204 	addi	fp,sp,8
 4011480:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 4011484:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 4011488:	d1601604 	addi	r5,gp,-32680
 401148c:	e13fff17 	ldw	r4,-4(fp)
 4011490:	4013ef80 	call	4013ef8 <alt_find_dev>
 4011494:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 4011498:	e0bffe17 	ldw	r2,-8(fp)
}
 401149c:	e037883a 	mov	sp,fp
 40114a0:	dfc00117 	ldw	ra,4(sp)
 40114a4:	df000017 	ldw	fp,0(sp)
 40114a8:	dec00204 	addi	sp,sp,8
 40114ac:	f800283a 	ret

040114b0 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 40114b0:	defffc04 	addi	sp,sp,-16
 40114b4:	df000315 	stw	fp,12(sp)
 40114b8:	df000304 	addi	fp,sp,12
 40114bc:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 40114c0:	e0bfff17 	ldw	r2,-4(fp)
 40114c4:	10800717 	ldw	r2,28(r2)
 40114c8:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 40114cc:	e0bfff17 	ldw	r2,-4(fp)
 40114d0:	10800317 	ldw	r2,12(r2)
 40114d4:	10800204 	addi	r2,r2,8
 40114d8:	10800037 	ldwio	r2,0(r2)
 40114dc:	1080004c 	andi	r2,r2,1
 40114e0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 40114e4:	e0bffe17 	ldw	r2,-8(fp)
 40114e8:	10000226 	beq	r2,zero,40114f4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 40114ec:	00bffe44 	movi	r2,-7
 40114f0:	00001106 	br	4011538 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 40114f4:	e0bfff17 	ldw	r2,-4(fp)
 40114f8:	10c00617 	ldw	r3,24(r2)
 40114fc:	00810074 	movhi	r2,1025
 4011500:	10844d04 	addi	r2,r2,4404
 4011504:	1880021e 	bne	r3,r2,4011510 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 4011508:	e0bffd17 	ldw	r2,-12(fp)
 401150c:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 4011510:	e0bfff17 	ldw	r2,-4(fp)
 4011514:	10800317 	ldw	r2,12(r2)
 4011518:	10800204 	addi	r2,r2,8
 401151c:	e0ffff17 	ldw	r3,-4(fp)
 4011520:	18c00317 	ldw	r3,12(r3)
 4011524:	18c00204 	addi	r3,r3,8
 4011528:	18c00037 	ldwio	r3,0(r3)
 401152c:	18c00054 	ori	r3,r3,1
 4011530:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 4011534:	0005883a 	mov	r2,zero
}
 4011538:	e037883a 	mov	sp,fp
 401153c:	df000017 	ldw	fp,0(sp)
 4011540:	dec00104 	addi	sp,sp,4
 4011544:	f800283a 	ret

04011548 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 4011548:	defffe04 	addi	sp,sp,-8
 401154c:	df000115 	stw	fp,4(sp)
 4011550:	df000104 	addi	fp,sp,4
 4011554:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 4011558:	e0bfff17 	ldw	r2,-4(fp)
 401155c:	10800317 	ldw	r2,12(r2)
 4011560:	10800204 	addi	r2,r2,8
 4011564:	e0ffff17 	ldw	r3,-4(fp)
 4011568:	18c00317 	ldw	r3,12(r3)
 401156c:	18c00204 	addi	r3,r3,8
 4011570:	19000037 	ldwio	r4,0(r3)
 4011574:	00ffff84 	movi	r3,-2
 4011578:	20c6703a 	and	r3,r4,r3
 401157c:	10c00035 	stwio	r3,0(r2)

}
 4011580:	0001883a 	nop
 4011584:	e037883a 	mov	sp,fp
 4011588:	df000017 	ldw	fp,0(sp)
 401158c:	dec00104 	addi	sp,sp,4
 4011590:	f800283a 	ret

04011594 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 4011594:	defffd04 	addi	sp,sp,-12
 4011598:	df000215 	stw	fp,8(sp)
 401159c:	df000204 	addi	fp,sp,8
 40115a0:	e13ffe15 	stw	r4,-8(fp)
 40115a4:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 40115a8:	e0bffe17 	ldw	r2,-8(fp)
 40115ac:	10c00d17 	ldw	r3,52(r2)
 40115b0:	e0bfff17 	ldw	r2,-4(fp)
 40115b4:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 40115b8:	e0bffe17 	ldw	r2,-8(fp)
 40115bc:	10800317 	ldw	r2,12(r2)
 40115c0:	10800204 	addi	r2,r2,8
 40115c4:	10800037 	ldwio	r2,0(r2)
 40115c8:	1080008c 	andi	r2,r2,2
 40115cc:	1005d07a 	srai	r2,r2,1
 40115d0:	1007883a 	mov	r3,r2
 40115d4:	e0bfff17 	ldw	r2,-4(fp)
 40115d8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 40115dc:	e0bffe17 	ldw	r2,-8(fp)
 40115e0:	10800317 	ldw	r2,12(r2)
 40115e4:	10800904 	addi	r2,r2,36
 40115e8:	10800037 	ldwio	r2,0(r2)
 40115ec:	1007883a 	mov	r3,r2
 40115f0:	e0bfff17 	ldw	r2,-4(fp)
 40115f4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 40115f8:	e0bffe17 	ldw	r2,-8(fp)
 40115fc:	10800317 	ldw	r2,12(r2)
 4011600:	10800804 	addi	r2,r2,32
 4011604:	10800037 	ldwio	r2,0(r2)
 4011608:	1007883a 	mov	r3,r2
 401160c:	e0bfff17 	ldw	r2,-4(fp)
 4011610:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 4011614:	e0bffe17 	ldw	r2,-8(fp)
 4011618:	10800317 	ldw	r2,12(r2)
 401161c:	10800a04 	addi	r2,r2,40
 4011620:	10800037 	ldwio	r2,0(r2)
 4011624:	1007883a 	mov	r3,r2
 4011628:	e0bfff17 	ldw	r2,-4(fp)
 401162c:	10c0030d 	sth	r3,12(r2)
}
 4011630:	0001883a 	nop
 4011634:	e037883a 	mov	sp,fp
 4011638:	df000017 	ldw	fp,0(sp)
 401163c:	dec00104 	addi	sp,sp,4
 4011640:	f800283a 	ret

04011644 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 4011644:	defffd04 	addi	sp,sp,-12
 4011648:	df000215 	stw	fp,8(sp)
 401164c:	df000204 	addi	fp,sp,8
 4011650:	e13ffe15 	stw	r4,-8(fp)
 4011654:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 4011658:	e0bfff17 	ldw	r2,-4(fp)
 401165c:	10c00017 	ldw	r3,0(r2)
 4011660:	e0bffe17 	ldw	r2,-8(fp)
 4011664:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 4011668:	e0bffe17 	ldw	r2,-8(fp)
 401166c:	10800317 	ldw	r2,12(r2)
 4011670:	10c00204 	addi	r3,r2,8
 4011674:	e0bffe17 	ldw	r2,-8(fp)
 4011678:	10800317 	ldw	r2,12(r2)
 401167c:	10800204 	addi	r2,r2,8
 4011680:	10800037 	ldwio	r2,0(r2)
 4011684:	1009883a 	mov	r4,r2
 4011688:	00bfff44 	movi	r2,-3
 401168c:	2088703a 	and	r4,r4,r2
 4011690:	e0bfff17 	ldw	r2,-4(fp)
 4011694:	10800117 	ldw	r2,4(r2)
 4011698:	1085883a 	add	r2,r2,r2
 401169c:	1080008c 	andi	r2,r2,2
 40116a0:	2084b03a 	or	r2,r4,r2
 40116a4:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 40116a8:	e0bffe17 	ldw	r2,-8(fp)
 40116ac:	10800317 	ldw	r2,12(r2)
 40116b0:	10800904 	addi	r2,r2,36
 40116b4:	e0ffff17 	ldw	r3,-4(fp)
 40116b8:	18c0020b 	ldhu	r3,8(r3)
 40116bc:	18ffffcc 	andi	r3,r3,65535
 40116c0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 40116c4:	e0bffe17 	ldw	r2,-8(fp)
 40116c8:	10800317 	ldw	r2,12(r2)
 40116cc:	10800804 	addi	r2,r2,32
 40116d0:	e0ffff17 	ldw	r3,-4(fp)
 40116d4:	18c0028b 	ldhu	r3,10(r3)
 40116d8:	18ffffcc 	andi	r3,r3,65535
 40116dc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 40116e0:	e0bffe17 	ldw	r2,-8(fp)
 40116e4:	10800317 	ldw	r2,12(r2)
 40116e8:	10800a04 	addi	r2,r2,40
 40116ec:	e0ffff17 	ldw	r3,-4(fp)
 40116f0:	18c0030b 	ldhu	r3,12(r3)
 40116f4:	18ffffcc 	andi	r3,r3,65535
 40116f8:	10c00035 	stwio	r3,0(r2)
}
 40116fc:	0001883a 	nop
 4011700:	e037883a 	mov	sp,fp
 4011704:	df000017 	ldw	fp,0(sp)
 4011708:	dec00104 	addi	sp,sp,4
 401170c:	f800283a 	ret

04011710 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 4011710:	defffb04 	addi	sp,sp,-20
 4011714:	dfc00415 	stw	ra,16(sp)
 4011718:	df000315 	stw	fp,12(sp)
 401171c:	df000304 	addi	fp,sp,12
 4011720:	e13ffd15 	stw	r4,-12(fp)
 4011724:	e17ffe15 	stw	r5,-8(fp)
 4011728:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 401172c:	e0bffe17 	ldw	r2,-8(fp)
 4011730:	1080028b 	ldhu	r2,10(r2)
 4011734:	10bfffcc 	andi	r2,r2,65535
 4011738:	10000426 	beq	r2,zero,401174c <alt_avalon_i2c_master_config_speed_get+0x3c>
 401173c:	e0bffe17 	ldw	r2,-8(fp)
 4011740:	1080020b 	ldhu	r2,8(r2)
 4011744:	10bfffcc 	andi	r2,r2,65535
 4011748:	1000021e 	bne	r2,zero,4011754 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 401174c:	00bfff44 	movi	r2,-3
 4011750:	00000f06 	br	4011790 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 4011754:	e0bffd17 	ldw	r2,-12(fp)
 4011758:	11000c17 	ldw	r4,48(r2)
 401175c:	e0bffe17 	ldw	r2,-8(fp)
 4011760:	1080028b 	ldhu	r2,10(r2)
 4011764:	10ffffcc 	andi	r3,r2,65535
 4011768:	e0bffe17 	ldw	r2,-8(fp)
 401176c:	1080020b 	ldhu	r2,8(r2)
 4011770:	10bfffcc 	andi	r2,r2,65535
 4011774:	1885883a 	add	r2,r3,r2
 4011778:	100b883a 	mov	r5,r2
 401177c:	40031f00 	call	40031f0 <__udivsi3>
 4011780:	1007883a 	mov	r3,r2
 4011784:	e0bfff17 	ldw	r2,-4(fp)
 4011788:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401178c:	0005883a 	mov	r2,zero
}
 4011790:	e037883a 	mov	sp,fp
 4011794:	dfc00117 	ldw	ra,4(sp)
 4011798:	df000017 	ldw	fp,0(sp)
 401179c:	dec00204 	addi	sp,sp,8
 40117a0:	f800283a 	ret

040117a4 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 40117a4:	defff904 	addi	sp,sp,-28
 40117a8:	dfc00615 	stw	ra,24(sp)
 40117ac:	df000515 	stw	fp,20(sp)
 40117b0:	df000504 	addi	fp,sp,20
 40117b4:	e13ffd15 	stw	r4,-12(fp)
 40117b8:	e17ffe15 	stw	r5,-8(fp)
 40117bc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 40117c0:	e0ffff17 	ldw	r3,-4(fp)
 40117c4:	008001b4 	movhi	r2,6
 40117c8:	1086a004 	addi	r2,r2,6784
 40117cc:	10c00436 	bltu	r2,r3,40117e0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 40117d0:	e0bfff17 	ldw	r2,-4(fp)
 40117d4:	10000226 	beq	r2,zero,40117e0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 40117d8:	e0bfff17 	ldw	r2,-4(fp)
 40117dc:	1000021e 	bne	r2,zero,40117e8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 40117e0:	00bfff04 	movi	r2,-4
 40117e4:	00002906 	br	401188c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 40117e8:	e0bffd17 	ldw	r2,-12(fp)
 40117ec:	10c00c17 	ldw	r3,48(r2)
 40117f0:	e0bfff17 	ldw	r2,-4(fp)
 40117f4:	1085883a 	add	r2,r2,r2
 40117f8:	100b883a 	mov	r5,r2
 40117fc:	1809883a 	mov	r4,r3
 4011800:	40031f00 	call	40031f0 <__udivsi3>
 4011804:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4011808:	e0bffb17 	ldw	r2,-20(fp)
 401180c:	10800f04 	addi	r2,r2,60
 4011810:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4011814:	e0bffb17 	ldw	r2,-20(fp)
 4011818:	10bff104 	addi	r2,r2,-60
 401181c:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 4011820:	e0ffff17 	ldw	r3,-4(fp)
 4011824:	008000b4 	movhi	r2,2
 4011828:	10a1a804 	addi	r2,r2,-31072
 401182c:	10c0042e 	bgeu	r2,r3,4011840 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 4011830:	e0bffe17 	ldw	r2,-8(fp)
 4011834:	00c00044 	movi	r3,1
 4011838:	10c00115 	stw	r3,4(r2)
 401183c:	00000206 	br	4011848 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 4011840:	e0bffe17 	ldw	r2,-8(fp)
 4011844:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 4011848:	e0bffb17 	ldw	r2,-20(fp)
 401184c:	1007883a 	mov	r3,r2
 4011850:	e0bffe17 	ldw	r2,-8(fp)
 4011854:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 4011858:	e0bffc17 	ldw	r2,-16(fp)
 401185c:	1007883a 	mov	r3,r2
 4011860:	e0bffe17 	ldw	r2,-8(fp)
 4011864:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 4011868:	e0bffb17 	ldw	r2,-20(fp)
 401186c:	1007883a 	mov	r3,r2
 4011870:	e0bffb17 	ldw	r2,-20(fp)
 4011874:	1004d07a 	srli	r2,r2,1
 4011878:	1885c83a 	sub	r2,r3,r2
 401187c:	1007883a 	mov	r3,r2
 4011880:	e0bffe17 	ldw	r2,-8(fp)
 4011884:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 4011888:	0005883a 	mov	r2,zero

}
 401188c:	e037883a 	mov	sp,fp
 4011890:	dfc00117 	ldw	ra,4(sp)
 4011894:	df000017 	ldw	fp,0(sp)
 4011898:	dec00204 	addi	sp,sp,8
 401189c:	f800283a 	ret

040118a0 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 40118a0:	defffe04 	addi	sp,sp,-8
 40118a4:	df000115 	stw	fp,4(sp)
 40118a8:	df000104 	addi	fp,sp,4
 40118ac:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 40118b0:	e0bfff17 	ldw	r2,-4(fp)
 40118b4:	10800317 	ldw	r2,12(r2)
 40118b8:	10800504 	addi	r2,r2,20
 40118bc:	10800037 	ldwio	r2,0(r2)
 40118c0:	1080004c 	andi	r2,r2,1
 40118c4:	10000226 	beq	r2,zero,40118d0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 40118c8:	00800044 	movi	r2,1
 40118cc:	00000106 	br	40118d4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 40118d0:	0005883a 	mov	r2,zero
}
 40118d4:	e037883a 	mov	sp,fp
 40118d8:	df000017 	ldw	fp,0(sp)
 40118dc:	dec00104 	addi	sp,sp,4
 40118e0:	f800283a 	ret

040118e4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 40118e4:	defffb04 	addi	sp,sp,-20
 40118e8:	df000415 	stw	fp,16(sp)
 40118ec:	df000404 	addi	fp,sp,16
 40118f0:	e13ffc15 	stw	r4,-16(fp)
 40118f4:	e17ffd15 	stw	r5,-12(fp)
 40118f8:	e1bffe15 	stw	r6,-8(fp)
 40118fc:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 4011900:	e0bfff17 	ldw	r2,-4(fp)
 4011904:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 4011908:	00001406 	br	401195c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401190c:	e0bfff17 	ldw	r2,-4(fp)
 4011910:	10800017 	ldw	r2,0(r2)
 4011914:	e0fffd17 	ldw	r3,-12(fp)
 4011918:	1885883a 	add	r2,r3,r2
 401191c:	e0fffc17 	ldw	r3,-16(fp)
 4011920:	18c00317 	ldw	r3,12(r3)
 4011924:	18c00104 	addi	r3,r3,4
 4011928:	18c00037 	ldwio	r3,0(r3)
 401192c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 4011930:	e0bfff17 	ldw	r2,-4(fp)
 4011934:	10800017 	ldw	r2,0(r2)
 4011938:	10c00044 	addi	r3,r2,1
 401193c:	e0bfff17 	ldw	r2,-4(fp)
 4011940:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4011944:	e0bfff17 	ldw	r2,-4(fp)
 4011948:	10c00017 	ldw	r3,0(r2)
 401194c:	e0bffe17 	ldw	r2,-8(fp)
 4011950:	1880021e 	bne	r3,r2,401195c <alt_avalon_i2c_rx_read_available+0x78>
 4011954:	e0bffe17 	ldw	r2,-8(fp)
 4011958:	1000061e 	bne	r2,zero,4011974 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401195c:	e0bffc17 	ldw	r2,-16(fp)
 4011960:	10800317 	ldw	r2,12(r2)
 4011964:	10800704 	addi	r2,r2,28
 4011968:	10800037 	ldwio	r2,0(r2)
 401196c:	103fe71e 	bne	r2,zero,401190c <__alt_data_end+0xfc01190c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 4011970:	00000106 	br	4011978 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4011974:	0001883a 	nop
    }
}
 4011978:	0001883a 	nop
 401197c:	e037883a 	mov	sp,fp
 4011980:	df000017 	ldw	fp,0(sp)
 4011984:	dec00104 	addi	sp,sp,4
 4011988:	f800283a 	ret

0401198c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 401198c:	defffa04 	addi	sp,sp,-24
 4011990:	dfc00515 	stw	ra,20(sp)
 4011994:	df000415 	stw	fp,16(sp)
 4011998:	df000404 	addi	fp,sp,16
 401199c:	e13ffe15 	stw	r4,-8(fp)
 40119a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 40119a4:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 40119a8:	008000b4 	movhi	r2,2
 40119ac:	10a1a804 	addi	r2,r2,-31072
 40119b0:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 40119b4:	00000d06 	br	40119ec <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 40119b8:	e0bffd17 	ldw	r2,-12(fp)
 40119bc:	108002a8 	cmpgeui	r2,r2,10
 40119c0:	1000021e 	bne	r2,zero,40119cc <alt_avalon_i2c_rx_read+0x40>
 40119c4:	0109c404 	movi	r4,10000
 40119c8:	4013bb80 	call	4013bb8 <alt_busy_sleep>
      if (--timeout == 0)
 40119cc:	e0bffd17 	ldw	r2,-12(fp)
 40119d0:	10bfffc4 	addi	r2,r2,-1
 40119d4:	e0bffd15 	stw	r2,-12(fp)
 40119d8:	e0bffd17 	ldw	r2,-12(fp)
 40119dc:	1000031e 	bne	r2,zero,40119ec <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 40119e0:	00bfff84 	movi	r2,-2
 40119e4:	e0bffc15 	stw	r2,-16(fp)
        break;
 40119e8:	00000506 	br	4011a00 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 40119ec:	e0bffe17 	ldw	r2,-8(fp)
 40119f0:	10800317 	ldw	r2,12(r2)
 40119f4:	10800704 	addi	r2,r2,28
 40119f8:	10800037 	ldwio	r2,0(r2)
 40119fc:	103fee26 	beq	r2,zero,40119b8 <__alt_data_end+0xfc0119b8>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 4011a00:	e0bffe17 	ldw	r2,-8(fp)
 4011a04:	10800317 	ldw	r2,12(r2)
 4011a08:	10800104 	addi	r2,r2,4
 4011a0c:	10800037 	ldwio	r2,0(r2)
 4011a10:	1007883a 	mov	r3,r2
 4011a14:	e0bfff17 	ldw	r2,-4(fp)
 4011a18:	10c00005 	stb	r3,0(r2)
        
    return status;
 4011a1c:	e0bffc17 	ldw	r2,-16(fp)
}
 4011a20:	e037883a 	mov	sp,fp
 4011a24:	dfc00117 	ldw	ra,4(sp)
 4011a28:	df000017 	ldw	fp,0(sp)
 4011a2c:	dec00204 	addi	sp,sp,8
 4011a30:	f800283a 	ret

04011a34 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 4011a34:	defff804 	addi	sp,sp,-32
 4011a38:	dfc00715 	stw	ra,28(sp)
 4011a3c:	df000615 	stw	fp,24(sp)
 4011a40:	df000604 	addi	fp,sp,24
 4011a44:	e13ffc15 	stw	r4,-16(fp)
 4011a48:	2809883a 	mov	r4,r5
 4011a4c:	3007883a 	mov	r3,r6
 4011a50:	3805883a 	mov	r2,r7
 4011a54:	e13ffd05 	stb	r4,-12(fp)
 4011a58:	e0fffe05 	stb	r3,-8(fp)
 4011a5c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 4011a60:	0089c404 	movi	r2,10000
 4011a64:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4011a68:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 4011a6c:	00000c06 	br	4011aa0 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 4011a70:	e0bffa17 	ldw	r2,-24(fp)
 4011a74:	108002a8 	cmpgeui	r2,r2,10
 4011a78:	1000021e 	bne	r2,zero,4011a84 <alt_avalon_i2c_cmd_write+0x50>
 4011a7c:	0109c404 	movi	r4,10000
 4011a80:	4013bb80 	call	4013bb8 <alt_busy_sleep>
      if (--timeout == 0)
 4011a84:	e0bffa17 	ldw	r2,-24(fp)
 4011a88:	10bfffc4 	addi	r2,r2,-1
 4011a8c:	e0bffa15 	stw	r2,-24(fp)
 4011a90:	e0bffa17 	ldw	r2,-24(fp)
 4011a94:	1000021e 	bne	r2,zero,4011aa0 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 4011a98:	00bfff84 	movi	r2,-2
 4011a9c:	00001906 	br	4011b04 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 4011aa0:	e0bffc17 	ldw	r2,-16(fp)
 4011aa4:	10800317 	ldw	r2,12(r2)
 4011aa8:	10800404 	addi	r2,r2,16
 4011aac:	10800037 	ldwio	r2,0(r2)
 4011ab0:	1080004c 	andi	r2,r2,1
 4011ab4:	103fee26 	beq	r2,zero,4011a70 <__alt_data_end+0xfc011a70>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 4011ab8:	e0bffc17 	ldw	r2,-16(fp)
 4011abc:	10800317 	ldw	r2,12(r2)
 4011ac0:	e13ffd03 	ldbu	r4,-12(fp)
 4011ac4:	e0fffe03 	ldbu	r3,-8(fp)
 4011ac8:	1806927a 	slli	r3,r3,9
 4011acc:	20c8b03a 	or	r4,r4,r3
 4011ad0:	e0ffff03 	ldbu	r3,-4(fp)
 4011ad4:	1806923a 	slli	r3,r3,8
 4011ad8:	20c6b03a 	or	r3,r4,r3
 4011adc:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 4011ae0:	e0bffb04 	addi	r2,fp,-20
 4011ae4:	100b883a 	mov	r5,r2
 4011ae8:	e13ffc17 	ldw	r4,-16(fp)
 4011aec:	4011c740 	call	4011c74 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 4011af0:	e0bffb04 	addi	r2,fp,-20
 4011af4:	100b883a 	mov	r5,r2
 4011af8:	e13ffc17 	ldw	r4,-16(fp)
 4011afc:	4011cc00 	call	4011cc0 <alt_avalon_i2c_check_arblost>
    
    return status;
 4011b00:	e0bffb17 	ldw	r2,-20(fp)
}
 4011b04:	e037883a 	mov	sp,fp
 4011b08:	dfc00117 	ldw	ra,4(sp)
 4011b0c:	df000017 	ldw	fp,0(sp)
 4011b10:	dec00204 	addi	sp,sp,8
 4011b14:	f800283a 	ret

04011b18 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 4011b18:	defffa04 	addi	sp,sp,-24
 4011b1c:	dfc00515 	stw	ra,20(sp)
 4011b20:	df000415 	stw	fp,16(sp)
 4011b24:	df000404 	addi	fp,sp,16
 4011b28:	e13ffd15 	stw	r4,-12(fp)
 4011b2c:	e17ffe15 	stw	r5,-8(fp)
 4011b30:	3005883a 	mov	r2,r6
 4011b34:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 4011b38:	e0bffd17 	ldw	r2,-12(fp)
 4011b3c:	10800d17 	ldw	r2,52(r2)
 4011b40:	10800058 	cmpnei	r2,r2,1
 4011b44:	10001c1e 	bne	r2,zero,4011bb8 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 4011b48:	e0bffd17 	ldw	r2,-12(fp)
 4011b4c:	10800917 	ldw	r2,36(r2)
 4011b50:	109e0014 	ori	r2,r2,30720
 4011b54:	1004d1fa 	srli	r2,r2,7
 4011b58:	1007883a 	mov	r3,r2
 4011b5c:	00bfff84 	movi	r2,-2
 4011b60:	1884703a 	and	r2,r3,r2
 4011b64:	1007883a 	mov	r3,r2
 4011b68:	e0bffe17 	ldw	r2,-8(fp)
 4011b6c:	1884b03a 	or	r2,r3,r2
 4011b70:	10803fcc 	andi	r2,r2,255
 4011b74:	e0ffff03 	ldbu	r3,-4(fp)
 4011b78:	000f883a 	mov	r7,zero
 4011b7c:	180d883a 	mov	r6,r3
 4011b80:	100b883a 	mov	r5,r2
 4011b84:	e13ffd17 	ldw	r4,-12(fp)
 4011b88:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 4011b8c:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 4011b90:	e0bffd17 	ldw	r2,-12(fp)
 4011b94:	10800917 	ldw	r2,36(r2)
 4011b98:	10803fcc 	andi	r2,r2,255
 4011b9c:	000f883a 	mov	r7,zero
 4011ba0:	000d883a 	mov	r6,zero
 4011ba4:	100b883a 	mov	r5,r2
 4011ba8:	e13ffd17 	ldw	r4,-12(fp)
 4011bac:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 4011bb0:	e0bffc15 	stw	r2,-16(fp)
 4011bb4:	00000e06 	br	4011bf0 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 4011bb8:	e0bffd17 	ldw	r2,-12(fp)
 4011bbc:	10800917 	ldw	r2,36(r2)
 4011bc0:	1085883a 	add	r2,r2,r2
 4011bc4:	1007883a 	mov	r3,r2
 4011bc8:	e0bffe17 	ldw	r2,-8(fp)
 4011bcc:	1884b03a 	or	r2,r3,r2
 4011bd0:	10803fcc 	andi	r2,r2,255
 4011bd4:	e0ffff03 	ldbu	r3,-4(fp)
 4011bd8:	000f883a 	mov	r7,zero
 4011bdc:	180d883a 	mov	r6,r3
 4011be0:	100b883a 	mov	r5,r2
 4011be4:	e13ffd17 	ldw	r4,-12(fp)
 4011be8:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 4011bec:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 4011bf0:	e0bffc17 	ldw	r2,-16(fp)
}
 4011bf4:	e037883a 	mov	sp,fp
 4011bf8:	dfc00117 	ldw	ra,4(sp)
 4011bfc:	df000017 	ldw	fp,0(sp)
 4011c00:	dec00204 	addi	sp,sp,8
 4011c04:	f800283a 	ret

04011c08 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 4011c08:	defffd04 	addi	sp,sp,-12
 4011c0c:	df000215 	stw	fp,8(sp)
 4011c10:	df000204 	addi	fp,sp,8
 4011c14:	e13ffe15 	stw	r4,-8(fp)
 4011c18:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 4011c1c:	e0bffe17 	ldw	r2,-8(fp)
 4011c20:	10c00917 	ldw	r3,36(r2)
 4011c24:	e0bfff17 	ldw	r2,-4(fp)
 4011c28:	10c00015 	stw	r3,0(r2)
}
 4011c2c:	0001883a 	nop
 4011c30:	e037883a 	mov	sp,fp
 4011c34:	df000017 	ldw	fp,0(sp)
 4011c38:	dec00104 	addi	sp,sp,4
 4011c3c:	f800283a 	ret

04011c40 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 4011c40:	defffd04 	addi	sp,sp,-12
 4011c44:	df000215 	stw	fp,8(sp)
 4011c48:	df000204 	addi	fp,sp,8
 4011c4c:	e13ffe15 	stw	r4,-8(fp)
 4011c50:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 4011c54:	e0bffe17 	ldw	r2,-8(fp)
 4011c58:	e0ffff17 	ldw	r3,-4(fp)
 4011c5c:	10c00915 	stw	r3,36(r2)
}
 4011c60:	0001883a 	nop
 4011c64:	e037883a 	mov	sp,fp
 4011c68:	df000017 	ldw	fp,0(sp)
 4011c6c:	dec00104 	addi	sp,sp,4
 4011c70:	f800283a 	ret

04011c74 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 4011c74:	defffd04 	addi	sp,sp,-12
 4011c78:	df000215 	stw	fp,8(sp)
 4011c7c:	df000204 	addi	fp,sp,8
 4011c80:	e13ffe15 	stw	r4,-8(fp)
 4011c84:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 4011c88:	e0bffe17 	ldw	r2,-8(fp)
 4011c8c:	10800317 	ldw	r2,12(r2)
 4011c90:	10800404 	addi	r2,r2,16
 4011c94:	10800037 	ldwio	r2,0(r2)
 4011c98:	1080010c 	andi	r2,r2,4
 4011c9c:	10000326 	beq	r2,zero,4011cac <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 4011ca0:	e0bfff17 	ldw	r2,-4(fp)
 4011ca4:	00fffec4 	movi	r3,-5
 4011ca8:	10c00015 	stw	r3,0(r2)
    }
}
 4011cac:	0001883a 	nop
 4011cb0:	e037883a 	mov	sp,fp
 4011cb4:	df000017 	ldw	fp,0(sp)
 4011cb8:	dec00104 	addi	sp,sp,4
 4011cbc:	f800283a 	ret

04011cc0 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 4011cc0:	defffd04 	addi	sp,sp,-12
 4011cc4:	df000215 	stw	fp,8(sp)
 4011cc8:	df000204 	addi	fp,sp,8
 4011ccc:	e13ffe15 	stw	r4,-8(fp)
 4011cd0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 4011cd4:	e0bffe17 	ldw	r2,-8(fp)
 4011cd8:	10800317 	ldw	r2,12(r2)
 4011cdc:	10800404 	addi	r2,r2,16
 4011ce0:	10800037 	ldwio	r2,0(r2)
 4011ce4:	1080020c 	andi	r2,r2,8
 4011ce8:	10000326 	beq	r2,zero,4011cf8 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 4011cec:	e0bfff17 	ldw	r2,-4(fp)
 4011cf0:	00fffe84 	movi	r3,-6
 4011cf4:	10c00015 	stw	r3,0(r2)
    }
}
 4011cf8:	0001883a 	nop
 4011cfc:	e037883a 	mov	sp,fp
 4011d00:	df000017 	ldw	fp,0(sp)
 4011d04:	dec00104 	addi	sp,sp,4
 4011d08:	f800283a 	ret

04011d0c <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 4011d0c:	defff804 	addi	sp,sp,-32
 4011d10:	dfc00715 	stw	ra,28(sp)
 4011d14:	df000615 	stw	fp,24(sp)
 4011d18:	df000604 	addi	fp,sp,24
 4011d1c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4011d20:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 4011d24:	e0bfff17 	ldw	r2,-4(fp)
 4011d28:	10800717 	ldw	r2,28(r2)
 4011d2c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 4011d30:	e0bffb17 	ldw	r2,-20(fp)
 4011d34:	10800117 	ldw	r2,4(r2)
 4011d38:	10800044 	addi	r2,r2,1
 4011d3c:	1089c424 	muli	r2,r2,10000
 4011d40:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 4011d44:	e0bffd04 	addi	r2,fp,-12
 4011d48:	100b883a 	mov	r5,r2
 4011d4c:	e13fff17 	ldw	r4,-4(fp)
 4011d50:	4012b8c0 	call	4012b8c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 4011d54:	e0bffd17 	ldw	r2,-12(fp)
 4011d58:	100b883a 	mov	r5,r2
 4011d5c:	e13fff17 	ldw	r4,-4(fp)
 4011d60:	4012ac00 	call	4012ac0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 4011d64:	e0bffc04 	addi	r2,fp,-16
 4011d68:	100b883a 	mov	r5,r2
 4011d6c:	e13fff17 	ldw	r4,-4(fp)
 4011d70:	4011c740 	call	4011c74 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 4011d74:	e0bffc17 	ldw	r2,-16(fp)
 4011d78:	10002226 	beq	r2,zero,4011e04 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
 4011d7c:	e0bffb17 	ldw	r2,-20(fp)
 4011d80:	10800217 	ldw	r2,8(r2)
 4011d84:	10001d26 	beq	r2,zero,4011dfc <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4011d88:	00000d06 	br	4011dc0 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
 4011d8c:	e0bffa17 	ldw	r2,-24(fp)
 4011d90:	108002a8 	cmpgeui	r2,r2,10
 4011d94:	1000021e 	bne	r2,zero,4011da0 <alt_avalon_i2c_interrupt_transaction_status+0x94>
 4011d98:	0109c404 	movi	r4,10000
 4011d9c:	4013bb80 	call	4013bb8 <alt_busy_sleep>
              if (--timeout == 0)
 4011da0:	e0bffa17 	ldw	r2,-24(fp)
 4011da4:	10bfffc4 	addi	r2,r2,-1
 4011da8:	e0bffa15 	stw	r2,-24(fp)
 4011dac:	e0bffa17 	ldw	r2,-24(fp)
 4011db0:	1000031e 	bne	r2,zero,4011dc0 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 4011db4:	00bfff84 	movi	r2,-2
 4011db8:	e0bffc15 	stw	r2,-16(fp)
                 break;
 4011dbc:	00000306 	br	4011dcc <alt_avalon_i2c_interrupt_transaction_status+0xc0>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4011dc0:	e13fff17 	ldw	r4,-4(fp)
 4011dc4:	40118a00 	call	40118a0 <alt_avalon_i2c_is_busy>
 4011dc8:	103ff01e 	bne	r2,zero,4011d8c <__alt_data_end+0xfc011d8c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 4011dcc:	e0bffb17 	ldw	r2,-20(fp)
 4011dd0:	10800017 	ldw	r2,0(r2)
 4011dd4:	e0fffe04 	addi	r3,fp,-8
 4011dd8:	180f883a 	mov	r7,r3
 4011ddc:	000d883a 	mov	r6,zero
 4011de0:	100b883a 	mov	r5,r2
 4011de4:	e13fff17 	ldw	r4,-4(fp)
 4011de8:	40118e40 	call	40118e4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 4011dec:	e13fff17 	ldw	r4,-4(fp)
 4011df0:	40115480 	call	4011548 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 4011df4:	e0bffb17 	ldw	r2,-20(fp)
 4011df8:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 4011dfc:	e0bffc17 	ldw	r2,-16(fp)
 4011e00:	00000a06 	br	4011e2c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
 4011e04:	e0bffb17 	ldw	r2,-20(fp)
 4011e08:	10800217 	ldw	r2,8(r2)
 4011e0c:	10000626 	beq	r2,zero,4011e28 <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 4011e10:	e0bffd17 	ldw	r2,-12(fp)
 4011e14:	100b883a 	mov	r5,r2
 4011e18:	e13fff17 	ldw	r4,-4(fp)
 4011e1c:	4012b280 	call	4012b28 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 4011e20:	00bffe44 	movi	r2,-7
 4011e24:	00000106 	br	4011e2c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 4011e28:	0005883a 	mov	r2,zero
}
 4011e2c:	e037883a 	mov	sp,fp
 4011e30:	dfc00117 	ldw	ra,4(sp)
 4011e34:	df000017 	ldw	fp,0(sp)
 4011e38:	dec00204 	addi	sp,sp,8
 4011e3c:	f800283a 	ret

04011e40 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 4011e40:	defff704 	addi	sp,sp,-36
 4011e44:	dfc00815 	stw	ra,32(sp)
 4011e48:	df000715 	stw	fp,28(sp)
 4011e4c:	df000704 	addi	fp,sp,28
 4011e50:	e13ffc15 	stw	r4,-16(fp)
 4011e54:	e17ffd15 	stw	r5,-12(fp)
 4011e58:	e1bffe15 	stw	r6,-8(fp)
 4011e5c:	3805883a 	mov	r2,r7
 4011e60:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4011e64:	0089c404 	movi	r2,10000
 4011e68:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 4011e6c:	00002206 	br	4011ef8 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 4011e70:	e0bffb17 	ldw	r2,-20(fp)
 4011e74:	108002a8 	cmpgeui	r2,r2,10
 4011e78:	1000021e 	bne	r2,zero,4011e84 <alt_avalon_i2c_master_tx+0x44>
 4011e7c:	0109c404 	movi	r4,10000
 4011e80:	4013bb80 	call	4013bb8 <alt_busy_sleep>
      if (use_interrupts)
 4011e84:	e0bfff03 	ldbu	r2,-4(fp)
 4011e88:	10000926 	beq	r2,zero,4011eb0 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 4011e8c:	00800044 	movi	r2,1
 4011e90:	d8800015 	stw	r2,0(sp)
 4011e94:	000f883a 	mov	r7,zero
 4011e98:	e1bffe17 	ldw	r6,-8(fp)
 4011e9c:	e17ffd17 	ldw	r5,-12(fp)
 4011ea0:	e13ffc17 	ldw	r4,-16(fp)
 4011ea4:	40123e80 	call	40123e8 <alt_avalon_i2c_master_transmit_using_interrupts>
 4011ea8:	e0bffa15 	stw	r2,-24(fp)
 4011eac:	00000806 	br	4011ed0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 4011eb0:	00800044 	movi	r2,1
 4011eb4:	d8800015 	stw	r2,0(sp)
 4011eb8:	000f883a 	mov	r7,zero
 4011ebc:	e1bffe17 	ldw	r6,-8(fp)
 4011ec0:	e17ffd17 	ldw	r5,-12(fp)
 4011ec4:	e13ffc17 	ldw	r4,-16(fp)
 4011ec8:	401222c0 	call	401222c <alt_avalon_i2c_master_transmit>
 4011ecc:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4011ed0:	e0bffa17 	ldw	r2,-24(fp)
 4011ed4:	10bffea0 	cmpeqi	r2,r2,-6
 4011ed8:	1000061e 	bne	r2,zero,4011ef4 <alt_avalon_i2c_master_tx+0xb4>
 4011edc:	e0bffa17 	ldw	r2,-24(fp)
 4011ee0:	10bffee0 	cmpeqi	r2,r2,-5
 4011ee4:	1000031e 	bne	r2,zero,4011ef4 <alt_avalon_i2c_master_tx+0xb4>
 4011ee8:	e0bffa17 	ldw	r2,-24(fp)
 4011eec:	10bffe58 	cmpnei	r2,r2,-7
 4011ef0:	1000061e 	bne	r2,zero,4011f0c <alt_avalon_i2c_master_tx+0xcc>
 4011ef4:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 4011ef8:	e0bffb17 	ldw	r2,-20(fp)
 4011efc:	10ffffc4 	addi	r3,r2,-1
 4011f00:	e0fffb15 	stw	r3,-20(fp)
 4011f04:	103fda1e 	bne	r2,zero,4011e70 <__alt_data_end+0xfc011e70>
 4011f08:	00000106 	br	4011f10 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 4011f0c:	0001883a 	nop
    }

    return status;
 4011f10:	e0bffa17 	ldw	r2,-24(fp)
}        
 4011f14:	e037883a 	mov	sp,fp
 4011f18:	dfc00117 	ldw	ra,4(sp)
 4011f1c:	df000017 	ldw	fp,0(sp)
 4011f20:	dec00204 	addi	sp,sp,8
 4011f24:	f800283a 	ret

04011f28 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 4011f28:	defff704 	addi	sp,sp,-36
 4011f2c:	dfc00815 	stw	ra,32(sp)
 4011f30:	df000715 	stw	fp,28(sp)
 4011f34:	df000704 	addi	fp,sp,28
 4011f38:	e13ffc15 	stw	r4,-16(fp)
 4011f3c:	e17ffd15 	stw	r5,-12(fp)
 4011f40:	e1bffe15 	stw	r6,-8(fp)
 4011f44:	3805883a 	mov	r2,r7
 4011f48:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4011f4c:	0089c404 	movi	r2,10000
 4011f50:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 4011f54:	e0bfff03 	ldbu	r2,-4(fp)
 4011f58:	10003426 	beq	r2,zero,401202c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 4011f5c:	00001706 	br	4011fbc <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 4011f60:	e0bffb17 	ldw	r2,-20(fp)
 4011f64:	108002a8 	cmpgeui	r2,r2,10
 4011f68:	1000021e 	bne	r2,zero,4011f74 <alt_avalon_i2c_master_rx+0x4c>
 4011f6c:	0109c404 	movi	r4,10000
 4011f70:	4013bb80 	call	4013bb8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4011f74:	00800044 	movi	r2,1
 4011f78:	d8800015 	stw	r2,0(sp)
 4011f7c:	000f883a 	mov	r7,zero
 4011f80:	e1bffe17 	ldw	r6,-8(fp)
 4011f84:	e17ffd17 	ldw	r5,-12(fp)
 4011f88:	e13ffc17 	ldw	r4,-16(fp)
 4011f8c:	40127fc0 	call	40127fc <alt_avalon_i2c_master_receive_using_interrupts>
 4011f90:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4011f94:	e0bffa17 	ldw	r2,-24(fp)
 4011f98:	10bffea0 	cmpeqi	r2,r2,-6
 4011f9c:	1000061e 	bne	r2,zero,4011fb8 <alt_avalon_i2c_master_rx+0x90>
 4011fa0:	e0bffa17 	ldw	r2,-24(fp)
 4011fa4:	10bffee0 	cmpeqi	r2,r2,-5
 4011fa8:	1000031e 	bne	r2,zero,4011fb8 <alt_avalon_i2c_master_rx+0x90>
 4011fac:	e0bffa17 	ldw	r2,-24(fp)
 4011fb0:	10bffe58 	cmpnei	r2,r2,-7
 4011fb4:	1000221e 	bne	r2,zero,4012040 <alt_avalon_i2c_master_rx+0x118>
 4011fb8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 4011fbc:	e0bffb17 	ldw	r2,-20(fp)
 4011fc0:	10ffffc4 	addi	r3,r2,-1
 4011fc4:	e0fffb15 	stw	r3,-20(fp)
 4011fc8:	103fe51e 	bne	r2,zero,4011f60 <__alt_data_end+0xfc011f60>
 4011fcc:	00001f06 	br	401204c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4011fd0:	e0bffb17 	ldw	r2,-20(fp)
 4011fd4:	108002a8 	cmpgeui	r2,r2,10
 4011fd8:	1000021e 	bne	r2,zero,4011fe4 <alt_avalon_i2c_master_rx+0xbc>
 4011fdc:	0109c404 	movi	r4,10000
 4011fe0:	4013bb80 	call	4013bb8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4011fe4:	00800044 	movi	r2,1
 4011fe8:	d8800015 	stw	r2,0(sp)
 4011fec:	000f883a 	mov	r7,zero
 4011ff0:	e1bffe17 	ldw	r6,-8(fp)
 4011ff4:	e17ffd17 	ldw	r5,-12(fp)
 4011ff8:	e13ffc17 	ldw	r4,-16(fp)
 4011ffc:	40125f00 	call	40125f0 <alt_avalon_i2c_master_receive>
 4012000:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4012004:	e0bffa17 	ldw	r2,-24(fp)
 4012008:	10bffea0 	cmpeqi	r2,r2,-6
 401200c:	1000061e 	bne	r2,zero,4012028 <alt_avalon_i2c_master_rx+0x100>
 4012010:	e0bffa17 	ldw	r2,-24(fp)
 4012014:	10bffee0 	cmpeqi	r2,r2,-5
 4012018:	1000031e 	bne	r2,zero,4012028 <alt_avalon_i2c_master_rx+0x100>
 401201c:	e0bffa17 	ldw	r2,-24(fp)
 4012020:	10bffe58 	cmpnei	r2,r2,-7
 4012024:	1000081e 	bne	r2,zero,4012048 <alt_avalon_i2c_master_rx+0x120>
 4012028:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 401202c:	e0bffb17 	ldw	r2,-20(fp)
 4012030:	10ffffc4 	addi	r3,r2,-1
 4012034:	e0fffb15 	stw	r3,-20(fp)
 4012038:	103fe51e 	bne	r2,zero,4011fd0 <__alt_data_end+0xfc011fd0>
 401203c:	00000306 	br	401204c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 4012040:	0001883a 	nop
 4012044:	00000106 	br	401204c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 4012048:	0001883a 	nop
      }
    }
    
    return status;
 401204c:	e0bffa17 	ldw	r2,-24(fp)
}        
 4012050:	e037883a 	mov	sp,fp
 4012054:	dfc00117 	ldw	ra,4(sp)
 4012058:	df000017 	ldw	fp,0(sp)
 401205c:	dec00204 	addi	sp,sp,8
 4012060:	f800283a 	ret

04012064 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 4012064:	defff604 	addi	sp,sp,-40
 4012068:	dfc00915 	stw	ra,36(sp)
 401206c:	df000815 	stw	fp,32(sp)
 4012070:	df000804 	addi	fp,sp,32
 4012074:	e13ffb15 	stw	r4,-20(fp)
 4012078:	e17ffc15 	stw	r5,-16(fp)
 401207c:	e1bffd15 	stw	r6,-12(fp)
 4012080:	e1fffe15 	stw	r7,-8(fp)
 4012084:	e0800317 	ldw	r2,12(fp)
 4012088:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401208c:	0089c404 	movi	r2,10000
 4012090:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 4012094:	e0bfff03 	ldbu	r2,-4(fp)
 4012098:	10005626 	beq	r2,zero,40121f4 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 401209c:	00002806 	br	4012140 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 40120a0:	e0bffa17 	ldw	r2,-24(fp)
 40120a4:	108002a8 	cmpgeui	r2,r2,10
 40120a8:	1000021e 	bne	r2,zero,40120b4 <alt_avalon_i2c_master_tx_rx+0x50>
 40120ac:	0109c404 	movi	r4,10000
 40120b0:	4013bb80 	call	4013bb8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 40120b4:	d8000015 	stw	zero,0(sp)
 40120b8:	000f883a 	mov	r7,zero
 40120bc:	e1bffd17 	ldw	r6,-12(fp)
 40120c0:	e17ffc17 	ldw	r5,-16(fp)
 40120c4:	e13ffb17 	ldw	r4,-20(fp)
 40120c8:	40123e80 	call	40123e8 <alt_avalon_i2c_master_transmit_using_interrupts>
 40120cc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40120d0:	e0bff917 	ldw	r2,-28(fp)
 40120d4:	10bffea0 	cmpeqi	r2,r2,-6
 40120d8:	1000191e 	bne	r2,zero,4012140 <alt_avalon_i2c_master_tx_rx+0xdc>
 40120dc:	e0bff917 	ldw	r2,-28(fp)
 40120e0:	10bffee0 	cmpeqi	r2,r2,-5
 40120e4:	1000161e 	bne	r2,zero,4012140 <alt_avalon_i2c_master_tx_rx+0xdc>
 40120e8:	e0bff917 	ldw	r2,-28(fp)
 40120ec:	10bffe58 	cmpnei	r2,r2,-7
 40120f0:	1000011e 	bne	r2,zero,40120f8 <alt_avalon_i2c_master_tx_rx+0x94>
 40120f4:	00001206 	br	4012140 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 40120f8:	00800044 	movi	r2,1
 40120fc:	d8800015 	stw	r2,0(sp)
 4012100:	01c00044 	movi	r7,1
 4012104:	e1800217 	ldw	r6,8(fp)
 4012108:	e17ffe17 	ldw	r5,-8(fp)
 401210c:	e13ffb17 	ldw	r4,-20(fp)
 4012110:	40127fc0 	call	40127fc <alt_avalon_i2c_master_receive_using_interrupts>
 4012114:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4012118:	e0bff917 	ldw	r2,-28(fp)
 401211c:	10bffea0 	cmpeqi	r2,r2,-6
 4012120:	1000061e 	bne	r2,zero,401213c <alt_avalon_i2c_master_tx_rx+0xd8>
 4012124:	e0bff917 	ldw	r2,-28(fp)
 4012128:	10bffee0 	cmpeqi	r2,r2,-5
 401212c:	1000031e 	bne	r2,zero,401213c <alt_avalon_i2c_master_tx_rx+0xd8>
 4012130:	e0bff917 	ldw	r2,-28(fp)
 4012134:	10bffe58 	cmpnei	r2,r2,-7
 4012138:	1000331e 	bne	r2,zero,4012208 <alt_avalon_i2c_master_tx_rx+0x1a4>
 401213c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 4012140:	e0bffa17 	ldw	r2,-24(fp)
 4012144:	10ffffc4 	addi	r3,r2,-1
 4012148:	e0fffa15 	stw	r3,-24(fp)
 401214c:	103fd41e 	bne	r2,zero,40120a0 <__alt_data_end+0xfc0120a0>
 4012150:	00003006 	br	4012214 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4012154:	e0bffa17 	ldw	r2,-24(fp)
 4012158:	108002a8 	cmpgeui	r2,r2,10
 401215c:	1000021e 	bne	r2,zero,4012168 <alt_avalon_i2c_master_tx_rx+0x104>
 4012160:	0109c404 	movi	r4,10000
 4012164:	4013bb80 	call	4013bb8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 4012168:	d8000015 	stw	zero,0(sp)
 401216c:	000f883a 	mov	r7,zero
 4012170:	e1bffd17 	ldw	r6,-12(fp)
 4012174:	e17ffc17 	ldw	r5,-16(fp)
 4012178:	e13ffb17 	ldw	r4,-20(fp)
 401217c:	401222c0 	call	401222c <alt_avalon_i2c_master_transmit>
 4012180:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4012184:	e0bff917 	ldw	r2,-28(fp)
 4012188:	10bffea0 	cmpeqi	r2,r2,-6
 401218c:	1000191e 	bne	r2,zero,40121f4 <alt_avalon_i2c_master_tx_rx+0x190>
 4012190:	e0bff917 	ldw	r2,-28(fp)
 4012194:	10bffee0 	cmpeqi	r2,r2,-5
 4012198:	1000161e 	bne	r2,zero,40121f4 <alt_avalon_i2c_master_tx_rx+0x190>
 401219c:	e0bff917 	ldw	r2,-28(fp)
 40121a0:	10bffe58 	cmpnei	r2,r2,-7
 40121a4:	1000011e 	bne	r2,zero,40121ac <alt_avalon_i2c_master_tx_rx+0x148>
 40121a8:	00001206 	br	40121f4 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 40121ac:	00800044 	movi	r2,1
 40121b0:	d8800015 	stw	r2,0(sp)
 40121b4:	01c00044 	movi	r7,1
 40121b8:	e1800217 	ldw	r6,8(fp)
 40121bc:	e17ffe17 	ldw	r5,-8(fp)
 40121c0:	e13ffb17 	ldw	r4,-20(fp)
 40121c4:	40125f00 	call	40125f0 <alt_avalon_i2c_master_receive>
 40121c8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40121cc:	e0bff917 	ldw	r2,-28(fp)
 40121d0:	10bffea0 	cmpeqi	r2,r2,-6
 40121d4:	1000061e 	bne	r2,zero,40121f0 <alt_avalon_i2c_master_tx_rx+0x18c>
 40121d8:	e0bff917 	ldw	r2,-28(fp)
 40121dc:	10bffee0 	cmpeqi	r2,r2,-5
 40121e0:	1000031e 	bne	r2,zero,40121f0 <alt_avalon_i2c_master_tx_rx+0x18c>
 40121e4:	e0bff917 	ldw	r2,-28(fp)
 40121e8:	10bffe58 	cmpnei	r2,r2,-7
 40121ec:	1000081e 	bne	r2,zero,4012210 <alt_avalon_i2c_master_tx_rx+0x1ac>
 40121f0:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 40121f4:	e0bffa17 	ldw	r2,-24(fp)
 40121f8:	10ffffc4 	addi	r3,r2,-1
 40121fc:	e0fffa15 	stw	r3,-24(fp)
 4012200:	103fd41e 	bne	r2,zero,4012154 <__alt_data_end+0xfc012154>
 4012204:	00000306 	br	4012214 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 4012208:	0001883a 	nop
 401220c:	00000106 	br	4012214 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 4012210:	0001883a 	nop
      }
    }
    
    return status;
 4012214:	e0bff917 	ldw	r2,-28(fp)
}                                       
 4012218:	e037883a 	mov	sp,fp
 401221c:	dfc00117 	ldw	ra,4(sp)
 4012220:	df000017 	ldw	fp,0(sp)
 4012224:	dec00204 	addi	sp,sp,8
 4012228:	f800283a 	ret

0401222c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401222c:	defff704 	addi	sp,sp,-36
 4012230:	dfc00815 	stw	ra,32(sp)
 4012234:	df000715 	stw	fp,28(sp)
 4012238:	df000704 	addi	fp,sp,28
 401223c:	e13ffb15 	stw	r4,-20(fp)
 4012240:	e17ffc15 	stw	r5,-16(fp)
 4012244:	e1bffd15 	stw	r6,-12(fp)
 4012248:	3807883a 	mov	r3,r7
 401224c:	e0800217 	ldw	r2,8(fp)
 4012250:	e0fffe05 	stb	r3,-8(fp)
 4012254:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4012258:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 401225c:	e0bffd17 	ldw	r2,-12(fp)
 4012260:	1089c424 	muli	r2,r2,10000
 4012264:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 4012268:	e0bffd17 	ldw	r2,-12(fp)
 401226c:	1000021e 	bne	r2,zero,4012278 <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4012270:	0005883a 	mov	r2,zero
 4012274:	00005706 	br	40123d4 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4012278:	e0bffe03 	ldbu	r2,-8(fp)
 401227c:	10000a1e 	bne	r2,zero,40122a8 <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4012280:	e13ffb17 	ldw	r4,-20(fp)
 4012284:	40114b00 	call	40114b0 <alt_avalon_i2c_enable>
 4012288:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401228c:	e0bffa17 	ldw	r2,-24(fp)
 4012290:	10000226 	beq	r2,zero,401229c <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
 4012294:	e0bffa17 	ldw	r2,-24(fp)
 4012298:	00004e06 	br	40123d4 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401229c:	01400704 	movi	r5,28
 40122a0:	e13ffb17 	ldw	r4,-20(fp)
 40122a4:	4012a840 	call	4012a84 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 40122a8:	e0bffe03 	ldbu	r2,-8(fp)
 40122ac:	100d883a 	mov	r6,r2
 40122b0:	000b883a 	mov	r5,zero
 40122b4:	e13ffb17 	ldw	r4,-20(fp)
 40122b8:	4011b180 	call	4011b18 <alt_avalon_i2c_send_address>
 40122bc:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 40122c0:	e0bffa17 	ldw	r2,-24(fp)
 40122c4:	1000271e 	bne	r2,zero,4012364 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40122c8:	00000f06 	br	4012308 <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40122cc:	e0bffc17 	ldw	r2,-16(fp)
 40122d0:	10800003 	ldbu	r2,0(r2)
 40122d4:	10803fcc 	andi	r2,r2,255
 40122d8:	000f883a 	mov	r7,zero
 40122dc:	000d883a 	mov	r6,zero
 40122e0:	100b883a 	mov	r5,r2
 40122e4:	e13ffb17 	ldw	r4,-20(fp)
 40122e8:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 40122ec:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 40122f0:	e0bffc17 	ldw	r2,-16(fp)
 40122f4:	10800044 	addi	r2,r2,1
 40122f8:	e0bffc15 	stw	r2,-16(fp)
            --size;
 40122fc:	e0bffd17 	ldw	r2,-12(fp)
 4012300:	10bfffc4 	addi	r2,r2,-1
 4012304:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4012308:	e0bffd17 	ldw	r2,-12(fp)
 401230c:	108000b0 	cmpltui	r2,r2,2
 4012310:	1000021e 	bne	r2,zero,401231c <alt_avalon_i2c_master_transmit+0xf0>
 4012314:	e0bffa17 	ldw	r2,-24(fp)
 4012318:	103fec26 	beq	r2,zero,40122cc <__alt_data_end+0xfc0122cc>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401231c:	e0bffa17 	ldw	r2,-24(fp)
 4012320:	1000101e 	bne	r2,zero,4012364 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4012324:	e0bffc17 	ldw	r2,-16(fp)
 4012328:	10800003 	ldbu	r2,0(r2)
 401232c:	10803fcc 	andi	r2,r2,255
 4012330:	e0ffff03 	ldbu	r3,-4(fp)
 4012334:	180f883a 	mov	r7,r3
 4012338:	000d883a 	mov	r6,zero
 401233c:	100b883a 	mov	r5,r2
 4012340:	e13ffb17 	ldw	r4,-20(fp)
 4012344:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 4012348:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 401234c:	e0bffc17 	ldw	r2,-16(fp)
 4012350:	10800044 	addi	r2,r2,1
 4012354:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4012358:	e0bffd17 	ldw	r2,-12(fp)
 401235c:	10bfffc4 	addi	r2,r2,-1
 4012360:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 4012364:	e0bfff03 	ldbu	r2,-4(fp)
 4012368:	1000101e 	bne	r2,zero,40123ac <alt_avalon_i2c_master_transmit+0x180>
 401236c:	e0bffa17 	ldw	r2,-24(fp)
 4012370:	10001726 	beq	r2,zero,40123d0 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012374:	00000d06 	br	40123ac <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
 4012378:	e0bff917 	ldw	r2,-28(fp)
 401237c:	108002a8 	cmpgeui	r2,r2,10
 4012380:	1000021e 	bne	r2,zero,401238c <alt_avalon_i2c_master_transmit+0x160>
 4012384:	0109c404 	movi	r4,10000
 4012388:	4013bb80 	call	4013bb8 <alt_busy_sleep>
            if (--timeout == 0)
 401238c:	e0bff917 	ldw	r2,-28(fp)
 4012390:	10bfffc4 	addi	r2,r2,-1
 4012394:	e0bff915 	stw	r2,-28(fp)
 4012398:	e0bff917 	ldw	r2,-28(fp)
 401239c:	1000031e 	bne	r2,zero,40123ac <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 40123a0:	00bfff84 	movi	r2,-2
 40123a4:	e0bffa15 	stw	r2,-24(fp)
               break;
 40123a8:	00000306 	br	40123b8 <alt_avalon_i2c_master_transmit+0x18c>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 40123ac:	e13ffb17 	ldw	r4,-20(fp)
 40123b0:	40118a00 	call	40118a0 <alt_avalon_i2c_is_busy>
 40123b4:	103ff01e 	bne	r2,zero,4012378 <__alt_data_end+0xfc012378>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 40123b8:	e0bffa04 	addi	r2,fp,-24
 40123bc:	100b883a 	mov	r5,r2
 40123c0:	e13ffb17 	ldw	r4,-20(fp)
 40123c4:	4011c740 	call	4011c74 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 40123c8:	e13ffb17 	ldw	r4,-20(fp)
 40123cc:	40115480 	call	4011548 <alt_avalon_i2c_disable>
    }


    return status;
 40123d0:	e0bffa17 	ldw	r2,-24(fp)
}
 40123d4:	e037883a 	mov	sp,fp
 40123d8:	dfc00117 	ldw	ra,4(sp)
 40123dc:	df000017 	ldw	fp,0(sp)
 40123e0:	dec00204 	addi	sp,sp,8
 40123e4:	f800283a 	ret

040123e8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 40123e8:	defff604 	addi	sp,sp,-40
 40123ec:	dfc00915 	stw	ra,36(sp)
 40123f0:	df000815 	stw	fp,32(sp)
 40123f4:	df000804 	addi	fp,sp,32
 40123f8:	e13ffb15 	stw	r4,-20(fp)
 40123fc:	e17ffc15 	stw	r5,-16(fp)
 4012400:	e1bffd15 	stw	r6,-12(fp)
 4012404:	3807883a 	mov	r3,r7
 4012408:	e0800217 	ldw	r2,8(fp)
 401240c:	e0fffe05 	stb	r3,-8(fp)
 4012410:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4012414:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 4012418:	e0bffd17 	ldw	r2,-12(fp)
 401241c:	1089c424 	muli	r2,r2,10000
 4012420:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 4012424:	e0bffb17 	ldw	r2,-20(fp)
 4012428:	10800717 	ldw	r2,28(r2)
 401242c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 4012430:	e0bffd17 	ldw	r2,-12(fp)
 4012434:	1000021e 	bne	r2,zero,4012440 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4012438:	0005883a 	mov	r2,zero
 401243c:	00006706 	br	40125dc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 4012440:	e0bffb17 	ldw	r2,-20(fp)
 4012444:	10c00617 	ldw	r3,24(r2)
 4012448:	00810074 	movhi	r2,1025
 401244c:	10844d04 	addi	r2,r2,4404
 4012450:	18800226 	beq	r3,r2,401245c <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 4012454:	00bfff44 	movi	r2,-3
 4012458:	00006006 	br	40125dc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401245c:	e0bffe03 	ldbu	r2,-8(fp)
 4012460:	10000a1e 	bne	r2,zero,401248c <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4012464:	e13ffb17 	ldw	r4,-20(fp)
 4012468:	40114b00 	call	40114b0 <alt_avalon_i2c_enable>
 401246c:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4012470:	e0bff817 	ldw	r2,-32(fp)
 4012474:	10000226 	beq	r2,zero,4012480 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
 4012478:	e0bff817 	ldw	r2,-32(fp)
 401247c:	00005706 	br	40125dc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4012480:	01400704 	movi	r5,28
 4012484:	e13ffb17 	ldw	r4,-20(fp)
 4012488:	4012a840 	call	4012a84 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401248c:	e0bffe03 	ldbu	r2,-8(fp)
 4012490:	100d883a 	mov	r6,r2
 4012494:	000b883a 	mov	r5,zero
 4012498:	e13ffb17 	ldw	r4,-20(fp)
 401249c:	4011b180 	call	4011b18 <alt_avalon_i2c_send_address>
 40124a0:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 40124a4:	e0bff817 	ldw	r2,-32(fp)
 40124a8:	1000271e 	bne	r2,zero,4012548 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40124ac:	00000f06 	br	40124ec <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40124b0:	e0bffc17 	ldw	r2,-16(fp)
 40124b4:	10800003 	ldbu	r2,0(r2)
 40124b8:	10803fcc 	andi	r2,r2,255
 40124bc:	000f883a 	mov	r7,zero
 40124c0:	000d883a 	mov	r6,zero
 40124c4:	100b883a 	mov	r5,r2
 40124c8:	e13ffb17 	ldw	r4,-20(fp)
 40124cc:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 40124d0:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 40124d4:	e0bffc17 	ldw	r2,-16(fp)
 40124d8:	10800044 	addi	r2,r2,1
 40124dc:	e0bffc15 	stw	r2,-16(fp)
            --size;
 40124e0:	e0bffd17 	ldw	r2,-12(fp)
 40124e4:	10bfffc4 	addi	r2,r2,-1
 40124e8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40124ec:	e0bffd17 	ldw	r2,-12(fp)
 40124f0:	108000b0 	cmpltui	r2,r2,2
 40124f4:	1000021e 	bne	r2,zero,4012500 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
 40124f8:	e0bff817 	ldw	r2,-32(fp)
 40124fc:	103fec26 	beq	r2,zero,40124b0 <__alt_data_end+0xfc0124b0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4012500:	e0bff817 	ldw	r2,-32(fp)
 4012504:	1000101e 	bne	r2,zero,4012548 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4012508:	e0bffc17 	ldw	r2,-16(fp)
 401250c:	10800003 	ldbu	r2,0(r2)
 4012510:	10803fcc 	andi	r2,r2,255
 4012514:	e0ffff03 	ldbu	r3,-4(fp)
 4012518:	180f883a 	mov	r7,r3
 401251c:	000d883a 	mov	r6,zero
 4012520:	100b883a 	mov	r5,r2
 4012524:	e13ffb17 	ldw	r4,-20(fp)
 4012528:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 401252c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 4012530:	e0bffc17 	ldw	r2,-16(fp)
 4012534:	10800044 	addi	r2,r2,1
 4012538:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401253c:	e0bffd17 	ldw	r2,-12(fp)
 4012540:	10bfffc4 	addi	r2,r2,-1
 4012544:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 4012548:	e0bff817 	ldw	r2,-32(fp)
 401254c:	10001426 	beq	r2,zero,40125a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012550:	00000d06 	br	4012588 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 4012554:	e0bff917 	ldw	r2,-28(fp)
 4012558:	108002a8 	cmpgeui	r2,r2,10
 401255c:	1000021e 	bne	r2,zero,4012568 <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
 4012560:	0109c404 	movi	r4,10000
 4012564:	4013bb80 	call	4013bb8 <alt_busy_sleep>
            if (--timeout == 0)
 4012568:	e0bff917 	ldw	r2,-28(fp)
 401256c:	10bfffc4 	addi	r2,r2,-1
 4012570:	e0bff915 	stw	r2,-28(fp)
 4012574:	e0bff917 	ldw	r2,-28(fp)
 4012578:	1000031e 	bne	r2,zero,4012588 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401257c:	00bfff84 	movi	r2,-2
 4012580:	e0bff815 	stw	r2,-32(fp)
               break;
 4012584:	00000306 	br	4012594 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012588:	e13ffb17 	ldw	r4,-20(fp)
 401258c:	40118a00 	call	40118a0 <alt_avalon_i2c_is_busy>
 4012590:	103ff01e 	bne	r2,zero,4012554 <__alt_data_end+0xfc012554>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4012594:	e13ffb17 	ldw	r4,-20(fp)
 4012598:	40115480 	call	4011548 <alt_avalon_i2c_disable>
 401259c:	00000e06 	br	40125d8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
 40125a0:	e0bfff03 	ldbu	r2,-4(fp)
 40125a4:	10000c26 	beq	r2,zero,40125d8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40125a8:	01400704 	movi	r5,28
 40125ac:	e13ffb17 	ldw	r4,-20(fp)
 40125b0:	4012a840 	call	4012a84 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 40125b4:	000b883a 	mov	r5,zero
 40125b8:	e13ffb17 	ldw	r4,-20(fp)
 40125bc:	4012ccc0 	call	4012ccc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 40125c0:	e0bffa17 	ldw	r2,-24(fp)
 40125c4:	00c00044 	movi	r3,1
 40125c8:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 40125cc:	01400044 	movi	r5,1
 40125d0:	e13ffb17 	ldw	r4,-20(fp)
 40125d4:	4012b280 	call	4012b28 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 40125d8:	e0bff817 	ldw	r2,-32(fp)
}
 40125dc:	e037883a 	mov	sp,fp
 40125e0:	dfc00117 	ldw	ra,4(sp)
 40125e4:	df000017 	ldw	fp,0(sp)
 40125e8:	dec00204 	addi	sp,sp,8
 40125ec:	f800283a 	ret

040125f0 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 40125f0:	defff404 	addi	sp,sp,-48
 40125f4:	dfc00b15 	stw	ra,44(sp)
 40125f8:	df000a15 	stw	fp,40(sp)
 40125fc:	df000a04 	addi	fp,sp,40
 4012600:	e13ffb15 	stw	r4,-20(fp)
 4012604:	e17ffc15 	stw	r5,-16(fp)
 4012608:	e1bffd15 	stw	r6,-12(fp)
 401260c:	3807883a 	mov	r3,r7
 4012610:	e0800217 	ldw	r2,8(fp)
 4012614:	e0fffe05 	stb	r3,-8(fp)
 4012618:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401261c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 4012620:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 4012624:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 4012628:	e0bffd17 	ldw	r2,-12(fp)
 401262c:	1000021e 	bne	r2,zero,4012638 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4012630:	0005883a 	mov	r2,zero
 4012634:	00006c06 	br	40127e8 <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4012638:	e0bffe03 	ldbu	r2,-8(fp)
 401263c:	10000a1e 	bne	r2,zero,4012668 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4012640:	e13ffb17 	ldw	r4,-20(fp)
 4012644:	40114b00 	call	40114b0 <alt_avalon_i2c_enable>
 4012648:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401264c:	e0bff917 	ldw	r2,-28(fp)
 4012650:	10000226 	beq	r2,zero,401265c <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 4012654:	e0bff917 	ldw	r2,-28(fp)
 4012658:	00006306 	br	40127e8 <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401265c:	01400704 	movi	r5,28
 4012660:	e13ffb17 	ldw	r4,-20(fp)
 4012664:	4012a840 	call	4012a84 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 4012668:	e0bffe03 	ldbu	r2,-8(fp)
 401266c:	100d883a 	mov	r6,r2
 4012670:	01400044 	movi	r5,1
 4012674:	e13ffb17 	ldw	r4,-20(fp)
 4012678:	4011b180 	call	4011b18 <alt_avalon_i2c_send_address>
 401267c:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 4012680:	e0bff917 	ldw	r2,-28(fp)
 4012684:	1000341e 	bne	r2,zero,4012758 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4012688:	00001906 	br	40126f0 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401268c:	000f883a 	mov	r7,zero
 4012690:	000d883a 	mov	r6,zero
 4012694:	000b883a 	mov	r5,zero
 4012698:	e13ffb17 	ldw	r4,-20(fp)
 401269c:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 40126a0:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 40126a4:	e0bff817 	ldw	r2,-32(fp)
 40126a8:	10800044 	addi	r2,r2,1
 40126ac:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 40126b0:	e0bff917 	ldw	r2,-28(fp)
 40126b4:	10000e1e 	bne	r2,zero,40126f0 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 40126b8:	e0bffa04 	addi	r2,fp,-24
 40126bc:	100f883a 	mov	r7,r2
 40126c0:	000d883a 	mov	r6,zero
 40126c4:	e17ffc17 	ldw	r5,-16(fp)
 40126c8:	e13ffb17 	ldw	r4,-20(fp)
 40126cc:	40118e40 	call	40118e4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 40126d0:	e0bffa17 	ldw	r2,-24(fp)
 40126d4:	e0fffc17 	ldw	r3,-16(fp)
 40126d8:	1885883a 	add	r2,r3,r2
 40126dc:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 40126e0:	e0bffa17 	ldw	r2,-24(fp)
 40126e4:	e0fff717 	ldw	r3,-36(fp)
 40126e8:	1885883a 	add	r2,r3,r2
 40126ec:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 40126f0:	e0bffd17 	ldw	r2,-12(fp)
 40126f4:	10bfffc4 	addi	r2,r2,-1
 40126f8:	e0fff817 	ldw	r3,-32(fp)
 40126fc:	1880022e 	bgeu	r3,r2,4012708 <alt_avalon_i2c_master_receive+0x118>
 4012700:	e0bff917 	ldw	r2,-28(fp)
 4012704:	103fe126 	beq	r2,zero,401268c <__alt_data_end+0xfc01268c>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4012708:	e0bff917 	ldw	r2,-28(fp)
 401270c:	1000121e 	bne	r2,zero,4012758 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4012710:	e0bfff03 	ldbu	r2,-4(fp)
 4012714:	100f883a 	mov	r7,r2
 4012718:	000d883a 	mov	r6,zero
 401271c:	000b883a 	mov	r5,zero
 4012720:	e13ffb17 	ldw	r4,-20(fp)
 4012724:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 4012728:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401272c:	00000a06 	br	4012758 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 4012730:	e17ffc17 	ldw	r5,-16(fp)
 4012734:	e13ffb17 	ldw	r4,-20(fp)
 4012738:	401198c0 	call	401198c <alt_avalon_i2c_rx_read>
 401273c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 4012740:	e0bffc17 	ldw	r2,-16(fp)
 4012744:	10800044 	addi	r2,r2,1
 4012748:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 401274c:	e0bff717 	ldw	r2,-36(fp)
 4012750:	10800044 	addi	r2,r2,1
 4012754:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 4012758:	e0fff717 	ldw	r3,-36(fp)
 401275c:	e0bffd17 	ldw	r2,-12(fp)
 4012760:	1880022e 	bgeu	r3,r2,401276c <alt_avalon_i2c_master_receive+0x17c>
 4012764:	e0bff917 	ldw	r2,-28(fp)
 4012768:	103ff126 	beq	r2,zero,4012730 <__alt_data_end+0xfc012730>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401276c:	e0bfff03 	ldbu	r2,-4(fp)
 4012770:	1000021e 	bne	r2,zero,401277c <alt_avalon_i2c_master_receive+0x18c>
 4012774:	e0bff917 	ldw	r2,-28(fp)
 4012778:	10001a26 	beq	r2,zero,40127e4 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
 401277c:	e0bffd17 	ldw	r2,-12(fp)
 4012780:	1089c424 	muli	r2,r2,10000
 4012784:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012788:	00000d06 	br	40127c0 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401278c:	e0bff617 	ldw	r2,-40(fp)
 4012790:	108002a8 	cmpgeui	r2,r2,10
 4012794:	1000021e 	bne	r2,zero,40127a0 <alt_avalon_i2c_master_receive+0x1b0>
 4012798:	0109c404 	movi	r4,10000
 401279c:	4013bb80 	call	4013bb8 <alt_busy_sleep>
            if (--timeout == 0)
 40127a0:	e0bff617 	ldw	r2,-40(fp)
 40127a4:	10bfffc4 	addi	r2,r2,-1
 40127a8:	e0bff615 	stw	r2,-40(fp)
 40127ac:	e0bff617 	ldw	r2,-40(fp)
 40127b0:	1000031e 	bne	r2,zero,40127c0 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 40127b4:	00bfff84 	movi	r2,-2
 40127b8:	e0bff915 	stw	r2,-28(fp)
               break;
 40127bc:	00000306 	br	40127cc <alt_avalon_i2c_master_receive+0x1dc>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 40127c0:	e13ffb17 	ldw	r4,-20(fp)
 40127c4:	40118a00 	call	40118a0 <alt_avalon_i2c_is_busy>
 40127c8:	103ff01e 	bne	r2,zero,401278c <__alt_data_end+0xfc01278c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 40127cc:	e0bff904 	addi	r2,fp,-28
 40127d0:	100b883a 	mov	r5,r2
 40127d4:	e13ffb17 	ldw	r4,-20(fp)
 40127d8:	4011c740 	call	4011c74 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 40127dc:	e13ffb17 	ldw	r4,-20(fp)
 40127e0:	40115480 	call	4011548 <alt_avalon_i2c_disable>
    }

    return status;
 40127e4:	e0bff917 	ldw	r2,-28(fp)
}
 40127e8:	e037883a 	mov	sp,fp
 40127ec:	dfc00117 	ldw	ra,4(sp)
 40127f0:	df000017 	ldw	fp,0(sp)
 40127f4:	dec00204 	addi	sp,sp,8
 40127f8:	f800283a 	ret

040127fc <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 40127fc:	defff504 	addi	sp,sp,-44
 4012800:	dfc00a15 	stw	ra,40(sp)
 4012804:	df000915 	stw	fp,36(sp)
 4012808:	df000904 	addi	fp,sp,36
 401280c:	e13ffb15 	stw	r4,-20(fp)
 4012810:	e17ffc15 	stw	r5,-16(fp)
 4012814:	e1bffd15 	stw	r6,-12(fp)
 4012818:	3807883a 	mov	r3,r7
 401281c:	e0800217 	ldw	r2,8(fp)
 4012820:	e0fffe05 	stb	r3,-8(fp)
 4012824:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4012828:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401282c:	e0bffb17 	ldw	r2,-20(fp)
 4012830:	10800717 	ldw	r2,28(r2)
 4012834:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 4012838:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 401283c:	e0bffd17 	ldw	r2,-12(fp)
 4012840:	1000021e 	bne	r2,zero,401284c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4012844:	0005883a 	mov	r2,zero
 4012848:	00006206 	br	40129d4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401284c:	e0bffb17 	ldw	r2,-20(fp)
 4012850:	10c00617 	ldw	r3,24(r2)
 4012854:	00810074 	movhi	r2,1025
 4012858:	10844d04 	addi	r2,r2,4404
 401285c:	18800226 	beq	r3,r2,4012868 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 4012860:	00bfff44 	movi	r2,-3
 4012864:	00005b06 	br	40129d4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4012868:	e0bffe03 	ldbu	r2,-8(fp)
 401286c:	10000a1e 	bne	r2,zero,4012898 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4012870:	e13ffb17 	ldw	r4,-20(fp)
 4012874:	40114b00 	call	40114b0 <alt_avalon_i2c_enable>
 4012878:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401287c:	e0bff717 	ldw	r2,-36(fp)
 4012880:	10000226 	beq	r2,zero,401288c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 4012884:	e0bff717 	ldw	r2,-36(fp)
 4012888:	00005206 	br	40129d4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401288c:	01400704 	movi	r5,28
 4012890:	e13ffb17 	ldw	r4,-20(fp)
 4012894:	4012a840 	call	4012a84 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 4012898:	e0bffe03 	ldbu	r2,-8(fp)
 401289c:	100d883a 	mov	r6,r2
 40128a0:	01400044 	movi	r5,1
 40128a4:	e13ffb17 	ldw	r4,-20(fp)
 40128a8:	4011b180 	call	4011b18 <alt_avalon_i2c_send_address>
 40128ac:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 40128b0:	e0bff717 	ldw	r2,-36(fp)
 40128b4:	1000191e 	bne	r2,zero,401291c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 40128b8:	00000906 	br	40128e0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40128bc:	000f883a 	mov	r7,zero
 40128c0:	000d883a 	mov	r6,zero
 40128c4:	000b883a 	mov	r5,zero
 40128c8:	e13ffb17 	ldw	r4,-20(fp)
 40128cc:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 40128d0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 40128d4:	e0bff917 	ldw	r2,-28(fp)
 40128d8:	10800044 	addi	r2,r2,1
 40128dc:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 40128e0:	e0bffd17 	ldw	r2,-12(fp)
 40128e4:	10bfffc4 	addi	r2,r2,-1
 40128e8:	e0fff917 	ldw	r3,-28(fp)
 40128ec:	1880022e 	bgeu	r3,r2,40128f8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 40128f0:	e0bff717 	ldw	r2,-36(fp)
 40128f4:	103ff126 	beq	r2,zero,40128bc <__alt_data_end+0xfc0128bc>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 40128f8:	e0bff717 	ldw	r2,-36(fp)
 40128fc:	1000071e 	bne	r2,zero,401291c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4012900:	e0bfff03 	ldbu	r2,-4(fp)
 4012904:	100f883a 	mov	r7,r2
 4012908:	000d883a 	mov	r6,zero
 401290c:	000b883a 	mov	r5,zero
 4012910:	e13ffb17 	ldw	r4,-20(fp)
 4012914:	4011a340 	call	4011a34 <alt_avalon_i2c_cmd_write>
 4012918:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401291c:	e0bff717 	ldw	r2,-36(fp)
 4012920:	10001726 	beq	r2,zero,4012980 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
 4012924:	e0bffd17 	ldw	r2,-12(fp)
 4012928:	1089c424 	muli	r2,r2,10000
 401292c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012930:	00000d06 	br	4012968 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
 4012934:	e0bff817 	ldw	r2,-32(fp)
 4012938:	108002a8 	cmpgeui	r2,r2,10
 401293c:	1000021e 	bne	r2,zero,4012948 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
 4012940:	0109c404 	movi	r4,10000
 4012944:	4013bb80 	call	4013bb8 <alt_busy_sleep>
            if (--timeout == 0)
 4012948:	e0bff817 	ldw	r2,-32(fp)
 401294c:	10bfffc4 	addi	r2,r2,-1
 4012950:	e0bff815 	stw	r2,-32(fp)
 4012954:	e0bff817 	ldw	r2,-32(fp)
 4012958:	1000031e 	bne	r2,zero,4012968 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401295c:	00bfff84 	movi	r2,-2
 4012960:	e0bff715 	stw	r2,-36(fp)
               break;
 4012964:	00000306 	br	4012974 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012968:	e13ffb17 	ldw	r4,-20(fp)
 401296c:	40118a00 	call	40118a0 <alt_avalon_i2c_is_busy>
 4012970:	103ff01e 	bne	r2,zero,4012934 <__alt_data_end+0xfc012934>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4012974:	e13ffb17 	ldw	r4,-20(fp)
 4012978:	40115480 	call	4011548 <alt_avalon_i2c_disable>
 401297c:	00001406 	br	40129d0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
 4012980:	e0bfff03 	ldbu	r2,-4(fp)
 4012984:	10001226 	beq	r2,zero,40129d0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4012988:	01400704 	movi	r5,28
 401298c:	e13ffb17 	ldw	r4,-20(fp)
 4012990:	4012a840 	call	4012a84 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 4012994:	000b883a 	mov	r5,zero
 4012998:	e13ffb17 	ldw	r4,-20(fp)
 401299c:	4012c1c0 	call	4012c1c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 40129a0:	e0bffa17 	ldw	r2,-24(fp)
 40129a4:	00c00084 	movi	r3,2
 40129a8:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 40129ac:	e0bffa17 	ldw	r2,-24(fp)
 40129b0:	e0fffc17 	ldw	r3,-16(fp)
 40129b4:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 40129b8:	e0bffa17 	ldw	r2,-24(fp)
 40129bc:	e0fffd17 	ldw	r3,-12(fp)
 40129c0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 40129c4:	01400084 	movi	r5,2
 40129c8:	e13ffb17 	ldw	r4,-20(fp)
 40129cc:	4012b280 	call	4012b28 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 40129d0:	e0bff717 	ldw	r2,-36(fp)
}
 40129d4:	e037883a 	mov	sp,fp
 40129d8:	dfc00117 	ldw	ra,4(sp)
 40129dc:	df000017 	ldw	fp,0(sp)
 40129e0:	dec00204 	addi	sp,sp,8
 40129e4:	f800283a 	ret

040129e8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 40129e8:	defffd04 	addi	sp,sp,-12
 40129ec:	df000215 	stw	fp,8(sp)
 40129f0:	df000204 	addi	fp,sp,8
 40129f4:	e13ffe15 	stw	r4,-8(fp)
 40129f8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 40129fc:	e0bffe17 	ldw	r2,-8(fp)
 4012a00:	10800317 	ldw	r2,12(r2)
 4012a04:	10800404 	addi	r2,r2,16
 4012a08:	10c00037 	ldwio	r3,0(r2)
 4012a0c:	e0bffe17 	ldw	r2,-8(fp)
 4012a10:	10800317 	ldw	r2,12(r2)
 4012a14:	10800304 	addi	r2,r2,12
 4012a18:	10800037 	ldwio	r2,0(r2)
 4012a1c:	1884703a 	and	r2,r3,r2
 4012a20:	1007883a 	mov	r3,r2
 4012a24:	e0bfff17 	ldw	r2,-4(fp)
 4012a28:	10c00015 	stw	r3,0(r2)
}
 4012a2c:	0001883a 	nop
 4012a30:	e037883a 	mov	sp,fp
 4012a34:	df000017 	ldw	fp,0(sp)
 4012a38:	dec00104 	addi	sp,sp,4
 4012a3c:	f800283a 	ret

04012a40 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 4012a40:	defffd04 	addi	sp,sp,-12
 4012a44:	df000215 	stw	fp,8(sp)
 4012a48:	df000204 	addi	fp,sp,8
 4012a4c:	e13ffe15 	stw	r4,-8(fp)
 4012a50:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 4012a54:	e0bffe17 	ldw	r2,-8(fp)
 4012a58:	10800317 	ldw	r2,12(r2)
 4012a5c:	10800404 	addi	r2,r2,16
 4012a60:	10800037 	ldwio	r2,0(r2)
 4012a64:	1007883a 	mov	r3,r2
 4012a68:	e0bfff17 	ldw	r2,-4(fp)
 4012a6c:	10c00015 	stw	r3,0(r2)
}
 4012a70:	0001883a 	nop
 4012a74:	e037883a 	mov	sp,fp
 4012a78:	df000017 	ldw	fp,0(sp)
 4012a7c:	dec00104 	addi	sp,sp,4
 4012a80:	f800283a 	ret

04012a84 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4012a84:	defffd04 	addi	sp,sp,-12
 4012a88:	df000215 	stw	fp,8(sp)
 4012a8c:	df000204 	addi	fp,sp,8
 4012a90:	e13ffe15 	stw	r4,-8(fp)
 4012a94:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 4012a98:	e0bffe17 	ldw	r2,-8(fp)
 4012a9c:	10800317 	ldw	r2,12(r2)
 4012aa0:	10800404 	addi	r2,r2,16
 4012aa4:	e0ffff17 	ldw	r3,-4(fp)
 4012aa8:	10c00035 	stwio	r3,0(r2)
}
 4012aac:	0001883a 	nop
 4012ab0:	e037883a 	mov	sp,fp
 4012ab4:	df000017 	ldw	fp,0(sp)
 4012ab8:	dec00104 	addi	sp,sp,4
 4012abc:	f800283a 	ret

04012ac0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4012ac0:	defffb04 	addi	sp,sp,-20
 4012ac4:	dfc00415 	stw	ra,16(sp)
 4012ac8:	df000315 	stw	fp,12(sp)
 4012acc:	df000304 	addi	fp,sp,12
 4012ad0:	e13ffe15 	stw	r4,-8(fp)
 4012ad4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 4012ad8:	e17ffd04 	addi	r5,fp,-12
 4012adc:	e13ffe17 	ldw	r4,-8(fp)
 4012ae0:	4012b8c0 	call	4012b8c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 4012ae4:	e0bfff17 	ldw	r2,-4(fp)
 4012ae8:	0086303a 	nor	r3,zero,r2
 4012aec:	e0bffd17 	ldw	r2,-12(fp)
 4012af0:	1884703a 	and	r2,r3,r2
 4012af4:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4012af8:	e0bffe17 	ldw	r2,-8(fp)
 4012afc:	10800317 	ldw	r2,12(r2)
 4012b00:	10800304 	addi	r2,r2,12
 4012b04:	e0fffd17 	ldw	r3,-12(fp)
 4012b08:	18c007cc 	andi	r3,r3,31
 4012b0c:	10c00035 	stwio	r3,0(r2)
}
 4012b10:	0001883a 	nop
 4012b14:	e037883a 	mov	sp,fp
 4012b18:	dfc00117 	ldw	ra,4(sp)
 4012b1c:	df000017 	ldw	fp,0(sp)
 4012b20:	dec00204 	addi	sp,sp,8
 4012b24:	f800283a 	ret

04012b28 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4012b28:	defffb04 	addi	sp,sp,-20
 4012b2c:	dfc00415 	stw	ra,16(sp)
 4012b30:	df000315 	stw	fp,12(sp)
 4012b34:	df000304 	addi	fp,sp,12
 4012b38:	e13ffe15 	stw	r4,-8(fp)
 4012b3c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 4012b40:	e17ffd04 	addi	r5,fp,-12
 4012b44:	e13ffe17 	ldw	r4,-8(fp)
 4012b48:	4012b8c0 	call	4012b8c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 4012b4c:	e0fffd17 	ldw	r3,-12(fp)
 4012b50:	e0bfff17 	ldw	r2,-4(fp)
 4012b54:	1884b03a 	or	r2,r3,r2
 4012b58:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4012b5c:	e0bffe17 	ldw	r2,-8(fp)
 4012b60:	10800317 	ldw	r2,12(r2)
 4012b64:	10800304 	addi	r2,r2,12
 4012b68:	e0fffd17 	ldw	r3,-12(fp)
 4012b6c:	18c007cc 	andi	r3,r3,31
 4012b70:	10c00035 	stwio	r3,0(r2)
}
 4012b74:	0001883a 	nop
 4012b78:	e037883a 	mov	sp,fp
 4012b7c:	dfc00117 	ldw	ra,4(sp)
 4012b80:	df000017 	ldw	fp,0(sp)
 4012b84:	dec00204 	addi	sp,sp,8
 4012b88:	f800283a 	ret

04012b8c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 4012b8c:	defffd04 	addi	sp,sp,-12
 4012b90:	df000215 	stw	fp,8(sp)
 4012b94:	df000204 	addi	fp,sp,8
 4012b98:	e13ffe15 	stw	r4,-8(fp)
 4012b9c:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4012ba0:	e0bffe17 	ldw	r2,-8(fp)
 4012ba4:	10800317 	ldw	r2,12(r2)
 4012ba8:	10800304 	addi	r2,r2,12
 4012bac:	10800037 	ldwio	r2,0(r2)
 4012bb0:	10c007cc 	andi	r3,r2,31
 4012bb4:	e0bfff17 	ldw	r2,-4(fp)
 4012bb8:	10c00015 	stw	r3,0(r2)
}
 4012bbc:	0001883a 	nop
 4012bc0:	e037883a 	mov	sp,fp
 4012bc4:	df000017 	ldw	fp,0(sp)
 4012bc8:	dec00104 	addi	sp,sp,4
 4012bcc:	f800283a 	ret

04012bd0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 4012bd0:	defffd04 	addi	sp,sp,-12
 4012bd4:	df000215 	stw	fp,8(sp)
 4012bd8:	df000204 	addi	fp,sp,8
 4012bdc:	e13ffe15 	stw	r4,-8(fp)
 4012be0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 4012be4:	e0bffe17 	ldw	r2,-8(fp)
 4012be8:	10800317 	ldw	r2,12(r2)
 4012bec:	10800204 	addi	r2,r2,8
 4012bf0:	10800037 	ldwio	r2,0(r2)
 4012bf4:	10800c0c 	andi	r2,r2,48
 4012bf8:	1005d13a 	srai	r2,r2,4
 4012bfc:	1007883a 	mov	r3,r2
 4012c00:	e0bfff17 	ldw	r2,-4(fp)
 4012c04:	10c00015 	stw	r3,0(r2)
}
 4012c08:	0001883a 	nop
 4012c0c:	e037883a 	mov	sp,fp
 4012c10:	df000017 	ldw	fp,0(sp)
 4012c14:	dec00104 	addi	sp,sp,4
 4012c18:	f800283a 	ret

04012c1c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 4012c1c:	defffd04 	addi	sp,sp,-12
 4012c20:	df000215 	stw	fp,8(sp)
 4012c24:	df000204 	addi	fp,sp,8
 4012c28:	e13ffe15 	stw	r4,-8(fp)
 4012c2c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 4012c30:	e0bffe17 	ldw	r2,-8(fp)
 4012c34:	10800317 	ldw	r2,12(r2)
 4012c38:	10800204 	addi	r2,r2,8
 4012c3c:	e0fffe17 	ldw	r3,-8(fp)
 4012c40:	18c00317 	ldw	r3,12(r3)
 4012c44:	18c00204 	addi	r3,r3,8
 4012c48:	18c00037 	ldwio	r3,0(r3)
 4012c4c:	1809883a 	mov	r4,r3
 4012c50:	00fff3c4 	movi	r3,-49
 4012c54:	20c8703a 	and	r4,r4,r3
 4012c58:	e0ffff17 	ldw	r3,-4(fp)
 4012c5c:	1806913a 	slli	r3,r3,4
 4012c60:	18c00c0c 	andi	r3,r3,48
 4012c64:	20c6b03a 	or	r3,r4,r3
 4012c68:	10c00035 	stwio	r3,0(r2)
}
 4012c6c:	0001883a 	nop
 4012c70:	e037883a 	mov	sp,fp
 4012c74:	df000017 	ldw	fp,0(sp)
 4012c78:	dec00104 	addi	sp,sp,4
 4012c7c:	f800283a 	ret

04012c80 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 4012c80:	defffd04 	addi	sp,sp,-12
 4012c84:	df000215 	stw	fp,8(sp)
 4012c88:	df000204 	addi	fp,sp,8
 4012c8c:	e13ffe15 	stw	r4,-8(fp)
 4012c90:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 4012c94:	e0bffe17 	ldw	r2,-8(fp)
 4012c98:	10800317 	ldw	r2,12(r2)
 4012c9c:	10800204 	addi	r2,r2,8
 4012ca0:	10800037 	ldwio	r2,0(r2)
 4012ca4:	1080030c 	andi	r2,r2,12
 4012ca8:	1005d0ba 	srai	r2,r2,2
 4012cac:	1007883a 	mov	r3,r2
 4012cb0:	e0bfff17 	ldw	r2,-4(fp)
 4012cb4:	10c00015 	stw	r3,0(r2)
}
 4012cb8:	0001883a 	nop
 4012cbc:	e037883a 	mov	sp,fp
 4012cc0:	df000017 	ldw	fp,0(sp)
 4012cc4:	dec00104 	addi	sp,sp,4
 4012cc8:	f800283a 	ret

04012ccc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 4012ccc:	defffd04 	addi	sp,sp,-12
 4012cd0:	df000215 	stw	fp,8(sp)
 4012cd4:	df000204 	addi	fp,sp,8
 4012cd8:	e13ffe15 	stw	r4,-8(fp)
 4012cdc:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 4012ce0:	e0bffe17 	ldw	r2,-8(fp)
 4012ce4:	10800317 	ldw	r2,12(r2)
 4012ce8:	10c00204 	addi	r3,r2,8
 4012cec:	e0bffe17 	ldw	r2,-8(fp)
 4012cf0:	10800317 	ldw	r2,12(r2)
 4012cf4:	10800204 	addi	r2,r2,8
 4012cf8:	10800037 	ldwio	r2,0(r2)
 4012cfc:	1009883a 	mov	r4,r2
 4012d00:	00bffcc4 	movi	r2,-13
 4012d04:	2088703a 	and	r4,r4,r2
 4012d08:	e0bfff17 	ldw	r2,-4(fp)
 4012d0c:	1085883a 	add	r2,r2,r2
 4012d10:	1085883a 	add	r2,r2,r2
 4012d14:	1080030c 	andi	r2,r2,12
 4012d18:	2084b03a 	or	r2,r4,r2
 4012d1c:	18800035 	stwio	r2,0(r3)
}
 4012d20:	0001883a 	nop
 4012d24:	e037883a 	mov	sp,fp
 4012d28:	df000017 	ldw	fp,0(sp)
 4012d2c:	dec00104 	addi	sp,sp,4
 4012d30:	f800283a 	ret

04012d34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4012d34:	defffa04 	addi	sp,sp,-24
 4012d38:	dfc00515 	stw	ra,20(sp)
 4012d3c:	df000415 	stw	fp,16(sp)
 4012d40:	df000404 	addi	fp,sp,16
 4012d44:	e13ffd15 	stw	r4,-12(fp)
 4012d48:	e17ffe15 	stw	r5,-8(fp)
 4012d4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4012d50:	e0bffd17 	ldw	r2,-12(fp)
 4012d54:	10800017 	ldw	r2,0(r2)
 4012d58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4012d5c:	e0bffc17 	ldw	r2,-16(fp)
 4012d60:	10c00a04 	addi	r3,r2,40
 4012d64:	e0bffd17 	ldw	r2,-12(fp)
 4012d68:	10800217 	ldw	r2,8(r2)
 4012d6c:	100f883a 	mov	r7,r2
 4012d70:	e1bfff17 	ldw	r6,-4(fp)
 4012d74:	e17ffe17 	ldw	r5,-8(fp)
 4012d78:	1809883a 	mov	r4,r3
 4012d7c:	401335c0 	call	401335c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4012d80:	e037883a 	mov	sp,fp
 4012d84:	dfc00117 	ldw	ra,4(sp)
 4012d88:	df000017 	ldw	fp,0(sp)
 4012d8c:	dec00204 	addi	sp,sp,8
 4012d90:	f800283a 	ret

04012d94 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4012d94:	defffa04 	addi	sp,sp,-24
 4012d98:	dfc00515 	stw	ra,20(sp)
 4012d9c:	df000415 	stw	fp,16(sp)
 4012da0:	df000404 	addi	fp,sp,16
 4012da4:	e13ffd15 	stw	r4,-12(fp)
 4012da8:	e17ffe15 	stw	r5,-8(fp)
 4012dac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4012db0:	e0bffd17 	ldw	r2,-12(fp)
 4012db4:	10800017 	ldw	r2,0(r2)
 4012db8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4012dbc:	e0bffc17 	ldw	r2,-16(fp)
 4012dc0:	10c00a04 	addi	r3,r2,40
 4012dc4:	e0bffd17 	ldw	r2,-12(fp)
 4012dc8:	10800217 	ldw	r2,8(r2)
 4012dcc:	100f883a 	mov	r7,r2
 4012dd0:	e1bfff17 	ldw	r6,-4(fp)
 4012dd4:	e17ffe17 	ldw	r5,-8(fp)
 4012dd8:	1809883a 	mov	r4,r3
 4012ddc:	40135780 	call	4013578 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4012de0:	e037883a 	mov	sp,fp
 4012de4:	dfc00117 	ldw	ra,4(sp)
 4012de8:	df000017 	ldw	fp,0(sp)
 4012dec:	dec00204 	addi	sp,sp,8
 4012df0:	f800283a 	ret

04012df4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4012df4:	defffc04 	addi	sp,sp,-16
 4012df8:	dfc00315 	stw	ra,12(sp)
 4012dfc:	df000215 	stw	fp,8(sp)
 4012e00:	df000204 	addi	fp,sp,8
 4012e04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4012e08:	e0bfff17 	ldw	r2,-4(fp)
 4012e0c:	10800017 	ldw	r2,0(r2)
 4012e10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4012e14:	e0bffe17 	ldw	r2,-8(fp)
 4012e18:	10c00a04 	addi	r3,r2,40
 4012e1c:	e0bfff17 	ldw	r2,-4(fp)
 4012e20:	10800217 	ldw	r2,8(r2)
 4012e24:	100b883a 	mov	r5,r2
 4012e28:	1809883a 	mov	r4,r3
 4012e2c:	40132040 	call	4013204 <altera_avalon_jtag_uart_close>
}
 4012e30:	e037883a 	mov	sp,fp
 4012e34:	dfc00117 	ldw	ra,4(sp)
 4012e38:	df000017 	ldw	fp,0(sp)
 4012e3c:	dec00204 	addi	sp,sp,8
 4012e40:	f800283a 	ret

04012e44 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4012e44:	defffa04 	addi	sp,sp,-24
 4012e48:	dfc00515 	stw	ra,20(sp)
 4012e4c:	df000415 	stw	fp,16(sp)
 4012e50:	df000404 	addi	fp,sp,16
 4012e54:	e13ffd15 	stw	r4,-12(fp)
 4012e58:	e17ffe15 	stw	r5,-8(fp)
 4012e5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4012e60:	e0bffd17 	ldw	r2,-12(fp)
 4012e64:	10800017 	ldw	r2,0(r2)
 4012e68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4012e6c:	e0bffc17 	ldw	r2,-16(fp)
 4012e70:	10800a04 	addi	r2,r2,40
 4012e74:	e1bfff17 	ldw	r6,-4(fp)
 4012e78:	e17ffe17 	ldw	r5,-8(fp)
 4012e7c:	1009883a 	mov	r4,r2
 4012e80:	401326c0 	call	401326c <altera_avalon_jtag_uart_ioctl>
}
 4012e84:	e037883a 	mov	sp,fp
 4012e88:	dfc00117 	ldw	ra,4(sp)
 4012e8c:	df000017 	ldw	fp,0(sp)
 4012e90:	dec00204 	addi	sp,sp,8
 4012e94:	f800283a 	ret

04012e98 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4012e98:	defffa04 	addi	sp,sp,-24
 4012e9c:	dfc00515 	stw	ra,20(sp)
 4012ea0:	df000415 	stw	fp,16(sp)
 4012ea4:	df000404 	addi	fp,sp,16
 4012ea8:	e13ffd15 	stw	r4,-12(fp)
 4012eac:	e17ffe15 	stw	r5,-8(fp)
 4012eb0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4012eb4:	e0bffd17 	ldw	r2,-12(fp)
 4012eb8:	00c00044 	movi	r3,1
 4012ebc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4012ec0:	e0bffd17 	ldw	r2,-12(fp)
 4012ec4:	10800017 	ldw	r2,0(r2)
 4012ec8:	10800104 	addi	r2,r2,4
 4012ecc:	1007883a 	mov	r3,r2
 4012ed0:	e0bffd17 	ldw	r2,-12(fp)
 4012ed4:	10800817 	ldw	r2,32(r2)
 4012ed8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4012edc:	e0bffe17 	ldw	r2,-8(fp)
 4012ee0:	e0ffff17 	ldw	r3,-4(fp)
 4012ee4:	d8000015 	stw	zero,0(sp)
 4012ee8:	e1fffd17 	ldw	r7,-12(fp)
 4012eec:	01810074 	movhi	r6,1025
 4012ef0:	318bd604 	addi	r6,r6,12120
 4012ef4:	180b883a 	mov	r5,r3
 4012ef8:	1009883a 	mov	r4,r2
 4012efc:	4013fbc0 	call	4013fbc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4012f00:	e0bffd17 	ldw	r2,-12(fp)
 4012f04:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4012f08:	e0bffd17 	ldw	r2,-12(fp)
 4012f0c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4012f10:	d0e70717 	ldw	r3,-25572(gp)
 4012f14:	e1fffd17 	ldw	r7,-12(fp)
 4012f18:	01810074 	movhi	r6,1025
 4012f1c:	318c5904 	addi	r6,r6,12644
 4012f20:	180b883a 	mov	r5,r3
 4012f24:	1009883a 	mov	r4,r2
 4012f28:	4013a8c0 	call	4013a8c <alt_alarm_start>
 4012f2c:	1000040e 	bge	r2,zero,4012f40 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4012f30:	e0fffd17 	ldw	r3,-12(fp)
 4012f34:	00a00034 	movhi	r2,32768
 4012f38:	10bfffc4 	addi	r2,r2,-1
 4012f3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4012f40:	0001883a 	nop
 4012f44:	e037883a 	mov	sp,fp
 4012f48:	dfc00117 	ldw	ra,4(sp)
 4012f4c:	df000017 	ldw	fp,0(sp)
 4012f50:	dec00204 	addi	sp,sp,8
 4012f54:	f800283a 	ret

04012f58 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4012f58:	defff804 	addi	sp,sp,-32
 4012f5c:	df000715 	stw	fp,28(sp)
 4012f60:	df000704 	addi	fp,sp,28
 4012f64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4012f68:	e0bfff17 	ldw	r2,-4(fp)
 4012f6c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4012f70:	e0bffb17 	ldw	r2,-20(fp)
 4012f74:	10800017 	ldw	r2,0(r2)
 4012f78:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4012f7c:	e0bffc17 	ldw	r2,-16(fp)
 4012f80:	10800104 	addi	r2,r2,4
 4012f84:	10800037 	ldwio	r2,0(r2)
 4012f88:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4012f8c:	e0bffd17 	ldw	r2,-12(fp)
 4012f90:	1080c00c 	andi	r2,r2,768
 4012f94:	10006d26 	beq	r2,zero,401314c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4012f98:	e0bffd17 	ldw	r2,-12(fp)
 4012f9c:	1080400c 	andi	r2,r2,256
 4012fa0:	10003526 	beq	r2,zero,4013078 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4012fa4:	00800074 	movhi	r2,1
 4012fa8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4012fac:	e0bffb17 	ldw	r2,-20(fp)
 4012fb0:	10800a17 	ldw	r2,40(r2)
 4012fb4:	10800044 	addi	r2,r2,1
 4012fb8:	1081ffcc 	andi	r2,r2,2047
 4012fbc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4012fc0:	e0bffb17 	ldw	r2,-20(fp)
 4012fc4:	10c00b17 	ldw	r3,44(r2)
 4012fc8:	e0bffe17 	ldw	r2,-8(fp)
 4012fcc:	18801526 	beq	r3,r2,4013024 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4012fd0:	e0bffc17 	ldw	r2,-16(fp)
 4012fd4:	10800037 	ldwio	r2,0(r2)
 4012fd8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4012fdc:	e0bff917 	ldw	r2,-28(fp)
 4012fe0:	10a0000c 	andi	r2,r2,32768
 4012fe4:	10001126 	beq	r2,zero,401302c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4012fe8:	e0bffb17 	ldw	r2,-20(fp)
 4012fec:	10800a17 	ldw	r2,40(r2)
 4012ff0:	e0fff917 	ldw	r3,-28(fp)
 4012ff4:	1809883a 	mov	r4,r3
 4012ff8:	e0fffb17 	ldw	r3,-20(fp)
 4012ffc:	1885883a 	add	r2,r3,r2
 4013000:	10800e04 	addi	r2,r2,56
 4013004:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013008:	e0bffb17 	ldw	r2,-20(fp)
 401300c:	10800a17 	ldw	r2,40(r2)
 4013010:	10800044 	addi	r2,r2,1
 4013014:	10c1ffcc 	andi	r3,r2,2047
 4013018:	e0bffb17 	ldw	r2,-20(fp)
 401301c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4013020:	003fe206 	br	4012fac <__alt_data_end+0xfc012fac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4013024:	0001883a 	nop
 4013028:	00000106 	br	4013030 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401302c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4013030:	e0bff917 	ldw	r2,-28(fp)
 4013034:	10bfffec 	andhi	r2,r2,65535
 4013038:	10000f26 	beq	r2,zero,4013078 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401303c:	e0bffb17 	ldw	r2,-20(fp)
 4013040:	10c00817 	ldw	r3,32(r2)
 4013044:	00bfff84 	movi	r2,-2
 4013048:	1886703a 	and	r3,r3,r2
 401304c:	e0bffb17 	ldw	r2,-20(fp)
 4013050:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4013054:	e0bffc17 	ldw	r2,-16(fp)
 4013058:	10800104 	addi	r2,r2,4
 401305c:	1007883a 	mov	r3,r2
 4013060:	e0bffb17 	ldw	r2,-20(fp)
 4013064:	10800817 	ldw	r2,32(r2)
 4013068:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401306c:	e0bffc17 	ldw	r2,-16(fp)
 4013070:	10800104 	addi	r2,r2,4
 4013074:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4013078:	e0bffd17 	ldw	r2,-12(fp)
 401307c:	1080800c 	andi	r2,r2,512
 4013080:	103fbe26 	beq	r2,zero,4012f7c <__alt_data_end+0xfc012f7c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4013084:	e0bffd17 	ldw	r2,-12(fp)
 4013088:	1004d43a 	srli	r2,r2,16
 401308c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4013090:	00001406 	br	40130e4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4013094:	e0bffc17 	ldw	r2,-16(fp)
 4013098:	e0fffb17 	ldw	r3,-20(fp)
 401309c:	18c00d17 	ldw	r3,52(r3)
 40130a0:	e13ffb17 	ldw	r4,-20(fp)
 40130a4:	20c7883a 	add	r3,r4,r3
 40130a8:	18c20e04 	addi	r3,r3,2104
 40130ac:	18c00003 	ldbu	r3,0(r3)
 40130b0:	18c03fcc 	andi	r3,r3,255
 40130b4:	18c0201c 	xori	r3,r3,128
 40130b8:	18ffe004 	addi	r3,r3,-128
 40130bc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40130c0:	e0bffb17 	ldw	r2,-20(fp)
 40130c4:	10800d17 	ldw	r2,52(r2)
 40130c8:	10800044 	addi	r2,r2,1
 40130cc:	10c1ffcc 	andi	r3,r2,2047
 40130d0:	e0bffb17 	ldw	r2,-20(fp)
 40130d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40130d8:	e0bffa17 	ldw	r2,-24(fp)
 40130dc:	10bfffc4 	addi	r2,r2,-1
 40130e0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40130e4:	e0bffa17 	ldw	r2,-24(fp)
 40130e8:	10000526 	beq	r2,zero,4013100 <altera_avalon_jtag_uart_irq+0x1a8>
 40130ec:	e0bffb17 	ldw	r2,-20(fp)
 40130f0:	10c00d17 	ldw	r3,52(r2)
 40130f4:	e0bffb17 	ldw	r2,-20(fp)
 40130f8:	10800c17 	ldw	r2,48(r2)
 40130fc:	18bfe51e 	bne	r3,r2,4013094 <__alt_data_end+0xfc013094>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4013100:	e0bffa17 	ldw	r2,-24(fp)
 4013104:	103f9d26 	beq	r2,zero,4012f7c <__alt_data_end+0xfc012f7c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4013108:	e0bffb17 	ldw	r2,-20(fp)
 401310c:	10c00817 	ldw	r3,32(r2)
 4013110:	00bfff44 	movi	r2,-3
 4013114:	1886703a 	and	r3,r3,r2
 4013118:	e0bffb17 	ldw	r2,-20(fp)
 401311c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013120:	e0bffb17 	ldw	r2,-20(fp)
 4013124:	10800017 	ldw	r2,0(r2)
 4013128:	10800104 	addi	r2,r2,4
 401312c:	1007883a 	mov	r3,r2
 4013130:	e0bffb17 	ldw	r2,-20(fp)
 4013134:	10800817 	ldw	r2,32(r2)
 4013138:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401313c:	e0bffc17 	ldw	r2,-16(fp)
 4013140:	10800104 	addi	r2,r2,4
 4013144:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4013148:	003f8c06 	br	4012f7c <__alt_data_end+0xfc012f7c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401314c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4013150:	0001883a 	nop
 4013154:	e037883a 	mov	sp,fp
 4013158:	df000017 	ldw	fp,0(sp)
 401315c:	dec00104 	addi	sp,sp,4
 4013160:	f800283a 	ret

04013164 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4013164:	defff804 	addi	sp,sp,-32
 4013168:	df000715 	stw	fp,28(sp)
 401316c:	df000704 	addi	fp,sp,28
 4013170:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4013174:	e0bffb17 	ldw	r2,-20(fp)
 4013178:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401317c:	e0bff917 	ldw	r2,-28(fp)
 4013180:	10800017 	ldw	r2,0(r2)
 4013184:	10800104 	addi	r2,r2,4
 4013188:	10800037 	ldwio	r2,0(r2)
 401318c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4013190:	e0bffa17 	ldw	r2,-24(fp)
 4013194:	1081000c 	andi	r2,r2,1024
 4013198:	10000b26 	beq	r2,zero,40131c8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401319c:	e0bff917 	ldw	r2,-28(fp)
 40131a0:	10800017 	ldw	r2,0(r2)
 40131a4:	10800104 	addi	r2,r2,4
 40131a8:	1007883a 	mov	r3,r2
 40131ac:	e0bff917 	ldw	r2,-28(fp)
 40131b0:	10800817 	ldw	r2,32(r2)
 40131b4:	10810014 	ori	r2,r2,1024
 40131b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40131bc:	e0bff917 	ldw	r2,-28(fp)
 40131c0:	10000915 	stw	zero,36(r2)
 40131c4:	00000a06 	br	40131f0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40131c8:	e0bff917 	ldw	r2,-28(fp)
 40131cc:	10c00917 	ldw	r3,36(r2)
 40131d0:	00a00034 	movhi	r2,32768
 40131d4:	10bfff04 	addi	r2,r2,-4
 40131d8:	10c00536 	bltu	r2,r3,40131f0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40131dc:	e0bff917 	ldw	r2,-28(fp)
 40131e0:	10800917 	ldw	r2,36(r2)
 40131e4:	10c00044 	addi	r3,r2,1
 40131e8:	e0bff917 	ldw	r2,-28(fp)
 40131ec:	10c00915 	stw	r3,36(r2)
 40131f0:	d0a70717 	ldw	r2,-25572(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40131f4:	e037883a 	mov	sp,fp
 40131f8:	df000017 	ldw	fp,0(sp)
 40131fc:	dec00104 	addi	sp,sp,4
 4013200:	f800283a 	ret

04013204 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4013204:	defffd04 	addi	sp,sp,-12
 4013208:	df000215 	stw	fp,8(sp)
 401320c:	df000204 	addi	fp,sp,8
 4013210:	e13ffe15 	stw	r4,-8(fp)
 4013214:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4013218:	00000506 	br	4013230 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401321c:	e0bfff17 	ldw	r2,-4(fp)
 4013220:	1090000c 	andi	r2,r2,16384
 4013224:	10000226 	beq	r2,zero,4013230 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4013228:	00bffd44 	movi	r2,-11
 401322c:	00000b06 	br	401325c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4013230:	e0bffe17 	ldw	r2,-8(fp)
 4013234:	10c00d17 	ldw	r3,52(r2)
 4013238:	e0bffe17 	ldw	r2,-8(fp)
 401323c:	10800c17 	ldw	r2,48(r2)
 4013240:	18800526 	beq	r3,r2,4013258 <altera_avalon_jtag_uart_close+0x54>
 4013244:	e0bffe17 	ldw	r2,-8(fp)
 4013248:	10c00917 	ldw	r3,36(r2)
 401324c:	e0bffe17 	ldw	r2,-8(fp)
 4013250:	10800117 	ldw	r2,4(r2)
 4013254:	18bff136 	bltu	r3,r2,401321c <__alt_data_end+0xfc01321c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4013258:	0005883a 	mov	r2,zero
}
 401325c:	e037883a 	mov	sp,fp
 4013260:	df000017 	ldw	fp,0(sp)
 4013264:	dec00104 	addi	sp,sp,4
 4013268:	f800283a 	ret

0401326c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401326c:	defffa04 	addi	sp,sp,-24
 4013270:	df000515 	stw	fp,20(sp)
 4013274:	df000504 	addi	fp,sp,20
 4013278:	e13ffd15 	stw	r4,-12(fp)
 401327c:	e17ffe15 	stw	r5,-8(fp)
 4013280:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4013284:	00bff9c4 	movi	r2,-25
 4013288:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401328c:	e0bffe17 	ldw	r2,-8(fp)
 4013290:	10da8060 	cmpeqi	r3,r2,27137
 4013294:	1800031e 	bne	r3,zero,40132a4 <altera_avalon_jtag_uart_ioctl+0x38>
 4013298:	109a80a0 	cmpeqi	r2,r2,27138
 401329c:	1000181e 	bne	r2,zero,4013300 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 40132a0:	00002906 	br	4013348 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40132a4:	e0bffd17 	ldw	r2,-12(fp)
 40132a8:	10c00117 	ldw	r3,4(r2)
 40132ac:	00a00034 	movhi	r2,32768
 40132b0:	10bfffc4 	addi	r2,r2,-1
 40132b4:	18802126 	beq	r3,r2,401333c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40132b8:	e0bfff17 	ldw	r2,-4(fp)
 40132bc:	10800017 	ldw	r2,0(r2)
 40132c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40132c4:	e0bffc17 	ldw	r2,-16(fp)
 40132c8:	10800090 	cmplti	r2,r2,2
 40132cc:	1000061e 	bne	r2,zero,40132e8 <altera_avalon_jtag_uart_ioctl+0x7c>
 40132d0:	e0fffc17 	ldw	r3,-16(fp)
 40132d4:	00a00034 	movhi	r2,32768
 40132d8:	10bfffc4 	addi	r2,r2,-1
 40132dc:	18800226 	beq	r3,r2,40132e8 <altera_avalon_jtag_uart_ioctl+0x7c>
 40132e0:	e0bffc17 	ldw	r2,-16(fp)
 40132e4:	00000206 	br	40132f0 <altera_avalon_jtag_uart_ioctl+0x84>
 40132e8:	00a00034 	movhi	r2,32768
 40132ec:	10bfff84 	addi	r2,r2,-2
 40132f0:	e0fffd17 	ldw	r3,-12(fp)
 40132f4:	18800115 	stw	r2,4(r3)
      rc = 0;
 40132f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40132fc:	00000f06 	br	401333c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4013300:	e0bffd17 	ldw	r2,-12(fp)
 4013304:	10c00117 	ldw	r3,4(r2)
 4013308:	00a00034 	movhi	r2,32768
 401330c:	10bfffc4 	addi	r2,r2,-1
 4013310:	18800c26 	beq	r3,r2,4013344 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4013314:	e0bffd17 	ldw	r2,-12(fp)
 4013318:	10c00917 	ldw	r3,36(r2)
 401331c:	e0bffd17 	ldw	r2,-12(fp)
 4013320:	10800117 	ldw	r2,4(r2)
 4013324:	1885803a 	cmpltu	r2,r3,r2
 4013328:	10c03fcc 	andi	r3,r2,255
 401332c:	e0bfff17 	ldw	r2,-4(fp)
 4013330:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4013334:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4013338:	00000206 	br	4013344 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401333c:	0001883a 	nop
 4013340:	00000106 	br	4013348 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4013344:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4013348:	e0bffb17 	ldw	r2,-20(fp)
}
 401334c:	e037883a 	mov	sp,fp
 4013350:	df000017 	ldw	fp,0(sp)
 4013354:	dec00104 	addi	sp,sp,4
 4013358:	f800283a 	ret

0401335c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401335c:	defff304 	addi	sp,sp,-52
 4013360:	dfc00c15 	stw	ra,48(sp)
 4013364:	df000b15 	stw	fp,44(sp)
 4013368:	df000b04 	addi	fp,sp,44
 401336c:	e13ffc15 	stw	r4,-16(fp)
 4013370:	e17ffd15 	stw	r5,-12(fp)
 4013374:	e1bffe15 	stw	r6,-8(fp)
 4013378:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401337c:	e0bffd17 	ldw	r2,-12(fp)
 4013380:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4013384:	00004706 	br	40134a4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4013388:	e0bffc17 	ldw	r2,-16(fp)
 401338c:	10800a17 	ldw	r2,40(r2)
 4013390:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4013394:	e0bffc17 	ldw	r2,-16(fp)
 4013398:	10800b17 	ldw	r2,44(r2)
 401339c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40133a0:	e0fff717 	ldw	r3,-36(fp)
 40133a4:	e0bff817 	ldw	r2,-32(fp)
 40133a8:	18800536 	bltu	r3,r2,40133c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40133ac:	e0fff717 	ldw	r3,-36(fp)
 40133b0:	e0bff817 	ldw	r2,-32(fp)
 40133b4:	1885c83a 	sub	r2,r3,r2
 40133b8:	e0bff615 	stw	r2,-40(fp)
 40133bc:	00000406 	br	40133d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40133c0:	00c20004 	movi	r3,2048
 40133c4:	e0bff817 	ldw	r2,-32(fp)
 40133c8:	1885c83a 	sub	r2,r3,r2
 40133cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40133d0:	e0bff617 	ldw	r2,-40(fp)
 40133d4:	10001e26 	beq	r2,zero,4013450 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40133d8:	e0fffe17 	ldw	r3,-8(fp)
 40133dc:	e0bff617 	ldw	r2,-40(fp)
 40133e0:	1880022e 	bgeu	r3,r2,40133ec <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40133e4:	e0bffe17 	ldw	r2,-8(fp)
 40133e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40133ec:	e0bffc17 	ldw	r2,-16(fp)
 40133f0:	10c00e04 	addi	r3,r2,56
 40133f4:	e0bff817 	ldw	r2,-32(fp)
 40133f8:	1885883a 	add	r2,r3,r2
 40133fc:	e1bff617 	ldw	r6,-40(fp)
 4013400:	100b883a 	mov	r5,r2
 4013404:	e13ff517 	ldw	r4,-44(fp)
 4013408:	40046400 	call	4004640 <memcpy>
      ptr   += n;
 401340c:	e0fff517 	ldw	r3,-44(fp)
 4013410:	e0bff617 	ldw	r2,-40(fp)
 4013414:	1885883a 	add	r2,r3,r2
 4013418:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401341c:	e0fffe17 	ldw	r3,-8(fp)
 4013420:	e0bff617 	ldw	r2,-40(fp)
 4013424:	1885c83a 	sub	r2,r3,r2
 4013428:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401342c:	e0fff817 	ldw	r3,-32(fp)
 4013430:	e0bff617 	ldw	r2,-40(fp)
 4013434:	1885883a 	add	r2,r3,r2
 4013438:	10c1ffcc 	andi	r3,r2,2047
 401343c:	e0bffc17 	ldw	r2,-16(fp)
 4013440:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4013444:	e0bffe17 	ldw	r2,-8(fp)
 4013448:	00bfcf16 	blt	zero,r2,4013388 <__alt_data_end+0xfc013388>
 401344c:	00000106 	br	4013454 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4013450:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4013454:	e0fff517 	ldw	r3,-44(fp)
 4013458:	e0bffd17 	ldw	r2,-12(fp)
 401345c:	1880141e 	bne	r3,r2,40134b0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4013460:	e0bfff17 	ldw	r2,-4(fp)
 4013464:	1090000c 	andi	r2,r2,16384
 4013468:	1000131e 	bne	r2,zero,40134b8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401346c:	0001883a 	nop
 4013470:	e0bffc17 	ldw	r2,-16(fp)
 4013474:	10c00a17 	ldw	r3,40(r2)
 4013478:	e0bff717 	ldw	r2,-36(fp)
 401347c:	1880051e 	bne	r3,r2,4013494 <altera_avalon_jtag_uart_read+0x138>
 4013480:	e0bffc17 	ldw	r2,-16(fp)
 4013484:	10c00917 	ldw	r3,36(r2)
 4013488:	e0bffc17 	ldw	r2,-16(fp)
 401348c:	10800117 	ldw	r2,4(r2)
 4013490:	18bff736 	bltu	r3,r2,4013470 <__alt_data_end+0xfc013470>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4013494:	e0bffc17 	ldw	r2,-16(fp)
 4013498:	10c00a17 	ldw	r3,40(r2)
 401349c:	e0bff717 	ldw	r2,-36(fp)
 40134a0:	18800726 	beq	r3,r2,40134c0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40134a4:	e0bffe17 	ldw	r2,-8(fp)
 40134a8:	00bfb716 	blt	zero,r2,4013388 <__alt_data_end+0xfc013388>
 40134ac:	00000506 	br	40134c4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40134b0:	0001883a 	nop
 40134b4:	00000306 	br	40134c4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40134b8:	0001883a 	nop
 40134bc:	00000106 	br	40134c4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40134c0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40134c4:	e0fff517 	ldw	r3,-44(fp)
 40134c8:	e0bffd17 	ldw	r2,-12(fp)
 40134cc:	18801826 	beq	r3,r2,4013530 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40134d0:	0005303a 	rdctl	r2,status
 40134d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40134d8:	e0fffb17 	ldw	r3,-20(fp)
 40134dc:	00bfff84 	movi	r2,-2
 40134e0:	1884703a 	and	r2,r3,r2
 40134e4:	1001703a 	wrctl	status,r2
  
  return context;
 40134e8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40134ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40134f0:	e0bffc17 	ldw	r2,-16(fp)
 40134f4:	10800817 	ldw	r2,32(r2)
 40134f8:	10c00054 	ori	r3,r2,1
 40134fc:	e0bffc17 	ldw	r2,-16(fp)
 4013500:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013504:	e0bffc17 	ldw	r2,-16(fp)
 4013508:	10800017 	ldw	r2,0(r2)
 401350c:	10800104 	addi	r2,r2,4
 4013510:	1007883a 	mov	r3,r2
 4013514:	e0bffc17 	ldw	r2,-16(fp)
 4013518:	10800817 	ldw	r2,32(r2)
 401351c:	18800035 	stwio	r2,0(r3)
 4013520:	e0bffa17 	ldw	r2,-24(fp)
 4013524:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013528:	e0bff917 	ldw	r2,-28(fp)
 401352c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4013530:	e0fff517 	ldw	r3,-44(fp)
 4013534:	e0bffd17 	ldw	r2,-12(fp)
 4013538:	18800426 	beq	r3,r2,401354c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401353c:	e0fff517 	ldw	r3,-44(fp)
 4013540:	e0bffd17 	ldw	r2,-12(fp)
 4013544:	1885c83a 	sub	r2,r3,r2
 4013548:	00000606 	br	4013564 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401354c:	e0bfff17 	ldw	r2,-4(fp)
 4013550:	1090000c 	andi	r2,r2,16384
 4013554:	10000226 	beq	r2,zero,4013560 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4013558:	00bffd44 	movi	r2,-11
 401355c:	00000106 	br	4013564 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4013560:	00bffec4 	movi	r2,-5
}
 4013564:	e037883a 	mov	sp,fp
 4013568:	dfc00117 	ldw	ra,4(sp)
 401356c:	df000017 	ldw	fp,0(sp)
 4013570:	dec00204 	addi	sp,sp,8
 4013574:	f800283a 	ret

04013578 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4013578:	defff304 	addi	sp,sp,-52
 401357c:	dfc00c15 	stw	ra,48(sp)
 4013580:	df000b15 	stw	fp,44(sp)
 4013584:	df000b04 	addi	fp,sp,44
 4013588:	e13ffc15 	stw	r4,-16(fp)
 401358c:	e17ffd15 	stw	r5,-12(fp)
 4013590:	e1bffe15 	stw	r6,-8(fp)
 4013594:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4013598:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401359c:	e0bffd17 	ldw	r2,-12(fp)
 40135a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40135a4:	00003706 	br	4013684 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40135a8:	e0bffc17 	ldw	r2,-16(fp)
 40135ac:	10800c17 	ldw	r2,48(r2)
 40135b0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40135b4:	e0bffc17 	ldw	r2,-16(fp)
 40135b8:	10800d17 	ldw	r2,52(r2)
 40135bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40135c0:	e0fff917 	ldw	r3,-28(fp)
 40135c4:	e0bff517 	ldw	r2,-44(fp)
 40135c8:	1880062e 	bgeu	r3,r2,40135e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40135cc:	e0fff517 	ldw	r3,-44(fp)
 40135d0:	e0bff917 	ldw	r2,-28(fp)
 40135d4:	1885c83a 	sub	r2,r3,r2
 40135d8:	10bfffc4 	addi	r2,r2,-1
 40135dc:	e0bff615 	stw	r2,-40(fp)
 40135e0:	00000b06 	br	4013610 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40135e4:	e0bff517 	ldw	r2,-44(fp)
 40135e8:	10000526 	beq	r2,zero,4013600 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40135ec:	00c20004 	movi	r3,2048
 40135f0:	e0bff917 	ldw	r2,-28(fp)
 40135f4:	1885c83a 	sub	r2,r3,r2
 40135f8:	e0bff615 	stw	r2,-40(fp)
 40135fc:	00000406 	br	4013610 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4013600:	00c1ffc4 	movi	r3,2047
 4013604:	e0bff917 	ldw	r2,-28(fp)
 4013608:	1885c83a 	sub	r2,r3,r2
 401360c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4013610:	e0bff617 	ldw	r2,-40(fp)
 4013614:	10001e26 	beq	r2,zero,4013690 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4013618:	e0fffe17 	ldw	r3,-8(fp)
 401361c:	e0bff617 	ldw	r2,-40(fp)
 4013620:	1880022e 	bgeu	r3,r2,401362c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4013624:	e0bffe17 	ldw	r2,-8(fp)
 4013628:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401362c:	e0bffc17 	ldw	r2,-16(fp)
 4013630:	10c20e04 	addi	r3,r2,2104
 4013634:	e0bff917 	ldw	r2,-28(fp)
 4013638:	1885883a 	add	r2,r3,r2
 401363c:	e1bff617 	ldw	r6,-40(fp)
 4013640:	e17ffd17 	ldw	r5,-12(fp)
 4013644:	1009883a 	mov	r4,r2
 4013648:	40046400 	call	4004640 <memcpy>
      ptr   += n;
 401364c:	e0fffd17 	ldw	r3,-12(fp)
 4013650:	e0bff617 	ldw	r2,-40(fp)
 4013654:	1885883a 	add	r2,r3,r2
 4013658:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401365c:	e0fffe17 	ldw	r3,-8(fp)
 4013660:	e0bff617 	ldw	r2,-40(fp)
 4013664:	1885c83a 	sub	r2,r3,r2
 4013668:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401366c:	e0fff917 	ldw	r3,-28(fp)
 4013670:	e0bff617 	ldw	r2,-40(fp)
 4013674:	1885883a 	add	r2,r3,r2
 4013678:	10c1ffcc 	andi	r3,r2,2047
 401367c:	e0bffc17 	ldw	r2,-16(fp)
 4013680:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4013684:	e0bffe17 	ldw	r2,-8(fp)
 4013688:	00bfc716 	blt	zero,r2,40135a8 <__alt_data_end+0xfc0135a8>
 401368c:	00000106 	br	4013694 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4013690:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013694:	0005303a 	rdctl	r2,status
 4013698:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401369c:	e0fffb17 	ldw	r3,-20(fp)
 40136a0:	00bfff84 	movi	r2,-2
 40136a4:	1884703a 	and	r2,r3,r2
 40136a8:	1001703a 	wrctl	status,r2
  
  return context;
 40136ac:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40136b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40136b4:	e0bffc17 	ldw	r2,-16(fp)
 40136b8:	10800817 	ldw	r2,32(r2)
 40136bc:	10c00094 	ori	r3,r2,2
 40136c0:	e0bffc17 	ldw	r2,-16(fp)
 40136c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40136c8:	e0bffc17 	ldw	r2,-16(fp)
 40136cc:	10800017 	ldw	r2,0(r2)
 40136d0:	10800104 	addi	r2,r2,4
 40136d4:	1007883a 	mov	r3,r2
 40136d8:	e0bffc17 	ldw	r2,-16(fp)
 40136dc:	10800817 	ldw	r2,32(r2)
 40136e0:	18800035 	stwio	r2,0(r3)
 40136e4:	e0bffa17 	ldw	r2,-24(fp)
 40136e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40136ec:	e0bff817 	ldw	r2,-32(fp)
 40136f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40136f4:	e0bffe17 	ldw	r2,-8(fp)
 40136f8:	0080100e 	bge	zero,r2,401373c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40136fc:	e0bfff17 	ldw	r2,-4(fp)
 4013700:	1090000c 	andi	r2,r2,16384
 4013704:	1000101e 	bne	r2,zero,4013748 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4013708:	0001883a 	nop
 401370c:	e0bffc17 	ldw	r2,-16(fp)
 4013710:	10c00d17 	ldw	r3,52(r2)
 4013714:	e0bff517 	ldw	r2,-44(fp)
 4013718:	1880051e 	bne	r3,r2,4013730 <altera_avalon_jtag_uart_write+0x1b8>
 401371c:	e0bffc17 	ldw	r2,-16(fp)
 4013720:	10c00917 	ldw	r3,36(r2)
 4013724:	e0bffc17 	ldw	r2,-16(fp)
 4013728:	10800117 	ldw	r2,4(r2)
 401372c:	18bff736 	bltu	r3,r2,401370c <__alt_data_end+0xfc01370c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4013730:	e0bffc17 	ldw	r2,-16(fp)
 4013734:	10800917 	ldw	r2,36(r2)
 4013738:	1000051e 	bne	r2,zero,4013750 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401373c:	e0bffe17 	ldw	r2,-8(fp)
 4013740:	00bfd016 	blt	zero,r2,4013684 <__alt_data_end+0xfc013684>
 4013744:	00000306 	br	4013754 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4013748:	0001883a 	nop
 401374c:	00000106 	br	4013754 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4013750:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4013754:	e0fffd17 	ldw	r3,-12(fp)
 4013758:	e0bff717 	ldw	r2,-36(fp)
 401375c:	18800426 	beq	r3,r2,4013770 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4013760:	e0fffd17 	ldw	r3,-12(fp)
 4013764:	e0bff717 	ldw	r2,-36(fp)
 4013768:	1885c83a 	sub	r2,r3,r2
 401376c:	00000606 	br	4013788 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4013770:	e0bfff17 	ldw	r2,-4(fp)
 4013774:	1090000c 	andi	r2,r2,16384
 4013778:	10000226 	beq	r2,zero,4013784 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401377c:	00bffd44 	movi	r2,-11
 4013780:	00000106 	br	4013788 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4013784:	00bffec4 	movi	r2,-5
}
 4013788:	e037883a 	mov	sp,fp
 401378c:	dfc00117 	ldw	ra,4(sp)
 4013790:	df000017 	ldw	fp,0(sp)
 4013794:	dec00204 	addi	sp,sp,8
 4013798:	f800283a 	ret

0401379c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401379c:	defff404 	addi	sp,sp,-48
 40137a0:	df000b15 	stw	fp,44(sp)
 40137a4:	df000b04 	addi	fp,sp,44
 40137a8:	e13ffc15 	stw	r4,-16(fp)
 40137ac:	e17ffd15 	stw	r5,-12(fp)
 40137b0:	e1bffe15 	stw	r6,-8(fp)
 40137b4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 40137b8:	e0ffff17 	ldw	r3,-4(fp)
 40137bc:	e0bffe17 	ldw	r2,-8(fp)
 40137c0:	1885883a 	add	r2,r3,r2
 40137c4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 40137c8:	e0c00217 	ldw	r3,8(fp)
 40137cc:	e0800117 	ldw	r2,4(fp)
 40137d0:	1885883a 	add	r2,r3,r2
 40137d4:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 40137d8:	e0800117 	ldw	r2,4(fp)
 40137dc:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 40137e0:	e0bffe17 	ldw	r2,-8(fp)
 40137e4:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 40137e8:	00800044 	movi	r2,1
 40137ec:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 40137f0:	e0bffc17 	ldw	r2,-16(fp)
 40137f4:	10800504 	addi	r2,r2,20
 40137f8:	1009883a 	mov	r4,r2
 40137fc:	00c00044 	movi	r3,1
 4013800:	e0bffd17 	ldw	r2,-12(fp)
 4013804:	1884983a 	sll	r2,r3,r2
 4013808:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401380c:	e0800317 	ldw	r2,12(fp)
 4013810:	1080008c 	andi	r2,r2,2
 4013814:	1000051e 	bne	r2,zero,401382c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4013818:	e0bffc17 	ldw	r2,-16(fp)
 401381c:	10800304 	addi	r2,r2,12
 4013820:	1007883a 	mov	r3,r2
 4013824:	00810004 	movi	r2,1024
 4013828:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401382c:	e0bffc17 	ldw	r2,-16(fp)
 4013830:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4013834:	e0bffc17 	ldw	r2,-16(fp)
 4013838:	10800204 	addi	r2,r2,8
 401383c:	10800037 	ldwio	r2,0(r2)
 4013840:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4013844:	e0bffa17 	ldw	r2,-24(fp)
 4013848:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401384c:	10000226 	beq	r2,zero,4013858 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4013850:	e0bff717 	ldw	r2,-36(fp)
 4013854:	1000031e 	bne	r2,zero,4013864 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4013858:	e0bffa17 	ldw	r2,-24(fp)
 401385c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4013860:	103ff426 	beq	r2,zero,4013834 <__alt_data_end+0xfc013834>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4013864:	e0bffa17 	ldw	r2,-24(fp)
 4013868:	1080100c 	andi	r2,r2,64
 401386c:	10001e26 	beq	r2,zero,40138e8 <alt_avalon_spi_command+0x14c>
 4013870:	e0bff717 	ldw	r2,-36(fp)
 4013874:	00801c0e 	bge	zero,r2,40138e8 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4013878:	e0bff717 	ldw	r2,-36(fp)
 401387c:	10bfffc4 	addi	r2,r2,-1
 4013880:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4013884:	e0ffff17 	ldw	r3,-4(fp)
 4013888:	e0bff817 	ldw	r2,-32(fp)
 401388c:	18800a2e 	bgeu	r3,r2,40138b8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4013890:	e0bffc17 	ldw	r2,-16(fp)
 4013894:	10800104 	addi	r2,r2,4
 4013898:	1009883a 	mov	r4,r2
 401389c:	e0bfff17 	ldw	r2,-4(fp)
 40138a0:	10c00044 	addi	r3,r2,1
 40138a4:	e0ffff15 	stw	r3,-4(fp)
 40138a8:	10800003 	ldbu	r2,0(r2)
 40138ac:	10803fcc 	andi	r2,r2,255
 40138b0:	20800035 	stwio	r2,0(r4)
 40138b4:	00000c06 	br	40138e8 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 40138b8:	e0bff517 	ldw	r2,-44(fp)
 40138bc:	10000826 	beq	r2,zero,40138e0 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 40138c0:	e0bff517 	ldw	r2,-44(fp)
 40138c4:	10bfffc4 	addi	r2,r2,-1
 40138c8:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 40138cc:	e0bffc17 	ldw	r2,-16(fp)
 40138d0:	10800104 	addi	r2,r2,4
 40138d4:	0007883a 	mov	r3,zero
 40138d8:	10c00035 	stwio	r3,0(r2)
 40138dc:	00000206 	br	40138e8 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 40138e0:	00bf0004 	movi	r2,-1024
 40138e4:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 40138e8:	e0bffa17 	ldw	r2,-24(fp)
 40138ec:	1080200c 	andi	r2,r2,128
 40138f0:	103fd026 	beq	r2,zero,4013834 <__alt_data_end+0xfc013834>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 40138f4:	e0bffc17 	ldw	r2,-16(fp)
 40138f8:	10800037 	ldwio	r2,0(r2)
 40138fc:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4013900:	e0bff617 	ldw	r2,-40(fp)
 4013904:	10000426 	beq	r2,zero,4013918 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4013908:	e0bff617 	ldw	r2,-40(fp)
 401390c:	10bfffc4 	addi	r2,r2,-1
 4013910:	e0bff615 	stw	r2,-40(fp)
 4013914:	00000506 	br	401392c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4013918:	e0800217 	ldw	r2,8(fp)
 401391c:	10c00044 	addi	r3,r2,1
 4013920:	e0c00215 	stw	r3,8(fp)
 4013924:	e0fffb17 	ldw	r3,-20(fp)
 4013928:	10c00005 	stb	r3,0(r2)
      credits++;
 401392c:	e0bff717 	ldw	r2,-36(fp)
 4013930:	10800044 	addi	r2,r2,1
 4013934:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4013938:	e0bff617 	ldw	r2,-40(fp)
 401393c:	103fbd1e 	bne	r2,zero,4013834 <__alt_data_end+0xfc013834>
 4013940:	e0c00217 	ldw	r3,8(fp)
 4013944:	e0bff917 	ldw	r2,-28(fp)
 4013948:	18bfba1e 	bne	r3,r2,4013834 <__alt_data_end+0xfc013834>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401394c:	e0bffc17 	ldw	r2,-16(fp)
 4013950:	10800204 	addi	r2,r2,8
 4013954:	10800037 	ldwio	r2,0(r2)
 4013958:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401395c:	e0bffa17 	ldw	r2,-24(fp)
 4013960:	1080080c 	andi	r2,r2,32
 4013964:	103ff926 	beq	r2,zero,401394c <__alt_data_end+0xfc01394c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4013968:	e0800317 	ldw	r2,12(fp)
 401396c:	1080004c 	andi	r2,r2,1
 4013970:	1000041e 	bne	r2,zero,4013984 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4013974:	e0bffc17 	ldw	r2,-16(fp)
 4013978:	10800304 	addi	r2,r2,12
 401397c:	0007883a 	mov	r3,zero
 4013980:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4013984:	e0800117 	ldw	r2,4(fp)
}
 4013988:	e037883a 	mov	sp,fp
 401398c:	df000017 	ldw	fp,0(sp)
 4013990:	dec00104 	addi	sp,sp,4
 4013994:	f800283a 	ret

04013998 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4013998:	defffa04 	addi	sp,sp,-24
 401399c:	dfc00515 	stw	ra,20(sp)
 40139a0:	df000415 	stw	fp,16(sp)
 40139a4:	df000404 	addi	fp,sp,16
 40139a8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40139ac:	0007883a 	mov	r3,zero
 40139b0:	e0bfff17 	ldw	r2,-4(fp)
 40139b4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40139b8:	e0bfff17 	ldw	r2,-4(fp)
 40139bc:	10800104 	addi	r2,r2,4
 40139c0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40139c4:	0005303a 	rdctl	r2,status
 40139c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40139cc:	e0fffd17 	ldw	r3,-12(fp)
 40139d0:	00bfff84 	movi	r2,-2
 40139d4:	1884703a 	and	r2,r3,r2
 40139d8:	1001703a 	wrctl	status,r2
  
  return context;
 40139dc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40139e0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40139e4:	4010de80 	call	4010de8 <alt_tick>
 40139e8:	e0bffc17 	ldw	r2,-16(fp)
 40139ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40139f0:	e0bffe17 	ldw	r2,-8(fp)
 40139f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40139f8:	0001883a 	nop
 40139fc:	e037883a 	mov	sp,fp
 4013a00:	dfc00117 	ldw	ra,4(sp)
 4013a04:	df000017 	ldw	fp,0(sp)
 4013a08:	dec00204 	addi	sp,sp,8
 4013a0c:	f800283a 	ret

04013a10 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4013a10:	defff804 	addi	sp,sp,-32
 4013a14:	dfc00715 	stw	ra,28(sp)
 4013a18:	df000615 	stw	fp,24(sp)
 4013a1c:	df000604 	addi	fp,sp,24
 4013a20:	e13ffc15 	stw	r4,-16(fp)
 4013a24:	e17ffd15 	stw	r5,-12(fp)
 4013a28:	e1bffe15 	stw	r6,-8(fp)
 4013a2c:	e1ffff15 	stw	r7,-4(fp)
 4013a30:	e0bfff17 	ldw	r2,-4(fp)
 4013a34:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4013a38:	d0a70717 	ldw	r2,-25572(gp)
 4013a3c:	1000021e 	bne	r2,zero,4013a48 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4013a40:	e0bffb17 	ldw	r2,-20(fp)
 4013a44:	d0a70715 	stw	r2,-25572(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4013a48:	e0bffc17 	ldw	r2,-16(fp)
 4013a4c:	10800104 	addi	r2,r2,4
 4013a50:	00c001c4 	movi	r3,7
 4013a54:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4013a58:	d8000015 	stw	zero,0(sp)
 4013a5c:	e1fffc17 	ldw	r7,-16(fp)
 4013a60:	01810074 	movhi	r6,1025
 4013a64:	318e6604 	addi	r6,r6,14744
 4013a68:	e17ffe17 	ldw	r5,-8(fp)
 4013a6c:	e13ffd17 	ldw	r4,-12(fp)
 4013a70:	4013fbc0 	call	4013fbc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4013a74:	0001883a 	nop
 4013a78:	e037883a 	mov	sp,fp
 4013a7c:	dfc00117 	ldw	ra,4(sp)
 4013a80:	df000017 	ldw	fp,0(sp)
 4013a84:	dec00204 	addi	sp,sp,8
 4013a88:	f800283a 	ret

04013a8c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4013a8c:	defff504 	addi	sp,sp,-44
 4013a90:	df000a15 	stw	fp,40(sp)
 4013a94:	df000a04 	addi	fp,sp,40
 4013a98:	e13ffc15 	stw	r4,-16(fp)
 4013a9c:	e17ffd15 	stw	r5,-12(fp)
 4013aa0:	e1bffe15 	stw	r6,-8(fp)
 4013aa4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4013aa8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4013aac:	d0a70717 	ldw	r2,-25572(gp)
  
  if (alt_ticks_per_second ())
 4013ab0:	10003c26 	beq	r2,zero,4013ba4 <alt_alarm_start+0x118>
  {
    if (alarm)
 4013ab4:	e0bffc17 	ldw	r2,-16(fp)
 4013ab8:	10003826 	beq	r2,zero,4013b9c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4013abc:	e0bffc17 	ldw	r2,-16(fp)
 4013ac0:	e0fffe17 	ldw	r3,-8(fp)
 4013ac4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4013ac8:	e0bffc17 	ldw	r2,-16(fp)
 4013acc:	e0ffff17 	ldw	r3,-4(fp)
 4013ad0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013ad4:	0005303a 	rdctl	r2,status
 4013ad8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013adc:	e0fff917 	ldw	r3,-28(fp)
 4013ae0:	00bfff84 	movi	r2,-2
 4013ae4:	1884703a 	and	r2,r3,r2
 4013ae8:	1001703a 	wrctl	status,r2
  
  return context;
 4013aec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4013af0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4013af4:	d0a70817 	ldw	r2,-25568(gp)
      
      current_nticks = alt_nticks();
 4013af8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4013afc:	e0fffd17 	ldw	r3,-12(fp)
 4013b00:	e0bff617 	ldw	r2,-40(fp)
 4013b04:	1885883a 	add	r2,r3,r2
 4013b08:	10c00044 	addi	r3,r2,1
 4013b0c:	e0bffc17 	ldw	r2,-16(fp)
 4013b10:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4013b14:	e0bffc17 	ldw	r2,-16(fp)
 4013b18:	10c00217 	ldw	r3,8(r2)
 4013b1c:	e0bff617 	ldw	r2,-40(fp)
 4013b20:	1880042e 	bgeu	r3,r2,4013b34 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4013b24:	e0bffc17 	ldw	r2,-16(fp)
 4013b28:	00c00044 	movi	r3,1
 4013b2c:	10c00405 	stb	r3,16(r2)
 4013b30:	00000206 	br	4013b3c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4013b34:	e0bffc17 	ldw	r2,-16(fp)
 4013b38:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4013b3c:	e0bffc17 	ldw	r2,-16(fp)
 4013b40:	d0e01404 	addi	r3,gp,-32688
 4013b44:	e0fffa15 	stw	r3,-24(fp)
 4013b48:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4013b4c:	e0bffb17 	ldw	r2,-20(fp)
 4013b50:	e0fffa17 	ldw	r3,-24(fp)
 4013b54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4013b58:	e0bffa17 	ldw	r2,-24(fp)
 4013b5c:	10c00017 	ldw	r3,0(r2)
 4013b60:	e0bffb17 	ldw	r2,-20(fp)
 4013b64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4013b68:	e0bffa17 	ldw	r2,-24(fp)
 4013b6c:	10800017 	ldw	r2,0(r2)
 4013b70:	e0fffb17 	ldw	r3,-20(fp)
 4013b74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4013b78:	e0bffa17 	ldw	r2,-24(fp)
 4013b7c:	e0fffb17 	ldw	r3,-20(fp)
 4013b80:	10c00015 	stw	r3,0(r2)
 4013b84:	e0bff817 	ldw	r2,-32(fp)
 4013b88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013b8c:	e0bff717 	ldw	r2,-36(fp)
 4013b90:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4013b94:	0005883a 	mov	r2,zero
 4013b98:	00000306 	br	4013ba8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4013b9c:	00bffa84 	movi	r2,-22
 4013ba0:	00000106 	br	4013ba8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4013ba4:	00bfde84 	movi	r2,-134
  }
}
 4013ba8:	e037883a 	mov	sp,fp
 4013bac:	df000017 	ldw	fp,0(sp)
 4013bb0:	dec00104 	addi	sp,sp,4
 4013bb4:	f800283a 	ret

04013bb8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4013bb8:	defffa04 	addi	sp,sp,-24
 4013bbc:	dfc00515 	stw	ra,20(sp)
 4013bc0:	df000415 	stw	fp,16(sp)
 4013bc4:	df000404 	addi	fp,sp,16
 4013bc8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4013bcc:	008000c4 	movi	r2,3
 4013bd0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4013bd4:	e0fffd17 	ldw	r3,-12(fp)
 4013bd8:	008003f4 	movhi	r2,15
 4013bdc:	10909004 	addi	r2,r2,16960
 4013be0:	1885383a 	mul	r2,r3,r2
 4013be4:	100b883a 	mov	r5,r2
 4013be8:	0100bef4 	movhi	r4,763
 4013bec:	213c2004 	addi	r4,r4,-3968
 4013bf0:	40031f00 	call	40031f0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4013bf4:	100b883a 	mov	r5,r2
 4013bf8:	01200034 	movhi	r4,32768
 4013bfc:	213fffc4 	addi	r4,r4,-1
 4013c00:	40031f00 	call	40031f0 <__udivsi3>
 4013c04:	100b883a 	mov	r5,r2
 4013c08:	e13fff17 	ldw	r4,-4(fp)
 4013c0c:	40031f00 	call	40031f0 <__udivsi3>
 4013c10:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4013c14:	e0bffe17 	ldw	r2,-8(fp)
 4013c18:	10002a26 	beq	r2,zero,4013cc4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4013c1c:	e03ffc15 	stw	zero,-16(fp)
 4013c20:	00001706 	br	4013c80 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4013c24:	00a00034 	movhi	r2,32768
 4013c28:	10bfffc4 	addi	r2,r2,-1
 4013c2c:	10bfffc4 	addi	r2,r2,-1
 4013c30:	103ffe1e 	bne	r2,zero,4013c2c <__alt_data_end+0xfc013c2c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4013c34:	e0fffd17 	ldw	r3,-12(fp)
 4013c38:	008003f4 	movhi	r2,15
 4013c3c:	10909004 	addi	r2,r2,16960
 4013c40:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4013c44:	100b883a 	mov	r5,r2
 4013c48:	0100bef4 	movhi	r4,763
 4013c4c:	213c2004 	addi	r4,r4,-3968
 4013c50:	40031f00 	call	40031f0 <__udivsi3>
 4013c54:	100b883a 	mov	r5,r2
 4013c58:	01200034 	movhi	r4,32768
 4013c5c:	213fffc4 	addi	r4,r4,-1
 4013c60:	40031f00 	call	40031f0 <__udivsi3>
 4013c64:	1007883a 	mov	r3,r2
 4013c68:	e0bfff17 	ldw	r2,-4(fp)
 4013c6c:	10c5c83a 	sub	r2,r2,r3
 4013c70:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4013c74:	e0bffc17 	ldw	r2,-16(fp)
 4013c78:	10800044 	addi	r2,r2,1
 4013c7c:	e0bffc15 	stw	r2,-16(fp)
 4013c80:	e0fffc17 	ldw	r3,-16(fp)
 4013c84:	e0bffe17 	ldw	r2,-8(fp)
 4013c88:	18bfe616 	blt	r3,r2,4013c24 <__alt_data_end+0xfc013c24>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4013c8c:	e0fffd17 	ldw	r3,-12(fp)
 4013c90:	008003f4 	movhi	r2,15
 4013c94:	10909004 	addi	r2,r2,16960
 4013c98:	1885383a 	mul	r2,r3,r2
 4013c9c:	100b883a 	mov	r5,r2
 4013ca0:	0100bef4 	movhi	r4,763
 4013ca4:	213c2004 	addi	r4,r4,-3968
 4013ca8:	40031f00 	call	40031f0 <__udivsi3>
 4013cac:	1007883a 	mov	r3,r2
 4013cb0:	e0bfff17 	ldw	r2,-4(fp)
 4013cb4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4013cb8:	10bfffc4 	addi	r2,r2,-1
 4013cbc:	103ffe1e 	bne	r2,zero,4013cb8 <__alt_data_end+0xfc013cb8>
 4013cc0:	00000d06 	br	4013cf8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4013cc4:	e0fffd17 	ldw	r3,-12(fp)
 4013cc8:	008003f4 	movhi	r2,15
 4013ccc:	10909004 	addi	r2,r2,16960
 4013cd0:	1885383a 	mul	r2,r3,r2
 4013cd4:	100b883a 	mov	r5,r2
 4013cd8:	0100bef4 	movhi	r4,763
 4013cdc:	213c2004 	addi	r4,r4,-3968
 4013ce0:	40031f00 	call	40031f0 <__udivsi3>
 4013ce4:	1007883a 	mov	r3,r2
 4013ce8:	e0bfff17 	ldw	r2,-4(fp)
 4013cec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4013cf0:	10bfffc4 	addi	r2,r2,-1
 4013cf4:	00bffe16 	blt	zero,r2,4013cf0 <__alt_data_end+0xfc013cf0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4013cf8:	0005883a 	mov	r2,zero
}
 4013cfc:	e037883a 	mov	sp,fp
 4013d00:	dfc00117 	ldw	ra,4(sp)
 4013d04:	df000017 	ldw	fp,0(sp)
 4013d08:	dec00204 	addi	sp,sp,8
 4013d0c:	f800283a 	ret

04013d10 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4013d10:	defffe04 	addi	sp,sp,-8
 4013d14:	df000115 	stw	fp,4(sp)
 4013d18:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4013d1c:	e03fff15 	stw	zero,-4(fp)
 4013d20:	00000506 	br	4013d38 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4013d24:	e0bfff17 	ldw	r2,-4(fp)
 4013d28:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4013d2c:	e0bfff17 	ldw	r2,-4(fp)
 4013d30:	10800804 	addi	r2,r2,32
 4013d34:	e0bfff15 	stw	r2,-4(fp)
 4013d38:	e0bfff17 	ldw	r2,-4(fp)
 4013d3c:	10820030 	cmpltui	r2,r2,2048
 4013d40:	103ff81e 	bne	r2,zero,4013d24 <__alt_data_end+0xfc013d24>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4013d44:	0001883a 	nop
 4013d48:	e037883a 	mov	sp,fp
 4013d4c:	df000017 	ldw	fp,0(sp)
 4013d50:	dec00104 	addi	sp,sp,4
 4013d54:	f800283a 	ret

04013d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4013d58:	defffe04 	addi	sp,sp,-8
 4013d5c:	dfc00115 	stw	ra,4(sp)
 4013d60:	df000015 	stw	fp,0(sp)
 4013d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4013d68:	d0a01217 	ldw	r2,-32696(gp)
 4013d6c:	10000326 	beq	r2,zero,4013d7c <alt_get_errno+0x24>
 4013d70:	d0a01217 	ldw	r2,-32696(gp)
 4013d74:	103ee83a 	callr	r2
 4013d78:	00000106 	br	4013d80 <alt_get_errno+0x28>
 4013d7c:	d0a70004 	addi	r2,gp,-25600
}
 4013d80:	e037883a 	mov	sp,fp
 4013d84:	dfc00117 	ldw	ra,4(sp)
 4013d88:	df000017 	ldw	fp,0(sp)
 4013d8c:	dec00204 	addi	sp,sp,8
 4013d90:	f800283a 	ret

04013d94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4013d94:	defffa04 	addi	sp,sp,-24
 4013d98:	dfc00515 	stw	ra,20(sp)
 4013d9c:	df000415 	stw	fp,16(sp)
 4013da0:	df000404 	addi	fp,sp,16
 4013da4:	e13ffe15 	stw	r4,-8(fp)
 4013da8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4013dac:	e0bffe17 	ldw	r2,-8(fp)
 4013db0:	10000326 	beq	r2,zero,4013dc0 <alt_dev_llist_insert+0x2c>
 4013db4:	e0bffe17 	ldw	r2,-8(fp)
 4013db8:	10800217 	ldw	r2,8(r2)
 4013dbc:	1000061e 	bne	r2,zero,4013dd8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4013dc0:	4013d580 	call	4013d58 <alt_get_errno>
 4013dc4:	1007883a 	mov	r3,r2
 4013dc8:	00800584 	movi	r2,22
 4013dcc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4013dd0:	00bffa84 	movi	r2,-22
 4013dd4:	00001306 	br	4013e24 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4013dd8:	e0bffe17 	ldw	r2,-8(fp)
 4013ddc:	e0ffff17 	ldw	r3,-4(fp)
 4013de0:	e0fffc15 	stw	r3,-16(fp)
 4013de4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4013de8:	e0bffd17 	ldw	r2,-12(fp)
 4013dec:	e0fffc17 	ldw	r3,-16(fp)
 4013df0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4013df4:	e0bffc17 	ldw	r2,-16(fp)
 4013df8:	10c00017 	ldw	r3,0(r2)
 4013dfc:	e0bffd17 	ldw	r2,-12(fp)
 4013e00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4013e04:	e0bffc17 	ldw	r2,-16(fp)
 4013e08:	10800017 	ldw	r2,0(r2)
 4013e0c:	e0fffd17 	ldw	r3,-12(fp)
 4013e10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4013e14:	e0bffc17 	ldw	r2,-16(fp)
 4013e18:	e0fffd17 	ldw	r3,-12(fp)
 4013e1c:	10c00015 	stw	r3,0(r2)

  return 0;  
 4013e20:	0005883a 	mov	r2,zero
}
 4013e24:	e037883a 	mov	sp,fp
 4013e28:	dfc00117 	ldw	ra,4(sp)
 4013e2c:	df000017 	ldw	fp,0(sp)
 4013e30:	dec00204 	addi	sp,sp,8
 4013e34:	f800283a 	ret

04013e38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4013e38:	defffd04 	addi	sp,sp,-12
 4013e3c:	dfc00215 	stw	ra,8(sp)
 4013e40:	df000115 	stw	fp,4(sp)
 4013e44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4013e48:	00810074 	movhi	r2,1025
 4013e4c:	10941304 	addi	r2,r2,20556
 4013e50:	e0bfff15 	stw	r2,-4(fp)
 4013e54:	00000606 	br	4013e70 <_do_ctors+0x38>
        (*ctor) (); 
 4013e58:	e0bfff17 	ldw	r2,-4(fp)
 4013e5c:	10800017 	ldw	r2,0(r2)
 4013e60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4013e64:	e0bfff17 	ldw	r2,-4(fp)
 4013e68:	10bfff04 	addi	r2,r2,-4
 4013e6c:	e0bfff15 	stw	r2,-4(fp)
 4013e70:	e0ffff17 	ldw	r3,-4(fp)
 4013e74:	00810074 	movhi	r2,1025
 4013e78:	10941404 	addi	r2,r2,20560
 4013e7c:	18bff62e 	bgeu	r3,r2,4013e58 <__alt_data_end+0xfc013e58>
        (*ctor) (); 
}
 4013e80:	0001883a 	nop
 4013e84:	e037883a 	mov	sp,fp
 4013e88:	dfc00117 	ldw	ra,4(sp)
 4013e8c:	df000017 	ldw	fp,0(sp)
 4013e90:	dec00204 	addi	sp,sp,8
 4013e94:	f800283a 	ret

04013e98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4013e98:	defffd04 	addi	sp,sp,-12
 4013e9c:	dfc00215 	stw	ra,8(sp)
 4013ea0:	df000115 	stw	fp,4(sp)
 4013ea4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4013ea8:	00810074 	movhi	r2,1025
 4013eac:	10941304 	addi	r2,r2,20556
 4013eb0:	e0bfff15 	stw	r2,-4(fp)
 4013eb4:	00000606 	br	4013ed0 <_do_dtors+0x38>
        (*dtor) (); 
 4013eb8:	e0bfff17 	ldw	r2,-4(fp)
 4013ebc:	10800017 	ldw	r2,0(r2)
 4013ec0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4013ec4:	e0bfff17 	ldw	r2,-4(fp)
 4013ec8:	10bfff04 	addi	r2,r2,-4
 4013ecc:	e0bfff15 	stw	r2,-4(fp)
 4013ed0:	e0ffff17 	ldw	r3,-4(fp)
 4013ed4:	00810074 	movhi	r2,1025
 4013ed8:	10941404 	addi	r2,r2,20560
 4013edc:	18bff62e 	bgeu	r3,r2,4013eb8 <__alt_data_end+0xfc013eb8>
        (*dtor) (); 
}
 4013ee0:	0001883a 	nop
 4013ee4:	e037883a 	mov	sp,fp
 4013ee8:	dfc00117 	ldw	ra,4(sp)
 4013eec:	df000017 	ldw	fp,0(sp)
 4013ef0:	dec00204 	addi	sp,sp,8
 4013ef4:	f800283a 	ret

04013ef8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4013ef8:	defffa04 	addi	sp,sp,-24
 4013efc:	dfc00515 	stw	ra,20(sp)
 4013f00:	df000415 	stw	fp,16(sp)
 4013f04:	df000404 	addi	fp,sp,16
 4013f08:	e13ffe15 	stw	r4,-8(fp)
 4013f0c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4013f10:	e0bfff17 	ldw	r2,-4(fp)
 4013f14:	10800017 	ldw	r2,0(r2)
 4013f18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4013f1c:	e13ffe17 	ldw	r4,-8(fp)
 4013f20:	400491c0 	call	400491c <strlen>
 4013f24:	10800044 	addi	r2,r2,1
 4013f28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4013f2c:	00000d06 	br	4013f64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4013f30:	e0bffc17 	ldw	r2,-16(fp)
 4013f34:	10800217 	ldw	r2,8(r2)
 4013f38:	e0fffd17 	ldw	r3,-12(fp)
 4013f3c:	180d883a 	mov	r6,r3
 4013f40:	e17ffe17 	ldw	r5,-8(fp)
 4013f44:	1009883a 	mov	r4,r2
 4013f48:	4014ba00 	call	4014ba0 <memcmp>
 4013f4c:	1000021e 	bne	r2,zero,4013f58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4013f50:	e0bffc17 	ldw	r2,-16(fp)
 4013f54:	00000706 	br	4013f74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4013f58:	e0bffc17 	ldw	r2,-16(fp)
 4013f5c:	10800017 	ldw	r2,0(r2)
 4013f60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4013f64:	e0fffc17 	ldw	r3,-16(fp)
 4013f68:	e0bfff17 	ldw	r2,-4(fp)
 4013f6c:	18bff01e 	bne	r3,r2,4013f30 <__alt_data_end+0xfc013f30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4013f70:	0005883a 	mov	r2,zero
}
 4013f74:	e037883a 	mov	sp,fp
 4013f78:	dfc00117 	ldw	ra,4(sp)
 4013f7c:	df000017 	ldw	fp,0(sp)
 4013f80:	dec00204 	addi	sp,sp,8
 4013f84:	f800283a 	ret

04013f88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4013f88:	defffe04 	addi	sp,sp,-8
 4013f8c:	dfc00115 	stw	ra,4(sp)
 4013f90:	df000015 	stw	fp,0(sp)
 4013f94:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4013f98:	01440004 	movi	r5,4096
 4013f9c:	0009883a 	mov	r4,zero
 4013fa0:	4014a280 	call	4014a28 <alt_icache_flush>
#endif
}
 4013fa4:	0001883a 	nop
 4013fa8:	e037883a 	mov	sp,fp
 4013fac:	dfc00117 	ldw	ra,4(sp)
 4013fb0:	df000017 	ldw	fp,0(sp)
 4013fb4:	dec00204 	addi	sp,sp,8
 4013fb8:	f800283a 	ret

04013fbc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4013fbc:	defff904 	addi	sp,sp,-28
 4013fc0:	dfc00615 	stw	ra,24(sp)
 4013fc4:	df000515 	stw	fp,20(sp)
 4013fc8:	df000504 	addi	fp,sp,20
 4013fcc:	e13ffc15 	stw	r4,-16(fp)
 4013fd0:	e17ffd15 	stw	r5,-12(fp)
 4013fd4:	e1bffe15 	stw	r6,-8(fp)
 4013fd8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4013fdc:	e0800217 	ldw	r2,8(fp)
 4013fe0:	d8800015 	stw	r2,0(sp)
 4013fe4:	e1ffff17 	ldw	r7,-4(fp)
 4013fe8:	e1bffe17 	ldw	r6,-8(fp)
 4013fec:	e17ffd17 	ldw	r5,-12(fp)
 4013ff0:	e13ffc17 	ldw	r4,-16(fp)
 4013ff4:	401416c0 	call	401416c <alt_iic_isr_register>
}  
 4013ff8:	e037883a 	mov	sp,fp
 4013ffc:	dfc00117 	ldw	ra,4(sp)
 4014000:	df000017 	ldw	fp,0(sp)
 4014004:	dec00204 	addi	sp,sp,8
 4014008:	f800283a 	ret

0401400c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401400c:	defff904 	addi	sp,sp,-28
 4014010:	df000615 	stw	fp,24(sp)
 4014014:	df000604 	addi	fp,sp,24
 4014018:	e13ffe15 	stw	r4,-8(fp)
 401401c:	e17fff15 	stw	r5,-4(fp)
 4014020:	e0bfff17 	ldw	r2,-4(fp)
 4014024:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014028:	0005303a 	rdctl	r2,status
 401402c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014030:	e0fffb17 	ldw	r3,-20(fp)
 4014034:	00bfff84 	movi	r2,-2
 4014038:	1884703a 	and	r2,r3,r2
 401403c:	1001703a 	wrctl	status,r2
  
  return context;
 4014040:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4014044:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4014048:	00c00044 	movi	r3,1
 401404c:	e0bffa17 	ldw	r2,-24(fp)
 4014050:	1884983a 	sll	r2,r3,r2
 4014054:	1007883a 	mov	r3,r2
 4014058:	d0a70917 	ldw	r2,-25564(gp)
 401405c:	1884b03a 	or	r2,r3,r2
 4014060:	d0a70915 	stw	r2,-25564(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4014064:	d0a70917 	ldw	r2,-25564(gp)
 4014068:	100170fa 	wrctl	ienable,r2
 401406c:	e0bffc17 	ldw	r2,-16(fp)
 4014070:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014074:	e0bffd17 	ldw	r2,-12(fp)
 4014078:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401407c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4014080:	0001883a 	nop
}
 4014084:	e037883a 	mov	sp,fp
 4014088:	df000017 	ldw	fp,0(sp)
 401408c:	dec00104 	addi	sp,sp,4
 4014090:	f800283a 	ret

04014094 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4014094:	defff904 	addi	sp,sp,-28
 4014098:	df000615 	stw	fp,24(sp)
 401409c:	df000604 	addi	fp,sp,24
 40140a0:	e13ffe15 	stw	r4,-8(fp)
 40140a4:	e17fff15 	stw	r5,-4(fp)
 40140a8:	e0bfff17 	ldw	r2,-4(fp)
 40140ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40140b0:	0005303a 	rdctl	r2,status
 40140b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40140b8:	e0fffb17 	ldw	r3,-20(fp)
 40140bc:	00bfff84 	movi	r2,-2
 40140c0:	1884703a 	and	r2,r3,r2
 40140c4:	1001703a 	wrctl	status,r2
  
  return context;
 40140c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40140cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40140d0:	00c00044 	movi	r3,1
 40140d4:	e0bffa17 	ldw	r2,-24(fp)
 40140d8:	1884983a 	sll	r2,r3,r2
 40140dc:	0084303a 	nor	r2,zero,r2
 40140e0:	1007883a 	mov	r3,r2
 40140e4:	d0a70917 	ldw	r2,-25564(gp)
 40140e8:	1884703a 	and	r2,r3,r2
 40140ec:	d0a70915 	stw	r2,-25564(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40140f0:	d0a70917 	ldw	r2,-25564(gp)
 40140f4:	100170fa 	wrctl	ienable,r2
 40140f8:	e0bffc17 	ldw	r2,-16(fp)
 40140fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014100:	e0bffd17 	ldw	r2,-12(fp)
 4014104:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4014108:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401410c:	0001883a 	nop
}
 4014110:	e037883a 	mov	sp,fp
 4014114:	df000017 	ldw	fp,0(sp)
 4014118:	dec00104 	addi	sp,sp,4
 401411c:	f800283a 	ret

04014120 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4014120:	defffc04 	addi	sp,sp,-16
 4014124:	df000315 	stw	fp,12(sp)
 4014128:	df000304 	addi	fp,sp,12
 401412c:	e13ffe15 	stw	r4,-8(fp)
 4014130:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4014134:	000530fa 	rdctl	r2,ienable
 4014138:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401413c:	00c00044 	movi	r3,1
 4014140:	e0bfff17 	ldw	r2,-4(fp)
 4014144:	1884983a 	sll	r2,r3,r2
 4014148:	1007883a 	mov	r3,r2
 401414c:	e0bffd17 	ldw	r2,-12(fp)
 4014150:	1884703a 	and	r2,r3,r2
 4014154:	1004c03a 	cmpne	r2,r2,zero
 4014158:	10803fcc 	andi	r2,r2,255
}
 401415c:	e037883a 	mov	sp,fp
 4014160:	df000017 	ldw	fp,0(sp)
 4014164:	dec00104 	addi	sp,sp,4
 4014168:	f800283a 	ret

0401416c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401416c:	defff504 	addi	sp,sp,-44
 4014170:	dfc00a15 	stw	ra,40(sp)
 4014174:	df000915 	stw	fp,36(sp)
 4014178:	df000904 	addi	fp,sp,36
 401417c:	e13ffc15 	stw	r4,-16(fp)
 4014180:	e17ffd15 	stw	r5,-12(fp)
 4014184:	e1bffe15 	stw	r6,-8(fp)
 4014188:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401418c:	00bffa84 	movi	r2,-22
 4014190:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4014194:	e0bffd17 	ldw	r2,-12(fp)
 4014198:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401419c:	e0bff817 	ldw	r2,-32(fp)
 40141a0:	10800808 	cmpgei	r2,r2,32
 40141a4:	1000271e 	bne	r2,zero,4014244 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40141a8:	0005303a 	rdctl	r2,status
 40141ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40141b0:	e0fffb17 	ldw	r3,-20(fp)
 40141b4:	00bfff84 	movi	r2,-2
 40141b8:	1884703a 	and	r2,r3,r2
 40141bc:	1001703a 	wrctl	status,r2
  
  return context;
 40141c0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40141c4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40141c8:	008100b4 	movhi	r2,1026
 40141cc:	10a48604 	addi	r2,r2,-28136
 40141d0:	e0fff817 	ldw	r3,-32(fp)
 40141d4:	180690fa 	slli	r3,r3,3
 40141d8:	10c5883a 	add	r2,r2,r3
 40141dc:	e0fffe17 	ldw	r3,-8(fp)
 40141e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40141e4:	008100b4 	movhi	r2,1026
 40141e8:	10a48604 	addi	r2,r2,-28136
 40141ec:	e0fff817 	ldw	r3,-32(fp)
 40141f0:	180690fa 	slli	r3,r3,3
 40141f4:	10c5883a 	add	r2,r2,r3
 40141f8:	10800104 	addi	r2,r2,4
 40141fc:	e0ffff17 	ldw	r3,-4(fp)
 4014200:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4014204:	e0bffe17 	ldw	r2,-8(fp)
 4014208:	10000526 	beq	r2,zero,4014220 <alt_iic_isr_register+0xb4>
 401420c:	e0bff817 	ldw	r2,-32(fp)
 4014210:	100b883a 	mov	r5,r2
 4014214:	e13ffc17 	ldw	r4,-16(fp)
 4014218:	401400c0 	call	401400c <alt_ic_irq_enable>
 401421c:	00000406 	br	4014230 <alt_iic_isr_register+0xc4>
 4014220:	e0bff817 	ldw	r2,-32(fp)
 4014224:	100b883a 	mov	r5,r2
 4014228:	e13ffc17 	ldw	r4,-16(fp)
 401422c:	40140940 	call	4014094 <alt_ic_irq_disable>
 4014230:	e0bff715 	stw	r2,-36(fp)
 4014234:	e0bffa17 	ldw	r2,-24(fp)
 4014238:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401423c:	e0bff917 	ldw	r2,-28(fp)
 4014240:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4014244:	e0bff717 	ldw	r2,-36(fp)
}
 4014248:	e037883a 	mov	sp,fp
 401424c:	dfc00117 	ldw	ra,4(sp)
 4014250:	df000017 	ldw	fp,0(sp)
 4014254:	dec00204 	addi	sp,sp,8
 4014258:	f800283a 	ret

0401425c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401425c:	defff904 	addi	sp,sp,-28
 4014260:	dfc00615 	stw	ra,24(sp)
 4014264:	df000515 	stw	fp,20(sp)
 4014268:	df000504 	addi	fp,sp,20
 401426c:	e13ffc15 	stw	r4,-16(fp)
 4014270:	e17ffd15 	stw	r5,-12(fp)
 4014274:	e1bffe15 	stw	r6,-8(fp)
 4014278:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 401427c:	e1bfff17 	ldw	r6,-4(fp)
 4014280:	e17ffe17 	ldw	r5,-8(fp)
 4014284:	e13ffd17 	ldw	r4,-12(fp)
 4014288:	401449c0 	call	401449c <open>
 401428c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4014290:	e0bffb17 	ldw	r2,-20(fp)
 4014294:	10001c16 	blt	r2,zero,4014308 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4014298:	00810074 	movhi	r2,1025
 401429c:	10988f04 	addi	r2,r2,25148
 40142a0:	e0fffb17 	ldw	r3,-20(fp)
 40142a4:	18c00324 	muli	r3,r3,12
 40142a8:	10c5883a 	add	r2,r2,r3
 40142ac:	10c00017 	ldw	r3,0(r2)
 40142b0:	e0bffc17 	ldw	r2,-16(fp)
 40142b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40142b8:	00810074 	movhi	r2,1025
 40142bc:	10988f04 	addi	r2,r2,25148
 40142c0:	e0fffb17 	ldw	r3,-20(fp)
 40142c4:	18c00324 	muli	r3,r3,12
 40142c8:	10c5883a 	add	r2,r2,r3
 40142cc:	10800104 	addi	r2,r2,4
 40142d0:	10c00017 	ldw	r3,0(r2)
 40142d4:	e0bffc17 	ldw	r2,-16(fp)
 40142d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40142dc:	00810074 	movhi	r2,1025
 40142e0:	10988f04 	addi	r2,r2,25148
 40142e4:	e0fffb17 	ldw	r3,-20(fp)
 40142e8:	18c00324 	muli	r3,r3,12
 40142ec:	10c5883a 	add	r2,r2,r3
 40142f0:	10800204 	addi	r2,r2,8
 40142f4:	10c00017 	ldw	r3,0(r2)
 40142f8:	e0bffc17 	ldw	r2,-16(fp)
 40142fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4014300:	e13ffb17 	ldw	r4,-20(fp)
 4014304:	4010c380 	call	4010c38 <alt_release_fd>
  }
} 
 4014308:	0001883a 	nop
 401430c:	e037883a 	mov	sp,fp
 4014310:	dfc00117 	ldw	ra,4(sp)
 4014314:	df000017 	ldw	fp,0(sp)
 4014318:	dec00204 	addi	sp,sp,8
 401431c:	f800283a 	ret

04014320 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4014320:	defffb04 	addi	sp,sp,-20
 4014324:	dfc00415 	stw	ra,16(sp)
 4014328:	df000315 	stw	fp,12(sp)
 401432c:	df000304 	addi	fp,sp,12
 4014330:	e13ffd15 	stw	r4,-12(fp)
 4014334:	e17ffe15 	stw	r5,-8(fp)
 4014338:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401433c:	01c07fc4 	movi	r7,511
 4014340:	01800044 	movi	r6,1
 4014344:	e17ffd17 	ldw	r5,-12(fp)
 4014348:	01010074 	movhi	r4,1025
 401434c:	21189204 	addi	r4,r4,25160
 4014350:	401425c0 	call	401425c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4014354:	01c07fc4 	movi	r7,511
 4014358:	000d883a 	mov	r6,zero
 401435c:	e17ffe17 	ldw	r5,-8(fp)
 4014360:	01010074 	movhi	r4,1025
 4014364:	21188f04 	addi	r4,r4,25148
 4014368:	401425c0 	call	401425c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401436c:	01c07fc4 	movi	r7,511
 4014370:	01800044 	movi	r6,1
 4014374:	e17fff17 	ldw	r5,-4(fp)
 4014378:	01010074 	movhi	r4,1025
 401437c:	21189504 	addi	r4,r4,25172
 4014380:	401425c0 	call	401425c <alt_open_fd>
}  
 4014384:	0001883a 	nop
 4014388:	e037883a 	mov	sp,fp
 401438c:	dfc00117 	ldw	ra,4(sp)
 4014390:	df000017 	ldw	fp,0(sp)
 4014394:	dec00204 	addi	sp,sp,8
 4014398:	f800283a 	ret

0401439c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401439c:	defffe04 	addi	sp,sp,-8
 40143a0:	dfc00115 	stw	ra,4(sp)
 40143a4:	df000015 	stw	fp,0(sp)
 40143a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40143ac:	d0a01217 	ldw	r2,-32696(gp)
 40143b0:	10000326 	beq	r2,zero,40143c0 <alt_get_errno+0x24>
 40143b4:	d0a01217 	ldw	r2,-32696(gp)
 40143b8:	103ee83a 	callr	r2
 40143bc:	00000106 	br	40143c4 <alt_get_errno+0x28>
 40143c0:	d0a70004 	addi	r2,gp,-25600
}
 40143c4:	e037883a 	mov	sp,fp
 40143c8:	dfc00117 	ldw	ra,4(sp)
 40143cc:	df000017 	ldw	fp,0(sp)
 40143d0:	dec00204 	addi	sp,sp,8
 40143d4:	f800283a 	ret

040143d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40143d8:	defffd04 	addi	sp,sp,-12
 40143dc:	df000215 	stw	fp,8(sp)
 40143e0:	df000204 	addi	fp,sp,8
 40143e4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40143e8:	e0bfff17 	ldw	r2,-4(fp)
 40143ec:	10800217 	ldw	r2,8(r2)
 40143f0:	10d00034 	orhi	r3,r2,16384
 40143f4:	e0bfff17 	ldw	r2,-4(fp)
 40143f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40143fc:	e03ffe15 	stw	zero,-8(fp)
 4014400:	00001d06 	br	4014478 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4014404:	00810074 	movhi	r2,1025
 4014408:	10988f04 	addi	r2,r2,25148
 401440c:	e0fffe17 	ldw	r3,-8(fp)
 4014410:	18c00324 	muli	r3,r3,12
 4014414:	10c5883a 	add	r2,r2,r3
 4014418:	10c00017 	ldw	r3,0(r2)
 401441c:	e0bfff17 	ldw	r2,-4(fp)
 4014420:	10800017 	ldw	r2,0(r2)
 4014424:	1880111e 	bne	r3,r2,401446c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4014428:	00810074 	movhi	r2,1025
 401442c:	10988f04 	addi	r2,r2,25148
 4014430:	e0fffe17 	ldw	r3,-8(fp)
 4014434:	18c00324 	muli	r3,r3,12
 4014438:	10c5883a 	add	r2,r2,r3
 401443c:	10800204 	addi	r2,r2,8
 4014440:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4014444:	1000090e 	bge	r2,zero,401446c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4014448:	e0bffe17 	ldw	r2,-8(fp)
 401444c:	10c00324 	muli	r3,r2,12
 4014450:	00810074 	movhi	r2,1025
 4014454:	10988f04 	addi	r2,r2,25148
 4014458:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401445c:	e0bfff17 	ldw	r2,-4(fp)
 4014460:	18800226 	beq	r3,r2,401446c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4014464:	00bffcc4 	movi	r2,-13
 4014468:	00000806 	br	401448c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401446c:	e0bffe17 	ldw	r2,-8(fp)
 4014470:	10800044 	addi	r2,r2,1
 4014474:	e0bffe15 	stw	r2,-8(fp)
 4014478:	d0a01117 	ldw	r2,-32700(gp)
 401447c:	1007883a 	mov	r3,r2
 4014480:	e0bffe17 	ldw	r2,-8(fp)
 4014484:	18bfdf2e 	bgeu	r3,r2,4014404 <__alt_data_end+0xfc014404>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4014488:	0005883a 	mov	r2,zero
}
 401448c:	e037883a 	mov	sp,fp
 4014490:	df000017 	ldw	fp,0(sp)
 4014494:	dec00104 	addi	sp,sp,4
 4014498:	f800283a 	ret

0401449c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401449c:	defff604 	addi	sp,sp,-40
 40144a0:	dfc00915 	stw	ra,36(sp)
 40144a4:	df000815 	stw	fp,32(sp)
 40144a8:	df000804 	addi	fp,sp,32
 40144ac:	e13ffd15 	stw	r4,-12(fp)
 40144b0:	e17ffe15 	stw	r5,-8(fp)
 40144b4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40144b8:	00bfffc4 	movi	r2,-1
 40144bc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40144c0:	00bffb44 	movi	r2,-19
 40144c4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40144c8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40144cc:	d1600f04 	addi	r5,gp,-32708
 40144d0:	e13ffd17 	ldw	r4,-12(fp)
 40144d4:	4013ef80 	call	4013ef8 <alt_find_dev>
 40144d8:	e0bff815 	stw	r2,-32(fp)
 40144dc:	e0bff817 	ldw	r2,-32(fp)
 40144e0:	1000051e 	bne	r2,zero,40144f8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40144e4:	e13ffd17 	ldw	r4,-12(fp)
 40144e8:	401487c0 	call	401487c <alt_find_file>
 40144ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40144f0:	00800044 	movi	r2,1
 40144f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40144f8:	e0bff817 	ldw	r2,-32(fp)
 40144fc:	10002926 	beq	r2,zero,40145a4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4014500:	e13ff817 	ldw	r4,-32(fp)
 4014504:	40149840 	call	4014984 <alt_get_fd>
 4014508:	e0bff915 	stw	r2,-28(fp)
 401450c:	e0bff917 	ldw	r2,-28(fp)
 4014510:	1000030e 	bge	r2,zero,4014520 <open+0x84>
    {
      status = index;
 4014514:	e0bff917 	ldw	r2,-28(fp)
 4014518:	e0bffa15 	stw	r2,-24(fp)
 401451c:	00002306 	br	40145ac <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4014520:	e0bff917 	ldw	r2,-28(fp)
 4014524:	10c00324 	muli	r3,r2,12
 4014528:	00810074 	movhi	r2,1025
 401452c:	10988f04 	addi	r2,r2,25148
 4014530:	1885883a 	add	r2,r3,r2
 4014534:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4014538:	e0fffe17 	ldw	r3,-8(fp)
 401453c:	00900034 	movhi	r2,16384
 4014540:	10bfffc4 	addi	r2,r2,-1
 4014544:	1886703a 	and	r3,r3,r2
 4014548:	e0bffc17 	ldw	r2,-16(fp)
 401454c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4014550:	e0bffb17 	ldw	r2,-20(fp)
 4014554:	1000051e 	bne	r2,zero,401456c <open+0xd0>
 4014558:	e13ffc17 	ldw	r4,-16(fp)
 401455c:	40143d80 	call	40143d8 <alt_file_locked>
 4014560:	e0bffa15 	stw	r2,-24(fp)
 4014564:	e0bffa17 	ldw	r2,-24(fp)
 4014568:	10001016 	blt	r2,zero,40145ac <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401456c:	e0bff817 	ldw	r2,-32(fp)
 4014570:	10800317 	ldw	r2,12(r2)
 4014574:	10000826 	beq	r2,zero,4014598 <open+0xfc>
 4014578:	e0bff817 	ldw	r2,-32(fp)
 401457c:	10800317 	ldw	r2,12(r2)
 4014580:	e1ffff17 	ldw	r7,-4(fp)
 4014584:	e1bffe17 	ldw	r6,-8(fp)
 4014588:	e17ffd17 	ldw	r5,-12(fp)
 401458c:	e13ffc17 	ldw	r4,-16(fp)
 4014590:	103ee83a 	callr	r2
 4014594:	00000106 	br	401459c <open+0x100>
 4014598:	0005883a 	mov	r2,zero
 401459c:	e0bffa15 	stw	r2,-24(fp)
 40145a0:	00000206 	br	40145ac <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40145a4:	00bffb44 	movi	r2,-19
 40145a8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40145ac:	e0bffa17 	ldw	r2,-24(fp)
 40145b0:	1000090e 	bge	r2,zero,40145d8 <open+0x13c>
  {
    alt_release_fd (index);  
 40145b4:	e13ff917 	ldw	r4,-28(fp)
 40145b8:	4010c380 	call	4010c38 <alt_release_fd>
    ALT_ERRNO = -status;
 40145bc:	401439c0 	call	401439c <alt_get_errno>
 40145c0:	1007883a 	mov	r3,r2
 40145c4:	e0bffa17 	ldw	r2,-24(fp)
 40145c8:	0085c83a 	sub	r2,zero,r2
 40145cc:	18800015 	stw	r2,0(r3)
    return -1;
 40145d0:	00bfffc4 	movi	r2,-1
 40145d4:	00000106 	br	40145dc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 40145d8:	e0bff917 	ldw	r2,-28(fp)
}
 40145dc:	e037883a 	mov	sp,fp
 40145e0:	dfc00117 	ldw	ra,4(sp)
 40145e4:	df000017 	ldw	fp,0(sp)
 40145e8:	dec00204 	addi	sp,sp,8
 40145ec:	f800283a 	ret

040145f0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 40145f0:	defff204 	addi	sp,sp,-56
 40145f4:	dfc00a15 	stw	ra,40(sp)
 40145f8:	df000915 	stw	fp,36(sp)
 40145fc:	df000904 	addi	fp,sp,36
 4014600:	e13fff15 	stw	r4,-4(fp)
 4014604:	e1400215 	stw	r5,8(fp)
 4014608:	e1800315 	stw	r6,12(fp)
 401460c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 4014610:	e0800204 	addi	r2,fp,8
 4014614:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 4014618:	e0bfff17 	ldw	r2,-4(fp)
 401461c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 4014620:	00006f06 	br	40147e0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4014624:	e0bff807 	ldb	r2,-32(fp)
 4014628:	10800960 	cmpeqi	r2,r2,37
 401462c:	1000041e 	bne	r2,zero,4014640 <alt_printf+0x50>
        {
            alt_putchar(c);
 4014630:	e0bff807 	ldb	r2,-32(fp)
 4014634:	1009883a 	mov	r4,r2
 4014638:	401481c0 	call	401481c <alt_putchar>
 401463c:	00006806 	br	40147e0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 4014640:	e0bff717 	ldw	r2,-36(fp)
 4014644:	10c00044 	addi	r3,r2,1
 4014648:	e0fff715 	stw	r3,-36(fp)
 401464c:	10800003 	ldbu	r2,0(r2)
 4014650:	e0bff805 	stb	r2,-32(fp)
 4014654:	e0bff807 	ldb	r2,-32(fp)
 4014658:	10006926 	beq	r2,zero,4014800 <alt_printf+0x210>
            {
                if (c == '%')
 401465c:	e0bff807 	ldb	r2,-32(fp)
 4014660:	10800958 	cmpnei	r2,r2,37
 4014664:	1000041e 	bne	r2,zero,4014678 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4014668:	e0bff807 	ldb	r2,-32(fp)
 401466c:	1009883a 	mov	r4,r2
 4014670:	401481c0 	call	401481c <alt_putchar>
 4014674:	00005a06 	br	40147e0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 4014678:	e0bff807 	ldb	r2,-32(fp)
 401467c:	108018d8 	cmpnei	r2,r2,99
 4014680:	1000081e 	bne	r2,zero,40146a4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 4014684:	e0bffe17 	ldw	r2,-8(fp)
 4014688:	10c00104 	addi	r3,r2,4
 401468c:	e0fffe15 	stw	r3,-8(fp)
 4014690:	10800017 	ldw	r2,0(r2)
 4014694:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 4014698:	e13ffd17 	ldw	r4,-12(fp)
 401469c:	401481c0 	call	401481c <alt_putchar>
 40146a0:	00004f06 	br	40147e0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 40146a4:	e0bff807 	ldb	r2,-32(fp)
 40146a8:	10801e18 	cmpnei	r2,r2,120
 40146ac:	1000341e 	bne	r2,zero,4014780 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 40146b0:	e0bffe17 	ldw	r2,-8(fp)
 40146b4:	10c00104 	addi	r3,r2,4
 40146b8:	e0fffe15 	stw	r3,-8(fp)
 40146bc:	10800017 	ldw	r2,0(r2)
 40146c0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 40146c4:	e0bffb17 	ldw	r2,-20(fp)
 40146c8:	1000031e 	bne	r2,zero,40146d8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 40146cc:	01000c04 	movi	r4,48
 40146d0:	401481c0 	call	401481c <alt_putchar>
                        continue;
 40146d4:	00004206 	br	40147e0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 40146d8:	00800704 	movi	r2,28
 40146dc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 40146e0:	00000306 	br	40146f0 <alt_printf+0x100>
                        digit_shift -= 4;
 40146e4:	e0bff917 	ldw	r2,-28(fp)
 40146e8:	10bfff04 	addi	r2,r2,-4
 40146ec:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 40146f0:	00c003c4 	movi	r3,15
 40146f4:	e0bff917 	ldw	r2,-28(fp)
 40146f8:	1884983a 	sll	r2,r3,r2
 40146fc:	1007883a 	mov	r3,r2
 4014700:	e0bffb17 	ldw	r2,-20(fp)
 4014704:	1884703a 	and	r2,r3,r2
 4014708:	103ff626 	beq	r2,zero,40146e4 <__alt_data_end+0xfc0146e4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 401470c:	00001906 	br	4014774 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4014710:	00c003c4 	movi	r3,15
 4014714:	e0bff917 	ldw	r2,-28(fp)
 4014718:	1884983a 	sll	r2,r3,r2
 401471c:	1007883a 	mov	r3,r2
 4014720:	e0bffb17 	ldw	r2,-20(fp)
 4014724:	1886703a 	and	r3,r3,r2
 4014728:	e0bff917 	ldw	r2,-28(fp)
 401472c:	1884d83a 	srl	r2,r3,r2
 4014730:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 4014734:	e0bffc17 	ldw	r2,-16(fp)
 4014738:	108002a8 	cmpgeui	r2,r2,10
 401473c:	1000041e 	bne	r2,zero,4014750 <alt_printf+0x160>
                            c = '0' + digit;
 4014740:	e0bffc17 	ldw	r2,-16(fp)
 4014744:	10800c04 	addi	r2,r2,48
 4014748:	e0bff805 	stb	r2,-32(fp)
 401474c:	00000306 	br	401475c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 4014750:	e0bffc17 	ldw	r2,-16(fp)
 4014754:	108015c4 	addi	r2,r2,87
 4014758:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 401475c:	e0bff807 	ldb	r2,-32(fp)
 4014760:	1009883a 	mov	r4,r2
 4014764:	401481c0 	call	401481c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4014768:	e0bff917 	ldw	r2,-28(fp)
 401476c:	10bfff04 	addi	r2,r2,-4
 4014770:	e0bff915 	stw	r2,-28(fp)
 4014774:	e0bff917 	ldw	r2,-28(fp)
 4014778:	103fe50e 	bge	r2,zero,4014710 <__alt_data_end+0xfc014710>
 401477c:	00001806 	br	40147e0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 4014780:	e0bff807 	ldb	r2,-32(fp)
 4014784:	10801cd8 	cmpnei	r2,r2,115
 4014788:	1000151e 	bne	r2,zero,40147e0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 401478c:	e0bffe17 	ldw	r2,-8(fp)
 4014790:	10c00104 	addi	r3,r2,4
 4014794:	e0fffe15 	stw	r3,-8(fp)
 4014798:	10800017 	ldw	r2,0(r2)
 401479c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 40147a0:	00000906 	br	40147c8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 40147a4:	e0bffa17 	ldw	r2,-24(fp)
 40147a8:	10c00044 	addi	r3,r2,1
 40147ac:	e0fffa15 	stw	r3,-24(fp)
 40147b0:	10800003 	ldbu	r2,0(r2)
 40147b4:	10803fcc 	andi	r2,r2,255
 40147b8:	1080201c 	xori	r2,r2,128
 40147bc:	10bfe004 	addi	r2,r2,-128
 40147c0:	1009883a 	mov	r4,r2
 40147c4:	401481c0 	call	401481c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 40147c8:	e0bffa17 	ldw	r2,-24(fp)
 40147cc:	10800003 	ldbu	r2,0(r2)
 40147d0:	10803fcc 	andi	r2,r2,255
 40147d4:	1080201c 	xori	r2,r2,128
 40147d8:	10bfe004 	addi	r2,r2,-128
 40147dc:	103ff11e 	bne	r2,zero,40147a4 <__alt_data_end+0xfc0147a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 40147e0:	e0bff717 	ldw	r2,-36(fp)
 40147e4:	10c00044 	addi	r3,r2,1
 40147e8:	e0fff715 	stw	r3,-36(fp)
 40147ec:	10800003 	ldbu	r2,0(r2)
 40147f0:	e0bff805 	stb	r2,-32(fp)
 40147f4:	e0bff807 	ldb	r2,-32(fp)
 40147f8:	103f8a1e 	bne	r2,zero,4014624 <__alt_data_end+0xfc014624>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 40147fc:	00000106 	br	4014804 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 4014800:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4014804:	0001883a 	nop
 4014808:	e037883a 	mov	sp,fp
 401480c:	dfc00117 	ldw	ra,4(sp)
 4014810:	df000017 	ldw	fp,0(sp)
 4014814:	dec00504 	addi	sp,sp,20
 4014818:	f800283a 	ret

0401481c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 401481c:	defffd04 	addi	sp,sp,-12
 4014820:	dfc00215 	stw	ra,8(sp)
 4014824:	df000115 	stw	fp,4(sp)
 4014828:	df000104 	addi	fp,sp,4
 401482c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 4014830:	d0a00a17 	ldw	r2,-32728(gp)
 4014834:	10800217 	ldw	r2,8(r2)
 4014838:	100b883a 	mov	r5,r2
 401483c:	e13fff17 	ldw	r4,-4(fp)
 4014840:	4014cbc0 	call	4014cbc <putc>
#endif
#endif
}
 4014844:	e037883a 	mov	sp,fp
 4014848:	dfc00117 	ldw	ra,4(sp)
 401484c:	df000017 	ldw	fp,0(sp)
 4014850:	dec00204 	addi	sp,sp,8
 4014854:	f800283a 	ret

04014858 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4014858:	deffff04 	addi	sp,sp,-4
 401485c:	df000015 	stw	fp,0(sp)
 4014860:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4014864:	000170fa 	wrctl	ienable,zero
}
 4014868:	0001883a 	nop
 401486c:	e037883a 	mov	sp,fp
 4014870:	df000017 	ldw	fp,0(sp)
 4014874:	dec00104 	addi	sp,sp,4
 4014878:	f800283a 	ret

0401487c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401487c:	defffb04 	addi	sp,sp,-20
 4014880:	dfc00415 	stw	ra,16(sp)
 4014884:	df000315 	stw	fp,12(sp)
 4014888:	df000304 	addi	fp,sp,12
 401488c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4014890:	d0a00d17 	ldw	r2,-32716(gp)
 4014894:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4014898:	00003106 	br	4014960 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401489c:	e0bffd17 	ldw	r2,-12(fp)
 40148a0:	10800217 	ldw	r2,8(r2)
 40148a4:	1009883a 	mov	r4,r2
 40148a8:	400491c0 	call	400491c <strlen>
 40148ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40148b0:	e0bffd17 	ldw	r2,-12(fp)
 40148b4:	10c00217 	ldw	r3,8(r2)
 40148b8:	e0bffe17 	ldw	r2,-8(fp)
 40148bc:	10bfffc4 	addi	r2,r2,-1
 40148c0:	1885883a 	add	r2,r3,r2
 40148c4:	10800003 	ldbu	r2,0(r2)
 40148c8:	10803fcc 	andi	r2,r2,255
 40148cc:	1080201c 	xori	r2,r2,128
 40148d0:	10bfe004 	addi	r2,r2,-128
 40148d4:	10800bd8 	cmpnei	r2,r2,47
 40148d8:	1000031e 	bne	r2,zero,40148e8 <alt_find_file+0x6c>
    {
      len -= 1;
 40148dc:	e0bffe17 	ldw	r2,-8(fp)
 40148e0:	10bfffc4 	addi	r2,r2,-1
 40148e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40148e8:	e0bffe17 	ldw	r2,-8(fp)
 40148ec:	e0ffff17 	ldw	r3,-4(fp)
 40148f0:	1885883a 	add	r2,r3,r2
 40148f4:	10800003 	ldbu	r2,0(r2)
 40148f8:	10803fcc 	andi	r2,r2,255
 40148fc:	1080201c 	xori	r2,r2,128
 4014900:	10bfe004 	addi	r2,r2,-128
 4014904:	10800be0 	cmpeqi	r2,r2,47
 4014908:	1000081e 	bne	r2,zero,401492c <alt_find_file+0xb0>
 401490c:	e0bffe17 	ldw	r2,-8(fp)
 4014910:	e0ffff17 	ldw	r3,-4(fp)
 4014914:	1885883a 	add	r2,r3,r2
 4014918:	10800003 	ldbu	r2,0(r2)
 401491c:	10803fcc 	andi	r2,r2,255
 4014920:	1080201c 	xori	r2,r2,128
 4014924:	10bfe004 	addi	r2,r2,-128
 4014928:	10000a1e 	bne	r2,zero,4014954 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401492c:	e0bffd17 	ldw	r2,-12(fp)
 4014930:	10800217 	ldw	r2,8(r2)
 4014934:	e0fffe17 	ldw	r3,-8(fp)
 4014938:	180d883a 	mov	r6,r3
 401493c:	e17fff17 	ldw	r5,-4(fp)
 4014940:	1009883a 	mov	r4,r2
 4014944:	4014ba00 	call	4014ba0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4014948:	1000021e 	bne	r2,zero,4014954 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401494c:	e0bffd17 	ldw	r2,-12(fp)
 4014950:	00000706 	br	4014970 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4014954:	e0bffd17 	ldw	r2,-12(fp)
 4014958:	10800017 	ldw	r2,0(r2)
 401495c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4014960:	e0fffd17 	ldw	r3,-12(fp)
 4014964:	d0a00d04 	addi	r2,gp,-32716
 4014968:	18bfcc1e 	bne	r3,r2,401489c <__alt_data_end+0xfc01489c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401496c:	0005883a 	mov	r2,zero
}
 4014970:	e037883a 	mov	sp,fp
 4014974:	dfc00117 	ldw	ra,4(sp)
 4014978:	df000017 	ldw	fp,0(sp)
 401497c:	dec00204 	addi	sp,sp,8
 4014980:	f800283a 	ret

04014984 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4014984:	defffc04 	addi	sp,sp,-16
 4014988:	df000315 	stw	fp,12(sp)
 401498c:	df000304 	addi	fp,sp,12
 4014990:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4014994:	00bffa04 	movi	r2,-24
 4014998:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401499c:	e03ffd15 	stw	zero,-12(fp)
 40149a0:	00001906 	br	4014a08 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 40149a4:	00810074 	movhi	r2,1025
 40149a8:	10988f04 	addi	r2,r2,25148
 40149ac:	e0fffd17 	ldw	r3,-12(fp)
 40149b0:	18c00324 	muli	r3,r3,12
 40149b4:	10c5883a 	add	r2,r2,r3
 40149b8:	10800017 	ldw	r2,0(r2)
 40149bc:	10000f1e 	bne	r2,zero,40149fc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 40149c0:	00810074 	movhi	r2,1025
 40149c4:	10988f04 	addi	r2,r2,25148
 40149c8:	e0fffd17 	ldw	r3,-12(fp)
 40149cc:	18c00324 	muli	r3,r3,12
 40149d0:	10c5883a 	add	r2,r2,r3
 40149d4:	e0ffff17 	ldw	r3,-4(fp)
 40149d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40149dc:	d0e01117 	ldw	r3,-32700(gp)
 40149e0:	e0bffd17 	ldw	r2,-12(fp)
 40149e4:	1880020e 	bge	r3,r2,40149f0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 40149e8:	e0bffd17 	ldw	r2,-12(fp)
 40149ec:	d0a01115 	stw	r2,-32700(gp)
      }
      rc = i;
 40149f0:	e0bffd17 	ldw	r2,-12(fp)
 40149f4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 40149f8:	00000606 	br	4014a14 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40149fc:	e0bffd17 	ldw	r2,-12(fp)
 4014a00:	10800044 	addi	r2,r2,1
 4014a04:	e0bffd15 	stw	r2,-12(fp)
 4014a08:	e0bffd17 	ldw	r2,-12(fp)
 4014a0c:	10800810 	cmplti	r2,r2,32
 4014a10:	103fe41e 	bne	r2,zero,40149a4 <__alt_data_end+0xfc0149a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4014a14:	e0bffe17 	ldw	r2,-8(fp)
}
 4014a18:	e037883a 	mov	sp,fp
 4014a1c:	df000017 	ldw	fp,0(sp)
 4014a20:	dec00104 	addi	sp,sp,4
 4014a24:	f800283a 	ret

04014a28 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4014a28:	defffb04 	addi	sp,sp,-20
 4014a2c:	df000415 	stw	fp,16(sp)
 4014a30:	df000404 	addi	fp,sp,16
 4014a34:	e13ffe15 	stw	r4,-8(fp)
 4014a38:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4014a3c:	e0bfff17 	ldw	r2,-4(fp)
 4014a40:	10840070 	cmpltui	r2,r2,4097
 4014a44:	1000021e 	bne	r2,zero,4014a50 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4014a48:	00840004 	movi	r2,4096
 4014a4c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4014a50:	e0fffe17 	ldw	r3,-8(fp)
 4014a54:	e0bfff17 	ldw	r2,-4(fp)
 4014a58:	1885883a 	add	r2,r3,r2
 4014a5c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4014a60:	e0bffe17 	ldw	r2,-8(fp)
 4014a64:	e0bffc15 	stw	r2,-16(fp)
 4014a68:	00000506 	br	4014a80 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4014a6c:	e0bffc17 	ldw	r2,-16(fp)
 4014a70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4014a74:	e0bffc17 	ldw	r2,-16(fp)
 4014a78:	10800804 	addi	r2,r2,32
 4014a7c:	e0bffc15 	stw	r2,-16(fp)
 4014a80:	e0fffc17 	ldw	r3,-16(fp)
 4014a84:	e0bffd17 	ldw	r2,-12(fp)
 4014a88:	18bff836 	bltu	r3,r2,4014a6c <__alt_data_end+0xfc014a6c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4014a8c:	e0bffe17 	ldw	r2,-8(fp)
 4014a90:	108007cc 	andi	r2,r2,31
 4014a94:	10000226 	beq	r2,zero,4014aa0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4014a98:	e0bffc17 	ldw	r2,-16(fp)
 4014a9c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4014aa0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4014aa4:	0001883a 	nop
 4014aa8:	e037883a 	mov	sp,fp
 4014aac:	df000017 	ldw	fp,0(sp)
 4014ab0:	dec00104 	addi	sp,sp,4
 4014ab4:	f800283a 	ret

04014ab8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4014ab8:	defffe04 	addi	sp,sp,-8
 4014abc:	df000115 	stw	fp,4(sp)
 4014ac0:	df000104 	addi	fp,sp,4
 4014ac4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4014ac8:	e0bfff17 	ldw	r2,-4(fp)
 4014acc:	10bffe84 	addi	r2,r2,-6
 4014ad0:	10c00428 	cmpgeui	r3,r2,16
 4014ad4:	18001a1e 	bne	r3,zero,4014b40 <alt_exception_cause_generated_bad_addr+0x88>
 4014ad8:	100690ba 	slli	r3,r2,2
 4014adc:	00810074 	movhi	r2,1025
 4014ae0:	1092bc04 	addi	r2,r2,19184
 4014ae4:	1885883a 	add	r2,r3,r2
 4014ae8:	10800017 	ldw	r2,0(r2)
 4014aec:	1000683a 	jmp	r2
 4014af0:	04014b30 	cmpltui	r16,zero,1324
 4014af4:	04014b30 	cmpltui	r16,zero,1324
 4014af8:	04014b40 	call	4014b4 <__reset-0x3bfeb4c>
 4014afc:	04014b40 	call	4014b4 <__reset-0x3bfeb4c>
 4014b00:	04014b40 	call	4014b4 <__reset-0x3bfeb4c>
 4014b04:	04014b30 	cmpltui	r16,zero,1324
 4014b08:	04014b38 	rdprs	r16,zero,1324
 4014b0c:	04014b40 	call	4014b4 <__reset-0x3bfeb4c>
 4014b10:	04014b30 	cmpltui	r16,zero,1324
 4014b14:	04014b30 	cmpltui	r16,zero,1324
 4014b18:	04014b40 	call	4014b4 <__reset-0x3bfeb4c>
 4014b1c:	04014b30 	cmpltui	r16,zero,1324
 4014b20:	04014b38 	rdprs	r16,zero,1324
 4014b24:	04014b40 	call	4014b4 <__reset-0x3bfeb4c>
 4014b28:	04014b40 	call	4014b4 <__reset-0x3bfeb4c>
 4014b2c:	04014b30 	cmpltui	r16,zero,1324
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4014b30:	00800044 	movi	r2,1
 4014b34:	00000306 	br	4014b44 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4014b38:	0005883a 	mov	r2,zero
 4014b3c:	00000106 	br	4014b44 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4014b40:	0005883a 	mov	r2,zero
  }
}
 4014b44:	e037883a 	mov	sp,fp
 4014b48:	df000017 	ldw	fp,0(sp)
 4014b4c:	dec00104 	addi	sp,sp,4
 4014b50:	f800283a 	ret

04014b54 <atexit>:
 4014b54:	200b883a 	mov	r5,r4
 4014b58:	000f883a 	mov	r7,zero
 4014b5c:	000d883a 	mov	r6,zero
 4014b60:	0009883a 	mov	r4,zero
 4014b64:	4014d841 	jmpi	4014d84 <__register_exitproc>

04014b68 <exit>:
 4014b68:	defffe04 	addi	sp,sp,-8
 4014b6c:	000b883a 	mov	r5,zero
 4014b70:	dc000015 	stw	r16,0(sp)
 4014b74:	dfc00115 	stw	ra,4(sp)
 4014b78:	2021883a 	mov	r16,r4
 4014b7c:	4014e9c0 	call	4014e9c <__call_exitprocs>
 4014b80:	00810074 	movhi	r2,1025
 4014b84:	109d1e04 	addi	r2,r2,29816
 4014b88:	11000017 	ldw	r4,0(r2)
 4014b8c:	20800f17 	ldw	r2,60(r4)
 4014b90:	10000126 	beq	r2,zero,4014b98 <exit+0x30>
 4014b94:	103ee83a 	callr	r2
 4014b98:	8009883a 	mov	r4,r16
 4014b9c:	401501c0 	call	401501c <_exit>

04014ba0 <memcmp>:
 4014ba0:	01c000c4 	movi	r7,3
 4014ba4:	3980192e 	bgeu	r7,r6,4014c0c <memcmp+0x6c>
 4014ba8:	2144b03a 	or	r2,r4,r5
 4014bac:	11c4703a 	and	r2,r2,r7
 4014bb0:	10000f26 	beq	r2,zero,4014bf0 <memcmp+0x50>
 4014bb4:	20800003 	ldbu	r2,0(r4)
 4014bb8:	28c00003 	ldbu	r3,0(r5)
 4014bbc:	10c0151e 	bne	r2,r3,4014c14 <memcmp+0x74>
 4014bc0:	31bfff84 	addi	r6,r6,-2
 4014bc4:	01ffffc4 	movi	r7,-1
 4014bc8:	00000406 	br	4014bdc <memcmp+0x3c>
 4014bcc:	20800003 	ldbu	r2,0(r4)
 4014bd0:	28c00003 	ldbu	r3,0(r5)
 4014bd4:	31bfffc4 	addi	r6,r6,-1
 4014bd8:	10c00e1e 	bne	r2,r3,4014c14 <memcmp+0x74>
 4014bdc:	21000044 	addi	r4,r4,1
 4014be0:	29400044 	addi	r5,r5,1
 4014be4:	31fff91e 	bne	r6,r7,4014bcc <__alt_data_end+0xfc014bcc>
 4014be8:	0005883a 	mov	r2,zero
 4014bec:	f800283a 	ret
 4014bf0:	20c00017 	ldw	r3,0(r4)
 4014bf4:	28800017 	ldw	r2,0(r5)
 4014bf8:	18bfee1e 	bne	r3,r2,4014bb4 <__alt_data_end+0xfc014bb4>
 4014bfc:	31bfff04 	addi	r6,r6,-4
 4014c00:	21000104 	addi	r4,r4,4
 4014c04:	29400104 	addi	r5,r5,4
 4014c08:	39bff936 	bltu	r7,r6,4014bf0 <__alt_data_end+0xfc014bf0>
 4014c0c:	303fe91e 	bne	r6,zero,4014bb4 <__alt_data_end+0xfc014bb4>
 4014c10:	003ff506 	br	4014be8 <__alt_data_end+0xfc014be8>
 4014c14:	10c5c83a 	sub	r2,r2,r3
 4014c18:	f800283a 	ret

04014c1c <_putc_r>:
 4014c1c:	defffc04 	addi	sp,sp,-16
 4014c20:	dc000215 	stw	r16,8(sp)
 4014c24:	dfc00315 	stw	ra,12(sp)
 4014c28:	2021883a 	mov	r16,r4
 4014c2c:	20000226 	beq	r4,zero,4014c38 <_putc_r+0x1c>
 4014c30:	20800e17 	ldw	r2,56(r4)
 4014c34:	10001b26 	beq	r2,zero,4014ca4 <_putc_r+0x88>
 4014c38:	30800217 	ldw	r2,8(r6)
 4014c3c:	10bfffc4 	addi	r2,r2,-1
 4014c40:	30800215 	stw	r2,8(r6)
 4014c44:	10000a16 	blt	r2,zero,4014c70 <_putc_r+0x54>
 4014c48:	30800017 	ldw	r2,0(r6)
 4014c4c:	11400005 	stb	r5,0(r2)
 4014c50:	30800017 	ldw	r2,0(r6)
 4014c54:	10c00044 	addi	r3,r2,1
 4014c58:	30c00015 	stw	r3,0(r6)
 4014c5c:	10800003 	ldbu	r2,0(r2)
 4014c60:	dfc00317 	ldw	ra,12(sp)
 4014c64:	dc000217 	ldw	r16,8(sp)
 4014c68:	dec00404 	addi	sp,sp,16
 4014c6c:	f800283a 	ret
 4014c70:	30c00617 	ldw	r3,24(r6)
 4014c74:	10c00616 	blt	r2,r3,4014c90 <_putc_r+0x74>
 4014c78:	30800017 	ldw	r2,0(r6)
 4014c7c:	00c00284 	movi	r3,10
 4014c80:	11400005 	stb	r5,0(r2)
 4014c84:	30800017 	ldw	r2,0(r6)
 4014c88:	11400003 	ldbu	r5,0(r2)
 4014c8c:	28fff11e 	bne	r5,r3,4014c54 <__alt_data_end+0xfc014c54>
 4014c90:	8009883a 	mov	r4,r16
 4014c94:	dfc00317 	ldw	ra,12(sp)
 4014c98:	dc000217 	ldw	r16,8(sp)
 4014c9c:	dec00404 	addi	sp,sp,16
 4014ca0:	400d1481 	jmpi	400d148 <__swbuf_r>
 4014ca4:	d9400015 	stw	r5,0(sp)
 4014ca8:	d9800115 	stw	r6,4(sp)
 4014cac:	4008c580 	call	4008c58 <__sinit>
 4014cb0:	d9800117 	ldw	r6,4(sp)
 4014cb4:	d9400017 	ldw	r5,0(sp)
 4014cb8:	003fdf06 	br	4014c38 <__alt_data_end+0xfc014c38>

04014cbc <putc>:
 4014cbc:	00810074 	movhi	r2,1025
 4014cc0:	defffc04 	addi	sp,sp,-16
 4014cc4:	109d1f04 	addi	r2,r2,29820
 4014cc8:	dc000115 	stw	r16,4(sp)
 4014ccc:	14000017 	ldw	r16,0(r2)
 4014cd0:	dc400215 	stw	r17,8(sp)
 4014cd4:	dfc00315 	stw	ra,12(sp)
 4014cd8:	2023883a 	mov	r17,r4
 4014cdc:	80000226 	beq	r16,zero,4014ce8 <putc+0x2c>
 4014ce0:	80800e17 	ldw	r2,56(r16)
 4014ce4:	10001a26 	beq	r2,zero,4014d50 <putc+0x94>
 4014ce8:	28800217 	ldw	r2,8(r5)
 4014cec:	10bfffc4 	addi	r2,r2,-1
 4014cf0:	28800215 	stw	r2,8(r5)
 4014cf4:	10000b16 	blt	r2,zero,4014d24 <putc+0x68>
 4014cf8:	28800017 	ldw	r2,0(r5)
 4014cfc:	14400005 	stb	r17,0(r2)
 4014d00:	28800017 	ldw	r2,0(r5)
 4014d04:	10c00044 	addi	r3,r2,1
 4014d08:	28c00015 	stw	r3,0(r5)
 4014d0c:	10800003 	ldbu	r2,0(r2)
 4014d10:	dfc00317 	ldw	ra,12(sp)
 4014d14:	dc400217 	ldw	r17,8(sp)
 4014d18:	dc000117 	ldw	r16,4(sp)
 4014d1c:	dec00404 	addi	sp,sp,16
 4014d20:	f800283a 	ret
 4014d24:	28c00617 	ldw	r3,24(r5)
 4014d28:	10c00e16 	blt	r2,r3,4014d64 <putc+0xa8>
 4014d2c:	28800017 	ldw	r2,0(r5)
 4014d30:	01000284 	movi	r4,10
 4014d34:	14400005 	stb	r17,0(r2)
 4014d38:	28800017 	ldw	r2,0(r5)
 4014d3c:	10c00003 	ldbu	r3,0(r2)
 4014d40:	193ff01e 	bne	r3,r4,4014d04 <__alt_data_end+0xfc014d04>
 4014d44:	280d883a 	mov	r6,r5
 4014d48:	180b883a 	mov	r5,r3
 4014d4c:	00000706 	br	4014d6c <putc+0xb0>
 4014d50:	8009883a 	mov	r4,r16
 4014d54:	d9400015 	stw	r5,0(sp)
 4014d58:	4008c580 	call	4008c58 <__sinit>
 4014d5c:	d9400017 	ldw	r5,0(sp)
 4014d60:	003fe106 	br	4014ce8 <__alt_data_end+0xfc014ce8>
 4014d64:	280d883a 	mov	r6,r5
 4014d68:	880b883a 	mov	r5,r17
 4014d6c:	8009883a 	mov	r4,r16
 4014d70:	dfc00317 	ldw	ra,12(sp)
 4014d74:	dc400217 	ldw	r17,8(sp)
 4014d78:	dc000117 	ldw	r16,4(sp)
 4014d7c:	dec00404 	addi	sp,sp,16
 4014d80:	400d1481 	jmpi	400d148 <__swbuf_r>

04014d84 <__register_exitproc>:
 4014d84:	defffa04 	addi	sp,sp,-24
 4014d88:	dc000315 	stw	r16,12(sp)
 4014d8c:	04010074 	movhi	r16,1025
 4014d90:	841d1e04 	addi	r16,r16,29816
 4014d94:	80c00017 	ldw	r3,0(r16)
 4014d98:	dc400415 	stw	r17,16(sp)
 4014d9c:	dfc00515 	stw	ra,20(sp)
 4014da0:	18805217 	ldw	r2,328(r3)
 4014da4:	2023883a 	mov	r17,r4
 4014da8:	10003726 	beq	r2,zero,4014e88 <__register_exitproc+0x104>
 4014dac:	10c00117 	ldw	r3,4(r2)
 4014db0:	010007c4 	movi	r4,31
 4014db4:	20c00e16 	blt	r4,r3,4014df0 <__register_exitproc+0x6c>
 4014db8:	1a000044 	addi	r8,r3,1
 4014dbc:	8800221e 	bne	r17,zero,4014e48 <__register_exitproc+0xc4>
 4014dc0:	18c00084 	addi	r3,r3,2
 4014dc4:	18c7883a 	add	r3,r3,r3
 4014dc8:	18c7883a 	add	r3,r3,r3
 4014dcc:	12000115 	stw	r8,4(r2)
 4014dd0:	10c7883a 	add	r3,r2,r3
 4014dd4:	19400015 	stw	r5,0(r3)
 4014dd8:	0005883a 	mov	r2,zero
 4014ddc:	dfc00517 	ldw	ra,20(sp)
 4014de0:	dc400417 	ldw	r17,16(sp)
 4014de4:	dc000317 	ldw	r16,12(sp)
 4014de8:	dec00604 	addi	sp,sp,24
 4014dec:	f800283a 	ret
 4014df0:	00810034 	movhi	r2,1024
 4014df4:	108f8304 	addi	r2,r2,15884
 4014df8:	10002626 	beq	r2,zero,4014e94 <__register_exitproc+0x110>
 4014dfc:	01006404 	movi	r4,400
 4014e00:	d9400015 	stw	r5,0(sp)
 4014e04:	d9800115 	stw	r6,4(sp)
 4014e08:	d9c00215 	stw	r7,8(sp)
 4014e0c:	4003e0c0 	call	4003e0c <malloc>
 4014e10:	d9400017 	ldw	r5,0(sp)
 4014e14:	d9800117 	ldw	r6,4(sp)
 4014e18:	d9c00217 	ldw	r7,8(sp)
 4014e1c:	10001d26 	beq	r2,zero,4014e94 <__register_exitproc+0x110>
 4014e20:	81000017 	ldw	r4,0(r16)
 4014e24:	10000115 	stw	zero,4(r2)
 4014e28:	02000044 	movi	r8,1
 4014e2c:	22405217 	ldw	r9,328(r4)
 4014e30:	0007883a 	mov	r3,zero
 4014e34:	12400015 	stw	r9,0(r2)
 4014e38:	20805215 	stw	r2,328(r4)
 4014e3c:	10006215 	stw	zero,392(r2)
 4014e40:	10006315 	stw	zero,396(r2)
 4014e44:	883fde26 	beq	r17,zero,4014dc0 <__alt_data_end+0xfc014dc0>
 4014e48:	18c9883a 	add	r4,r3,r3
 4014e4c:	2109883a 	add	r4,r4,r4
 4014e50:	1109883a 	add	r4,r2,r4
 4014e54:	21802215 	stw	r6,136(r4)
 4014e58:	01800044 	movi	r6,1
 4014e5c:	12406217 	ldw	r9,392(r2)
 4014e60:	30cc983a 	sll	r6,r6,r3
 4014e64:	4992b03a 	or	r9,r9,r6
 4014e68:	12406215 	stw	r9,392(r2)
 4014e6c:	21c04215 	stw	r7,264(r4)
 4014e70:	01000084 	movi	r4,2
 4014e74:	893fd21e 	bne	r17,r4,4014dc0 <__alt_data_end+0xfc014dc0>
 4014e78:	11006317 	ldw	r4,396(r2)
 4014e7c:	218cb03a 	or	r6,r4,r6
 4014e80:	11806315 	stw	r6,396(r2)
 4014e84:	003fce06 	br	4014dc0 <__alt_data_end+0xfc014dc0>
 4014e88:	18805304 	addi	r2,r3,332
 4014e8c:	18805215 	stw	r2,328(r3)
 4014e90:	003fc606 	br	4014dac <__alt_data_end+0xfc014dac>
 4014e94:	00bfffc4 	movi	r2,-1
 4014e98:	003fd006 	br	4014ddc <__alt_data_end+0xfc014ddc>

04014e9c <__call_exitprocs>:
 4014e9c:	defff504 	addi	sp,sp,-44
 4014ea0:	df000915 	stw	fp,36(sp)
 4014ea4:	dd400615 	stw	r21,24(sp)
 4014ea8:	dc800315 	stw	r18,12(sp)
 4014eac:	dfc00a15 	stw	ra,40(sp)
 4014eb0:	ddc00815 	stw	r23,32(sp)
 4014eb4:	dd800715 	stw	r22,28(sp)
 4014eb8:	dd000515 	stw	r20,20(sp)
 4014ebc:	dcc00415 	stw	r19,16(sp)
 4014ec0:	dc400215 	stw	r17,8(sp)
 4014ec4:	dc000115 	stw	r16,4(sp)
 4014ec8:	d9000015 	stw	r4,0(sp)
 4014ecc:	2839883a 	mov	fp,r5
 4014ed0:	04800044 	movi	r18,1
 4014ed4:	057fffc4 	movi	r21,-1
 4014ed8:	00810074 	movhi	r2,1025
 4014edc:	109d1e04 	addi	r2,r2,29816
 4014ee0:	12000017 	ldw	r8,0(r2)
 4014ee4:	45005217 	ldw	r20,328(r8)
 4014ee8:	44c05204 	addi	r19,r8,328
 4014eec:	a0001c26 	beq	r20,zero,4014f60 <__call_exitprocs+0xc4>
 4014ef0:	a0800117 	ldw	r2,4(r20)
 4014ef4:	15ffffc4 	addi	r23,r2,-1
 4014ef8:	b8000d16 	blt	r23,zero,4014f30 <__call_exitprocs+0x94>
 4014efc:	14000044 	addi	r16,r2,1
 4014f00:	8421883a 	add	r16,r16,r16
 4014f04:	8421883a 	add	r16,r16,r16
 4014f08:	84402004 	addi	r17,r16,128
 4014f0c:	a463883a 	add	r17,r20,r17
 4014f10:	a421883a 	add	r16,r20,r16
 4014f14:	e0001e26 	beq	fp,zero,4014f90 <__call_exitprocs+0xf4>
 4014f18:	80804017 	ldw	r2,256(r16)
 4014f1c:	e0801c26 	beq	fp,r2,4014f90 <__call_exitprocs+0xf4>
 4014f20:	bdffffc4 	addi	r23,r23,-1
 4014f24:	843fff04 	addi	r16,r16,-4
 4014f28:	8c7fff04 	addi	r17,r17,-4
 4014f2c:	bd7ff91e 	bne	r23,r21,4014f14 <__alt_data_end+0xfc014f14>
 4014f30:	00810034 	movhi	r2,1024
 4014f34:	108f8804 	addi	r2,r2,15904
 4014f38:	10000926 	beq	r2,zero,4014f60 <__call_exitprocs+0xc4>
 4014f3c:	a0800117 	ldw	r2,4(r20)
 4014f40:	1000301e 	bne	r2,zero,4015004 <__call_exitprocs+0x168>
 4014f44:	a0800017 	ldw	r2,0(r20)
 4014f48:	10003226 	beq	r2,zero,4015014 <__call_exitprocs+0x178>
 4014f4c:	a009883a 	mov	r4,r20
 4014f50:	98800015 	stw	r2,0(r19)
 4014f54:	4003e200 	call	4003e20 <free>
 4014f58:	9d000017 	ldw	r20,0(r19)
 4014f5c:	a03fe41e 	bne	r20,zero,4014ef0 <__alt_data_end+0xfc014ef0>
 4014f60:	dfc00a17 	ldw	ra,40(sp)
 4014f64:	df000917 	ldw	fp,36(sp)
 4014f68:	ddc00817 	ldw	r23,32(sp)
 4014f6c:	dd800717 	ldw	r22,28(sp)
 4014f70:	dd400617 	ldw	r21,24(sp)
 4014f74:	dd000517 	ldw	r20,20(sp)
 4014f78:	dcc00417 	ldw	r19,16(sp)
 4014f7c:	dc800317 	ldw	r18,12(sp)
 4014f80:	dc400217 	ldw	r17,8(sp)
 4014f84:	dc000117 	ldw	r16,4(sp)
 4014f88:	dec00b04 	addi	sp,sp,44
 4014f8c:	f800283a 	ret
 4014f90:	a0800117 	ldw	r2,4(r20)
 4014f94:	80c00017 	ldw	r3,0(r16)
 4014f98:	10bfffc4 	addi	r2,r2,-1
 4014f9c:	15c01426 	beq	r2,r23,4014ff0 <__call_exitprocs+0x154>
 4014fa0:	80000015 	stw	zero,0(r16)
 4014fa4:	183fde26 	beq	r3,zero,4014f20 <__alt_data_end+0xfc014f20>
 4014fa8:	95c8983a 	sll	r4,r18,r23
 4014fac:	a0806217 	ldw	r2,392(r20)
 4014fb0:	a5800117 	ldw	r22,4(r20)
 4014fb4:	2084703a 	and	r2,r4,r2
 4014fb8:	10000b26 	beq	r2,zero,4014fe8 <__call_exitprocs+0x14c>
 4014fbc:	a0806317 	ldw	r2,396(r20)
 4014fc0:	2088703a 	and	r4,r4,r2
 4014fc4:	20000c1e 	bne	r4,zero,4014ff8 <__call_exitprocs+0x15c>
 4014fc8:	89400017 	ldw	r5,0(r17)
 4014fcc:	d9000017 	ldw	r4,0(sp)
 4014fd0:	183ee83a 	callr	r3
 4014fd4:	a0800117 	ldw	r2,4(r20)
 4014fd8:	15bfbf1e 	bne	r2,r22,4014ed8 <__alt_data_end+0xfc014ed8>
 4014fdc:	98800017 	ldw	r2,0(r19)
 4014fe0:	153fcf26 	beq	r2,r20,4014f20 <__alt_data_end+0xfc014f20>
 4014fe4:	003fbc06 	br	4014ed8 <__alt_data_end+0xfc014ed8>
 4014fe8:	183ee83a 	callr	r3
 4014fec:	003ff906 	br	4014fd4 <__alt_data_end+0xfc014fd4>
 4014ff0:	a5c00115 	stw	r23,4(r20)
 4014ff4:	003feb06 	br	4014fa4 <__alt_data_end+0xfc014fa4>
 4014ff8:	89000017 	ldw	r4,0(r17)
 4014ffc:	183ee83a 	callr	r3
 4015000:	003ff406 	br	4014fd4 <__alt_data_end+0xfc014fd4>
 4015004:	a0800017 	ldw	r2,0(r20)
 4015008:	a027883a 	mov	r19,r20
 401500c:	1029883a 	mov	r20,r2
 4015010:	003fb606 	br	4014eec <__alt_data_end+0xfc014eec>
 4015014:	0005883a 	mov	r2,zero
 4015018:	003ffb06 	br	4015008 <__alt_data_end+0xfc015008>

0401501c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401501c:	defffd04 	addi	sp,sp,-12
 4015020:	df000215 	stw	fp,8(sp)
 4015024:	df000204 	addi	fp,sp,8
 4015028:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401502c:	0001883a 	nop
 4015030:	e0bfff17 	ldw	r2,-4(fp)
 4015034:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4015038:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401503c:	10000226 	beq	r2,zero,4015048 <_exit+0x2c>
    ALT_SIM_FAIL();
 4015040:	002af070 	cmpltui	zero,zero,43969
 4015044:	00000106 	br	401504c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4015048:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401504c:	003fff06 	br	401504c <__alt_data_end+0xfc01504c>
